//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TypescriptParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class TypescriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, WHITESPACES=4, 
		ABSTRACT=5, BOOL=6, BREAK=7, CASE=8, CATCH=9, CLASS=10, CONST=11, CONTINUE=12, 
		DEFAULT=13, DO=14, ELSE=15, ENUM=16, FALSE=17, FINALLY=18, FOR=19, FOREACH=20, 
		GET=21, IF=22, LET=23, NEW=24, NULL=25, OVERRIDE=26, PARAMS=27, PRIVATE=28, 
		PROTECTED=29, PUBLIC=30, READONLY=31, RETURN=32, SET=33, STATIC=34, STRING=35, 
		SWITCH=36, THIS=37, THROW=38, TRUE=39, TRY=40, VAR=41, VOID=42, WHILE=43, 
		NUMBER=44, SUPER=45, MODULE=46, OF=47, IMPORT=48, FUNCTION=49, CONSTRUCTOR=50, 
		EXPORT=51, AS=52, IDENTIFIER=53, LITERAL_ACCESS=54, INTEGER_LITERAL=55, 
		HEX_INTEGER_LITERAL=56, REAL_LITERAL=57, CHARACTER_LITERAL=58, REGULAR_STRING=59, 
		OPEN_BRACE=60, CLOSE_BRACE=61, OPEN_BRACKET=62, CLOSE_BRACKET=63, OPEN_PARENS=64, 
		CLOSE_PARENS=65, DOT=66, COMMA=67, COLON=68, SEMICOLON=69, PLUS=70, MINUS=71, 
		STAR=72, DIV=73, PERCENT=74, AMP=75, BITWISE_OR=76, CARET=77, BANG=78, 
		TILDE=79, ASSIGNMENT=80, LT=81, GT=82, INTERR=83, DOUBLE_COLON=84, OP_COALESCING=85, 
		OP_INC=86, OP_DEC=87, OP_AND=88, OP_OR=89, OP_PTR=90, OP_EQ=91, OP_NE=92, 
		OP_LE=93, OP_GE=94, OP_ADD_ASSIGNMENT=95, OP_SUB_ASSIGNMENT=96, OP_MULT_ASSIGNMENT=97, 
		OP_DIV_ASSIGNMENT=98, OP_MOD_ASSIGNMENT=99, OP_AND_ASSIGNMENT=100, OP_OR_ASSIGNMENT=101, 
		OP_XOR_ASSIGNMENT=102, OP_LEFT_SHIFT=103, OP_LEFT_SHIFT_ASSIGNMENT=104, 
		DIRECTIVE_WHITESPACES=105, DIGITS=106, DEFINE=107, UNDEF=108, ELIF=109, 
		ENDIF=110, LINE=111, ERROR=112, WARNING=113, REGION=114, ENDREGION=115, 
		PRAGMA=116, DIRECTIVE_HIDDEN=117, CONDITIONAL_SYMBOL=118, DIRECTIVE_NEW_LINE=119, 
		TEXT=120;
	public const int
		RULE_sourceFiles = 0, RULE_sourceFile = 1, RULE_importDeclaration = 2, 
		RULE_moduleOrTypeName = 3, RULE_typeList = 4, RULE_type = 5, RULE_baseType = 6, 
		RULE_primitiveType = 7, RULE_classType = 8, RULE_typeArgumentList = 9, 
		RULE_functionType = 10, RULE_argumentList = 11, RULE_argument = 12, RULE_expression = 13, 
		RULE_nonAssignmentExpression = 14, RULE_assignment = 15, RULE_assignmentOperator = 16, 
		RULE_conditionalExpression = 17, RULE_conditionalOrExpression = 18, RULE_conditionalAndExpression = 19, 
		RULE_inclusiveOrExpression = 20, RULE_exclusiveOrExpression = 21, RULE_andExpression = 22, 
		RULE_equalityExpression = 23, RULE_castExpression = 24, RULE_relationalExpression = 25, 
		RULE_shiftExpression = 26, RULE_additiveExpression = 27, RULE_multiplicativeExpression = 28, 
		RULE_unaryExpression = 29, RULE_primaryExpression = 30, RULE_nativeMethodInvocationStatement = 31, 
		RULE_primaryExpressionStart = 32, RULE_expressionList = 33, RULE_memberAccess = 34, 
		RULE_bracketExpression = 35, RULE_lambdaExpression = 36, RULE_anonymousFunctionSignature = 37, 
		RULE_explicitAnonymousFunctionParameterList = 38, RULE_explicitAnonymousFunctionParameter = 39, 
		RULE_implicitAnonymousFunctionParameterList = 40, RULE_anonymousFunctionBody = 41, 
		RULE_statement = 42, RULE_embeddedStatement = 43, RULE_simpleEmbeddedStatement = 44, 
		RULE_block = 45, RULE_variableDeclaration = 46, RULE_variableType = 47, 
		RULE_variableDeclarator = 48, RULE_switchSection = 49, RULE_switchLabel = 50, 
		RULE_statementList = 51, RULE_forInitializer = 52, RULE_forIterator = 53, 
		RULE_catchClauses = 54, RULE_specificCatchClause = 55, RULE_generalCatchClause = 56, 
		RULE_finallyClause = 57, RULE_resourceAcquisition = 58, RULE_moduleDeclaration = 59, 
		RULE_moduleBody = 60, RULE_moduleMemberDeclarations = 61, RULE_moduleMemberDeclaration = 62, 
		RULE_typeDeclaration = 63, RULE_typeParameterList = 64, RULE_typeParameter = 65, 
		RULE_classBody = 66, RULE_classMemberDeclarations = 67, RULE_classMemberDeclaration = 68, 
		RULE_allMemberModifiers = 69, RULE_allMemberModifier = 70, RULE_commonMemberDeclaration = 71, 
		RULE_typedMemberDeclaration = 72, RULE_classField = 73, RULE_returnTypeList = 74, 
		RULE_returnType = 75, RULE_memberName = 76, RULE_methodBody = 77, RULE_formalParameterList = 78, 
		RULE_fixedParameters = 79, RULE_fixedParameter = 80, RULE_constructorInitializer = 81, 
		RULE_body = 82, RULE_variantTypeParameterList = 83, RULE_variantTypeParameter = 84, 
		RULE_enumBody = 85, RULE_enumMemberDeclaration = 86, RULE_rightArrow = 87, 
		RULE_rightShift = 88, RULE_rightShiftAssignment = 89, RULE_literal = 90, 
		RULE_booleanLiteral = 91, RULE_stringLiteral = 92, RULE_classDefinition = 93, 
		RULE_enumDefinition = 94, RULE_constructorDeclaration = 95, RULE_methodDeclaration = 96, 
		RULE_getterSetterDeclaration = 97, RULE_argDeclaration = 98, RULE_methodInvocation = 99, 
		RULE_objectCreationExpression = 100, RULE_identifier = 101;
	public static readonly string[] ruleNames = {
		"sourceFiles", "sourceFile", "importDeclaration", "moduleOrTypeName", 
		"typeList", "type", "baseType", "primitiveType", "classType", "typeArgumentList", 
		"functionType", "argumentList", "argument", "expression", "nonAssignmentExpression", 
		"assignment", "assignmentOperator", "conditionalExpression", "conditionalOrExpression", 
		"conditionalAndExpression", "inclusiveOrExpression", "exclusiveOrExpression", 
		"andExpression", "equalityExpression", "castExpression", "relationalExpression", 
		"shiftExpression", "additiveExpression", "multiplicativeExpression", "unaryExpression", 
		"primaryExpression", "nativeMethodInvocationStatement", "primaryExpressionStart", 
		"expressionList", "memberAccess", "bracketExpression", "lambdaExpression", 
		"anonymousFunctionSignature", "explicitAnonymousFunctionParameterList", 
		"explicitAnonymousFunctionParameter", "implicitAnonymousFunctionParameterList", 
		"anonymousFunctionBody", "statement", "embeddedStatement", "simpleEmbeddedStatement", 
		"block", "variableDeclaration", "variableType", "variableDeclarator", 
		"switchSection", "switchLabel", "statementList", "forInitializer", "forIterator", 
		"catchClauses", "specificCatchClause", "generalCatchClause", "finallyClause", 
		"resourceAcquisition", "moduleDeclaration", "moduleBody", "moduleMemberDeclarations", 
		"moduleMemberDeclaration", "typeDeclaration", "typeParameterList", "typeParameter", 
		"classBody", "classMemberDeclarations", "classMemberDeclaration", "allMemberModifiers", 
		"allMemberModifier", "commonMemberDeclaration", "typedMemberDeclaration", 
		"classField", "returnTypeList", "returnType", "memberName", "methodBody", 
		"formalParameterList", "fixedParameters", "fixedParameter", "constructorInitializer", 
		"body", "variantTypeParameterList", "variantTypeParameter", "enumBody", 
		"enumMemberDeclaration", "rightArrow", "rightShift", "rightShiftAssignment", 
		"literal", "booleanLiteral", "stringLiteral", "classDefinition", "enumDefinition", 
		"constructorDeclaration", "methodDeclaration", "getterSetterDeclaration", 
		"argDeclaration", "methodInvocation", "objectCreationExpression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, "'abstract'", "'boolean'", 
		"'break'", "'case'", "'catch'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'else'", "'enum'", "'false'", "'finally'", "'for'", "'foreach'", 
		"'get'", "'if'", "'let'", "'new'", "'null'", "'override'", "'params'", 
		"'private'", "'protected'", "'public'", "'readonly'", "'return'", "'set'", 
		"'static'", "'string'", "'switch'", "'this'", "'throw'", "'true'", "'try'", 
		"'var'", "'void'", "'while'", "'number'", "'super'", "'module'", "'of'", 
		"'import'", "'function'", "'constructor'", "'export'", "'as'", null, null, 
		null, null, null, null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", 
		"'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
		"'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", "'>='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", 
		"'<<='", null, null, "'define'", "'undef'", "'elif'", "'endif'", "'line'", 
		null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
		"ABSTRACT", "BOOL", "BREAK", "CASE", "CATCH", "CLASS", "CONST", "CONTINUE", 
		"DEFAULT", "DO", "ELSE", "ENUM", "FALSE", "FINALLY", "FOR", "FOREACH", 
		"GET", "IF", "LET", "NEW", "NULL", "OVERRIDE", "PARAMS", "PRIVATE", "PROTECTED", 
		"PUBLIC", "READONLY", "RETURN", "SET", "STATIC", "STRING", "SWITCH", "THIS", 
		"THROW", "TRUE", "TRY", "VAR", "VOID", "WHILE", "NUMBER", "SUPER", "MODULE", 
		"OF", "IMPORT", "FUNCTION", "CONSTRUCTOR", "EXPORT", "AS", "IDENTIFIER", 
		"LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", 
		"CHARACTER_LITERAL", "REGULAR_STRING", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", 
		"OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
		"OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
		"OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
		"OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "DIRECTIVE_WHITESPACES", 
		"DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", 
		"REGION", "ENDREGION", "PRAGMA", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
		"DIRECTIVE_NEW_LINE", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypescriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TypescriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TypescriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TypescriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFilesContext : ParserRuleContext {
		public SourceFileContext[] sourceFile() {
			return GetRuleContexts<SourceFileContext>();
		}
		public SourceFileContext sourceFile(int i) {
			return GetRuleContext<SourceFileContext>(i);
		}
		public SourceFilesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFiles; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSourceFiles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSourceFiles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFiles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFilesContext sourceFiles() {
		SourceFilesContext _localctx = new SourceFilesContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFiles);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 204; sourceFile();
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileContext : ParserRuleContext {
		public string FilePath;
		public ITerminalNode Eof() { return GetToken(TypescriptParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(TypescriptParser.BYTE_ORDER_MARK, 0); }
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ModuleMemberDeclarationsContext moduleMemberDeclarations() {
			return GetRuleContext<ModuleMemberDeclarationsContext>(0);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 210; Match(BYTE_ORDER_MARK);
				}
			}

			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 213; importDeclaration();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << CONST) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << MODULE) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 219; moduleMemberDeclarations();
				}
			}

			State = 222; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public SourceFileContext TargetFile { get; set; }
			public string TargetPath
		        {
		            get
		            {
		                var parent = (SourceFileContext) Parent;
		                var currentFolder = new FileInfo(parent.FilePath).Directory.FullName;
		                var importPath = Path.Combine(currentFolder, RemoveQuotes(stringLiteral().GetText()));
		                return Path.GetFullPath(importPath);
		            }
		        }

		        private string RemoveQuotes(string s)
		        {
		            return s.Substring(1, s.Length - 2);
		        }
				private string ignoreMe;
		public ITerminalNode IMPORT() { return GetToken(TypescriptParser.IMPORT, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(IMPORT);
			State = 225; stringLiteral();
			State = 226; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOrTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TypescriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TypescriptParser.DOT, i);
		}
		public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		public ModuleOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleOrTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOrTypeNameContext moduleOrTypeName() {
		ModuleOrTypeNameContext _localctx = new ModuleOrTypeNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleOrTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 228; identifier();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 229; typeArgumentList();
				}
			}

			}
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 232; Match(DOT);
				State = 233; identifier();
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 234; typeArgumentList();
					}
				}

				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(TypescriptParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(TypescriptParser.BITWISE_OR, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; type();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 243; Match(BITWISE_OR);
				State = 244; type();
				}
				}
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode[] OPEN_BRACKET() { return GetTokens(TypescriptParser.OPEN_BRACKET); }
		public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(TypescriptParser.OPEN_BRACKET, i);
		}
		public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(TypescriptParser.CLOSE_BRACKET); }
		public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(TypescriptParser.CLOSE_BRACKET, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; baseType();
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 251; Match(OPEN_BRACKET);
					State = 252; Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseType);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; classType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260; functionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(TypescriptParser.NUMBER, 0); }
		public ITerminalNode BOOL() { return GetToken(TypescriptParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(TypescriptParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << STRING) | (1L << NUMBER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ModuleOrTypeNameContext moduleOrTypeName() {
			return GetRuleContext<ModuleOrTypeNameContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; moduleOrTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public TypeListContext[] typeList() {
			return GetRuleContexts<TypeListContext>();
		}
		public TypeListContext typeList(int i) {
			return GetRuleContext<TypeListContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(LT);
			State = 268; typeList();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 269; Match(COMMA);
				State = 270; typeList();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 276; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ReturnTypeListContext returnTypeList() {
			return GetRuleContext<ReturnTypeListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(OPEN_PARENS);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 279; formalParameterList();
				}
			}

			State = 282; Match(CLOSE_PARENS);
			State = 283; rightArrow();
			State = 284; returnTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 22, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; argument();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 287; Match(COMMA);
				State = 288; argument();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 294; identifier();
				State = 295; Match(COLON);
				}
				break;
			}
			State = 299; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public NonAssignmentExpressionContext nonAssignmentExpression() {
			return GetRuleContext<NonAssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; nonAssignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAssignmentExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public NonAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAssignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNonAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNonAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAssignmentExpressionContext nonAssignmentExpression() {
		NonAssignmentExpressionContext _localctx = new NonAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_nonAssignmentExpression);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; lambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; unaryExpression();
			State = 310; assignmentOperator();
			State = 311; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(TypescriptParser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(TypescriptParser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(TypescriptParser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(TypescriptParser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(TypescriptParser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(TypescriptParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public RightShiftAssignmentContext rightShiftAssignment() {
			return GetRuleContext<RightShiftAssignmentContext>(0);
		}
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignmentOperator);
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 315; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 316; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 317; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 318; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 319; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 320; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 321; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 322; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 323; rightShiftAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(TypescriptParser.INTERR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; conditionalOrExpression();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 327; Match(INTERR);
				State = 328; expression();
				State = 329; Match(COLON);
				State = 330; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(TypescriptParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(TypescriptParser.OP_OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; conditionalAndExpression();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 335; Match(OP_OR);
				State = 336; conditionalAndExpression();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(TypescriptParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(TypescriptParser.OP_AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; inclusiveOrExpression();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 343; Match(OP_AND);
				State = 344; inclusiveOrExpression();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(TypescriptParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(TypescriptParser.BITWISE_OR, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; exclusiveOrExpression();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 351; Match(BITWISE_OR);
				State = 352; exclusiveOrExpression();
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(TypescriptParser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(TypescriptParser.CARET, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; andExpression();
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 359; Match(CARET);
				State = 360; andExpression();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(TypescriptParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(TypescriptParser.AMP, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; equalityExpression();
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMP) {
				{
				{
				State = 367; Match(AMP);
				State = 368; equalityExpression();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(TypescriptParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(TypescriptParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(TypescriptParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(TypescriptParser.OP_NE, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; castExpression();
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 375;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 376; castExpression();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TypescriptParser.AS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_castExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; relationalExpression();
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 383; Match(AS);
				State = 384; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(TypescriptParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(TypescriptParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(TypescriptParser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(TypescriptParser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(TypescriptParser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(TypescriptParser.OP_GE, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; shiftExpression();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LT - 81)) | (1L << (GT - 81)) | (1L << (OP_LE - 81)) | (1L << (OP_GE - 81)))) != 0)) {
				{
				{
				State = 388;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LT - 81)) | (1L << (GT - 81)) | (1L << (OP_LE - 81)) | (1L << (OP_GE - 81)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 389; shiftExpression();
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(TypescriptParser.OP_LEFT_SHIFT); }
		public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(TypescriptParser.OP_LEFT_SHIFT, i);
		}
		public RightShiftContext[] rightShift() {
			return GetRuleContexts<RightShiftContext>();
		}
		public RightShiftContext rightShift(int i) {
			return GetRuleContext<RightShiftContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_shiftExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; additiveExpression();
			State = 403;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 398;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 396; Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 397; rightShift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 400; additiveExpression();
					}
					} 
				}
				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(TypescriptParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TypescriptParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(TypescriptParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TypescriptParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; multiplicativeExpression();
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 407;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 408; multiplicativeExpression();
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(TypescriptParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(TypescriptParser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(TypescriptParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(TypescriptParser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(TypescriptParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(TypescriptParser.PERCENT, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; unaryExpression();
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STAR - 72)) | (1L << (DIV - 72)) | (1L << (PERCENT - 72)))) != 0)) {
				{
				{
				State = 415;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STAR - 72)) | (1L << (DIV - 72)) | (1L << (PERCENT - 72)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 416; unaryExpression();
				}
				}
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(TypescriptParser.PLUS, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(TypescriptParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(TypescriptParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(TypescriptParser.TILDE, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_unaryExpression);
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_BRACKET:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422; primaryExpression();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423; Match(PLUS);
				State = 424; unaryExpression();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 425; Match(MINUS);
				State = 426; unaryExpression();
				}
				break;
			case BANG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 427; Match(BANG);
				State = 428; unaryExpression();
				}
				break;
			case TILDE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 429; Match(TILDE);
				State = 430; unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionStartContext pe;
		public PrimaryExpressionStartContext primaryExpressionStart() {
			return GetRuleContext<PrimaryExpressionStartContext>(0);
		}
		public BracketExpressionContext[] bracketExpression() {
			return GetRuleContexts<BracketExpressionContext>();
		}
		public BracketExpressionContext bracketExpression(int i) {
			return GetRuleContext<BracketExpressionContext>(i);
		}
		public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public MethodInvocationContext[] methodInvocation() {
			return GetRuleContexts<MethodInvocationContext>();
		}
		public MethodInvocationContext methodInvocation(int i) {
			return GetRuleContext<MethodInvocationContext>(i);
		}
		public ITerminalNode[] OP_INC() { return GetTokens(TypescriptParser.OP_INC); }
		public ITerminalNode OP_INC(int i) {
			return GetToken(TypescriptParser.OP_INC, i);
		}
		public ITerminalNode[] OP_DEC() { return GetTokens(TypescriptParser.OP_DEC); }
		public ITerminalNode OP_DEC(int i) {
			return GetToken(TypescriptParser.OP_DEC, i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_primaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; _localctx.pe = primaryExpressionStart();
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 434; bracketExpression();
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPEN_PARENS - 64)) | (1L << (DOT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)))) != 0)) {
				{
				{
				State = 444;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 440; memberAccess();
					}
					break;
				case OPEN_PARENS:
					{
					State = 441; methodInvocation();
					}
					break;
				case OP_INC:
					{
					State = 442; Match(OP_INC);
					}
					break;
				case OP_DEC:
					{
					State = 443; Match(OP_DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					State = 446; bracketExpression();
					}
					}
					State = 451;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeMethodInvocationStatementContext : ParserRuleContext {
		public IdentifierContext pe;
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NativeMethodInvocationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeMethodInvocationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNativeMethodInvocationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNativeMethodInvocationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeMethodInvocationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeMethodInvocationStatementContext nativeMethodInvocationStatement() {
		NativeMethodInvocationStatementContext _localctx = new NativeMethodInvocationStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_nativeMethodInvocationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; _localctx.pe = identifier();
			State = 458; memberAccess();
			State = 459; methodInvocation();
			State = 460; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionStartContext : ParserRuleContext {
		public PrimaryExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpressionStart; } }
	 
		public PrimaryExpressionStartContext() { }
		public virtual void CopyFrom(PrimaryExpressionStartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisReferenceExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode THIS() { return GetToken(TypescriptParser.THIS, 0); }
		public ThisReferenceExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralAccessExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode LITERAL_ACCESS() { return GetToken(TypescriptParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : PrimaryExpressionStartContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public SimpleNameExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayCreationExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionStartContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : PrimaryExpressionStartContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationContext : PrimaryExpressionStartContext {
		public ITerminalNode NEW() { return GetToken(TypescriptParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ObjectCreationExpressionContext objectCreationExpression() {
			return GetRuleContext<ObjectCreationExpressionContext>(0);
		}
		public ObjectCreationContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionStartContext primaryExpressionStart() {
		PrimaryExpressionStartContext _localctx = new PrimaryExpressionStartContext(Context, State);
		EnterRule(_localctx, 64, RULE_primaryExpressionStart);
		int _la;
		try {
			State = 482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 462; literal();
				}
				break;
			case GET:
			case LET:
			case SET:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 463; identifier();
				State = 465;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 464; typeArgumentList();
					}
					break;
				}
				}
				break;
			case OPEN_PARENS:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 467; Match(OPEN_PARENS);
				State = 468; expression();
				State = 469; Match(CLOSE_PARENS);
				}
				break;
			case LITERAL_ACCESS:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 471; Match(LITERAL_ACCESS);
				}
				break;
			case THIS:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 472; Match(THIS);
				}
				break;
			case NEW:
				_localctx = new ObjectCreationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 473; Match(NEW);
				State = 474; type();
				State = 475; objectCreationExpression();
				}
				break;
			case OPEN_BRACKET:
				_localctx = new ArrayCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 477; Match(OPEN_BRACKET);
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 478; expressionList();
					}
				}

				State = 481; Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 66, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; expression();
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 485; Match(COMMA);
				State = 486; expression();
				}
				}
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TypescriptParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 68, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; Match(DOT);
			State = 493; identifier();
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 494; typeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public BracketExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketExpressionContext bracketExpression() {
		BracketExpressionContext _localctx = new BracketExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_bracketExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(OPEN_BRACKET);
			State = 498; expressionList();
			State = 499; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public AnonymousFunctionBodyContext anonymousFunctionBody() {
			return GetRuleContext<AnonymousFunctionBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; anonymousFunctionSignature();
			State = 502; rightArrow();
			State = 503; anonymousFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
			return GetRuleContext<ExplicitAnonymousFunctionParameterListContext>(0);
		}
		public ImplicitAnonymousFunctionParameterListContext implicitAnonymousFunctionParameterList() {
			return GetRuleContext<ImplicitAnonymousFunctionParameterListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 74, RULE_anonymousFunctionSignature);
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; Match(OPEN_PARENS);
				State = 506; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 507; Match(OPEN_PARENS);
				State = 508; explicitAnonymousFunctionParameterList();
				State = 509; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 511; Match(OPEN_PARENS);
				State = 512; implicitAnonymousFunctionParameterList();
				State = 513; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 515; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
		ExplicitAnonymousFunctionParameterListContext _localctx = new ExplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 76, RULE_explicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; explicitAnonymousFunctionParameter();
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 519; Match(COMMA);
				State = 520; explicitAnonymousFunctionParameter();
				}
				}
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(Context, State);
		EnterRule(_localctx, 78, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526; identifier();
			State = 527; Match(COLON);
			State = 528; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ImplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitAnonymousFunctionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitAnonymousFunctionParameterListContext implicitAnonymousFunctionParameterList() {
		ImplicitAnonymousFunctionParameterListContext _localctx = new ImplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 80, RULE_implicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; identifier();
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 531; Match(COMMA);
				State = 532; identifier();
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AnonymousFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionBodyContext anonymousFunctionBody() {
		AnonymousFunctionBodyContext _localctx = new AnonymousFunctionBodyContext(Context, State);
		EnterRule(_localctx, 82, RULE_anonymousFunctionBody);
		try {
			State = 540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_BRACKET:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 539; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmbeddedContext : StatementContext {
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public EmbeddedContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbedded(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbedded(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_statement);
		try {
			State = 546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 542; variableDeclaration();
				State = 543; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new EmbeddedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 545; embeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext embeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_embeddedStatement);
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548; block();
				}
				break;
			case BREAK:
			case CONTINUE:
			case DO:
			case FALSE:
			case FOR:
			case FOREACH:
			case GET:
			case IF:
			case LET:
			case NEW:
			case NULL:
			case RETURN:
			case SET:
			case SWITCH:
			case THIS:
			case TRUE:
			case VAR:
			case WHILE:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_BRACKET:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549; simpleEmbeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleEmbeddedStatementContext : ParserRuleContext {
		public SimpleEmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleEmbeddedStatement; } }
	 
		public SimpleEmbeddedStatementContext() { }
		public virtual void CopyFrom(SimpleEmbeddedStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode WHILE() { return GetToken(TypescriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public WhileStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public EmptyStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode DO() { return GetToken(TypescriptParser.DO, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(TypescriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public DoStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOREACH() { return GetToken(TypescriptParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OF() { return GetToken(TypescriptParser.OF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForeachStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOR() { return GetToken(TypescriptParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(TypescriptParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(TypescriptParser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForInitializerContext forInitializer() {
			return GetRuleContext<ForInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIteratorContext forIterator() {
			return GetRuleContext<ForIteratorContext>(0);
		}
		public ForStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode BREAK() { return GetToken(TypescriptParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BreakStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : SimpleEmbeddedStatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode CONTINUE() { return GetToken(TypescriptParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ContinueStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode IF() { return GetToken(TypescriptParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext[] embeddedStatement() {
			return GetRuleContexts<EmbeddedStatementContext>();
		}
		public EmbeddedStatementContext embeddedStatement(int i) {
			return GetRuleContext<EmbeddedStatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TypescriptParser.ELSE, 0); }
		public IfStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode RETURN() { return GetToken(TypescriptParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SWITCH() { return GetToken(TypescriptParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public SwitchSectionContext[] switchSection() {
			return GetRuleContexts<SwitchSectionContext>();
		}
		public SwitchSectionContext switchSection(int i) {
			return GetRuleContext<SwitchSectionContext>(i);
		}
		public SwitchStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
		SimpleEmbeddedStatementContext _localctx = new SimpleEmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_simpleEmbeddedStatement);
		int _la;
		try {
			State = 625;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 552; Match(SEMICOLON);
				}
				break;
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_BRACKET:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 553; expression();
				State = 554; Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 556; Match(IF);
				State = 557; Match(OPEN_PARENS);
				State = 558; expression();
				State = 559; Match(CLOSE_PARENS);
				State = 560; embeddedStatement();
				State = 563;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 561; Match(ELSE);
					State = 562; embeddedStatement();
					}
					break;
				}
				}
				break;
			case SWITCH:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 565; Match(SWITCH);
				State = 566; Match(OPEN_PARENS);
				State = 567; expression();
				State = 568; Match(CLOSE_PARENS);
				State = 569; Match(OPEN_BRACE);
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 570; switchSection();
					}
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 576; Match(CLOSE_BRACE);
				}
				break;
			case WHILE:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 578; Match(WHILE);
				State = 579; Match(OPEN_PARENS);
				State = 580; expression();
				State = 581; Match(CLOSE_PARENS);
				State = 582; embeddedStatement();
				}
				break;
			case DO:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 584; Match(DO);
				State = 585; embeddedStatement();
				State = 586; Match(WHILE);
				State = 587; Match(OPEN_PARENS);
				State = 588; expression();
				State = 589; Match(CLOSE_PARENS);
				State = 590; Match(SEMICOLON);
				}
				break;
			case FOR:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 592; Match(FOR);
				State = 593; Match(OPEN_PARENS);
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << FALSE) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << SET) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)))) != 0)) {
					{
					State = 594; forInitializer();
					}
				}

				State = 597; Match(SEMICOLON);
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 598; expression();
					}
				}

				State = 601; Match(SEMICOLON);
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 602; forIterator();
					}
				}

				State = 605; Match(CLOSE_PARENS);
				State = 606; embeddedStatement();
				}
				break;
			case FOREACH:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 607; Match(FOREACH);
				State = 608; Match(OPEN_PARENS);
				State = 609; variableType();
				State = 610; identifier();
				State = 611; Match(OF);
				State = 612; expression();
				State = 613; Match(CLOSE_PARENS);
				State = 614; embeddedStatement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 616; Match(BREAK);
				State = 617; Match(SEMICOLON);
				}
				break;
			case CONTINUE:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 618; Match(CONTINUE);
				State = 619; Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 620; Match(RETURN);
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 621; expression();
					}
				}

				State = 624; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 90, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; Match(OPEN_BRACE);
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPEN_PARENS - 64)) | (1L << (SEMICOLON - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)))) != 0)) {
				{
				State = 628; statementList();
				}
			}

			State = 631; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; variableType();
			State = 634; variableDeclarator();
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 635; Match(COMMA);
				State = 636; variableDeclarator();
				}
				}
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public ITerminalNode CONST() { return GetToken(TypescriptParser.CONST, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_variableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << LET) | (1L << VAR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 96, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644; identifier();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 645; Match(COLON);
				State = 646; type();
				}
			}

			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 649; Match(ASSIGNMENT);
				State = 650; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchSectionContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchSectionContext switchSection() {
		SwitchSectionContext _localctx = new SwitchSectionContext(Context, State);
		EnterRule(_localctx, 98, RULE_switchSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 653; switchLabel();
				}
				}
				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 658; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TypescriptParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TypescriptParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 100, RULE_switchLabel);
		try {
			State = 666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 660; Match(CASE);
				State = 661; expression();
				State = 662; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 664; Match(DEFAULT);
				State = 665; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 102, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 668; statement();
				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPEN_PARENS - 64)) | (1L << (SEMICOLON - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ForInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerContext forInitializer() {
		ForInitializerContext _localctx = new ForInitializerContext(Context, State);
		EnterRule(_localctx, 104, RULE_forInitializer);
		int _la;
		try {
			State = 682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673; variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674; expression();
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 675; Match(COMMA);
					State = 676; expression();
					}
					}
					State = 681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ForIteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForIterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForIterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorContext forIterator() {
		ForIteratorContext _localctx = new ForIteratorContext(Context, State);
		EnterRule(_localctx, 106, RULE_forIterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; expression();
			State = 689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 685; Match(COMMA);
				State = 686; expression();
				}
				}
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClausesContext : ParserRuleContext {
		public SpecificCatchClauseContext[] specificCatchClause() {
			return GetRuleContexts<SpecificCatchClauseContext>();
		}
		public SpecificCatchClauseContext specificCatchClause(int i) {
			return GetRuleContext<SpecificCatchClauseContext>(i);
		}
		public GeneralCatchClauseContext generalCatchClause() {
			return GetRuleContext<GeneralCatchClauseContext>(0);
		}
		public CatchClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCatchClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCatchClauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClausesContext catchClauses() {
		CatchClausesContext _localctx = new CatchClausesContext(Context, State);
		EnterRule(_localctx, 108, RULE_catchClauses);
		int _la;
		try {
			int _alt;
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692; specificCatchClause();
				State = 696;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 693; specificCatchClause();
						}
						} 
					}
					State = 698;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				}
				State = 700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 699; generalCatchClause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 702; generalCatchClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificCatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(TypescriptParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SpecificCatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificCatchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSpecificCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSpecificCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificCatchClauseContext specificCatchClause() {
		SpecificCatchClauseContext _localctx = new SpecificCatchClauseContext(Context, State);
		EnterRule(_localctx, 110, RULE_specificCatchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705; Match(CATCH);
			State = 706; Match(OPEN_PARENS);
			State = 707; classType();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 708; identifier();
				}
			}

			State = 711; Match(CLOSE_PARENS);
			State = 712; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralCatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(TypescriptParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public GeneralCatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalCatchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterGeneralCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitGeneralCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralCatchClauseContext generalCatchClause() {
		GeneralCatchClauseContext _localctx = new GeneralCatchClauseContext(Context, State);
		EnterRule(_localctx, 112, RULE_generalCatchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714; Match(CATCH);
			State = 715; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(TypescriptParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 114, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(FINALLY);
			State = 718; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceAcquisitionContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResourceAcquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceAcquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterResourceAcquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitResourceAcquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceAcquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceAcquisitionContext resourceAcquisition() {
		ResourceAcquisitionContext _localctx = new ResourceAcquisitionContext(Context, State);
		EnterRule(_localctx, 116, RULE_resourceAcquisition);
		try {
			State = 722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 720; variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(TypescriptParser.MODULE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; Match(MODULE);
			State = 725; identifier();
			State = 726; moduleBody();
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 727; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public ModuleMemberDeclarationsContext moduleMemberDeclarations() {
			return GetRuleContext<ModuleMemberDeclarationsContext>(0);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(Context, State);
		EnterRule(_localctx, 120, RULE_moduleBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730; Match(OPEN_BRACE);
			State = 732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << CONST) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << MODULE) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 731; moduleMemberDeclarations();
				}
			}

			State = 734; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleMemberDeclarationsContext : ParserRuleContext {
		public ModuleMemberDeclarationContext[] moduleMemberDeclaration() {
			return GetRuleContexts<ModuleMemberDeclarationContext>();
		}
		public ModuleMemberDeclarationContext moduleMemberDeclaration(int i) {
			return GetRuleContext<ModuleMemberDeclarationContext>(i);
		}
		public ModuleMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleMemberDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleMemberDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleMemberDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleMemberDeclarationsContext moduleMemberDeclarations() {
		ModuleMemberDeclarationsContext _localctx = new ModuleMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 122, RULE_moduleMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 736; moduleMemberDeclaration();
				}
				}
				State = 739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << CONST) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << MODULE) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleMemberDeclarationContext : ParserRuleContext {
		public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public NativeMethodInvocationStatementContext nativeMethodInvocationStatement() {
			return GetRuleContext<NativeMethodInvocationStatementContext>(0);
		}
		public ModuleMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleMemberDeclarationContext moduleMemberDeclaration() {
		ModuleMemberDeclarationContext _localctx = new ModuleMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_moduleMemberDeclaration);
		try {
			State = 747;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 741; moduleDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 742; typeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 743; variableDeclaration();
				State = 744; Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 746; nativeMethodInvocationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0)) {
				{
				State = 749; allMemberModifiers();
				}
			}

			State = 754;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 752; classDefinition();
				}
				break;
			case ENUM:
				{
				State = 753; enumDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 128, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; Match(LT);
			State = 757; typeParameter();
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 758; Match(COMMA);
				State = 759; typeParameter();
				}
				}
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 765; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 130, RULE_typeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public ClassMemberDeclarationsContext classMemberDeclarations() {
			return GetRuleContext<ClassMemberDeclarationsContext>(0);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 132, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769; Match(OPEN_BRACE);
			State = 771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << CONSTRUCTOR) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 770; classMemberDeclarations();
				}
			}

			State = 773; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationsContext : ParserRuleContext {
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationsContext classMemberDeclarations() {
		ClassMemberDeclarationsContext _localctx = new ClassMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 134, RULE_classMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 775; classMemberDeclaration();
				}
				}
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << CONSTRUCTOR) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public CommonMemberDeclarationContext commonMemberDeclaration() {
			return GetRuleContext<CommonMemberDeclarationContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_classMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0)) {
				{
				State = 780; allMemberModifiers();
				}
			}

			State = 783; commonMemberDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifiersContext : ParserRuleContext {
		public AllMemberModifierContext[] allMemberModifier() {
			return GetRuleContexts<AllMemberModifierContext>();
		}
		public AllMemberModifierContext allMemberModifier(int i) {
			return GetRuleContext<AllMemberModifierContext>(i);
		}
		public AllMemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllMemberModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifiersContext allMemberModifiers() {
		AllMemberModifiersContext _localctx = new AllMemberModifiersContext(Context, State);
		EnterRule(_localctx, 138, RULE_allMemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 785; allMemberModifier();
				}
				}
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(TypescriptParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(TypescriptParser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TypescriptParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(TypescriptParser.READONLY, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(TypescriptParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(TypescriptParser.STATIC, 0); }
		public ITerminalNode EXPORT() { return GetToken(TypescriptParser.EXPORT, 0); }
		public AllMemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllMemberModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifierContext allMemberModifier() {
		AllMemberModifierContext _localctx = new AllMemberModifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_allMemberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonMemberDeclarationContext : ParserRuleContext {
		public TypedMemberDeclarationContext typedMemberDeclaration() {
			return GetRuleContext<TypedMemberDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public CommonMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCommonMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCommonMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonMemberDeclarationContext commonMemberDeclaration() {
		CommonMemberDeclarationContext _localctx = new CommonMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_commonMemberDeclaration);
		try {
			State = 794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
			case LET:
			case SET:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792; typedMemberDeclaration();
				}
				break;
			case CONSTRUCTOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793; constructorDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GetterSetterDeclarationContext getterSetterDeclaration() {
			return GetRuleContext<GetterSetterDeclarationContext>(0);
		}
		public ClassFieldContext classField() {
			return GetRuleContext<ClassFieldContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public TypedMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypedMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypedMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedMemberDeclarationContext typedMemberDeclaration() {
		TypedMemberDeclarationContext _localctx = new TypedMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_typedMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 796; methodDeclaration();
				}
				break;
			case 2:
				{
				State = 797; getterSetterDeclaration();
				}
				break;
			case 3:
				{
				State = 798; classField();
				State = 799; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassFieldContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ClassFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassFieldContext classField() {
		ClassFieldContext _localctx = new ClassFieldContext(Context, State);
		EnterRule(_localctx, 146, RULE_classField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803; variableDeclarator();
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 804; Match(COMMA);
				State = 805; variableDeclarator();
				}
				}
				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeListContext : ParserRuleContext {
		public ReturnTypeContext[] returnType() {
			return GetRuleContexts<ReturnTypeContext>();
		}
		public ReturnTypeContext returnType(int i) {
			return GetRuleContext<ReturnTypeContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(TypescriptParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(TypescriptParser.BITWISE_OR, i);
		}
		public ReturnTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeListContext returnTypeList() {
		ReturnTypeListContext _localctx = new ReturnTypeListContext(Context, State);
		EnterRule(_localctx, 148, RULE_returnTypeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; returnType();
			State = 816;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 812; Match(BITWISE_OR);
					State = 813; returnType();
					}
					} 
				}
				State = 818;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(TypescriptParser.VOID, 0); }
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_returnType);
		try {
			State = 821;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case GET:
			case LET:
			case SET:
			case STRING:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 819; type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 820; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ModuleOrTypeNameContext moduleOrTypeName() {
			return GetRuleContext<ModuleOrTypeNameContext>(0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 152, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; moduleOrTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 154, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FixedParametersContext fixedParameters() {
			return GetRuleContext<FixedParametersContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 156, RULE_formalParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827; fixedParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParametersContext : ParserRuleContext {
		public FixedParameterContext[] fixedParameter() {
			return GetRuleContexts<FixedParameterContext>();
		}
		public FixedParameterContext fixedParameter(int i) {
			return GetRuleContext<FixedParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public FixedParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixedParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixedParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedParametersContext fixedParameters() {
		FixedParametersContext _localctx = new FixedParametersContext(Context, State);
		EnterRule(_localctx, 158, RULE_fixedParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829; fixedParameter();
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 830; Match(COMMA);
				State = 831; fixedParameter();
				}
				}
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParameterContext : ParserRuleContext {
		public ArgDeclarationContext argDeclaration() {
			return GetRuleContext<ArgDeclarationContext>(0);
		}
		public FixedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedParameterContext fixedParameter() {
		FixedParameterContext _localctx = new FixedParameterContext(Context, State);
		EnterRule(_localctx, 160, RULE_fixedParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; argDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode SUPER() { return GetToken(TypescriptParser.SUPER, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 162, RULE_constructorInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839; Match(COLON);
			State = 840; Match(SUPER);
			State = 841; Match(OPEN_PARENS);
			State = 843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 842; argumentList();
				}
			}

			State = 845; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 164, RULE_body);
		try {
			State = 849;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 847; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 848; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public VariantTypeParameterContext[] variantTypeParameter() {
			return GetRuleContexts<VariantTypeParameterContext>();
		}
		public VariantTypeParameterContext variantTypeParameter(int i) {
			return GetRuleContext<VariantTypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public VariantTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterListContext variantTypeParameterList() {
		VariantTypeParameterListContext _localctx = new VariantTypeParameterListContext(Context, State);
		EnterRule(_localctx, 166, RULE_variantTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851; Match(LT);
			State = 852; variantTypeParameter();
			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 853; Match(COMMA);
				State = 854; variantTypeParameter();
				}
				}
				State = 859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 860; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariantTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterContext variantTypeParameter() {
		VariantTypeParameterContext _localctx = new VariantTypeParameterContext(Context, State);
		EnterRule(_localctx, 168, RULE_variantTypeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 170, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 864; Match(OPEN_BRACE);
			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 865; enumMemberDeclaration();
				State = 870;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 866; Match(COMMA);
						State = 867; enumMemberDeclaration();
						}
						} 
					}
					State = 872;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				}
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 873; Match(COMMA);
					}
				}

				}
			}

			State = 878; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_enumMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880; identifier();
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 881; Match(ASSIGNMENT);
				State = 882; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightArrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public RightArrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightArrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightArrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightArrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightArrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightArrowContext rightArrow() {
		RightArrowContext _localctx = new RightArrowContext(Context, State);
		EnterRule(_localctx, 174, RULE_rightArrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885; _localctx.first = Match(ASSIGNMENT);
			State = 886; _localctx.second = Match(GT);
			State = 887;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 176, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889; _localctx.first = Match(GT);
			State = 890; _localctx.second = Match(GT);
			State = 891;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(TypescriptParser.OP_GE, 0); }
		public RightShiftAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightShiftAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightShiftAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShiftAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftAssignmentContext rightShiftAssignment() {
		RightShiftAssignmentContext _localctx = new RightShiftAssignmentContext(Context, State);
		EnterRule(_localctx, 178, RULE_rightShiftAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893; _localctx.first = Match(GT);
			State = 894; _localctx.second = Match(OP_GE);
			State = 895;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(TypescriptParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TypescriptParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(TypescriptParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(TypescriptParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(TypescriptParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 180, RULE_literal);
		try {
			State = 904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 897; booleanLiteral();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 898; stringLiteral();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 899; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 900; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 901; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 902; Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 903; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(TypescriptParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(TypescriptParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 182, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(TypescriptParser.REGULAR_STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 184, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908; Match(REGULAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(TypescriptParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 186, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; Match(CLASS);
			State = 911; identifier();
			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 912; typeParameterList();
				}
			}

			State = 915; classBody();
			State = 917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 916; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(TypescriptParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919; Match(ENUM);
			State = 920; identifier();
			State = 921; enumBody();
			State = 923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 922; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(TypescriptParser.CONSTRUCTOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925; Match(CONSTRUCTOR);
			State = 926; Match(OPEN_PARENS);
			State = 928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 927; formalParameterList();
				}
			}

			State = 930; Match(CLOSE_PARENS);
			State = 931; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ReturnTypeListContext returnTypeList() {
			return GetRuleContext<ReturnTypeListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 192, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933; identifier();
			State = 935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 934; typeParameterList();
				}
			}

			State = 937; Match(OPEN_PARENS);
			State = 939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 938; formalParameterList();
				}
			}

			State = 941; Match(CLOSE_PARENS);
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 942; Match(COLON);
				State = 943; returnTypeList();
				}
			}

			State = 946; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterSetterDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ReturnTypeListContext returnTypeList() {
			return GetRuleContext<ReturnTypeListContext>(0);
		}
		public GetterSetterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getterSetterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterGetterSetterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitGetterSetterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetterSetterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterSetterDeclarationContext getterSetterDeclaration() {
		GetterSetterDeclarationContext _localctx = new GetterSetterDeclarationContext(Context, State);
		EnterRule(_localctx, 194, RULE_getterSetterDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			_la = TokenStream.LA(1);
			if ( !(_la==GET || _la==SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 949; identifier();
			State = 950; Match(OPEN_PARENS);
			State = 951; Match(CLOSE_PARENS);
			State = 954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 952; Match(COLON);
				State = 953; returnTypeList();
				}
			}

			State = 956; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDeclarationContext argDeclaration() {
		ArgDeclarationContext _localctx = new ArgDeclarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_argDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958; identifier();
			State = 959; Match(COLON);
			State = 960; typeList();
			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 961; Match(ASSIGNMENT);
				State = 962; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 198, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965; Match(OPEN_PARENS);
			State = 967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 966; argumentList();
				}
			}

			State = 969; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationExpressionContext objectCreationExpression() {
		ObjectCreationExpressionContext _localctx = new ObjectCreationExpressionContext(Context, State);
		EnterRule(_localctx, 200, RULE_objectCreationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971; Match(OPEN_PARENS);
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 972; argumentList();
				}
			}

			State = 975; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TypescriptParser.IDENTIFIER, 0); }
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public ITerminalNode NUMBER() { return GetToken(TypescriptParser.NUMBER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 202, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 87: return rightArrow_sempred((RightArrowContext)_localctx, predIndex);
		case 88: return rightShift_sempred((RightShiftContext)_localctx, predIndex);
		case 89: return rightShiftAssignment_sempred((RightShiftAssignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rightArrow_sempred(RightArrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShift_sempred(RightShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShiftAssignment_sempred(RightShiftAssignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'z', '\x3D6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x3', '\x2', '\a', '\x2', '\xD0', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\xD3', '\v', '\x2', '\x3', '\x3', '\x5', '\x3', 
		'\xD6', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '\xD9', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\xDC', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\xDF', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\xE9', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xEE', '\n', '\x5', '\a', '\x5', '\xF0', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\xF3', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\xF8', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\xFB', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x100', '\n', '\a', '\f', '\a', '\xE', '\a', '\x103', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x108', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\x112', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\x115', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x11B', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\x124', '\n', '\r', '\f', '\r', '\xE', '\r', '\x127', '\v', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x12C', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x132', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x136', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x147', '\n', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x14F', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\a', '\x14', '\x154', '\n', '\x14', '\f', '\x14', '\xE', '\x14', 
		'\x157', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', 
		'\x15', '\x15C', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x15F', '\v', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x164', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x167', '\v', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x16C', '\n', '\x17', 
		'\f', '\x17', '\xE', '\x17', '\x16F', '\v', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\x174', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\x177', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\a', '\x19', '\x17C', '\n', '\x19', '\f', '\x19', '\xE', '\x19', 
		'\x17F', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x184', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\a', '\x1B', '\x189', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x18C', 
		'\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x191', '\n', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x194', '\n', '\x1C', 
		'\f', '\x1C', '\xE', '\x1C', '\x197', '\v', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x19C', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x19F', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\a', '\x1E', '\x1A4', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', 
		'\x1A7', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x1B2', '\n', '\x1F', '\x3', ' ', '\x3', ' ', 
		'\a', ' ', '\x1B6', '\n', ' ', '\f', ' ', '\xE', ' ', '\x1B9', '\v', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1BF', '\n', 
		' ', '\x3', ' ', '\a', ' ', '\x1C2', '\n', ' ', '\f', ' ', '\xE', ' ', 
		'\x1C5', '\v', ' ', '\a', ' ', '\x1C7', '\n', ' ', '\f', ' ', '\xE', ' ', 
		'\x1CA', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1D4', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x1E2', '\n', '\"', '\x3', '\"', '\x5', 
		'\"', '\x1E5', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', 
		'\x1EA', '\n', '#', '\f', '#', '\xE', '#', '\x1ED', '\v', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1F2', '\n', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x207', '\n', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\a', '(', '\x20C', '\n', '(', '\f', '(', '\xE', '(', '\x20F', 
		'\v', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\a', '*', '\x218', '\n', '*', '\f', '*', '\xE', 
		'*', '\x21B', '\v', '*', '\x3', '+', '\x3', '+', '\x5', '+', '\x21F', 
		'\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', 
		'\x225', '\n', ',', '\x3', '-', '\x3', '-', '\x5', '-', '\x229', '\n', 
		'-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x236', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\a', '.', '\x23E', '\n', '.', '\f', '.', '\xE', 
		'.', '\x241', '\v', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x256', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x25A', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x5', '.', '\x25E', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x271', '\n', '.', '\x3', '.', '\x5', '.', 
		'\x274', '\n', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x278', '\n', 
		'/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\a', '\x30', '\x280', '\n', '\x30', '\f', '\x30', '\xE', 
		'\x30', '\x283', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x28A', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x5', '\x32', '\x28E', '\n', '\x32', '\x3', '\x33', 
		'\x6', '\x33', '\x291', '\n', '\x33', '\r', '\x33', '\xE', '\x33', '\x292', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x29D', '\n', 
		'\x34', '\x3', '\x35', '\x6', '\x35', '\x2A0', '\n', '\x35', '\r', '\x35', 
		'\xE', '\x35', '\x2A1', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\a', '\x36', '\x2A8', '\n', '\x36', '\f', '\x36', '\xE', '\x36', 
		'\x2AB', '\v', '\x36', '\x5', '\x36', '\x2AD', '\n', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x2B2', '\n', '\x37', '\f', 
		'\x37', '\xE', '\x37', '\x2B5', '\v', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\a', '\x38', '\x2B9', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x2BC', 
		'\v', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2BF', '\n', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x2C2', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x2C8', '\n', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x5', '<', 
		'\x2D5', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x2DB', '\n', '=', '\x3', '>', '\x3', '>', '\x5', '>', '\x2DF', 
		'\n', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x6', '?', '\x2E4', '\n', 
		'?', '\r', '?', '\xE', '?', '\x2E5', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x2EE', '\n', '@', '\x3', 
		'\x41', '\x5', '\x41', '\x2F1', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x2F5', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\a', '\x42', '\x2FB', '\n', '\x42', '\f', '\x42', 
		'\xE', '\x42', '\x2FE', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x306', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x6', '\x45', 
		'\x30B', '\n', '\x45', '\r', '\x45', '\xE', '\x45', '\x30C', '\x3', '\x46', 
		'\x5', '\x46', '\x310', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x6', 'G', '\x315', '\n', 'G', '\r', 'G', '\xE', 'G', '\x316', '\x3', 
		'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x31D', '\n', 'I', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x324', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x329', 
		'\n', 'K', '\f', 'K', '\xE', 'K', '\x32C', '\v', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\a', 'L', '\x331', '\n', 'L', '\f', 'L', '\xE', 'L', 
		'\x334', '\v', 'L', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x338', '\n', 
		'M', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 
		'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\a', 'Q', '\x343', '\n', 'Q', 
		'\f', 'Q', '\xE', 'Q', '\x346', '\v', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x34E', '\n', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x354', '\n', 
		'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\a', 'U', '\x35A', 
		'\n', 'U', '\f', 'U', '\xE', 'U', '\x35D', '\v', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\a', 'W', '\x367', '\n', 'W', '\f', 'W', '\xE', 'W', '\x36A', '\v', 
		'W', '\x3', 'W', '\x5', 'W', '\x36D', '\n', 'W', '\x5', 'W', '\x36F', 
		'\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x5', 'X', '\x376', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x38B', '\n', 
		'\\', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x5', '_', '\x394', '\n', '_', '\x3', '_', '\x3', '_', 
		'\x5', '_', '\x398', '\n', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x5', '`', '\x39E', '\n', '`', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x5', '\x61', '\x3A3', '\n', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\x3AA', '\n', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\x3AE', '\n', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\x3B3', '\n', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x3BD', 
		'\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x3C6', '\n', 
		'\x64', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x3CA', '\n', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', 
		'\x3D0', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x2', '\x2', 'h', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\x2', '\f', '\x5', '\x2', '\b', '\b', '%', '%', '.', '.', '\x3', 
		'\x2', ']', '^', '\x4', '\x2', 'S', 'T', '_', '`', '\x3', '\x2', 'H', 
		'I', '\x3', '\x2', 'J', 'L', '\x5', '\x2', '\r', '\r', '\x19', '\x19', 
		'+', '+', '\x6', '\x2', '\a', '\a', '\x1E', '!', '$', '$', '\x35', '\x35', 
		'\x4', '\x2', '\x13', '\x13', ')', ')', '\x4', '\x2', '\x17', '\x17', 
		'#', '#', '\b', '\x2', '\x17', '\x17', '\x19', '\x19', '#', '#', '+', 
		'+', '.', '.', '\x37', '\x37', '\x2', '\x3FE', '\x2', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x6', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\xF4', '\x3', '\x2', '\x2', '\x2', '\f', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x16', '\x118', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x120', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x135', '\x3', '\x2', '\x2', '\x2', ' ', '\x137', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x146', '\x3', '\x2', '\x2', '\x2', '$', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x158', '\x3', '\x2', '\x2', '\x2', '*', '\x160', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x168', '\x3', '\x2', '\x2', '\x2', '.', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x180', '\x3', '\x2', '\x2', '\x2', '\x34', '\x185', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x38', '\x198', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1B1', '\x3', '\x2', '\x2', '\x2', '>', '\x1B3', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x1EE', '\x3', '\x2', '\x2', '\x2', 'H', '\x1F3', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x1F7', '\x3', '\x2', '\x2', '\x2', 'L', '\x206', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x210', '\x3', '\x2', '\x2', '\x2', 'R', '\x214', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x21E', '\x3', '\x2', '\x2', '\x2', 'V', '\x224', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x228', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x273', '\x3', '\x2', '\x2', '\x2', '\\', '\x275', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x27B', '\x3', '\x2', '\x2', '\x2', '`', '\x284', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x290', '\x3', '\x2', '\x2', '\x2', '\x66', '\x29C', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x29F', '\x3', '\x2', '\x2', '\x2', 'j', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x2C1', '\x3', '\x2', '\x2', '\x2', 'p', '\x2C3', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x2CC', '\x3', '\x2', '\x2', '\x2', 't', '\x2CF', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x2D6', '\x3', '\x2', '\x2', '\x2', 'z', '\x2DC', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x2E3', '\x3', '\x2', '\x2', '\x2', '~', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x2F0', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x84', '\x301', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x303', '\x3', '\x2', '\x2', '\x2', '\x88', '\x30A', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x30F', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x314', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x318', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x92', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x98', '\x337', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x339', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x33B', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x33D', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x33F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x347', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x349', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x353', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x355', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x360', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x362', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x372', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x377', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x37B', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x37F', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x38A', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x38C', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x38E', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x390', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x399', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x39F', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x3C0', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x3CD', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', 
		'\x5', '\x4', '\x3', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD6', '\a', '\x3', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD9', '\x5', '\x6', '\x4', '\x2', 
		'\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\x5', '|', 
		'?', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE1', '\a', '\x2', '\x2', '\x3', '\xE1', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE3', '\a', '\x32', '\x2', '\x2', '\xE3', '\xE4', 
		'\x5', '\xBA', '^', '\x2', '\xE4', '\xE5', '\a', 'G', '\x2', '\x2', '\xE5', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\x5', '\xCC', 'g', 
		'\x2', '\xE7', '\xE9', '\x5', '\x14', '\v', '\x2', '\xE8', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x44', '\x2', 
		'\x2', '\xEB', '\xED', '\x5', '\xCC', 'g', '\x2', '\xEC', '\xEE', '\x5', 
		'\x14', '\v', '\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF9', '\x5', 
		'\f', '\a', '\x2', '\xF5', '\xF6', '\a', 'N', '\x2', '\x2', '\xF6', '\xF8', 
		'\x5', '\f', '\a', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\x101', '\x5', '\xE', '\b', '\x2', '\xFD', '\xFE', '\a', '@', 
		'\x2', '\x2', '\xFE', '\x100', '\a', '\x41', '\x2', '\x2', '\xFF', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\r', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x108', '\x5', '\x10', 
		'\t', '\x2', '\x105', '\x108', '\x5', '\x12', '\n', '\x2', '\x106', '\x108', 
		'\x5', '\x16', '\f', '\x2', '\x107', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\xF', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10A', '\t', '\x2', '\x2', '\x2', '\x10A', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10C', '\x5', '\b', '\x5', '\x2', '\x10C', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', 'S', '\x2', '\x2', '\x10E', 
		'\x113', '\x5', '\n', '\x6', '\x2', '\x10F', '\x110', '\a', '\x45', '\x2', 
		'\x2', '\x110', '\x112', '\x5', '\n', '\x6', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x116', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\a', 'T', '\x2', 
		'\x2', '\x117', '\x15', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', 
		'\a', '\x42', '\x2', '\x2', '\x119', '\x11B', '\x5', '\x9E', 'P', '\x2', 
		'\x11A', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\a', '\x43', '\x2', '\x2', '\x11D', '\x11E', '\x5', '\xB0', 
		'Y', '\x2', '\x11E', '\x11F', '\x5', '\x96', 'L', '\x2', '\x11F', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x125', '\x5', '\x1A', '\xE', '\x2', 
		'\x121', '\x122', '\a', '\x45', '\x2', '\x2', '\x122', '\x124', '\x5', 
		'\x1A', '\xE', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\x5', '\xCC', 'g', '\x2', '\x129', '\x12A', '\a', '\x46', 
		'\x2', '\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x5', 
		'\x1C', '\xF', '\x2', '\x12E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x132', '\x5', ' ', '\x11', '\x2', '\x130', '\x132', '\x5', '\x1E', '\x10', 
		'\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x131', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x136', '\x5', 'J', '&', '\x2', '\x134', '\x136', '\x5', '$', 
		'\x13', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x5', '<', '\x1F', '\x2', '\x138', '\x139', 
		'\x5', '\"', '\x12', '\x2', '\x139', '\x13A', '\x5', '\x1C', '\xF', '\x2', 
		'\x13A', '!', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x147', '\a', 'R', 
		'\x2', '\x2', '\x13C', '\x147', '\a', '\x61', '\x2', '\x2', '\x13D', '\x147', 
		'\a', '\x62', '\x2', '\x2', '\x13E', '\x147', '\a', '\x63', '\x2', '\x2', 
		'\x13F', '\x147', '\a', '\x64', '\x2', '\x2', '\x140', '\x147', '\a', 
		'\x65', '\x2', '\x2', '\x141', '\x147', '\a', '\x66', '\x2', '\x2', '\x142', 
		'\x147', '\a', 'g', '\x2', '\x2', '\x143', '\x147', '\a', 'h', '\x2', 
		'\x2', '\x144', '\x147', '\a', 'j', '\x2', '\x2', '\x145', '\x147', '\x5', 
		'\xB4', '[', '\x2', '\x146', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x146', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x146', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x141', '\x3', '\x2', '\x2', '\x2', '\x146', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x143', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '#', '\x3', '\x2', '\x2', '\x2', '\x148', '\x14E', '\x5', 
		'&', '\x14', '\x2', '\x149', '\x14A', '\a', 'U', '\x2', '\x2', '\x14A', 
		'\x14B', '\x5', '\x1C', '\xF', '\x2', '\x14B', '\x14C', '\a', '\x46', 
		'\x2', '\x2', '\x14C', '\x14D', '\x5', '\x1C', '\xF', '\x2', '\x14D', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x155', '\x5', '(', '\x15', '\x2', '\x151', 
		'\x152', '\a', '[', '\x2', '\x2', '\x152', '\x154', '\x5', '(', '\x15', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x154', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15D', 
		'\x5', '*', '\x16', '\x2', '\x159', '\x15A', '\a', 'Z', '\x2', '\x2', 
		'\x15A', '\x15C', '\x5', '*', '\x16', '\x2', '\x15B', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', ')', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x165', '\x5', ',', '\x17', '\x2', '\x161', 
		'\x162', '\a', 'N', '\x2', '\x2', '\x162', '\x164', '\x5', ',', '\x17', 
		'\x2', '\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x164', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x168', '\x16D', 
		'\x5', '.', '\x18', '\x2', '\x169', '\x16A', '\a', 'O', '\x2', '\x2', 
		'\x16A', '\x16C', '\x5', '.', '\x18', '\x2', '\x16B', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '-', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x175', '\x5', '\x30', '\x19', '\x2', '\x171', 
		'\x172', '\a', 'M', '\x2', '\x2', '\x172', '\x174', '\x5', '\x30', '\x19', 
		'\x2', '\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x174', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x177', '\x175', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17D', 
		'\x5', '\x32', '\x1A', '\x2', '\x179', '\x17A', '\t', '\x3', '\x2', '\x2', 
		'\x17A', '\x17C', '\x5', '\x32', '\x1A', '\x2', '\x17B', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x31', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x183', '\x5', '\x34', '\x1B', '\x2', 
		'\x181', '\x182', '\a', '\x36', '\x2', '\x2', '\x182', '\x184', '\x5', 
		'\f', '\a', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x18A', '\x5', '\x36', '\x1C', '\x2', '\x186', '\x187', 
		'\t', '\x4', '\x2', '\x2', '\x187', '\x189', '\x5', '\x36', '\x1C', '\x2', 
		'\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x195', 
		'\x5', '\x38', '\x1D', '\x2', '\x18E', '\x191', '\a', 'i', '\x2', '\x2', 
		'\x18F', '\x191', '\x5', '\xB2', 'Z', '\x2', '\x190', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x194', '\x5', '\x38', 
		'\x1D', '\x2', '\x193', '\x190', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x195', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x19D', '\x5', ':', '\x1E', '\x2', '\x199', '\x19A', '\t', '\x5', 
		'\x2', '\x2', '\x19A', '\x19C', '\x5', ':', '\x1E', '\x2', '\x19B', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x39', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A5', '\x5', '<', '\x1F', 
		'\x2', '\x1A1', '\x1A2', '\t', '\x6', '\x2', '\x2', '\x1A2', '\x1A4', 
		'\x5', '<', '\x1F', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		';', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1B2', '\x5', '>', ' ', '\x2', '\x1A9', '\x1AA', '\a', 
		'H', '\x2', '\x2', '\x1AA', '\x1B2', '\x5', '<', '\x1F', '\x2', '\x1AB', 
		'\x1AC', '\a', 'I', '\x2', '\x2', '\x1AC', '\x1B2', '\x5', '<', '\x1F', 
		'\x2', '\x1AD', '\x1AE', '\a', 'P', '\x2', '\x2', '\x1AE', '\x1B2', '\x5', 
		'<', '\x1F', '\x2', '\x1AF', '\x1B0', '\a', 'Q', '\x2', '\x2', '\x1B0', 
		'\x1B2', '\x5', '<', '\x1F', '\x2', '\x1B1', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3', '\x1B7', '\x5', '\x42', '\"', '\x2', '\x1B4', '\x1B6', 
		'\x5', 'H', '%', '\x2', '\x1B5', '\x1B4', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B7', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BF', '\x5', '\x46', '$', '\x2', '\x1BB', '\x1BF', 
		'\x5', '\xC8', '\x65', '\x2', '\x1BC', '\x1BF', '\a', 'X', '\x2', '\x2', 
		'\x1BD', '\x1BF', '\a', 'Y', '\x2', '\x2', '\x1BE', '\x1BA', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C2', '\x5', 
		'H', '%', '\x2', '\x1C1', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C6', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1CA', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', 
		'\x5', '\xCC', 'g', '\x2', '\x1CC', '\x1CD', '\x5', '\x46', '$', '\x2', 
		'\x1CD', '\x1CE', '\x5', '\xC8', '\x65', '\x2', '\x1CE', '\x1CF', '\a', 
		'G', '\x2', '\x2', '\x1CF', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x1E5', '\x5', '\xB6', '\\', '\x2', '\x1D1', '\x1D3', '\x5', '\xCC', 
		'g', '\x2', '\x1D2', '\x1D4', '\x5', '\x14', '\v', '\x2', '\x1D3', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\a', 
		'\x42', '\x2', '\x2', '\x1D6', '\x1D7', '\x5', '\x1C', '\xF', '\x2', '\x1D7', 
		'\x1D8', '\a', '\x43', '\x2', '\x2', '\x1D8', '\x1E5', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1E5', '\a', '\x38', '\x2', '\x2', '\x1DA', '\x1E5', 
		'\a', '\'', '\x2', '\x2', '\x1DB', '\x1DC', '\a', '\x1A', '\x2', '\x2', 
		'\x1DC', '\x1DD', '\x5', '\f', '\a', '\x2', '\x1DD', '\x1DE', '\x5', '\xCA', 
		'\x66', '\x2', '\x1DE', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E1', '\a', '@', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', '\x44', '#', 
		'\x2', '\x1E1', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E5', '\a', '\x41', '\x2', '\x2', '\x1E4', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E4', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1DF', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1EB', '\x5', 
		'\x1C', '\xF', '\x2', '\x1E7', '\x1E8', '\a', '\x45', '\x2', '\x2', '\x1E8', 
		'\x1EA', '\x5', '\x1C', '\xF', '\x2', '\x1E9', '\x1E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EC', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\a', '\x44', '\x2', '\x2', '\x1EF', 
		'\x1F1', '\x5', '\xCC', 'g', '\x2', '\x1F0', '\x1F2', '\x5', '\x14', '\v', 
		'\x2', '\x1F1', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\a', '@', '\x2', '\x2', '\x1F4', '\x1F5', '\x5', '\x44', 
		'#', '\x2', '\x1F5', '\x1F6', '\a', '\x41', '\x2', '\x2', '\x1F6', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x5', 'L', '\'', '\x2', 
		'\x1F8', '\x1F9', '\x5', '\xB0', 'Y', '\x2', '\x1F9', '\x1FA', '\x5', 
		'T', '+', '\x2', '\x1FA', 'K', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\a', '\x42', '\x2', '\x2', '\x1FC', '\x207', '\a', '\x43', '\x2', '\x2', 
		'\x1FD', '\x1FE', '\a', '\x42', '\x2', '\x2', '\x1FE', '\x1FF', '\x5', 
		'N', '(', '\x2', '\x1FF', '\x200', '\a', '\x43', '\x2', '\x2', '\x200', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\a', '\x42', '\x2', 
		'\x2', '\x202', '\x203', '\x5', 'R', '*', '\x2', '\x203', '\x204', '\a', 
		'\x43', '\x2', '\x2', '\x204', '\x207', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x207', '\x5', '\xCC', 'g', '\x2', '\x206', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x206', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x205', '\x3', '\x2', '\x2', '\x2', 
		'\x207', 'M', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20D', '\x5', 'P', 
		')', '\x2', '\x209', '\x20A', '\a', '\x45', '\x2', '\x2', '\x20A', '\x20C', 
		'\x5', 'P', ')', '\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20B', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x210', '\x211', '\x5', '\xCC', 'g', '\x2', '\x211', '\x212', 
		'\a', '\x46', '\x2', '\x2', '\x212', '\x213', '\x5', '\f', '\a', '\x2', 
		'\x213', 'Q', '\x3', '\x2', '\x2', '\x2', '\x214', '\x219', '\x5', '\xCC', 
		'g', '\x2', '\x215', '\x216', '\a', '\x45', '\x2', '\x2', '\x216', '\x218', 
		'\x5', '\xCC', 'g', '\x2', '\x217', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x219', '\x217', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '\x21F', '\x5', '\x1C', '\xF', '\x2', '\x21D', '\x21F', 
		'\x5', '\\', '/', '\x2', '\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21F', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x220', '\x221', '\x5', '^', '\x30', '\x2', '\x221', '\x222', 
		'\a', 'G', '\x2', '\x2', '\x222', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x225', '\x5', 'X', '-', '\x2', '\x224', '\x220', '\x3', '\x2', 
		'\x2', '\x2', '\x224', '\x223', '\x3', '\x2', '\x2', '\x2', '\x225', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x5', '\\', '/', '\x2', 
		'\x227', '\x229', '\x5', 'Z', '.', '\x2', '\x228', '\x226', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x274', '\a', 'G', '\x2', '\x2', 
		'\x22B', '\x22C', '\x5', '\x1C', '\xF', '\x2', '\x22C', '\x22D', '\a', 
		'G', '\x2', '\x2', '\x22D', '\x274', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x22F', '\a', '\x18', '\x2', '\x2', '\x22F', '\x230', '\a', '\x42', '\x2', 
		'\x2', '\x230', '\x231', '\x5', '\x1C', '\xF', '\x2', '\x231', '\x232', 
		'\a', '\x43', '\x2', '\x2', '\x232', '\x235', '\x5', 'X', '-', '\x2', 
		'\x233', '\x234', '\a', '\x11', '\x2', '\x2', '\x234', '\x236', '\x5', 
		'X', '-', '\x2', '\x235', '\x233', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x236', '\x274', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x238', '\a', '&', '\x2', '\x2', '\x238', '\x239', '\a', 
		'\x42', '\x2', '\x2', '\x239', '\x23A', '\x5', '\x1C', '\xF', '\x2', '\x23A', 
		'\x23B', '\a', '\x43', '\x2', '\x2', '\x23B', '\x23F', '\a', '>', '\x2', 
		'\x2', '\x23C', '\x23E', '\x5', '\x64', '\x33', '\x2', '\x23D', '\x23C', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x23F', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x242', '\x3', '\x2', '\x2', '\x2', '\x241', 
		'\x23F', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\a', '?', '\x2', 
		'\x2', '\x243', '\x274', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', 
		'\a', '-', '\x2', '\x2', '\x245', '\x246', '\a', '\x42', '\x2', '\x2', 
		'\x246', '\x247', '\x5', '\x1C', '\xF', '\x2', '\x247', '\x248', '\a', 
		'\x43', '\x2', '\x2', '\x248', '\x249', '\x5', 'X', '-', '\x2', '\x249', 
		'\x274', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\a', '\x10', '\x2', 
		'\x2', '\x24B', '\x24C', '\x5', 'X', '-', '\x2', '\x24C', '\x24D', '\a', 
		'-', '\x2', '\x2', '\x24D', '\x24E', '\a', '\x42', '\x2', '\x2', '\x24E', 
		'\x24F', '\x5', '\x1C', '\xF', '\x2', '\x24F', '\x250', '\a', '\x43', 
		'\x2', '\x2', '\x250', '\x251', '\a', 'G', '\x2', '\x2', '\x251', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\a', '\x15', '\x2', '\x2', 
		'\x253', '\x255', '\a', '\x42', '\x2', '\x2', '\x254', '\x256', '\x5', 
		'j', '\x36', '\x2', '\x255', '\x254', '\x3', '\x2', '\x2', '\x2', '\x255', 
		'\x256', '\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', 
		'\x2', '\x257', '\x259', '\a', 'G', '\x2', '\x2', '\x258', '\x25A', '\x5', 
		'\x1C', '\xF', '\x2', '\x259', '\x258', '\x3', '\x2', '\x2', '\x2', '\x259', 
		'\x25A', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x25B', '\x25D', '\a', 'G', '\x2', '\x2', '\x25C', '\x25E', '\x5', 
		'l', '\x37', '\x2', '\x25D', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x260', '\a', '\x43', '\x2', '\x2', '\x260', '\x274', 
		'\x5', 'X', '-', '\x2', '\x261', '\x262', '\a', '\x16', '\x2', '\x2', 
		'\x262', '\x263', '\a', '\x42', '\x2', '\x2', '\x263', '\x264', '\x5', 
		'`', '\x31', '\x2', '\x264', '\x265', '\x5', '\xCC', 'g', '\x2', '\x265', 
		'\x266', '\a', '\x31', '\x2', '\x2', '\x266', '\x267', '\x5', '\x1C', 
		'\xF', '\x2', '\x267', '\x268', '\a', '\x43', '\x2', '\x2', '\x268', '\x269', 
		'\x5', 'X', '-', '\x2', '\x269', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x26A', '\x26B', '\a', '\t', '\x2', '\x2', '\x26B', '\x274', '\a', 'G', 
		'\x2', '\x2', '\x26C', '\x26D', '\a', '\xE', '\x2', '\x2', '\x26D', '\x274', 
		'\a', 'G', '\x2', '\x2', '\x26E', '\x270', '\a', '\"', '\x2', '\x2', '\x26F', 
		'\x271', '\x5', '\x1C', '\xF', '\x2', '\x270', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '\x270', '\x271', '\x3', '\x2', '\x2', '\x2', '\x271', '\x272', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x274', '\a', 'G', '\x2', '\x2', 
		'\x273', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x273', '\x22B', '\x3', 
		'\x2', '\x2', '\x2', '\x273', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x273', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x273', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x273', '\x252', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x273', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x273', '\x26C', '\x3', 
		'\x2', '\x2', '\x2', '\x273', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x275', '\x277', '\a', '>', '\x2', '\x2', 
		'\x276', '\x278', '\x5', 'h', '\x35', '\x2', '\x277', '\x276', '\x3', 
		'\x2', '\x2', '\x2', '\x277', '\x278', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x279', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\a', '?', '\x2', 
		'\x2', '\x27A', ']', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', '\x5', 
		'`', '\x31', '\x2', '\x27C', '\x281', '\x5', '\x62', '\x32', '\x2', '\x27D', 
		'\x27E', '\a', '\x45', '\x2', '\x2', '\x27E', '\x280', '\x5', '\x62', 
		'\x32', '\x2', '\x27F', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x280', 
		'\x283', '\x3', '\x2', '\x2', '\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x281', '\x282', '\x3', '\x2', '\x2', '\x2', '\x282', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x281', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\t', '\a', '\x2', '\x2', '\x285', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x286', '\x289', '\x5', '\xCC', 'g', '\x2', '\x287', '\x288', 
		'\a', '\x46', '\x2', '\x2', '\x288', '\x28A', '\x5', '\f', '\a', '\x2', 
		'\x289', '\x287', '\x3', '\x2', '\x2', '\x2', '\x289', '\x28A', '\x3', 
		'\x2', '\x2', '\x2', '\x28A', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28C', '\a', 'R', '\x2', '\x2', '\x28C', '\x28E', '\x5', '\x1C', '\xF', 
		'\x2', '\x28D', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x291', '\x5', '\x66', '\x34', '\x2', '\x290', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x292', '\x3', '\x2', '\x2', '\x2', '\x292', 
		'\x290', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\x3', '\x2', '\x2', 
		'\x2', '\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', 
		'\x5', 'h', '\x35', '\x2', '\x295', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x296', '\x297', '\a', '\n', '\x2', '\x2', '\x297', '\x298', '\x5', '\x1C', 
		'\xF', '\x2', '\x298', '\x299', '\a', '\x46', '\x2', '\x2', '\x299', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', '\a', '\xF', '\x2', '\x2', 
		'\x29B', '\x29D', '\a', '\x46', '\x2', '\x2', '\x29C', '\x296', '\x3', 
		'\x2', '\x2', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A0', '\x5', 'V', ',', '\x2', 
		'\x29F', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A2', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x2AD', '\x5', '^', '\x30', '\x2', '\x2A4', '\x2A9', 
		'\x5', '\x1C', '\xF', '\x2', '\x2A5', '\x2A6', '\a', '\x45', '\x2', '\x2', 
		'\x2A6', '\x2A8', '\x5', '\x1C', '\xF', '\x2', '\x2A7', '\x2A5', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x2AA', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2A3', '\x3', '\x2', '\x2', '\x2', 
		'\x2AC', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2AD', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x2AE', '\x2B3', '\x5', '\x1C', '\xF', '\x2', '\x2AF', 
		'\x2B0', '\a', '\x45', '\x2', '\x2', '\x2B0', '\x2B2', '\x5', '\x1C', 
		'\xF', '\x2', '\x2B1', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B1', '\x3', '\x2', '\x2', '\x2', 
		'\x2B3', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B4', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x2B5', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2BA', 
		'\x5', 'p', '\x39', '\x2', '\x2B7', '\x2B9', '\x5', 'p', '\x39', '\x2', 
		'\x2B8', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BC', '\x3', 
		'\x2', '\x2', '\x2', '\x2BA', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BA', 
		'\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BE', '\x3', '\x2', '\x2', 
		'\x2', '\x2BC', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BF', 
		'\x5', 'r', ':', '\x2', '\x2BE', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2BE', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C2', '\x3', 
		'\x2', '\x2', '\x2', '\x2C0', '\x2C2', '\x5', 'r', ':', '\x2', '\x2C1', 
		'\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C0', '\x3', '\x2', '\x2', 
		'\x2', '\x2C2', 'o', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\a', 
		'\v', '\x2', '\x2', '\x2C4', '\x2C5', '\a', '\x42', '\x2', '\x2', '\x2C5', 
		'\x2C7', '\x5', '\x12', '\n', '\x2', '\x2C6', '\x2C8', '\x5', '\xCC', 
		'g', '\x2', '\x2C7', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x2C9', '\x2CA', '\a', '\x43', '\x2', '\x2', '\x2CA', '\x2CB', '\x5', 
		'\\', '/', '\x2', '\x2CB', 'q', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CD', 
		'\a', '\v', '\x2', '\x2', '\x2CD', '\x2CE', '\x5', '\\', '/', '\x2', '\x2CE', 
		's', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\a', '\x14', '\x2', 
		'\x2', '\x2D0', '\x2D1', '\x5', '\\', '/', '\x2', '\x2D1', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x2D2', '\x2D5', '\x5', '^', '\x30', '\x2', '\x2D3', 
		'\x2D5', '\x5', '\x1C', '\xF', '\x2', '\x2D4', '\x2D2', '\x3', '\x2', 
		'\x2', '\x2', '\x2D4', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D5', 'w', 
		'\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D7', '\a', '\x30', '\x2', '\x2', 
		'\x2D7', '\x2D8', '\x5', '\xCC', 'g', '\x2', '\x2D8', '\x2DA', '\x5', 
		'z', '>', '\x2', '\x2D9', '\x2DB', '\a', 'G', '\x2', '\x2', '\x2DA', '\x2D9', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\x3', '\x2', '\x2', '\x2', 
		'\x2DB', 'y', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DE', '\a', '>', 
		'\x2', '\x2', '\x2DD', '\x2DF', '\x5', '|', '?', '\x2', '\x2DE', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', '\x3', '\x2', '\x2', '\x2', 
		'\x2DF', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2E1', '\a', 
		'?', '\x2', '\x2', '\x2E1', '{', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x2E4', '\x5', '~', '@', '\x2', '\x2E3', '\x2E2', '\x3', '\x2', '\x2', 
		'\x2', '\x2E4', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E3', 
		'\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', '}', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2EE', '\x5', 'x', 
		'=', '\x2', '\x2E8', '\x2EE', '\x5', '\x80', '\x41', '\x2', '\x2E9', '\x2EA', 
		'\x5', '^', '\x30', '\x2', '\x2EA', '\x2EB', '\a', 'G', '\x2', '\x2', 
		'\x2EB', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2EE', '\x5', 
		'@', '!', '\x2', '\x2ED', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2ED', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2ED', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F1', '\x5', '\x8C', 'G', '\x2', 
		'\x2F0', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F1', '\x3', 
		'\x2', '\x2', '\x2', '\x2F1', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2F5', '\x5', '\xBC', '_', '\x2', '\x2F3', '\x2F5', '\x5', '\xBE', '`', 
		'\x2', '\x2F4', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', '\x2F5', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x2F6', '\x2F7', '\a', 'S', '\x2', '\x2', '\x2F7', '\x2FC', '\x5', '\x84', 
		'\x43', '\x2', '\x2F8', '\x2F9', '\a', '\x45', '\x2', '\x2', '\x2F9', 
		'\x2FB', '\x5', '\x84', '\x43', '\x2', '\x2FA', '\x2F8', '\x3', '\x2', 
		'\x2', '\x2', '\x2FB', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FA', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x2FD', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FC', '\x3', 
		'\x2', '\x2', '\x2', '\x2FF', '\x300', '\a', 'T', '\x2', '\x2', '\x300', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\x5', '\xCC', 'g', 
		'\x2', '\x302', '\x85', '\x3', '\x2', '\x2', '\x2', '\x303', '\x305', 
		'\a', '>', '\x2', '\x2', '\x304', '\x306', '\x5', '\x88', '\x45', '\x2', 
		'\x305', '\x304', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x3', 
		'\x2', '\x2', '\x2', '\x306', '\x307', '\x3', '\x2', '\x2', '\x2', '\x307', 
		'\x308', '\a', '?', '\x2', '\x2', '\x308', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x30B', '\x5', '\x8A', '\x46', '\x2', '\x30A', '\x309', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', '\x3', '\x2', '\x2', '\x2', 
		'\x30C', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x30D', '\x89', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x310', '\x5', '\x8C', 'G', '\x2', '\x30F', '\x30E', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x310', '\x3', '\x2', '\x2', '\x2', '\x310', '\x311', 
		'\x3', '\x2', '\x2', '\x2', '\x311', '\x312', '\x5', '\x90', 'I', '\x2', 
		'\x312', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x313', '\x315', '\x5', 
		'\x8E', 'H', '\x2', '\x314', '\x313', '\x3', '\x2', '\x2', '\x2', '\x315', 
		'\x316', '\x3', '\x2', '\x2', '\x2', '\x316', '\x314', '\x3', '\x2', '\x2', 
		'\x2', '\x316', '\x317', '\x3', '\x2', '\x2', '\x2', '\x317', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x319', '\t', '\b', '\x2', '\x2', 
		'\x319', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31D', '\x5', 
		'\x92', 'J', '\x2', '\x31B', '\x31D', '\x5', '\xC0', '\x61', '\x2', '\x31C', 
		'\x31A', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31B', '\x3', '\x2', '\x2', 
		'\x2', '\x31D', '\x91', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x324', 
		'\x5', '\xC2', '\x62', '\x2', '\x31F', '\x324', '\x5', '\xC4', '\x63', 
		'\x2', '\x320', '\x321', '\x5', '\x94', 'K', '\x2', '\x321', '\x322', 
		'\a', 'G', '\x2', '\x2', '\x322', '\x324', '\x3', '\x2', '\x2', '\x2', 
		'\x323', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x323', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x323', '\x320', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x325', '\x32A', '\x5', '\x62', '\x32', 
		'\x2', '\x326', '\x327', '\a', '\x45', '\x2', '\x2', '\x327', '\x329', 
		'\x5', '\x62', '\x32', '\x2', '\x328', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x329', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x328', '\x3', 
		'\x2', '\x2', '\x2', '\x32A', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32B', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32A', '\x3', '\x2', '\x2', 
		'\x2', '\x32D', '\x332', '\x5', '\x98', 'M', '\x2', '\x32E', '\x32F', 
		'\a', 'N', '\x2', '\x2', '\x32F', '\x331', '\x5', '\x98', 'M', '\x2', 
		'\x330', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x331', '\x334', '\x3', 
		'\x2', '\x2', '\x2', '\x332', '\x330', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x333', '\x3', '\x2', '\x2', '\x2', '\x333', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x334', '\x332', '\x3', '\x2', '\x2', '\x2', '\x335', '\x338', 
		'\x5', '\f', '\a', '\x2', '\x336', '\x338', '\a', ',', '\x2', '\x2', '\x337', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x337', '\x336', '\x3', '\x2', '\x2', 
		'\x2', '\x338', '\x99', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', 
		'\x5', '\b', '\x5', '\x2', '\x33A', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x33B', '\x33C', '\x5', '\\', '/', '\x2', '\x33C', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x33D', '\x33E', '\x5', '\xA0', 'Q', '\x2', '\x33E', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x33F', '\x344', '\x5', '\xA2', 'R', '\x2', 
		'\x340', '\x341', '\a', '\x45', '\x2', '\x2', '\x341', '\x343', '\x5', 
		'\xA2', 'R', '\x2', '\x342', '\x340', '\x3', '\x2', '\x2', '\x2', '\x343', 
		'\x346', '\x3', '\x2', '\x2', '\x2', '\x344', '\x342', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x345', '\x3', '\x2', '\x2', '\x2', '\x345', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x346', '\x344', '\x3', '\x2', '\x2', '\x2', 
		'\x347', '\x348', '\x5', '\xC6', '\x64', '\x2', '\x348', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x349', '\x34A', '\a', '\x46', '\x2', '\x2', '\x34A', 
		'\x34B', '\a', '/', '\x2', '\x2', '\x34B', '\x34D', '\a', '\x42', '\x2', 
		'\x2', '\x34C', '\x34E', '\x5', '\x18', '\r', '\x2', '\x34D', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', '\x3', '\x2', '\x2', '\x2', 
		'\x34E', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x350', '\a', 
		'\x43', '\x2', '\x2', '\x350', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x351', 
		'\x354', '\x5', '\\', '/', '\x2', '\x352', '\x354', '\a', 'G', '\x2', 
		'\x2', '\x353', '\x351', '\x3', '\x2', '\x2', '\x2', '\x353', '\x352', 
		'\x3', '\x2', '\x2', '\x2', '\x354', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x355', '\x356', '\a', 'S', '\x2', '\x2', '\x356', '\x35B', '\x5', '\xAA', 
		'V', '\x2', '\x357', '\x358', '\a', '\x45', '\x2', '\x2', '\x358', '\x35A', 
		'\x5', '\xAA', 'V', '\x2', '\x359', '\x357', '\x3', '\x2', '\x2', '\x2', 
		'\x35A', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x359', '\x3', 
		'\x2', '\x2', '\x2', '\x35B', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x35C', 
		'\x35E', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35B', '\x3', '\x2', '\x2', 
		'\x2', '\x35E', '\x35F', '\a', 'T', '\x2', '\x2', '\x35F', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\x360', '\x361', '\x5', '\xCC', 'g', '\x2', '\x361', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x362', '\x36E', '\a', '>', '\x2', 
		'\x2', '\x363', '\x368', '\x5', '\xAE', 'X', '\x2', '\x364', '\x365', 
		'\a', '\x45', '\x2', '\x2', '\x365', '\x367', '\x5', '\xAE', 'X', '\x2', 
		'\x366', '\x364', '\x3', '\x2', '\x2', '\x2', '\x367', '\x36A', '\x3', 
		'\x2', '\x2', '\x2', '\x368', '\x366', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x369', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36C', '\x3', '\x2', '\x2', 
		'\x2', '\x36A', '\x368', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x36D', 
		'\a', '\x45', '\x2', '\x2', '\x36C', '\x36B', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36F', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x363', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x36F', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x370', '\x3', '\x2', '\x2', 
		'\x2', '\x370', '\x371', '\a', '?', '\x2', '\x2', '\x371', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x372', '\x375', '\x5', '\xCC', 'g', '\x2', '\x373', 
		'\x374', '\a', 'R', '\x2', '\x2', '\x374', '\x376', '\x5', '\x1C', '\xF', 
		'\x2', '\x375', '\x373', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x376', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\x377', '\x378', '\a', 'R', '\x2', '\x2', '\x378', '\x379', '\a', 'T', 
		'\x2', '\x2', '\x379', '\x37A', '\x6', 'Y', '\x2', '\x3', '\x37A', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\x37B', '\x37C', '\a', 'T', '\x2', '\x2', 
		'\x37C', '\x37D', '\a', 'T', '\x2', '\x2', '\x37D', '\x37E', '\x6', 'Z', 
		'\x3', '\x3', '\x37E', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x380', 
		'\a', 'T', '\x2', '\x2', '\x380', '\x381', '\a', '`', '\x2', '\x2', '\x381', 
		'\x382', '\x6', '[', '\x4', '\x3', '\x382', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\x38B', '\x5', '\xB8', ']', '\x2', '\x384', '\x38B', 
		'\x5', '\xBA', '^', '\x2', '\x385', '\x38B', '\a', '\x39', '\x2', '\x2', 
		'\x386', '\x38B', '\a', ':', '\x2', '\x2', '\x387', '\x38B', '\a', ';', 
		'\x2', '\x2', '\x388', '\x38B', '\a', '<', '\x2', '\x2', '\x389', '\x38B', 
		'\a', '\x1B', '\x2', '\x2', '\x38A', '\x383', '\x3', '\x2', '\x2', '\x2', 
		'\x38A', '\x384', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x385', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x386', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\x387', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x388', '\x3', '\x2', '\x2', 
		'\x2', '\x38A', '\x389', '\x3', '\x2', '\x2', '\x2', '\x38B', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\t', '\t', '\x2', '\x2', 
		'\x38D', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x38F', '\a', '=', 
		'\x2', '\x2', '\x38F', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x390', '\x391', 
		'\a', '\f', '\x2', '\x2', '\x391', '\x393', '\x5', '\xCC', 'g', '\x2', 
		'\x392', '\x394', '\x5', '\x82', '\x42', '\x2', '\x393', '\x392', '\x3', 
		'\x2', '\x2', '\x2', '\x393', '\x394', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'\x395', '\x3', '\x2', '\x2', '\x2', '\x395', '\x397', '\x5', '\x86', 
		'\x44', '\x2', '\x396', '\x398', '\a', 'G', '\x2', '\x2', '\x397', '\x396', 
		'\x3', '\x2', '\x2', '\x2', '\x397', '\x398', '\x3', '\x2', '\x2', '\x2', 
		'\x398', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39A', '\a', '\x12', 
		'\x2', '\x2', '\x39A', '\x39B', '\x5', '\xCC', 'g', '\x2', '\x39B', '\x39D', 
		'\x5', '\xAC', 'W', '\x2', '\x39C', '\x39E', '\a', 'G', '\x2', '\x2', 
		'\x39D', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x39E', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x39F', 
		'\x3A0', '\a', '\x34', '\x2', '\x2', '\x3A0', '\x3A2', '\a', '\x42', '\x2', 
		'\x2', '\x3A1', '\x3A3', '\x5', '\x9E', 'P', '\x2', '\x3A2', '\x3A1', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A3', '\x3', '\x2', '\x2', '\x2', 
		'\x3A3', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\a', 
		'\x43', '\x2', '\x2', '\x3A5', '\x3A6', '\x5', '\xA6', 'T', '\x2', '\x3A6', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A9', '\x5', '\xCC', 'g', 
		'\x2', '\x3A8', '\x3AA', '\x5', '\x82', '\x42', '\x2', '\x3A9', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AD', '\a', 
		'\x42', '\x2', '\x2', '\x3AC', '\x3AE', '\x5', '\x9E', 'P', '\x2', '\x3AD', 
		'\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AE', '\x3', '\x2', '\x2', 
		'\x2', '\x3AE', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B2', 
		'\a', '\x43', '\x2', '\x2', '\x3B0', '\x3B1', '\a', '\x46', '\x2', '\x2', 
		'\x3B1', '\x3B3', '\x5', '\x96', 'L', '\x2', '\x3B2', '\x3B0', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x5', '\x9C', 
		'O', '\x2', '\x3B5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', 
		'\t', '\n', '\x2', '\x2', '\x3B7', '\x3B8', '\x5', '\xCC', 'g', '\x2', 
		'\x3B8', '\x3B9', '\a', '\x42', '\x2', '\x2', '\x3B9', '\x3BC', '\a', 
		'\x43', '\x2', '\x2', '\x3BA', '\x3BB', '\a', '\x46', '\x2', '\x2', '\x3BB', 
		'\x3BD', '\x5', '\x96', 'L', '\x2', '\x3BC', '\x3BA', '\x3', '\x2', '\x2', 
		'\x2', '\x3BC', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3BF', '\x5', '\x9C', 'O', '\x2', 
		'\x3BF', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3C1', '\x5', 
		'\xCC', 'g', '\x2', '\x3C1', '\x3C2', '\a', '\x46', '\x2', '\x2', '\x3C2', 
		'\x3C5', '\x5', '\n', '\x6', '\x2', '\x3C3', '\x3C4', '\a', 'R', '\x2', 
		'\x2', '\x3C4', '\x3C6', '\x5', '\x1C', '\xF', '\x2', '\x3C5', '\x3C3', 
		'\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C6', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3C9', '\a', '\x42', 
		'\x2', '\x2', '\x3C8', '\x3CA', '\x5', '\x18', '\r', '\x2', '\x3C9', '\x3C8', 
		'\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\x3', '\x2', '\x2', '\x2', 
		'\x3CA', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', '\a', 
		'\x43', '\x2', '\x2', '\x3CC', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x3CD', 
		'\x3CF', '\a', '\x42', '\x2', '\x2', '\x3CE', '\x3D0', '\x5', '\x18', 
		'\r', '\x2', '\x3CF', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3D0', 
		'\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\x3', '\x2', '\x2', '\x2', 
		'\x3D1', '\x3D2', '\a', '\x43', '\x2', '\x2', '\x3D2', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x3D3', '\x3D4', '\t', '\v', '\x2', '\x2', '\x3D4', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', 'j', '\xD1', '\xD5', '\xDA', '\xDE', 
		'\xE8', '\xED', '\xF1', '\xF9', '\x101', '\x107', '\x113', '\x11A', '\x125', 
		'\x12B', '\x131', '\x135', '\x146', '\x14E', '\x155', '\x15D', '\x165', 
		'\x16D', '\x175', '\x17D', '\x183', '\x18A', '\x190', '\x195', '\x19D', 
		'\x1A5', '\x1B1', '\x1B7', '\x1BE', '\x1C3', '\x1C8', '\x1D3', '\x1E1', 
		'\x1E4', '\x1EB', '\x1F1', '\x206', '\x20D', '\x219', '\x21E', '\x224', 
		'\x228', '\x235', '\x23F', '\x255', '\x259', '\x25D', '\x270', '\x273', 
		'\x277', '\x281', '\x289', '\x28D', '\x292', '\x29C', '\x2A1', '\x2A9', 
		'\x2AC', '\x2B3', '\x2BA', '\x2BE', '\x2C1', '\x2C7', '\x2D4', '\x2DA', 
		'\x2DE', '\x2E5', '\x2ED', '\x2F0', '\x2F4', '\x2FC', '\x305', '\x30C', 
		'\x30F', '\x316', '\x31C', '\x323', '\x32A', '\x332', '\x337', '\x344', 
		'\x34D', '\x353', '\x35B', '\x368', '\x36C', '\x36E', '\x375', '\x38A', 
		'\x393', '\x397', '\x39D', '\x3A2', '\x3A9', '\x3AD', '\x3B2', '\x3BC', 
		'\x3C5', '\x3C9', '\x3CF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
