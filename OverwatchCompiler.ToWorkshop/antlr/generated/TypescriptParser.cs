//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TypescriptParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class TypescriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, WHITESPACES=4, 
		ABSTRACT=5, BOOL=6, BREAK=7, CASE=8, CATCH=9, CLASS=10, CONST=11, CONTINUE=12, 
		DEFAULT=13, DO=14, ELSE=15, ENUM=16, FALSE=17, FINALLY=18, FOR=19, FOREACH=20, 
		GET=21, IF=22, LET=23, NEW=24, NULL=25, OVERRIDE=26, PARAMS=27, PRIVATE=28, 
		PROTECTED=29, PUBLIC=30, READONLY=31, RETURN=32, SET=33, STATIC=34, STRING=35, 
		SWITCH=36, THIS=37, THROW=38, TRUE=39, TRY=40, VAR=41, VOID=42, WHILE=43, 
		NUMBER=44, SUPER=45, MODULE=46, OF=47, IMPORT=48, IDENTIFIER=49, LITERAL_ACCESS=50, 
		INTEGER_LITERAL=51, HEX_INTEGER_LITERAL=52, REAL_LITERAL=53, CHARACTER_LITERAL=54, 
		REGULAR_STRING=55, OPEN_BRACE=56, CLOSE_BRACE=57, OPEN_BRACKET=58, CLOSE_BRACKET=59, 
		OPEN_PARENS=60, CLOSE_PARENS=61, DOT=62, COMMA=63, COLON=64, SEMICOLON=65, 
		PLUS=66, MINUS=67, STAR=68, DIV=69, PERCENT=70, AMP=71, BITWISE_OR=72, 
		CARET=73, BANG=74, TILDE=75, ASSIGNMENT=76, LT=77, GT=78, INTERR=79, DOUBLE_COLON=80, 
		OP_COALESCING=81, OP_INC=82, OP_DEC=83, OP_AND=84, OP_OR=85, OP_PTR=86, 
		OP_EQ=87, OP_NE=88, OP_LE=89, OP_GE=90, OP_ADD_ASSIGNMENT=91, OP_SUB_ASSIGNMENT=92, 
		OP_MULT_ASSIGNMENT=93, OP_DIV_ASSIGNMENT=94, OP_MOD_ASSIGNMENT=95, OP_AND_ASSIGNMENT=96, 
		OP_OR_ASSIGNMENT=97, OP_XOR_ASSIGNMENT=98, OP_LEFT_SHIFT=99, OP_LEFT_SHIFT_ASSIGNMENT=100, 
		DIRECTIVE_WHITESPACES=101, DIGITS=102, DEFINE=103, UNDEF=104, ELIF=105, 
		ENDIF=106, LINE=107, ERROR=108, WARNING=109, REGION=110, ENDREGION=111, 
		PRAGMA=112, DIRECTIVE_HIDDEN=113, CONDITIONAL_SYMBOL=114, DIRECTIVE_NEW_LINE=115, 
		TEXT=116;
	public const int
		RULE_sourceFiles = 0, RULE_sourceFile = 1, RULE_importDeclaration = 2, 
		RULE_namespaceOrTypeName = 3, RULE_type = 4, RULE_baseType = 5, RULE_simpleType = 6, 
		RULE_numericType = 7, RULE_classType = 8, RULE_typeArgumentList = 9, RULE_argumentList = 10, 
		RULE_argument = 11, RULE_expression = 12, RULE_nonAssignmentExpression = 13, 
		RULE_assignment = 14, RULE_assignmentOperator = 15, RULE_conditionalExpression = 16, 
		RULE_conditionalOrExpression = 17, RULE_conditionalAndExpression = 18, 
		RULE_inclusiveOrExpression = 19, RULE_exclusiveOrExpression = 20, RULE_andExpression = 21, 
		RULE_equalityExpression = 22, RULE_relationalExpression = 23, RULE_shiftExpression = 24, 
		RULE_additiveExpression = 25, RULE_multiplicativeExpression = 26, RULE_unaryExpression = 27, 
		RULE_primaryExpression = 28, RULE_primaryExpressionStart = 29, RULE_memberAccess = 30, 
		RULE_bracketExpression = 31, RULE_lambdaExpression = 32, RULE_anonymousFunctionSignature = 33, 
		RULE_explicitAnonymousFunctionParameterList = 34, RULE_explicitAnonymousFunctionParameter = 35, 
		RULE_implicitAnonymousFunctionParameterList = 36, RULE_anonymousFunctionBody = 37, 
		RULE_statement = 38, RULE_embeddedStatement = 39, RULE_simpleEmbeddedStatement = 40, 
		RULE_block = 41, RULE_localVariableDeclaration = 42, RULE_localVariableType = 43, 
		RULE_localVariableDeclarator = 44, RULE_ifBody = 45, RULE_switchSection = 46, 
		RULE_switchLabel = 47, RULE_statementList = 48, RULE_forInitializer = 49, 
		RULE_forIterator = 50, RULE_catchClauses = 51, RULE_specificCatchClause = 52, 
		RULE_generalCatchClause = 53, RULE_finallyClause = 54, RULE_resourceAcquisition = 55, 
		RULE_namespaceDeclaration = 56, RULE_namespaceBody = 57, RULE_namespaceMemberDeclarations = 58, 
		RULE_namespaceMemberDeclaration = 59, RULE_typeDeclaration = 60, RULE_typeParameterList = 61, 
		RULE_typeParameter = 62, RULE_classBody = 63, RULE_classMemberDeclarations = 64, 
		RULE_classMemberDeclaration = 65, RULE_allMemberModifiers = 66, RULE_allMemberModifier = 67, 
		RULE_commonMemberDeclaration = 68, RULE_typedMemberDeclaration = 69, RULE_variableDeclarators = 70, 
		RULE_variableDeclarator = 71, RULE_variableInitializer = 72, RULE_returnType = 73, 
		RULE_memberName = 74, RULE_methodBody = 75, RULE_formalParameterList = 76, 
		RULE_fixedParameters = 77, RULE_fixedParameter = 78, RULE_constructorInitializer = 79, 
		RULE_body = 80, RULE_variantTypeParameterList = 81, RULE_variantTypeParameter = 82, 
		RULE_enumBody = 83, RULE_enumMemberDeclaration = 84, RULE_rightArrow = 85, 
		RULE_rightShift = 86, RULE_rightShiftAssignment = 87, RULE_literal = 88, 
		RULE_booleanLiteral = 89, RULE_stringLiteral = 90, RULE_classDefinition = 91, 
		RULE_enumDefinition = 92, RULE_fieldDeclaration = 93, RULE_constructorDeclaration = 94, 
		RULE_methodDeclaration = 95, RULE_methodMemberName = 96, RULE_argDeclaration = 97, 
		RULE_methodInvocation = 98, RULE_objectCreationExpression = 99, RULE_identifier = 100;
	public static readonly string[] ruleNames = {
		"sourceFiles", "sourceFile", "importDeclaration", "namespaceOrTypeName", 
		"type", "baseType", "simpleType", "numericType", "classType", "typeArgumentList", 
		"argumentList", "argument", "expression", "nonAssignmentExpression", "assignment", 
		"assignmentOperator", "conditionalExpression", "conditionalOrExpression", 
		"conditionalAndExpression", "inclusiveOrExpression", "exclusiveOrExpression", 
		"andExpression", "equalityExpression", "relationalExpression", "shiftExpression", 
		"additiveExpression", "multiplicativeExpression", "unaryExpression", "primaryExpression", 
		"primaryExpressionStart", "memberAccess", "bracketExpression", "lambdaExpression", 
		"anonymousFunctionSignature", "explicitAnonymousFunctionParameterList", 
		"explicitAnonymousFunctionParameter", "implicitAnonymousFunctionParameterList", 
		"anonymousFunctionBody", "statement", "embeddedStatement", "simpleEmbeddedStatement", 
		"block", "localVariableDeclaration", "localVariableType", "localVariableDeclarator", 
		"ifBody", "switchSection", "switchLabel", "statementList", "forInitializer", 
		"forIterator", "catchClauses", "specificCatchClause", "generalCatchClause", 
		"finallyClause", "resourceAcquisition", "namespaceDeclaration", "namespaceBody", 
		"namespaceMemberDeclarations", "namespaceMemberDeclaration", "typeDeclaration", 
		"typeParameterList", "typeParameter", "classBody", "classMemberDeclarations", 
		"classMemberDeclaration", "allMemberModifiers", "allMemberModifier", "commonMemberDeclaration", 
		"typedMemberDeclaration", "variableDeclarators", "variableDeclarator", 
		"variableInitializer", "returnType", "memberName", "methodBody", "formalParameterList", 
		"fixedParameters", "fixedParameter", "constructorInitializer", "body", 
		"variantTypeParameterList", "variantTypeParameter", "enumBody", "enumMemberDeclaration", 
		"rightArrow", "rightShift", "rightShiftAssignment", "literal", "booleanLiteral", 
		"stringLiteral", "classDefinition", "enumDefinition", "fieldDeclaration", 
		"constructorDeclaration", "methodDeclaration", "methodMemberName", "argDeclaration", 
		"methodInvocation", "objectCreationExpression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, "'abstract'", "'boolean'", 
		"'break'", "'case'", "'catch'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'else'", "'enum'", "'false'", "'finally'", "'for'", "'foreach'", 
		"'get'", "'if'", "'let'", "'new'", "'null'", "'override'", "'params'", 
		"'private'", "'protected'", "'public'", "'readonly'", "'return'", "'set'", 
		"'static'", "'string'", "'switch'", "'this'", "'throw'", "'true'", "'try'", 
		"'var'", "'void'", "'while'", "'number'", "'super'", "'module'", "'of'", 
		"'import'", null, null, null, null, null, null, null, "'{'", "'}'", "'['", 
		"']'", "'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", 
		"'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", 
		"'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
		"'|='", "'^='", "'<<'", "'<<='", null, null, "'define'", "'undef'", "'elif'", 
		"'endif'", "'line'", null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
		"ABSTRACT", "BOOL", "BREAK", "CASE", "CATCH", "CLASS", "CONST", "CONTINUE", 
		"DEFAULT", "DO", "ELSE", "ENUM", "FALSE", "FINALLY", "FOR", "FOREACH", 
		"GET", "IF", "LET", "NEW", "NULL", "OVERRIDE", "PARAMS", "PRIVATE", "PROTECTED", 
		"PUBLIC", "READONLY", "RETURN", "SET", "STATIC", "STRING", "SWITCH", "THIS", 
		"THROW", "TRUE", "TRY", "VAR", "VOID", "WHILE", "NUMBER", "SUPER", "MODULE", 
		"OF", "IMPORT", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", 
		"COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
		"AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", 
		"INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", 
		"OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
		"OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
		"OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
		"OP_LEFT_SHIFT_ASSIGNMENT", "DIRECTIVE_WHITESPACES", "DIGITS", "DEFINE", 
		"UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", "REGION", "ENDREGION", 
		"PRAGMA", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", 
		"TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypescriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TypescriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TypescriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TypescriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFilesContext : ParserRuleContext {
		public SourceFileContext[] sourceFile() {
			return GetRuleContexts<SourceFileContext>();
		}
		public SourceFileContext sourceFile(int i) {
			return GetRuleContext<SourceFileContext>(i);
		}
		public SourceFilesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFiles; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSourceFiles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSourceFiles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFiles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFilesContext sourceFiles() {
		SourceFilesContext _localctx = new SourceFilesContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFiles);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 202; sourceFile();
					}
					} 
				}
				State = 207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TypescriptParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(TypescriptParser.BYTE_ORDER_MARK, 0); }
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public NamespaceMemberDeclarationsContext namespaceMemberDeclarations() {
			return GetRuleContext<NamespaceMemberDeclarationsContext>(0);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 208; Match(BYTE_ORDER_MARK);
				}
			}

			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 211; importDeclaration();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BREAK) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << ENUM) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << RETURN) | (1L << SET) | (1L << STATIC) | (1L << SWITCH) | (1L << THIS) | (1L << THROW) | (1L << TRUE) | (1L << TRY) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << MODULE) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)))) != 0)) {
				{
				State = 217; namespaceMemberDeclarations();
				}
			}

			State = 220; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(TypescriptParser.IMPORT, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(IMPORT);
			State = 223; stringLiteral();
			State = 224; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceOrTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TypescriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TypescriptParser.DOT, i);
		}
		public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		public NamespaceOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceOrTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceOrTypeNameContext namespaceOrTypeName() {
		NamespaceOrTypeNameContext _localctx = new NamespaceOrTypeNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceOrTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 226; identifier();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 227; typeArgumentList();
				}
			}

			}
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 230; Match(DOT);
				State = 231; identifier();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 232; typeArgumentList();
					}
				}

				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode[] OPEN_BRACKET() { return GetTokens(TypescriptParser.OPEN_BRACKET); }
		public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(TypescriptParser.OPEN_BRACKET, i);
		}
		public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(TypescriptParser.CLOSE_BRACKET); }
		public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(TypescriptParser.CLOSE_BRACKET, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; baseType();
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 241; Match(OPEN_BRACKET);
					State = 242; Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_baseType);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; simpleType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; classType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(TypescriptParser.BOOL, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_simpleType);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252; numericType();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(TypescriptParser.NUMBER, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_numericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TypescriptParser.STRING, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_classType);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
			case LET:
			case SET:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; namespaceOrTypeName();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(LT);
			State = 263; type();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 264; Match(COMMA);
				State = 265; type();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 271; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; argument();
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 274; Match(COMMA);
				State = 275; argument();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 281; identifier();
				State = 282; Match(COLON);
				}
				break;
			}
			State = 286; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public NonAssignmentExpressionContext nonAssignmentExpression() {
			return GetRuleContext<NonAssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; nonAssignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAssignmentExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public NonAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAssignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNonAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNonAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAssignmentExpressionContext nonAssignmentExpression() {
		NonAssignmentExpressionContext _localctx = new NonAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_nonAssignmentExpression);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292; lambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; unaryExpression();
			State = 297; assignmentOperator();
			State = 298; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(TypescriptParser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(TypescriptParser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(TypescriptParser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(TypescriptParser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(TypescriptParser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(TypescriptParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public RightShiftAssignmentContext rightShiftAssignment() {
			return GetRuleContext<RightShiftAssignmentContext>(0);
		}
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignmentOperator);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 303; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 304; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 305; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 306; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 307; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 308; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 309; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 310; rightShiftAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(TypescriptParser.INTERR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; conditionalOrExpression();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 314; Match(INTERR);
				State = 315; expression();
				State = 316; Match(COLON);
				State = 317; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(TypescriptParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(TypescriptParser.OP_OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; conditionalAndExpression();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 322; Match(OP_OR);
				State = 323; conditionalAndExpression();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(TypescriptParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(TypescriptParser.OP_AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; inclusiveOrExpression();
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 330; Match(OP_AND);
				State = 331; inclusiveOrExpression();
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(TypescriptParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(TypescriptParser.BITWISE_OR, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; exclusiveOrExpression();
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 338; Match(BITWISE_OR);
				State = 339; exclusiveOrExpression();
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(TypescriptParser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(TypescriptParser.CARET, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; andExpression();
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 346; Match(CARET);
				State = 347; andExpression();
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(TypescriptParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(TypescriptParser.AMP, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; equalityExpression();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMP) {
				{
				{
				State = 354; Match(AMP);
				State = 355; equalityExpression();
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(TypescriptParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(TypescriptParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(TypescriptParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(TypescriptParser.OP_NE, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; relationalExpression();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 362;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 363; relationalExpression();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(TypescriptParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(TypescriptParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(TypescriptParser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(TypescriptParser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(TypescriptParser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(TypescriptParser.OP_GE, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; shiftExpression();
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (LT - 77)) | (1L << (GT - 77)) | (1L << (OP_LE - 77)) | (1L << (OP_GE - 77)))) != 0)) {
				{
				{
				State = 370;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (LT - 77)) | (1L << (GT - 77)) | (1L << (OP_LE - 77)) | (1L << (OP_GE - 77)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 371; shiftExpression();
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(TypescriptParser.OP_LEFT_SHIFT); }
		public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(TypescriptParser.OP_LEFT_SHIFT, i);
		}
		public RightShiftContext[] rightShift() {
			return GetRuleContexts<RightShiftContext>();
		}
		public RightShiftContext rightShift(int i) {
			return GetRuleContext<RightShiftContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_shiftExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; additiveExpression();
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 380;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 378; Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 379; rightShift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 382; additiveExpression();
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(TypescriptParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TypescriptParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(TypescriptParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TypescriptParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; multiplicativeExpression();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 389;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 390; multiplicativeExpression();
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(TypescriptParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(TypescriptParser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(TypescriptParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(TypescriptParser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(TypescriptParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(TypescriptParser.PERCENT, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; unaryExpression();
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (STAR - 68)) | (1L << (DIV - 68)) | (1L << (PERCENT - 68)))) != 0)) {
				{
				{
				State = 397;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (STAR - 68)) | (1L << (DIV - 68)) | (1L << (PERCENT - 68)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 398; unaryExpression();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(TypescriptParser.PLUS, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(TypescriptParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(TypescriptParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(TypescriptParser.TILDE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_unaryExpression);
		try {
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; primaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; Match(PLUS);
				State = 406; unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; Match(MINUS);
				State = 408; unaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 409; Match(BANG);
				State = 410; unaryExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 411; Match(TILDE);
				State = 412; unaryExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 413; Match(OPEN_PARENS);
				State = 414; type();
				State = 415; Match(CLOSE_PARENS);
				State = 416; unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionStartContext pe;
		public PrimaryExpressionStartContext primaryExpressionStart() {
			return GetRuleContext<PrimaryExpressionStartContext>(0);
		}
		public BracketExpressionContext[] bracketExpression() {
			return GetRuleContexts<BracketExpressionContext>();
		}
		public BracketExpressionContext bracketExpression(int i) {
			return GetRuleContext<BracketExpressionContext>(i);
		}
		public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public MethodInvocationContext[] methodInvocation() {
			return GetRuleContexts<MethodInvocationContext>();
		}
		public MethodInvocationContext methodInvocation(int i) {
			return GetRuleContext<MethodInvocationContext>(i);
		}
		public ITerminalNode[] OP_INC() { return GetTokens(TypescriptParser.OP_INC); }
		public ITerminalNode OP_INC(int i) {
			return GetToken(TypescriptParser.OP_INC, i);
		}
		public ITerminalNode[] OP_DEC() { return GetTokens(TypescriptParser.OP_DEC); }
		public ITerminalNode OP_DEC(int i) {
			return GetToken(TypescriptParser.OP_DEC, i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_primaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; _localctx.pe = primaryExpressionStart();
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 421; bracketExpression();
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (OPEN_PARENS - 60)) | (1L << (DOT - 60)) | (1L << (OP_INC - 60)) | (1L << (OP_DEC - 60)))) != 0)) {
				{
				{
				State = 431;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 427; memberAccess();
					}
					break;
				case OPEN_PARENS:
					{
					State = 428; methodInvocation();
					}
					break;
				case OP_INC:
					{
					State = 429; Match(OP_INC);
					}
					break;
				case OP_DEC:
					{
					State = 430; Match(OP_DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					State = 433; bracketExpression();
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionStartContext : ParserRuleContext {
		public PrimaryExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpressionStart; } }
	 
		public PrimaryExpressionStartContext() { }
		public virtual void CopyFrom(PrimaryExpressionStartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisReferenceExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode THIS() { return GetToken(TypescriptParser.THIS, 0); }
		public ThisReferenceExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralAccessExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode LITERAL_ACCESS() { return GetToken(TypescriptParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : PrimaryExpressionStartContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public SimpleNameExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionStartContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : PrimaryExpressionStartContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationContext : PrimaryExpressionStartContext {
		public ITerminalNode NEW() { return GetToken(TypescriptParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ObjectCreationExpressionContext objectCreationExpression() {
			return GetRuleContext<ObjectCreationExpressionContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public ObjectCreationContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionStartContext primaryExpressionStart() {
		PrimaryExpressionStartContext _localctx = new PrimaryExpressionStartContext(Context, State);
		EnterRule(_localctx, 58, RULE_primaryExpressionStart);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 444; literal();
				}
				break;
			case GET:
			case LET:
			case SET:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 445; identifier();
				State = 447;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 446; typeArgumentList();
					}
					break;
				}
				}
				break;
			case OPEN_PARENS:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 449; Match(OPEN_PARENS);
				State = 450; expression();
				State = 451; Match(CLOSE_PARENS);
				}
				break;
			case LITERAL_ACCESS:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 453; Match(LITERAL_ACCESS);
				}
				break;
			case THIS:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 454; Match(THIS);
				}
				break;
			case NEW:
				_localctx = new ObjectCreationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 455; Match(NEW);
				State = 456; type();
				State = 462;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PARENS:
					{
					State = 457; objectCreationExpression();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 458; Match(OPEN_BRACKET);
					State = 459; expression();
					State = 460; Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TypescriptParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 60, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(DOT);
			State = 467; identifier();
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 468; typeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public BracketExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketExpressionContext bracketExpression() {
		BracketExpressionContext _localctx = new BracketExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_bracketExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(OPEN_BRACKET);
			State = 472; expression();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 473; Match(COMMA);
				State = 474; expression();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 480; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public AnonymousFunctionBodyContext anonymousFunctionBody() {
			return GetRuleContext<AnonymousFunctionBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; anonymousFunctionSignature();
			State = 483; rightArrow();
			State = 484; anonymousFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
			return GetRuleContext<ExplicitAnonymousFunctionParameterListContext>(0);
		}
		public ImplicitAnonymousFunctionParameterListContext implicitAnonymousFunctionParameterList() {
			return GetRuleContext<ImplicitAnonymousFunctionParameterListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 66, RULE_anonymousFunctionSignature);
		try {
			State = 497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486; Match(OPEN_PARENS);
				State = 487; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488; Match(OPEN_PARENS);
				State = 489; explicitAnonymousFunctionParameterList();
				State = 490; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 492; Match(OPEN_PARENS);
				State = 493; implicitAnonymousFunctionParameterList();
				State = 494; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
		ExplicitAnonymousFunctionParameterListContext _localctx = new ExplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 68, RULE_explicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; explicitAnonymousFunctionParameter();
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 500; Match(COMMA);
				State = 501; explicitAnonymousFunctionParameter();
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; identifier();
			State = 508; Match(COLON);
			State = 509; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ImplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitAnonymousFunctionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitAnonymousFunctionParameterListContext implicitAnonymousFunctionParameterList() {
		ImplicitAnonymousFunctionParameterListContext _localctx = new ImplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 72, RULE_implicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; identifier();
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 512; Match(COMMA);
				State = 513; identifier();
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AnonymousFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionBodyContext anonymousFunctionBody() {
		AnonymousFunctionBodyContext _localctx = new AnonymousFunctionBodyContext(Context, State);
		EnterRule(_localctx, 74, RULE_anonymousFunctionBody);
		try {
			State = 521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 519; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmbeddedContext : StatementContext {
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public EmbeddedContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbedded(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbedded(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 523; localVariableDeclaration();
				State = 524; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new EmbeddedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 526; embeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext embeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_embeddedStatement);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529; block();
				}
				break;
			case BREAK:
			case CONTINUE:
			case DO:
			case FALSE:
			case FOR:
			case FOREACH:
			case GET:
			case IF:
			case LET:
			case NEW:
			case NULL:
			case RETURN:
			case SET:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case VAR:
			case WHILE:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530; simpleEmbeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleEmbeddedStatementContext : ParserRuleContext {
		public SimpleEmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleEmbeddedStatement; } }
	 
		public SimpleEmbeddedStatementContext() { }
		public virtual void CopyFrom(SimpleEmbeddedStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public EmptyStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode TRY() { return GetToken(TypescriptParser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClausesContext catchClauses() {
			return GetRuleContext<CatchClausesContext>(0);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public TryStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode THROW() { return GetToken(TypescriptParser.THROW, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOR() { return GetToken(TypescriptParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(TypescriptParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(TypescriptParser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForInitializerContext forInitializer() {
			return GetRuleContext<ForInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIteratorContext forIterator() {
			return GetRuleContext<ForIteratorContext>(0);
		}
		public ForStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode BREAK() { return GetToken(TypescriptParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BreakStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode IF() { return GetToken(TypescriptParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public IfBodyContext[] ifBody() {
			return GetRuleContexts<IfBodyContext>();
		}
		public IfBodyContext ifBody(int i) {
			return GetRuleContext<IfBodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TypescriptParser.ELSE, 0); }
		public IfStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode RETURN() { return GetToken(TypescriptParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SWITCH() { return GetToken(TypescriptParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public SwitchSectionContext[] switchSection() {
			return GetRuleContexts<SwitchSectionContext>();
		}
		public SwitchSectionContext switchSection(int i) {
			return GetRuleContext<SwitchSectionContext>(i);
		}
		public SwitchStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode WHILE() { return GetToken(TypescriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public WhileStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode DO() { return GetToken(TypescriptParser.DO, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(TypescriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public DoStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOREACH() { return GetToken(TypescriptParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public LocalVariableTypeContext localVariableType() {
			return GetRuleContext<LocalVariableTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OF() { return GetToken(TypescriptParser.OF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForeachStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : SimpleEmbeddedStatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode CONTINUE() { return GetToken(TypescriptParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ContinueStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
		SimpleEmbeddedStatementContext _localctx = new SimpleEmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_simpleEmbeddedStatement);
		int _la;
		try {
			State = 620;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; Match(SEMICOLON);
				}
				break;
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 534; expression();
				State = 535; Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 537; Match(IF);
				State = 538; Match(OPEN_PARENS);
				State = 539; expression();
				State = 540; Match(CLOSE_PARENS);
				State = 541; ifBody();
				State = 544;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 542; Match(ELSE);
					State = 543; ifBody();
					}
					break;
				}
				}
				break;
			case SWITCH:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 546; Match(SWITCH);
				State = 547; Match(OPEN_PARENS);
				State = 548; expression();
				State = 549; Match(CLOSE_PARENS);
				State = 550; Match(OPEN_BRACE);
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 551; switchSection();
					}
					}
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 557; Match(CLOSE_BRACE);
				}
				break;
			case WHILE:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 559; Match(WHILE);
				State = 560; Match(OPEN_PARENS);
				State = 561; expression();
				State = 562; Match(CLOSE_PARENS);
				State = 563; embeddedStatement();
				}
				break;
			case DO:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 565; Match(DO);
				State = 566; embeddedStatement();
				State = 567; Match(WHILE);
				State = 568; Match(OPEN_PARENS);
				State = 569; expression();
				State = 570; Match(CLOSE_PARENS);
				State = 571; Match(SEMICOLON);
				}
				break;
			case FOR:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 573; Match(FOR);
				State = 574; Match(OPEN_PARENS);
				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << FALSE) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << SET) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_PARENS))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (BANG - 66)) | (1L << (TILDE - 66)))) != 0)) {
					{
					State = 575; forInitializer();
					}
				}

				State = 578; Match(SEMICOLON);
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 579; expression();
					}
				}

				State = 582; Match(SEMICOLON);
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 583; forIterator();
					}
				}

				State = 586; Match(CLOSE_PARENS);
				State = 587; embeddedStatement();
				}
				break;
			case FOREACH:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 588; Match(FOREACH);
				State = 589; Match(OPEN_PARENS);
				State = 590; localVariableType();
				State = 591; identifier();
				State = 592; Match(OF);
				State = 593; expression();
				State = 594; Match(CLOSE_PARENS);
				State = 595; embeddedStatement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 597; Match(BREAK);
				State = 598; Match(SEMICOLON);
				}
				break;
			case CONTINUE:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 599; Match(CONTINUE);
				State = 600; Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 601; Match(RETURN);
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 602; expression();
					}
				}

				State = 605; Match(SEMICOLON);
				}
				break;
			case THROW:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 606; Match(THROW);
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 607; expression();
					}
				}

				State = 610; Match(SEMICOLON);
				}
				break;
			case TRY:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 611; Match(TRY);
				State = 612; block();
				State = 618;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 613; catchClauses();
					State = 615;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 614; finallyClause();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 617; finallyClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 82, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(OPEN_BRACE);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << THROW) | (1L << TRUE) | (1L << TRY) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)))) != 0)) {
				{
				State = 623; statementList();
				}
			}

			State = 626; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public LocalVariableTypeContext localVariableType() {
			return GetRuleContext<LocalVariableTypeContext>(0);
		}
		public LocalVariableDeclaratorContext[] localVariableDeclarator() {
			return GetRuleContexts<LocalVariableDeclaratorContext>();
		}
		public LocalVariableDeclaratorContext localVariableDeclarator(int i) {
			return GetRuleContext<LocalVariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; localVariableType();
			State = 629; localVariableDeclarator();
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 630; Match(COMMA);
				State = 631; localVariableDeclarator();
				}
				}
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableTypeContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public ITerminalNode CONST() { return GetToken(TypescriptParser.CONST, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public LocalVariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableTypeContext localVariableType() {
		LocalVariableTypeContext _localctx = new LocalVariableTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_localVariableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << LET) | (1L << VAR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclaratorContext localVariableDeclarator() {
		LocalVariableDeclaratorContext _localctx = new LocalVariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 88, RULE_localVariableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639; identifier();
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 640; Match(COLON);
				State = 641; type();
				}
			}

			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 644; Match(ASSIGNMENT);
				State = 645; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 90, RULE_ifBody);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648; block();
				}
				break;
			case BREAK:
			case CONTINUE:
			case DO:
			case FALSE:
			case FOR:
			case FOREACH:
			case GET:
			case IF:
			case LET:
			case NEW:
			case NULL:
			case RETURN:
			case SET:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case VAR:
			case WHILE:
			case NUMBER:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649; simpleEmbeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchSectionContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchSectionContext switchSection() {
		SwitchSectionContext _localctx = new SwitchSectionContext(Context, State);
		EnterRule(_localctx, 92, RULE_switchSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 652; switchLabel();
				}
				}
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 657; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TypescriptParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TypescriptParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 94, RULE_switchLabel);
		try {
			State = 665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 659; Match(CASE);
				State = 660; expression();
				State = 661; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; Match(DEFAULT);
				State = 664; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 96, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 667; statement();
				}
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << THROW) | (1L << TRUE) | (1L << TRY) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ForInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerContext forInitializer() {
		ForInitializerContext _localctx = new ForInitializerContext(Context, State);
		EnterRule(_localctx, 98, RULE_forInitializer);
		int _la;
		try {
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 672; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 673; expression();
				State = 678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 674; Match(COMMA);
					State = 675; expression();
					}
					}
					State = 680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ForIteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForIterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForIterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorContext forIterator() {
		ForIteratorContext _localctx = new ForIteratorContext(Context, State);
		EnterRule(_localctx, 100, RULE_forIterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683; expression();
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 684; Match(COMMA);
				State = 685; expression();
				}
				}
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClausesContext : ParserRuleContext {
		public SpecificCatchClauseContext[] specificCatchClause() {
			return GetRuleContexts<SpecificCatchClauseContext>();
		}
		public SpecificCatchClauseContext specificCatchClause(int i) {
			return GetRuleContext<SpecificCatchClauseContext>(i);
		}
		public GeneralCatchClauseContext generalCatchClause() {
			return GetRuleContext<GeneralCatchClauseContext>(0);
		}
		public CatchClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCatchClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCatchClauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClausesContext catchClauses() {
		CatchClausesContext _localctx = new CatchClausesContext(Context, State);
		EnterRule(_localctx, 102, RULE_catchClauses);
		int _la;
		try {
			int _alt;
			State = 702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 691; specificCatchClause();
				State = 695;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 692; specificCatchClause();
						}
						} 
					}
					State = 697;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 698; generalCatchClause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 701; generalCatchClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificCatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(TypescriptParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SpecificCatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificCatchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSpecificCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSpecificCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificCatchClauseContext specificCatchClause() {
		SpecificCatchClauseContext _localctx = new SpecificCatchClauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_specificCatchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704; Match(CATCH);
			State = 705; Match(OPEN_PARENS);
			State = 706; classType();
			State = 708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 707; identifier();
				}
			}

			State = 710; Match(CLOSE_PARENS);
			State = 711; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralCatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(TypescriptParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public GeneralCatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalCatchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterGeneralCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitGeneralCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralCatchClauseContext generalCatchClause() {
		GeneralCatchClauseContext _localctx = new GeneralCatchClauseContext(Context, State);
		EnterRule(_localctx, 106, RULE_generalCatchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; Match(CATCH);
			State = 714; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(TypescriptParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 108, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; Match(FINALLY);
			State = 717; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceAcquisitionContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResourceAcquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceAcquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterResourceAcquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitResourceAcquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceAcquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceAcquisitionContext resourceAcquisition() {
		ResourceAcquisitionContext _localctx = new ResourceAcquisitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_resourceAcquisition);
		try {
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 719; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(TypescriptParser.MODULE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(MODULE);
			State = 724; identifier();
			State = 725; namespaceBody();
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 726; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public NamespaceMemberDeclarationsContext namespaceMemberDeclarations() {
			return GetRuleContext<NamespaceMemberDeclarationsContext>(0);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 114, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(OPEN_BRACE);
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BREAK) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << ENUM) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << RETURN) | (1L << SET) | (1L << STATIC) | (1L << SWITCH) | (1L << THIS) | (1L << THROW) | (1L << TRUE) | (1L << TRY) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << MODULE) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)))) != 0)) {
				{
				State = 730; namespaceMemberDeclarations();
				}
			}

			State = 733; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceMemberDeclarationsContext : ParserRuleContext {
		public NamespaceMemberDeclarationContext[] namespaceMemberDeclaration() {
			return GetRuleContexts<NamespaceMemberDeclarationContext>();
		}
		public NamespaceMemberDeclarationContext namespaceMemberDeclaration(int i) {
			return GetRuleContext<NamespaceMemberDeclarationContext>(i);
		}
		public NamespaceMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceMemberDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceMemberDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceMemberDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceMemberDeclarationsContext namespaceMemberDeclarations() {
		NamespaceMemberDeclarationsContext _localctx = new NamespaceMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 116, RULE_namespaceMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 735; namespaceMemberDeclaration();
				}
				}
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BREAK) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << ENUM) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << RETURN) | (1L << SET) | (1L << STATIC) | (1L << SWITCH) | (1L << THIS) | (1L << THROW) | (1L << TRUE) | (1L << TRY) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << MODULE) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceMemberDeclarationContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public NamespaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceMemberDeclarationContext namespaceMemberDeclaration() {
		NamespaceMemberDeclarationContext _localctx = new NamespaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_namespaceMemberDeclaration);
		try {
			State = 744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 740; namespaceDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 741; typeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 742; classMemberDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 743; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0)) {
				{
				State = 746; allMemberModifiers();
				}
			}

			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 749; classDefinition();
				}
				break;
			case ENUM:
				{
				State = 750; enumDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 122, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; Match(LT);
			State = 754; typeParameter();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 755; Match(COMMA);
				State = 756; typeParameter();
				}
				}
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 762; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 124, RULE_typeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public ClassMemberDeclarationsContext classMemberDeclarations() {
			return GetRuleContext<ClassMemberDeclarationsContext>(0);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 126, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766; Match(OPEN_BRACE);
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 767; classMemberDeclarations();
				}
			}

			State = 770; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationsContext : ParserRuleContext {
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationsContext classMemberDeclarations() {
		ClassMemberDeclarationsContext _localctx = new ClassMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 128, RULE_classMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 772; classMemberDeclaration();
				}
				}
				State = 775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public CommonMemberDeclarationContext commonMemberDeclaration() {
			return GetRuleContext<CommonMemberDeclarationContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_classMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0)) {
				{
				State = 777; allMemberModifiers();
				}
			}

			State = 780; commonMemberDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifiersContext : ParserRuleContext {
		public AllMemberModifierContext[] allMemberModifier() {
			return GetRuleContexts<AllMemberModifierContext>();
		}
		public AllMemberModifierContext allMemberModifier(int i) {
			return GetRuleContext<AllMemberModifierContext>(i);
		}
		public AllMemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllMemberModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifiersContext allMemberModifiers() {
		AllMemberModifiersContext _localctx = new AllMemberModifiersContext(Context, State);
		EnterRule(_localctx, 132, RULE_allMemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 782; allMemberModifier();
				}
				}
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(TypescriptParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(TypescriptParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(TypescriptParser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TypescriptParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(TypescriptParser.READONLY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TypescriptParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(TypescriptParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(TypescriptParser.STATIC, 0); }
		public AllMemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllMemberModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifierContext allMemberModifier() {
		AllMemberModifierContext _localctx = new AllMemberModifierContext(Context, State);
		EnterRule(_localctx, 134, RULE_allMemberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonMemberDeclarationContext : ParserRuleContext {
		public TypedMemberDeclarationContext typedMemberDeclaration() {
			return GetRuleContext<TypedMemberDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public CommonMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCommonMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCommonMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonMemberDeclarationContext commonMemberDeclaration() {
		CommonMemberDeclarationContext _localctx = new CommonMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_commonMemberDeclaration);
		try {
			State = 793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789; typedMemberDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790; constructorDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 791; classDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 792; enumDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public TypedMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypedMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypedMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedMemberDeclarationContext typedMemberDeclaration() {
		TypedMemberDeclarationContext _localctx = new TypedMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 138, RULE_typedMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 795; methodDeclaration();
				}
				break;
			case 2:
				{
				State = 796; fieldDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 140, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; variableDeclarator();
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 800; Match(COMMA);
				State = 801; variableDeclarator();
				}
				}
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 142, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; identifier();
			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 808; Match(COLON);
				State = 809; type();
				}
			}

			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 812; Match(ASSIGNMENT);
				State = 813; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 144, RULE_variableInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(TypescriptParser.VOID, 0); }
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_returnType);
		try {
			State = 820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case GET:
			case LET:
			case SET:
			case STRING:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 818; type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 819; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 148, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; namespaceOrTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 150, RULE_methodBody);
		try {
			State = 826;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 824; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 825; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FixedParametersContext fixedParameters() {
			return GetRuleContext<FixedParametersContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 152, RULE_formalParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828; fixedParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParametersContext : ParserRuleContext {
		public FixedParameterContext[] fixedParameter() {
			return GetRuleContexts<FixedParameterContext>();
		}
		public FixedParameterContext fixedParameter(int i) {
			return GetRuleContext<FixedParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public FixedParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixedParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixedParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedParametersContext fixedParameters() {
		FixedParametersContext _localctx = new FixedParametersContext(Context, State);
		EnterRule(_localctx, 154, RULE_fixedParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; fixedParameter();
			State = 835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 831; Match(COMMA);
				State = 832; fixedParameter();
				}
				}
				State = 837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParameterContext : ParserRuleContext {
		public ArgDeclarationContext argDeclaration() {
			return GetRuleContext<ArgDeclarationContext>(0);
		}
		public FixedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedParameterContext fixedParameter() {
		FixedParameterContext _localctx = new FixedParameterContext(Context, State);
		EnterRule(_localctx, 156, RULE_fixedParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838; argDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode SUPER() { return GetToken(TypescriptParser.SUPER, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 158, RULE_constructorInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; Match(COLON);
			State = 841; Match(SUPER);
			State = 842; Match(OPEN_PARENS);
			State = 844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 843; argumentList();
				}
			}

			State = 846; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 160, RULE_body);
		try {
			State = 850;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 848; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 849; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public VariantTypeParameterContext[] variantTypeParameter() {
			return GetRuleContexts<VariantTypeParameterContext>();
		}
		public VariantTypeParameterContext variantTypeParameter(int i) {
			return GetRuleContext<VariantTypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public VariantTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterListContext variantTypeParameterList() {
		VariantTypeParameterListContext _localctx = new VariantTypeParameterListContext(Context, State);
		EnterRule(_localctx, 162, RULE_variantTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852; Match(LT);
			State = 853; variantTypeParameter();
			State = 858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 854; Match(COMMA);
				State = 855; variantTypeParameter();
				}
				}
				State = 860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 861; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariantTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterContext variantTypeParameter() {
		VariantTypeParameterContext _localctx = new VariantTypeParameterContext(Context, State);
		EnterRule(_localctx, 164, RULE_variantTypeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 865; Match(OPEN_BRACE);
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 866; enumMemberDeclaration();
				State = 871;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 867; Match(COMMA);
						State = 868; enumMemberDeclaration();
						}
						} 
					}
					State = 873;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
				}
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 874; Match(COMMA);
					}
				}

				}
			}

			State = 879; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881; identifier();
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 882; Match(ASSIGNMENT);
				State = 883; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightArrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public RightArrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightArrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightArrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightArrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightArrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightArrowContext rightArrow() {
		RightArrowContext _localctx = new RightArrowContext(Context, State);
		EnterRule(_localctx, 170, RULE_rightArrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886; _localctx.first = Match(ASSIGNMENT);
			State = 887; _localctx.second = Match(GT);
			State = 888;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 172, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890; _localctx.first = Match(GT);
			State = 891; _localctx.second = Match(GT);
			State = 892;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(TypescriptParser.OP_GE, 0); }
		public RightShiftAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightShiftAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightShiftAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShiftAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftAssignmentContext rightShiftAssignment() {
		RightShiftAssignmentContext _localctx = new RightShiftAssignmentContext(Context, State);
		EnterRule(_localctx, 174, RULE_rightShiftAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894; _localctx.first = Match(GT);
			State = 895; _localctx.second = Match(OP_GE);
			State = 896;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(TypescriptParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TypescriptParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(TypescriptParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(TypescriptParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(TypescriptParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 176, RULE_literal);
		try {
			State = 905;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 898; booleanLiteral();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 899; stringLiteral();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 900; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 901; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 902; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 903; Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 904; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(TypescriptParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(TypescriptParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 178, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(TypescriptParser.REGULAR_STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 180, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909; Match(REGULAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(TypescriptParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 182, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911; Match(CLASS);
			State = 912; identifier();
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 913; typeParameterList();
				}
			}

			State = 916; classBody();
			State = 918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 917; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(TypescriptParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 184, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920; Match(ENUM);
			State = 921; identifier();
			State = 922; enumBody();
			State = 924;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 923; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; variableDeclarators();
			State = 927; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; identifier();
			State = 930; Match(OPEN_PARENS);
			State = 932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 931; formalParameterList();
				}
			}

			State = 934; Match(CLOSE_PARENS);
			State = 935; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodMemberNameContext methodMemberName() {
			return GetRuleContext<MethodMemberNameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 937;
				_la = TokenStream.LA(1);
				if ( !(_la==GET || _la==SET) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 940; methodMemberName();
			State = 942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 941; typeParameterList();
				}
			}

			State = 944; Match(OPEN_PARENS);
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 945; formalParameterList();
				}
			}

			State = 948; Match(CLOSE_PARENS);
			State = 951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 949; Match(COLON);
				State = 950; returnType();
				}
			}

			State = 958;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 953; methodBody();
				}
				break;
			case ASSIGNMENT:
				{
				State = 954; rightArrow();
				State = 955; expression();
				State = 956; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodMemberNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TypescriptParser.DOUBLE_COLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TypescriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TypescriptParser.DOT, i);
		}
		public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		public MethodMemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodMemberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodMemberNameContext methodMemberName() {
		MethodMemberNameContext _localctx = new MethodMemberNameContext(Context, State);
		EnterRule(_localctx, 192, RULE_methodMemberName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 960; identifier();
				}
				break;
			case 2:
				{
				State = 961; identifier();
				State = 962; Match(DOUBLE_COLON);
				State = 963; identifier();
				}
				break;
			}
			State = 974;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 968;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 967; typeArgumentList();
						}
					}

					State = 970; Match(DOT);
					State = 971; identifier();
					}
					} 
				}
				State = 976;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDeclarationContext argDeclaration() {
		ArgDeclarationContext _localctx = new ArgDeclarationContext(Context, State);
		EnterRule(_localctx, 194, RULE_argDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977; identifier();
			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 978; Match(COLON);
				State = 979; type();
				}
			}

			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 982; Match(ASSIGNMENT);
				State = 983; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 196, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986; Match(OPEN_PARENS);
			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 987; argumentList();
				}
			}

			State = 990; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationExpressionContext objectCreationExpression() {
		ObjectCreationExpressionContext _localctx = new ObjectCreationExpressionContext(Context, State);
		EnterRule(_localctx, 198, RULE_objectCreationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992; Match(OPEN_PARENS);
			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 993; argumentList();
				}
			}

			State = 996; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TypescriptParser.IDENTIFIER, 0); }
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public ITerminalNode NUMBER() { return GetToken(TypescriptParser.NUMBER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 200, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 85: return rightArrow_sempred((RightArrowContext)_localctx, predIndex);
		case 86: return rightShift_sempred((RightShiftContext)_localctx, predIndex);
		case 87: return rightShiftAssignment_sempred((RightShiftAssignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rightArrow_sempred(RightArrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShift_sempred(RightShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShiftAssignment_sempred(RightShiftAssignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'v', '\x3EB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x3', '\x2', '\a', '\x2', '\xCE', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\xD1', '\v', '\x2', '\x3', '\x3', '\x5', '\x3', '\xD4', '\n', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\xD7', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\xDA', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', '\xDD', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xE7', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xEC', 
		'\n', '\x5', '\a', '\x5', '\xEE', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\xF1', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\xF6', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xF9', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xFD', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x101', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x107', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x10D', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x110', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x117', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\x11A', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x11F', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x125', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x129', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x13A', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x142', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x147', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\x14A', '\v', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x14F', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x152', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\a', '\x15', '\x157', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\x15A', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x15F', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x162', '\v', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x167', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x16A', '\v', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x16F', '\n', '\x18', 
		'\f', '\x18', '\xE', '\x18', '\x172', '\v', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x177', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x17A', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x17F', '\n', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x182', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x185', '\v', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x18A', '\n', 
		'\x1B', '\f', '\x1B', '\xE', '\x1B', '\x18D', '\v', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x192', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x195', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1A5', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\a', '\x1E', '\x1A9', '\n', '\x1E', '\f', '\x1E', 
		'\xE', '\x1E', '\x1AC', '\v', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1B2', '\n', '\x1E', '\x3', '\x1E', 
		'\a', '\x1E', '\x1B5', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x1B8', 
		'\v', '\x1E', '\a', '\x1E', '\x1BA', '\n', '\x1E', '\f', '\x1E', '\xE', 
		'\x1E', '\x1BD', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x1C2', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x1D1', '\n', '\x1F', '\x5', '\x1F', '\x1D3', 
		'\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1D8', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', 
		'\x1DE', '\n', '!', '\f', '!', '\xE', '!', '\x1E1', '\v', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1F4', 
		'\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x1F9', '\n', 
		'$', '\f', '$', '\xE', '$', '\x1FC', '\v', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', 
		'\x205', '\n', '&', '\f', '&', '\xE', '&', '\x208', '\v', '&', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x20C', '\n', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x212', '\n', '(', '\x3', ')', 
		'\x3', ')', '\x5', ')', '\x216', '\n', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x223', '\n', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', 
		'\x22B', '\n', '*', '\f', '*', '\xE', '*', '\x22E', '\v', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x243', '\n', '*', '\x3', '*', '\x3', '*', '\x5', '*', 
		'\x247', '\n', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x24B', '\n', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', 
		'*', '\x25E', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', 
		'\x263', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x26A', '\n', '*', '\x3', '*', '\x5', '*', '\x26D', 
		'\n', '*', '\x5', '*', '\x26F', '\n', '*', '\x3', '+', '\x3', '+', '\x5', 
		'+', '\x273', '\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\a', ',', '\x27B', '\n', ',', '\f', ',', '\xE', 
		',', '\x27E', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x285', '\n', '.', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x289', '\n', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x28D', 
		'\n', '/', '\x3', '\x30', '\x6', '\x30', '\x290', '\n', '\x30', '\r', 
		'\x30', '\xE', '\x30', '\x291', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x29C', '\n', '\x31', '\x3', '\x32', '\x6', '\x32', '\x29F', 
		'\n', '\x32', '\r', '\x32', '\xE', '\x32', '\x2A0', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x2A7', '\n', '\x33', 
		'\f', '\x33', '\xE', '\x33', '\x2AA', '\v', '\x33', '\x5', '\x33', '\x2AC', 
		'\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', 
		'\x2B1', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x2B4', '\v', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x2B8', '\n', '\x35', '\f', 
		'\x35', '\xE', '\x35', '\x2BB', '\v', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x2BE', '\n', '\x35', '\x3', '\x35', '\x5', '\x35', '\x2C1', '\n', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x2C7', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x2D4', '\n', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x2DA', '\n', 
		':', '\x3', ';', '\x3', ';', '\x5', ';', '\x2DE', '\n', ';', '\x3', ';', 
		'\x3', ';', '\x3', '<', '\x6', '<', '\x2E3', '\n', '<', '\r', '<', '\xE', 
		'<', '\x2E4', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', 
		'\x2EB', '\n', '=', '\x3', '>', '\x5', '>', '\x2EE', '\n', '>', '\x3', 
		'>', '\x3', '>', '\x5', '>', '\x2F2', '\n', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\a', '?', '\x2F8', '\n', '?', '\f', '?', '\xE', 
		'?', '\x2FB', '\v', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x303', '\n', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x42', '\x6', '\x42', '\x308', '\n', '\x42', 
		'\r', '\x42', '\xE', '\x42', '\x309', '\x3', '\x43', '\x5', '\x43', '\x30D', 
		'\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x6', '\x44', 
		'\x312', '\n', '\x44', '\r', '\x44', '\xE', '\x44', '\x313', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x5', '\x46', '\x31C', '\n', '\x46', '\x3', 'G', '\x3', 'G', '\x5', 'G', 
		'\x320', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\a', 'H', '\x325', 
		'\n', 'H', '\f', 'H', '\xE', 'H', '\x328', '\v', 'H', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x5', 'I', '\x32D', '\n', 'I', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x331', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 
		'K', '\x5', 'K', '\x337', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'M', 
		'\x3', 'M', '\x5', 'M', '\x33D', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\a', 'O', '\x344', '\n', 'O', '\f', 'O', 
		'\xE', 'O', '\x347', '\v', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x34F', '\n', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x355', '\n', 'R', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\a', 'S', '\x35B', '\n', 'S', 
		'\f', 'S', '\xE', 'S', '\x35E', '\v', 'S', '\x3', 'S', '\x3', 'S', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\a', 
		'U', '\x368', '\n', 'U', '\f', 'U', '\xE', 'U', '\x36B', '\v', 'U', '\x3', 
		'U', '\x5', 'U', '\x36E', '\n', 'U', '\x5', 'U', '\x370', '\n', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x377', 
		'\n', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x38C', '\n', 'Z', '\x3', '[', '\x3', 
		'[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', 
		']', '\x395', '\n', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x399', 
		'\n', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x5', '^', 
		'\x39F', '\n', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x5', '`', '\x3A7', '\n', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '\x61', '\x5', '\x61', '\x3AD', '\n', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x5', '\x61', '\x3B1', '\n', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x5', '\x61', '\x3B5', '\n', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x5', '\x61', '\x3BA', '\n', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', 
		'\x3C1', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x5', '\x62', '\x3C8', '\n', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\x3CB', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\a', 
		'\x62', '\x3CF', '\n', '\x62', '\f', '\x62', '\xE', '\x62', '\x3D2', '\v', 
		'\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x3D7', 
		'\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x3DB', '\n', 
		'\x63', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x3DF', '\n', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', 
		'\x3E5', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x2', '\x2', 'g', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\x2', '\v', '\x3', '\x2', 'Y', 'Z', '\x4', '\x2', 'O', 'P', '[', '\\', 
		'\x3', '\x2', '\x44', '\x45', '\x3', '\x2', '\x46', 'H', '\x5', '\x2', 
		'\r', '\r', '\x19', '\x19', '+', '+', '\a', '\x2', '\a', '\a', '\x1A', 
		'\x1A', '\x1C', '\x1C', '\x1E', '!', '$', '$', '\x4', '\x2', '\x13', '\x13', 
		')', ')', '\x4', '\x2', '\x17', '\x17', '#', '#', '\b', '\x2', '\x17', 
		'\x17', '\x19', '\x19', '#', '#', '+', '+', '.', '.', '\x33', '\x33', 
		'\x2', '\x420', '\x2', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x4', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\xE4', '\x3', '\x2', '\x2', '\x2', '\n', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xE', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x106', '\x3', '\x2', '\x2', '\x2', '\x14', '\x108', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x113', '\x3', '\x2', '\x2', '\x2', '\x18', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x128', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x12A', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x139', '\x3', '\x2', '\x2', '\x2', '\"', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x14B', '\x3', '\x2', '\x2', '\x2', '(', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x15B', '\x3', '\x2', '\x2', '\x2', ',', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x173', '\x3', '\x2', '\x2', '\x2', '\x32', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x186', '\x3', '\x2', '\x2', '\x2', '\x36', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1A6', '\x3', '\x2', '\x2', '\x2', '<', '\x1D2', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1D4', '\x3', '\x2', '\x2', '\x2', '@', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1F5', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1FD', '\x3', '\x2', '\x2', '\x2', 'J', '\x201', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x211', '\x3', '\x2', '\x2', '\x2', 'P', '\x215', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x26E', '\x3', '\x2', '\x2', '\x2', 'T', '\x270', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x276', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x27F', '\x3', '\x2', '\x2', '\x2', 'Z', '\x281', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x28C', '\x3', '\x2', '\x2', '\x2', '^', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x29B', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x64', '\x2AB', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x2AD', '\x3', '\x2', '\x2', '\x2', 'h', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x2C2', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x2CB', '\x3', '\x2', '\x2', '\x2', 'n', '\x2CE', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x2D3', '\x3', '\x2', '\x2', '\x2', 'r', '\x2D5', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x2DB', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x2E2', '\x3', '\x2', '\x2', '\x2', 'x', '\x2EA', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x2ED', '\x3', '\x2', '\x2', '\x2', '|', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x2FE', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x300', '\x3', '\x2', '\x2', '\x2', '\x82', '\x307', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x86', '\x311', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x31F', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x321', '\x3', '\x2', '\x2', '\x2', '\x90', '\x329', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x332', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x336', '\x3', '\x2', '\x2', '\x2', '\x96', '\x338', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x33E', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x348', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x34A', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x354', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x356', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x361', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x363', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x378', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x37C', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x380', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x38B', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x38D', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x38F', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x391', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x39A', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x3A3', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x3C7', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x3D3', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x3E2', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', 
		'\x5', '\x4', '\x3', '\x2', '\xCD', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD4', '\a', '\x3', '\x2', '\x2', '\xD3', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD7', '\x5', '\x6', '\x4', '\x2', 
		'\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', '\x5', 'v', 
		'<', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDF', '\a', '\x2', '\x2', '\x3', '\xDF', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\x32', '\x2', '\x2', '\xE1', '\xE2', 
		'\x5', '\xB6', '\\', '\x2', '\xE2', '\xE3', '\a', '\x43', '\x2', '\x2', 
		'\xE3', '\a', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\x5', '\xCA', 
		'\x66', '\x2', '\xE5', '\xE7', '\x5', '\x14', '\v', '\x2', '\xE6', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '@', 
		'\x2', '\x2', '\xE9', '\xEB', '\x5', '\xCA', '\x66', '\x2', '\xEA', '\xEC', 
		'\x5', '\x14', '\v', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF7', 
		'\x5', '\f', '\a', '\x2', '\xF3', '\xF4', '\a', '<', '\x2', '\x2', '\xF4', 
		'\xF6', '\a', '=', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFD', '\x5', '\xE', '\b', '\x2', '\xFB', '\xFD', '\x5', 
		'\x12', '\n', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\x101', '\x5', '\x10', '\t', '\x2', '\xFF', '\x101', '\a', 
		'\b', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x103', '\a', '.', '\x2', '\x2', '\x103', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x107', '\x5', '\b', '\x5', '\x2', '\x105', 
		'\x107', '\a', '%', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', 'O', '\x2', '\x2', 
		'\x109', '\x10E', '\x5', '\n', '\x6', '\x2', '\x10A', '\x10B', '\a', '\x41', 
		'\x2', '\x2', '\x10B', '\x10D', '\x5', '\n', '\x6', '\x2', '\x10C', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x111', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', 'P', '\x2', 
		'\x2', '\x112', '\x15', '\x3', '\x2', '\x2', '\x2', '\x113', '\x118', 
		'\x5', '\x18', '\r', '\x2', '\x114', '\x115', '\a', '\x41', '\x2', '\x2', 
		'\x115', '\x117', '\x5', '\x18', '\r', '\x2', '\x116', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x17', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', '\xCA', '\x66', '\x2', 
		'\x11C', '\x11D', '\a', '\x42', '\x2', '\x2', '\x11D', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\x5', '\x1A', '\xE', '\x2', '\x121', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x125', '\x5', '\x1E', '\x10', '\x2', 
		'\x123', '\x125', '\x5', '\x1C', '\xF', '\x2', '\x124', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x5', '\x42', '\"', 
		'\x2', '\x127', '\x129', '\x5', '\"', '\x12', '\x2', '\x128', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x5', 
		'\x38', '\x1D', '\x2', '\x12B', '\x12C', '\x5', ' ', '\x11', '\x2', '\x12C', 
		'\x12D', '\x5', '\x1A', '\xE', '\x2', '\x12D', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x13A', '\a', 'N', '\x2', '\x2', '\x12F', '\x13A', '\a', 
		']', '\x2', '\x2', '\x130', '\x13A', '\a', '^', '\x2', '\x2', '\x131', 
		'\x13A', '\a', '_', '\x2', '\x2', '\x132', '\x13A', '\a', '`', '\x2', 
		'\x2', '\x133', '\x13A', '\a', '\x61', '\x2', '\x2', '\x134', '\x13A', 
		'\a', '\x62', '\x2', '\x2', '\x135', '\x13A', '\a', '\x63', '\x2', '\x2', 
		'\x136', '\x13A', '\a', '\x64', '\x2', '\x2', '\x137', '\x13A', '\a', 
		'\x66', '\x2', '\x2', '\x138', '\x13A', '\x5', '\xB0', 'Y', '\x2', '\x139', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x139', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x130', '\x3', '\x2', '\x2', '\x2', '\x139', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x133', '\x3', '\x2', '\x2', '\x2', '\x139', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x135', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x141', '\x5', '$', '\x13', '\x2', '\x13C', 
		'\x13D', '\a', 'Q', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\x1A', '\xE', 
		'\x2', '\x13E', '\x13F', '\a', '\x42', '\x2', '\x2', '\x13F', '\x140', 
		'\x5', '\x1A', '\xE', '\x2', '\x140', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '#', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x148', '\x5', '&', '\x14', '\x2', '\x144', '\x145', '\a', 'W', '\x2', 
		'\x2', '\x145', '\x147', '\x5', '&', '\x14', '\x2', '\x146', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '%', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x150', '\x5', '(', '\x15', 
		'\x2', '\x14C', '\x14D', '\a', 'V', '\x2', '\x2', '\x14D', '\x14F', '\x5', 
		'(', '\x15', '\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x158', '\x5', '*', '\x16', '\x2', '\x154', '\x155', '\a', 'J', '\x2', 
		'\x2', '\x155', '\x157', '\x5', '*', '\x16', '\x2', '\x156', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x159', ')', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x160', '\x5', ',', '\x17', 
		'\x2', '\x15C', '\x15D', '\a', 'K', '\x2', '\x2', '\x15D', '\x15F', '\x5', 
		',', '\x17', '\x2', '\x15E', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x168', '\x5', '.', '\x18', '\x2', '\x164', '\x165', '\a', 'I', '\x2', 
		'\x2', '\x165', '\x167', '\x5', '.', '\x18', '\x2', '\x166', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x166', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '-', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x170', '\x5', '\x30', 
		'\x19', '\x2', '\x16C', '\x16D', '\t', '\x2', '\x2', '\x2', '\x16D', '\x16F', 
		'\x5', '\x30', '\x19', '\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x178', '\x5', '\x32', '\x1A', '\x2', '\x174', '\x175', 
		'\t', '\x3', '\x2', '\x2', '\x175', '\x177', '\x5', '\x32', '\x1A', '\x2', 
		'\x176', '\x174', '\x3', '\x2', '\x2', '\x2', '\x177', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x176', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x183', 
		'\x5', '\x34', '\x1B', '\x2', '\x17C', '\x17F', '\a', '\x65', '\x2', '\x2', 
		'\x17D', '\x17F', '\x5', '\xAE', 'X', '\x2', '\x17E', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x182', '\x5', '\x34', 
		'\x1B', '\x2', '\x181', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x18B', '\x5', '\x36', '\x1C', '\x2', '\x187', '\x188', '\t', 
		'\x4', '\x2', '\x2', '\x188', '\x18A', '\x5', '\x36', '\x1C', '\x2', '\x189', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x193', '\x5', 
		'\x38', '\x1D', '\x2', '\x18F', '\x190', '\t', '\x5', '\x2', '\x2', '\x190', 
		'\x192', '\x5', '\x38', '\x1D', '\x2', '\x191', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', '\x192', '\x195', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x37', '\x3', '\x2', '\x2', '\x2', '\x195', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x1A5', '\x5', ':', '\x1E', '\x2', '\x197', 
		'\x198', '\a', '\x44', '\x2', '\x2', '\x198', '\x1A5', '\x5', '\x38', 
		'\x1D', '\x2', '\x199', '\x19A', '\a', '\x45', '\x2', '\x2', '\x19A', 
		'\x1A5', '\x5', '\x38', '\x1D', '\x2', '\x19B', '\x19C', '\a', 'L', '\x2', 
		'\x2', '\x19C', '\x1A5', '\x5', '\x38', '\x1D', '\x2', '\x19D', '\x19E', 
		'\a', 'M', '\x2', '\x2', '\x19E', '\x1A5', '\x5', '\x38', '\x1D', '\x2', 
		'\x19F', '\x1A0', '\a', '>', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '\n', 
		'\x6', '\x2', '\x1A1', '\x1A2', '\a', '?', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\x5', '\x38', '\x1D', '\x2', '\x1A3', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x196', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x199', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A4', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1AA', '\x5', '<', '\x1F', '\x2', 
		'\x1A7', '\x1A9', '\x5', '@', '!', '\x2', '\x1A8', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1B2', '\x5', '>', ' ', '\x2', '\x1AE', 
		'\x1B2', '\x5', '\xC6', '\x64', '\x2', '\x1AF', '\x1B2', '\a', 'T', '\x2', 
		'\x2', '\x1B0', '\x1B2', '\a', 'U', '\x2', '\x2', '\x1B1', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B2', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B5', 
		'\x5', '@', '!', '\x2', '\x1B4', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B4', '\x3', 
		'\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BC', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1D3', 
		'\x5', '\xB2', 'Z', '\x2', '\x1BF', '\x1C1', '\x5', '\xCA', '\x66', '\x2', 
		'\x1C0', '\x1C2', '\x5', '\x14', '\v', '\x2', '\x1C1', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\a', '>', '\x2', 
		'\x2', '\x1C4', '\x1C5', '\x5', '\x1A', '\xE', '\x2', '\x1C5', '\x1C6', 
		'\a', '?', '\x2', '\x2', '\x1C6', '\x1D3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1D3', '\a', '\x34', '\x2', '\x2', '\x1C8', '\x1D3', '\a', 
		'\'', '\x2', '\x2', '\x1C9', '\x1CA', '\a', '\x1A', '\x2', '\x2', '\x1CA', 
		'\x1D0', '\x5', '\n', '\x6', '\x2', '\x1CB', '\x1D1', '\x5', '\xC8', '\x65', 
		'\x2', '\x1CC', '\x1CD', '\a', '<', '\x2', '\x2', '\x1CD', '\x1CE', '\x5', 
		'\x1A', '\xE', '\x2', '\x1CE', '\x1CF', '\a', '=', '\x2', '\x2', '\x1CF', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '=', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\a', 
		'@', '\x2', '\x2', '\x1D5', '\x1D7', '\x5', '\xCA', '\x66', '\x2', '\x1D6', 
		'\x1D8', '\x5', '\x14', '\v', '\x2', '\x1D7', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D7', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D8', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '<', '\x2', '\x2', '\x1DA', 
		'\x1DF', '\x5', '\x1A', '\xE', '\x2', '\x1DB', '\x1DC', '\a', '\x41', 
		'\x2', '\x2', '\x1DC', '\x1DE', '\x5', '\x1A', '\xE', '\x2', '\x1DD', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E1', '\x3', '\x2', '\x2', 
		'\x2', '\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\a', 
		'=', '\x2', '\x2', '\x1E3', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E5', '\x5', '\x44', '#', '\x2', '\x1E5', '\x1E6', '\x5', '\xAC', 'W', 
		'\x2', '\x1E6', '\x1E7', '\x5', 'L', '\'', '\x2', '\x1E7', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', '>', '\x2', '\x2', '\x1E9', 
		'\x1F4', '\a', '?', '\x2', '\x2', '\x1EA', '\x1EB', '\a', '>', '\x2', 
		'\x2', '\x1EB', '\x1EC', '\x5', '\x46', '$', '\x2', '\x1EC', '\x1ED', 
		'\a', '?', '\x2', '\x2', '\x1ED', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1EF', '\a', '>', '\x2', '\x2', '\x1EF', '\x1F0', '\x5', 'J', 
		'&', '\x2', '\x1F0', '\x1F1', '\a', '?', '\x2', '\x2', '\x1F1', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F4', '\x5', '\xCA', '\x66', '\x2', 
		'\x1F3', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1F3', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F3', 
		'\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1FA', '\x5', 'H', '%', '\x2', '\x1F6', '\x1F7', '\a', 
		'\x41', '\x2', '\x2', '\x1F7', '\x1F9', '\x5', 'H', '%', '\x2', '\x1F8', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FB', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x5', 
		'\xCA', '\x66', '\x2', '\x1FE', '\x1FF', '\a', '\x42', '\x2', '\x2', '\x1FF', 
		'\x200', '\x5', '\n', '\x6', '\x2', '\x200', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x201', '\x206', '\x5', '\xCA', '\x66', '\x2', '\x202', '\x203', 
		'\a', '\x41', '\x2', '\x2', '\x203', '\x205', '\x5', '\xCA', '\x66', '\x2', 
		'\x204', '\x202', '\x3', '\x2', '\x2', '\x2', '\x205', '\x208', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x204', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x207', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x208', '\x206', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20C', 
		'\x5', '\x1A', '\xE', '\x2', '\x20A', '\x20C', '\x5', 'T', '+', '\x2', 
		'\x20B', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20A', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', 'M', '\x3', '\x2', '\x2', '\x2', '\x20D', 
		'\x20E', '\x5', 'V', ',', '\x2', '\x20E', '\x20F', '\a', '\x43', '\x2', 
		'\x2', '\x20F', '\x212', '\x3', '\x2', '\x2', '\x2', '\x210', '\x212', 
		'\x5', 'P', ')', '\x2', '\x211', '\x20D', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x213', '\x216', '\x5', 'T', '+', '\x2', '\x214', '\x216', 
		'\x5', 'R', '*', '\x2', '\x215', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x214', '\x3', '\x2', '\x2', '\x2', '\x216', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x217', '\x26F', '\a', '\x43', '\x2', '\x2', '\x218', '\x219', 
		'\x5', '\x1A', '\xE', '\x2', '\x219', '\x21A', '\a', '\x43', '\x2', '\x2', 
		'\x21A', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', 
		'\x18', '\x2', '\x2', '\x21C', '\x21D', '\a', '>', '\x2', '\x2', '\x21D', 
		'\x21E', '\x5', '\x1A', '\xE', '\x2', '\x21E', '\x21F', '\a', '?', '\x2', 
		'\x2', '\x21F', '\x222', '\x5', '\\', '/', '\x2', '\x220', '\x221', '\a', 
		'\x11', '\x2', '\x2', '\x221', '\x223', '\x5', '\\', '/', '\x2', '\x222', 
		'\x220', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x223', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', 
		'\a', '&', '\x2', '\x2', '\x225', '\x226', '\a', '>', '\x2', '\x2', '\x226', 
		'\x227', '\x5', '\x1A', '\xE', '\x2', '\x227', '\x228', '\a', '?', '\x2', 
		'\x2', '\x228', '\x22C', '\a', ':', '\x2', '\x2', '\x229', '\x22B', '\x5', 
		'^', '\x30', '\x2', '\x22A', '\x229', '\x3', '\x2', '\x2', '\x2', '\x22B', 
		'\x22E', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22F', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', '\x230', '\a', ';', '\x2', '\x2', '\x230', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', '\x231', '\x232', '\a', '-', '\x2', '\x2', '\x232', '\x233', 
		'\a', '>', '\x2', '\x2', '\x233', '\x234', '\x5', '\x1A', '\xE', '\x2', 
		'\x234', '\x235', '\a', '?', '\x2', '\x2', '\x235', '\x236', '\x5', 'P', 
		')', '\x2', '\x236', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', 
		'\a', '\x10', '\x2', '\x2', '\x238', '\x239', '\x5', 'P', ')', '\x2', 
		'\x239', '\x23A', '\a', '-', '\x2', '\x2', '\x23A', '\x23B', '\a', '>', 
		'\x2', '\x2', '\x23B', '\x23C', '\x5', '\x1A', '\xE', '\x2', '\x23C', 
		'\x23D', '\a', '?', '\x2', '\x2', '\x23D', '\x23E', '\a', '\x43', '\x2', 
		'\x2', '\x23E', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', 
		'\a', '\x15', '\x2', '\x2', '\x240', '\x242', '\a', '>', '\x2', '\x2', 
		'\x241', '\x243', '\x5', '\x64', '\x33', '\x2', '\x242', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x243', '\x3', '\x2', '\x2', '\x2', '\x243', 
		'\x244', '\x3', '\x2', '\x2', '\x2', '\x244', '\x246', '\a', '\x43', '\x2', 
		'\x2', '\x245', '\x247', '\x5', '\x1A', '\xE', '\x2', '\x246', '\x245', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x248', '\x3', '\x2', '\x2', '\x2', '\x248', '\x24A', '\a', 
		'\x43', '\x2', '\x2', '\x249', '\x24B', '\x5', '\x66', '\x34', '\x2', 
		'\x24A', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x24D', '\a', '?', '\x2', '\x2', '\x24D', '\x26F', '\x5', 'P', ')', '\x2', 
		'\x24E', '\x24F', '\a', '\x16', '\x2', '\x2', '\x24F', '\x250', '\a', 
		'>', '\x2', '\x2', '\x250', '\x251', '\x5', 'X', '-', '\x2', '\x251', 
		'\x252', '\x5', '\xCA', '\x66', '\x2', '\x252', '\x253', '\a', '\x31', 
		'\x2', '\x2', '\x253', '\x254', '\x5', '\x1A', '\xE', '\x2', '\x254', 
		'\x255', '\a', '?', '\x2', '\x2', '\x255', '\x256', '\x5', 'P', ')', '\x2', 
		'\x256', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\a', 
		'\t', '\x2', '\x2', '\x258', '\x26F', '\a', '\x43', '\x2', '\x2', '\x259', 
		'\x25A', '\a', '\xE', '\x2', '\x2', '\x25A', '\x26F', '\a', '\x43', '\x2', 
		'\x2', '\x25B', '\x25D', '\a', '\"', '\x2', '\x2', '\x25C', '\x25E', '\x5', 
		'\x1A', '\xE', '\x2', '\x25D', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x26F', '\a', '\x43', '\x2', '\x2', '\x260', '\x262', 
		'\a', '(', '\x2', '\x2', '\x261', '\x263', '\x5', '\x1A', '\xE', '\x2', 
		'\x262', '\x261', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x264', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x26F', '\a', '\x43', '\x2', '\x2', '\x265', '\x266', '\a', '*', '\x2', 
		'\x2', '\x266', '\x26C', '\x5', 'T', '+', '\x2', '\x267', '\x269', '\x5', 
		'h', '\x35', '\x2', '\x268', '\x26A', '\x5', 'n', '\x38', '\x2', '\x269', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26D', 
		'\x5', 'n', '\x38', '\x2', '\x26C', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x26E', '\x217', '\x3', '\x2', '\x2', '\x2', '\x26E', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x26E', '\x224', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x26E', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x26E', '\x257', '\x3', '\x2', '\x2', '\x2', '\x26E', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x26E', '\x260', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x270', '\x272', '\a', ':', '\x2', '\x2', '\x271', '\x273', '\x5', '\x62', 
		'\x32', '\x2', '\x272', '\x271', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x275', '\a', ';', '\x2', '\x2', '\x275', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x277', '\x5', 'X', '-', '\x2', '\x277', 
		'\x27C', '\x5', 'Z', '.', '\x2', '\x278', '\x279', '\a', '\x41', '\x2', 
		'\x2', '\x279', '\x27B', '\x5', 'Z', '.', '\x2', '\x27A', '\x278', '\x3', 
		'\x2', '\x2', '\x2', '\x27B', '\x27E', '\x3', '\x2', '\x2', '\x2', '\x27C', 
		'\x27A', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x27D', 'W', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27C', '\x3', 
		'\x2', '\x2', '\x2', '\x27F', '\x280', '\t', '\x6', '\x2', '\x2', '\x280', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x281', '\x284', '\x5', '\xCA', '\x66', 
		'\x2', '\x282', '\x283', '\a', '\x42', '\x2', '\x2', '\x283', '\x285', 
		'\x5', '\n', '\x6', '\x2', '\x284', '\x282', '\x3', '\x2', '\x2', '\x2', 
		'\x284', '\x285', '\x3', '\x2', '\x2', '\x2', '\x285', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x286', '\x287', '\a', 'N', '\x2', '\x2', '\x287', 
		'\x289', '\x5', '\x1A', '\xE', '\x2', '\x288', '\x286', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x289', '\x3', '\x2', '\x2', '\x2', '\x289', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x28A', '\x28D', '\x5', 'T', '+', '\x2', 
		'\x28B', '\x28D', '\x5', 'R', '*', '\x2', '\x28C', '\x28A', '\x3', '\x2', 
		'\x2', '\x2', '\x28C', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28D', ']', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x290', '\x5', '`', '\x31', '\x2', 
		'\x28F', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\x3', '\x2', '\x2', 
		'\x2', '\x293', '\x294', '\x5', '\x62', '\x32', '\x2', '\x294', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x295', '\x296', '\a', '\n', '\x2', '\x2', '\x296', 
		'\x297', '\x5', '\x1A', '\xE', '\x2', '\x297', '\x298', '\a', '\x42', 
		'\x2', '\x2', '\x298', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29A', 
		'\a', '\xF', '\x2', '\x2', '\x29A', '\x29C', '\a', '\x42', '\x2', '\x2', 
		'\x29B', '\x295', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x299', '\x3', 
		'\x2', '\x2', '\x2', '\x29C', '\x61', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'\x29F', '\x5', 'N', '(', '\x2', '\x29E', '\x29D', '\x3', '\x2', '\x2', 
		'\x2', '\x29F', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x29E', 
		'\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x63', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2AC', '\x5', 
		'V', ',', '\x2', '\x2A3', '\x2A8', '\x5', '\x1A', '\xE', '\x2', '\x2A4', 
		'\x2A5', '\a', '\x41', '\x2', '\x2', '\x2A5', '\x2A7', '\x5', '\x1A', 
		'\xE', '\x2', '\x2A6', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2AA', 
		'\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'\x2A8', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AC', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2AC', '\x65', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2B2', 
		'\x5', '\x1A', '\xE', '\x2', '\x2AE', '\x2AF', '\a', '\x41', '\x2', '\x2', 
		'\x2AF', '\x2B1', '\x5', '\x1A', '\xE', '\x2', '\x2B0', '\x2AE', '\x3', 
		'\x2', '\x2', '\x2', '\x2B1', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B2', 
		'\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x3', '\x2', '\x2', 
		'\x2', '\x2B3', 'g', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B2', '\x3', 
		'\x2', '\x2', '\x2', '\x2B5', '\x2B9', '\x5', 'j', '\x36', '\x2', '\x2B6', 
		'\x2B8', '\x5', 'j', '\x36', '\x2', '\x2B7', '\x2B6', '\x3', '\x2', '\x2', 
		'\x2', '\x2B8', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2B7', 
		'\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2BA', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2B9', '\x3', 
		'\x2', '\x2', '\x2', '\x2BC', '\x2BE', '\x5', 'l', '\x37', '\x2', '\x2BD', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BE', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C1', 
		'\x5', 'l', '\x37', '\x2', '\x2C0', '\x2B5', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C1', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x2C2', '\x2C3', '\a', '\v', '\x2', '\x2', '\x2C3', '\x2C4', 
		'\a', '>', '\x2', '\x2', '\x2C4', '\x2C6', '\x5', '\x12', '\n', '\x2', 
		'\x2C5', '\x2C7', '\x5', '\xCA', '\x66', '\x2', '\x2C6', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C6', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\a', '?', '\x2', 
		'\x2', '\x2C9', '\x2CA', '\x5', 'T', '+', '\x2', '\x2CA', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\a', '\v', '\x2', '\x2', '\x2CC', 
		'\x2CD', '\x5', 'T', '+', '\x2', '\x2CD', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x2CE', '\x2CF', '\a', '\x14', '\x2', '\x2', '\x2CF', '\x2D0', '\x5', 
		'T', '+', '\x2', '\x2D0', 'o', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D4', 
		'\x5', 'V', ',', '\x2', '\x2D2', '\x2D4', '\x5', '\x1A', '\xE', '\x2', 
		'\x2D3', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D2', '\x3', 
		'\x2', '\x2', '\x2', '\x2D4', 'q', '\x3', '\x2', '\x2', '\x2', '\x2D5', 
		'\x2D6', '\a', '\x30', '\x2', '\x2', '\x2D6', '\x2D7', '\x5', '\xCA', 
		'\x66', '\x2', '\x2D7', '\x2D9', '\x5', 't', ';', '\x2', '\x2D8', '\x2DA', 
		'\a', '\x43', '\x2', '\x2', '\x2D9', '\x2D8', '\x3', '\x2', '\x2', '\x2', 
		'\x2D9', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DA', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x2DB', '\x2DD', '\a', ':', '\x2', '\x2', '\x2DC', '\x2DE', 
		'\x5', 'v', '<', '\x2', '\x2DD', '\x2DC', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', '\x3', 
		'\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\a', ';', '\x2', '\x2', '\x2E0', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E3', '\x5', 'x', '=', '\x2', 
		'\x2E2', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\x3', 
		'\x2', '\x2', '\x2', '\x2E4', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E4', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E5', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x2E6', '\x2EB', '\x5', 'r', ':', '\x2', '\x2E7', '\x2EB', '\x5', 
		'z', '>', '\x2', '\x2E8', '\x2EB', '\x5', '\x84', '\x43', '\x2', '\x2E9', 
		'\x2EB', '\x5', 'N', '(', '\x2', '\x2EA', '\x2E6', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', 'y', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2EE', '\x5', '\x86', 
		'\x44', '\x2', '\x2ED', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2ED', 
		'\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2F1', '\x3', '\x2', '\x2', 
		'\x2', '\x2EF', '\x2F2', '\x5', '\xB8', ']', '\x2', '\x2F0', '\x2F2', 
		'\x5', '\xBA', '^', '\x2', '\x2F1', '\x2EF', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F2', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x2F3', '\x2F4', '\a', 'O', '\x2', '\x2', '\x2F4', '\x2F9', 
		'\x5', '~', '@', '\x2', '\x2F5', '\x2F6', '\a', '\x41', '\x2', '\x2', 
		'\x2F6', '\x2F8', '\x5', '~', '@', '\x2', '\x2F7', '\x2F5', '\x3', '\x2', 
		'\x2', '\x2', '\x2F8', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2F9', '\x3', 
		'\x2', '\x2', '\x2', '\x2FC', '\x2FD', '\a', 'P', '\x2', '\x2', '\x2FD', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FF', '\x5', '\xCA', '\x66', 
		'\x2', '\x2FF', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x300', '\x302', 
		'\a', ':', '\x2', '\x2', '\x301', '\x303', '\x5', '\x82', '\x42', '\x2', 
		'\x302', '\x301', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', '\x3', 
		'\x2', '\x2', '\x2', '\x303', '\x304', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x305', '\a', ';', '\x2', '\x2', '\x305', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x306', '\x308', '\x5', '\x84', '\x43', '\x2', '\x307', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x309', '\x307', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x83', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x30D', '\x5', '\x86', '\x44', '\x2', '\x30C', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x30C', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30E', 
		'\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\x5', '\x8A', '\x46', '\x2', 
		'\x30F', '\x85', '\x3', '\x2', '\x2', '\x2', '\x310', '\x312', '\x5', 
		'\x88', '\x45', '\x2', '\x311', '\x310', '\x3', '\x2', '\x2', '\x2', '\x312', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x313', '\x311', '\x3', '\x2', '\x2', 
		'\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', '\x314', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x315', '\x316', '\t', '\a', '\x2', '\x2', 
		'\x316', '\x89', '\x3', '\x2', '\x2', '\x2', '\x317', '\x31C', '\x5', 
		'\x8C', 'G', '\x2', '\x318', '\x31C', '\x5', '\xBE', '`', '\x2', '\x319', 
		'\x31C', '\x5', '\xB8', ']', '\x2', '\x31A', '\x31C', '\x5', '\xBA', '^', 
		'\x2', '\x31B', '\x317', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x31B', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x31D', '\x320', '\x5', '\xC0', '\x61', '\x2', '\x31E', 
		'\x320', '\x5', '\xBC', '_', '\x2', '\x31F', '\x31D', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x320', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x326', '\x5', '\x90', 'I', '\x2', 
		'\x322', '\x323', '\a', '\x41', '\x2', '\x2', '\x323', '\x325', '\x5', 
		'\x90', 'I', '\x2', '\x324', '\x322', '\x3', '\x2', '\x2', '\x2', '\x325', 
		'\x328', '\x3', '\x2', '\x2', '\x2', '\x326', '\x324', '\x3', '\x2', '\x2', 
		'\x2', '\x326', '\x327', '\x3', '\x2', '\x2', '\x2', '\x327', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x328', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x329', '\x32C', '\x5', '\xCA', '\x66', '\x2', '\x32A', '\x32B', '\a', 
		'\x42', '\x2', '\x2', '\x32B', '\x32D', '\x5', '\n', '\x6', '\x2', '\x32C', 
		'\x32A', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', '\x3', '\x2', '\x2', 
		'\x2', '\x32D', '\x330', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32F', 
		'\a', 'N', '\x2', '\x2', '\x32F', '\x331', '\x5', '\x92', 'J', '\x2', 
		'\x330', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x330', '\x331', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x91', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x333', '\x5', '\x1A', '\xE', '\x2', '\x333', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x334', '\x337', '\x5', '\n', '\x6', '\x2', '\x335', '\x337', 
		'\a', ',', '\x2', '\x2', '\x336', '\x334', '\x3', '\x2', '\x2', '\x2', 
		'\x336', '\x335', '\x3', '\x2', '\x2', '\x2', '\x337', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x338', '\x339', '\x5', '\b', '\x5', '\x2', '\x339', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x33D', '\x5', 'T', '+', 
		'\x2', '\x33B', '\x33D', '\a', '\x43', '\x2', '\x2', '\x33C', '\x33A', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x33B', '\x3', '\x2', '\x2', '\x2', 
		'\x33D', '\x99', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x33F', '\x5', 
		'\x9C', 'O', '\x2', '\x33F', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x345', '\x5', '\x9E', 'P', '\x2', '\x341', '\x342', '\a', '\x41', '\x2', 
		'\x2', '\x342', '\x344', '\x5', '\x9E', 'P', '\x2', '\x343', '\x341', 
		'\x3', '\x2', '\x2', '\x2', '\x344', '\x347', '\x3', '\x2', '\x2', '\x2', 
		'\x345', '\x343', '\x3', '\x2', '\x2', '\x2', '\x345', '\x346', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x347', 
		'\x345', '\x3', '\x2', '\x2', '\x2', '\x348', '\x349', '\x5', '\xC4', 
		'\x63', '\x2', '\x349', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', 
		'\a', '\x42', '\x2', '\x2', '\x34B', '\x34C', '\a', '/', '\x2', '\x2', 
		'\x34C', '\x34E', '\a', '>', '\x2', '\x2', '\x34D', '\x34F', '\x5', '\x16', 
		'\f', '\x2', '\x34E', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '\x34F', '\x350', '\x3', '\x2', '\x2', '\x2', 
		'\x350', '\x351', '\a', '?', '\x2', '\x2', '\x351', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x352', '\x355', '\x5', 'T', '+', '\x2', '\x353', '\x355', 
		'\a', '\x43', '\x2', '\x2', '\x354', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '\x353', '\x3', '\x2', '\x2', '\x2', '\x355', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x356', '\x357', '\a', 'O', '\x2', '\x2', '\x357', 
		'\x35C', '\x5', '\xA6', 'T', '\x2', '\x358', '\x359', '\a', '\x41', '\x2', 
		'\x2', '\x359', '\x35B', '\x5', '\xA6', 'T', '\x2', '\x35A', '\x358', 
		'\x3', '\x2', '\x2', '\x2', '\x35B', '\x35E', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x35D', '\x3', 
		'\x2', '\x2', '\x2', '\x35D', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35E', 
		'\x35C', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', '\a', 'P', '\x2', 
		'\x2', '\x360', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', 
		'\x5', '\xCA', '\x66', '\x2', '\x362', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x363', '\x36F', '\a', ':', '\x2', '\x2', '\x364', '\x369', '\x5', '\xAA', 
		'V', '\x2', '\x365', '\x366', '\a', '\x41', '\x2', '\x2', '\x366', '\x368', 
		'\x5', '\xAA', 'V', '\x2', '\x367', '\x365', '\x3', '\x2', '\x2', '\x2', 
		'\x368', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x369', '\x367', '\x3', 
		'\x2', '\x2', '\x2', '\x369', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x36A', 
		'\x36D', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x369', '\x3', '\x2', '\x2', 
		'\x2', '\x36C', '\x36E', '\a', '\x41', '\x2', '\x2', '\x36D', '\x36C', 
		'\x3', '\x2', '\x2', '\x2', '\x36D', '\x36E', '\x3', '\x2', '\x2', '\x2', 
		'\x36E', '\x370', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x364', '\x3', 
		'\x2', '\x2', '\x2', '\x36F', '\x370', '\x3', '\x2', '\x2', '\x2', '\x370', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x371', '\x372', '\a', ';', '\x2', 
		'\x2', '\x372', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x373', '\x376', 
		'\x5', '\xCA', '\x66', '\x2', '\x374', '\x375', '\a', 'N', '\x2', '\x2', 
		'\x375', '\x377', '\x5', '\x1A', '\xE', '\x2', '\x376', '\x374', '\x3', 
		'\x2', '\x2', '\x2', '\x376', '\x377', '\x3', '\x2', '\x2', '\x2', '\x377', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\a', 'N', '\x2', 
		'\x2', '\x379', '\x37A', '\a', 'P', '\x2', '\x2', '\x37A', '\x37B', '\x6', 
		'W', '\x2', '\x3', '\x37B', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x37C', 
		'\x37D', '\a', 'P', '\x2', '\x2', '\x37D', '\x37E', '\a', 'P', '\x2', 
		'\x2', '\x37E', '\x37F', '\x6', 'X', '\x3', '\x3', '\x37F', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x380', '\x381', '\a', 'P', '\x2', '\x2', '\x381', 
		'\x382', '\a', '\\', '\x2', '\x2', '\x382', '\x383', '\x6', 'Y', '\x4', 
		'\x3', '\x383', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x384', '\x38C', 
		'\x5', '\xB4', '[', '\x2', '\x385', '\x38C', '\x5', '\xB6', '\\', '\x2', 
		'\x386', '\x38C', '\a', '\x35', '\x2', '\x2', '\x387', '\x38C', '\a', 
		'\x36', '\x2', '\x2', '\x388', '\x38C', '\a', '\x37', '\x2', '\x2', '\x389', 
		'\x38C', '\a', '\x38', '\x2', '\x2', '\x38A', '\x38C', '\a', '\x1B', '\x2', 
		'\x2', '\x38B', '\x384', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x385', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x387', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x388', '\x3', 
		'\x2', '\x2', '\x2', '\x38B', '\x389', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38A', '\x3', '\x2', '\x2', '\x2', '\x38C', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\x38D', '\x38E', '\t', '\b', '\x2', '\x2', '\x38E', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\x38F', '\x390', '\a', '\x39', '\x2', '\x2', '\x390', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\x391', '\x392', '\a', '\f', '\x2', 
		'\x2', '\x392', '\x394', '\x5', '\xCA', '\x66', '\x2', '\x393', '\x395', 
		'\x5', '|', '?', '\x2', '\x394', '\x393', '\x3', '\x2', '\x2', '\x2', 
		'\x394', '\x395', '\x3', '\x2', '\x2', '\x2', '\x395', '\x396', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x398', '\x5', '\x80', '\x41', '\x2', '\x397', 
		'\x399', '\a', '\x43', '\x2', '\x2', '\x398', '\x397', '\x3', '\x2', '\x2', 
		'\x2', '\x398', '\x399', '\x3', '\x2', '\x2', '\x2', '\x399', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', '\a', '\x12', '\x2', '\x2', 
		'\x39B', '\x39C', '\x5', '\xCA', '\x66', '\x2', '\x39C', '\x39E', '\x5', 
		'\xA8', 'U', '\x2', '\x39D', '\x39F', '\a', '\x43', '\x2', '\x2', '\x39E', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', '\x2', '\x2', 
		'\x2', '\x39F', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', 
		'\x5', '\x8E', 'H', '\x2', '\x3A1', '\x3A2', '\a', '\x43', '\x2', '\x2', 
		'\x3A2', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x5', 
		'\xCA', '\x66', '\x2', '\x3A4', '\x3A6', '\a', '>', '\x2', '\x2', '\x3A5', 
		'\x3A7', '\x5', '\x9A', 'N', '\x2', '\x3A6', '\x3A5', '\x3', '\x2', '\x2', 
		'\x2', '\x3A6', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', '\a', '?', '\x2', '\x2', 
		'\x3A9', '\x3AA', '\x5', '\xA2', 'R', '\x2', '\x3AA', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\x3AB', '\x3AD', '\t', '\t', '\x2', '\x2', '\x3AC', '\x3AB', 
		'\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\x3', '\x2', '\x2', '\x2', 
		'\x3AD', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3B0', '\x5', 
		'\xC2', '\x62', '\x2', '\x3AF', '\x3B1', '\x5', '|', '?', '\x2', '\x3B0', 
		'\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B1', '\x3', '\x2', '\x2', 
		'\x2', '\x3B1', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B4', 
		'\a', '>', '\x2', '\x2', '\x3B3', '\x3B5', '\x5', '\x9A', 'N', '\x2', 
		'\x3B4', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3B9', '\a', '?', '\x2', '\x2', '\x3B7', '\x3B8', '\a', '\x42', '\x2', 
		'\x2', '\x3B8', '\x3BA', '\x5', '\x94', 'K', '\x2', '\x3B9', '\x3B7', 
		'\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', '\x3', '\x2', '\x2', '\x2', 
		'\x3BA', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3C1', '\x5', 
		'\x98', 'M', '\x2', '\x3BC', '\x3BD', '\x5', '\xAC', 'W', '\x2', '\x3BD', 
		'\x3BE', '\x5', '\x1A', '\xE', '\x2', '\x3BE', '\x3BF', '\a', '\x43', 
		'\x2', '\x2', '\x3BF', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3BB', 
		'\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3BC', '\x3', '\x2', '\x2', '\x2', 
		'\x3C1', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C8', '\x5', 
		'\xCA', '\x66', '\x2', '\x3C3', '\x3C4', '\x5', '\xCA', '\x66', '\x2', 
		'\x3C4', '\x3C5', '\a', 'R', '\x2', '\x2', '\x3C5', '\x3C6', '\x5', '\xCA', 
		'\x66', '\x2', '\x3C6', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3C7', 
		'\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3C3', '\x3', '\x2', '\x2', 
		'\x2', '\x3C8', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CB', 
		'\x5', '\x14', '\v', '\x2', '\x3CA', '\x3C9', '\x3', '\x2', '\x2', '\x2', 
		'\x3CA', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', '\x3', 
		'\x2', '\x2', '\x2', '\x3CC', '\x3CD', '\a', '@', '\x2', '\x2', '\x3CD', 
		'\x3CF', '\x5', '\xCA', '\x66', '\x2', '\x3CE', '\x3CA', '\x3', '\x2', 
		'\x2', '\x2', '\x3CF', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3CE', 
		'\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\x3', '\x2', '\x2', '\x2', 
		'\x3D1', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D0', '\x3', 
		'\x2', '\x2', '\x2', '\x3D3', '\x3D6', '\x5', '\xCA', '\x66', '\x2', '\x3D4', 
		'\x3D5', '\a', '\x42', '\x2', '\x2', '\x3D5', '\x3D7', '\x5', '\n', '\x6', 
		'\x2', '\x3D6', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D7', 
		'\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'\x3D8', '\x3D9', '\a', 'N', '\x2', '\x2', '\x3D9', '\x3DB', '\x5', '\x1A', 
		'\xE', '\x2', '\x3DA', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\x3DB', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x3DC', '\x3DE', '\a', '>', '\x2', '\x2', '\x3DD', '\x3DF', '\x5', '\x16', 
		'\f', '\x2', '\x3DE', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3DF', 
		'\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\x3', '\x2', '\x2', '\x2', 
		'\x3E0', '\x3E1', '\a', '?', '\x2', '\x2', '\x3E1', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\x3E2', '\x3E4', '\a', '>', '\x2', '\x2', '\x3E3', '\x3E5', 
		'\x5', '\x16', '\f', '\x2', '\x3E4', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x3E4', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E6', '\x3', 
		'\x2', '\x2', '\x2', '\x3E6', '\x3E7', '\a', '?', '\x2', '\x2', '\x3E7', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E9', '\t', '\n', '\x2', 
		'\x2', '\x3E9', '\xCB', '\x3', '\x2', '\x2', '\x2', 't', '\xCF', '\xD3', 
		'\xD8', '\xDC', '\xE6', '\xEB', '\xEF', '\xF7', '\xFC', '\x100', '\x106', 
		'\x10E', '\x118', '\x11E', '\x124', '\x128', '\x139', '\x141', '\x148', 
		'\x150', '\x158', '\x160', '\x168', '\x170', '\x178', '\x17E', '\x183', 
		'\x18B', '\x193', '\x1A4', '\x1AA', '\x1B1', '\x1B6', '\x1BB', '\x1C1', 
		'\x1D0', '\x1D2', '\x1D7', '\x1DF', '\x1F3', '\x1FA', '\x206', '\x20B', 
		'\x211', '\x215', '\x222', '\x22C', '\x242', '\x246', '\x24A', '\x25D', 
		'\x262', '\x269', '\x26C', '\x26E', '\x272', '\x27C', '\x284', '\x288', 
		'\x28C', '\x291', '\x29B', '\x2A0', '\x2A8', '\x2AB', '\x2B2', '\x2B9', 
		'\x2BD', '\x2C0', '\x2C6', '\x2D3', '\x2D9', '\x2DD', '\x2E4', '\x2EA', 
		'\x2ED', '\x2F1', '\x2F9', '\x302', '\x309', '\x30C', '\x313', '\x31B', 
		'\x31F', '\x326', '\x32C', '\x330', '\x336', '\x33C', '\x345', '\x34E', 
		'\x354', '\x35C', '\x369', '\x36D', '\x36F', '\x376', '\x38B', '\x394', 
		'\x398', '\x39E', '\x3A6', '\x3AC', '\x3B0', '\x3B4', '\x3B9', '\x3C0', 
		'\x3C7', '\x3CA', '\x3D0', '\x3D6', '\x3DA', '\x3DE', '\x3E4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
