//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TypescriptParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class TypescriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, WHITESPACES=4, 
		ABSTRACT=5, BOOL=6, BREAK=7, CASE=8, CATCH=9, CLASS=10, CONST=11, CONTINUE=12, 
		DEFAULT=13, DO=14, ELSE=15, ENUM=16, FALSE=17, FINALLY=18, FOR=19, FOREACH=20, 
		GET=21, IF=22, LET=23, NEW=24, NULL=25, OVERRIDE=26, PARAMS=27, PRIVATE=28, 
		PROTECTED=29, PUBLIC=30, READONLY=31, RETURN=32, SET=33, STATIC=34, STRING=35, 
		SWITCH=36, THIS=37, THROW=38, TRUE=39, TRY=40, VAR=41, VOID=42, WHILE=43, 
		NUMBER=44, SUPER=45, MODULE=46, OF=47, IMPORT=48, FUNCTION=49, CONSTRUCTOR=50, 
		EXPORT=51, AS=52, EXTENDS=53, IDENTIFIER=54, LITERAL_ACCESS=55, INTEGER_LITERAL=56, 
		HEX_INTEGER_LITERAL=57, REAL_LITERAL=58, REGULAR_STRING=59, SINGLE_QUOTE_STRING_LITERAL=60, 
		OPEN_BRACE=61, CLOSE_BRACE=62, OPEN_BRACKET=63, CLOSE_BRACKET=64, OPEN_PARENS=65, 
		CLOSE_PARENS=66, DOT=67, COMMA=68, COLON=69, SEMICOLON=70, PLUS=71, MINUS=72, 
		STAR=73, DIV=74, PERCENT=75, AMP=76, BITWISE_OR=77, CARET=78, BANG=79, 
		TILDE=80, ASSIGNMENT=81, LT=82, GT=83, INTERR=84, DOUBLE_COLON=85, OP_COALESCING=86, 
		OP_INC=87, OP_DEC=88, OP_AND=89, OP_OR=90, OP_PTR=91, OP_EQ=92, OP_NE=93, 
		OP_LE=94, OP_GE=95, OP_ADD_ASSIGNMENT=96, OP_SUB_ASSIGNMENT=97, OP_MULT_ASSIGNMENT=98, 
		OP_DIV_ASSIGNMENT=99, OP_MOD_ASSIGNMENT=100, OP_AND_ASSIGNMENT=101, OP_OR_ASSIGNMENT=102, 
		OP_XOR_ASSIGNMENT=103, OP_LEFT_SHIFT=104, OP_LEFT_SHIFT_ASSIGNMENT=105, 
		DIRECTIVE_WHITESPACES=106, DIGITS=107, DEFINE=108, UNDEF=109, ELIF=110, 
		ENDIF=111, LINE=112, ERROR=113, WARNING=114, REGION=115, ENDREGION=116, 
		PRAGMA=117, DIRECTIVE_HIDDEN=118, CONDITIONAL_SYMBOL=119, DIRECTIVE_NEW_LINE=120, 
		TEXT=121;
	public const int
		RULE_sourceFiles = 0, RULE_sourceFile = 1, RULE_importDeclaration = 2, 
		RULE_moduleOrTypeName = 3, RULE_typeList = 4, RULE_typeInOptionalParenthesis = 5, 
		RULE_type = 6, RULE_baseType = 7, RULE_primitiveType = 8, RULE_classType = 9, 
		RULE_typeArgumentList = 10, RULE_functionType = 11, RULE_argumentList = 12, 
		RULE_argument = 13, RULE_expression = 14, RULE_nonAssignmentExpression = 15, 
		RULE_assignment = 16, RULE_assignmentOperator = 17, RULE_conditionalOrExpression = 18, 
		RULE_conditionalAndExpression = 19, RULE_equalityExpression = 20, RULE_castExpression = 21, 
		RULE_relationalExpression = 22, RULE_additiveExpression = 23, RULE_multiplicativeExpression = 24, 
		RULE_unaryExpression = 25, RULE_primaryExpression = 26, RULE_nativeMethodInvocationStatement = 27, 
		RULE_primaryExpressionStart = 28, RULE_expressionList = 29, RULE_memberAccess = 30, 
		RULE_bracketExpression = 31, RULE_lambdaExpression = 32, RULE_anonymousFunctionSignature = 33, 
		RULE_explicitAnonymousFunctionParameterList = 34, RULE_explicitAnonymousFunctionParameter = 35, 
		RULE_implicitAnonymousFunctionParameterList = 36, RULE_anonymousFunctionBody = 37, 
		RULE_statement = 38, RULE_embeddedStatement = 39, RULE_simpleEmbeddedStatement = 40, 
		RULE_block = 41, RULE_variableDeclaration = 42, RULE_variableType = 43, 
		RULE_variableDeclarator = 44, RULE_switchSection = 45, RULE_switchLabel = 46, 
		RULE_statementList = 47, RULE_forInitializer = 48, RULE_forIterator = 49, 
		RULE_moduleDeclaration = 50, RULE_moduleBody = 51, RULE_moduleMemberDeclarations = 52, 
		RULE_moduleMemberDeclaration = 53, RULE_functionDeclaration = 54, RULE_typeDeclaration = 55, 
		RULE_typeParameterList = 56, RULE_typeParameter = 57, RULE_classBody = 58, 
		RULE_classMemberDeclarations = 59, RULE_classMemberDeclaration = 60, RULE_allMemberModifiers = 61, 
		RULE_allMemberModifier = 62, RULE_commonMemberDeclaration = 63, RULE_typedMemberDeclaration = 64, 
		RULE_classField = 65, RULE_returnTypeList = 66, RULE_returnType = 67, 
		RULE_methodBody = 68, RULE_formalParameterList = 69, RULE_fixedParameters = 70, 
		RULE_fixedParameter = 71, RULE_constructorInitializer = 72, RULE_body = 73, 
		RULE_variantTypeParameterList = 74, RULE_variantTypeParameter = 75, RULE_enumBody = 76, 
		RULE_enumMemberDeclaration = 77, RULE_rightArrow = 78, RULE_rightShift = 79, 
		RULE_rightShiftAssignment = 80, RULE_literal = 81, RULE_booleanLiteral = 82, 
		RULE_stringLiteral = 83, RULE_classDefinition = 84, RULE_enumDefinition = 85, 
		RULE_constructorDeclaration = 86, RULE_methodDeclaration = 87, RULE_getterDeclaration = 88, 
		RULE_setterDeclaration = 89, RULE_argDeclaration = 90, RULE_methodInvocation = 91, 
		RULE_objectCreationExpression = 92, RULE_identifier = 93;
	public static readonly string[] ruleNames = {
		"sourceFiles", "sourceFile", "importDeclaration", "moduleOrTypeName", 
		"typeList", "typeInOptionalParenthesis", "type", "baseType", "primitiveType", 
		"classType", "typeArgumentList", "functionType", "argumentList", "argument", 
		"expression", "nonAssignmentExpression", "assignment", "assignmentOperator", 
		"conditionalOrExpression", "conditionalAndExpression", "equalityExpression", 
		"castExpression", "relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "primaryExpression", "nativeMethodInvocationStatement", 
		"primaryExpressionStart", "expressionList", "memberAccess", "bracketExpression", 
		"lambdaExpression", "anonymousFunctionSignature", "explicitAnonymousFunctionParameterList", 
		"explicitAnonymousFunctionParameter", "implicitAnonymousFunctionParameterList", 
		"anonymousFunctionBody", "statement", "embeddedStatement", "simpleEmbeddedStatement", 
		"block", "variableDeclaration", "variableType", "variableDeclarator", 
		"switchSection", "switchLabel", "statementList", "forInitializer", "forIterator", 
		"moduleDeclaration", "moduleBody", "moduleMemberDeclarations", "moduleMemberDeclaration", 
		"functionDeclaration", "typeDeclaration", "typeParameterList", "typeParameter", 
		"classBody", "classMemberDeclarations", "classMemberDeclaration", "allMemberModifiers", 
		"allMemberModifier", "commonMemberDeclaration", "typedMemberDeclaration", 
		"classField", "returnTypeList", "returnType", "methodBody", "formalParameterList", 
		"fixedParameters", "fixedParameter", "constructorInitializer", "body", 
		"variantTypeParameterList", "variantTypeParameter", "enumBody", "enumMemberDeclaration", 
		"rightArrow", "rightShift", "rightShiftAssignment", "literal", "booleanLiteral", 
		"stringLiteral", "classDefinition", "enumDefinition", "constructorDeclaration", 
		"methodDeclaration", "getterDeclaration", "setterDeclaration", "argDeclaration", 
		"methodInvocation", "objectCreationExpression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, "'abstract'", "'boolean'", 
		"'break'", "'case'", "'catch'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'else'", "'enum'", "'false'", "'finally'", "'for'", "'foreach'", 
		"'get'", "'if'", "'let'", "'new'", "'null'", "'override'", "'params'", 
		"'private'", "'protected'", "'public'", "'readonly'", "'return'", "'set'", 
		"'static'", "'string'", "'switch'", "'this'", "'throw'", "'true'", "'try'", 
		"'var'", "'void'", "'while'", "'number'", "'super'", "'module'", "'of'", 
		"'import'", "'function'", "'constructor'", "'export'", "'as'", "'extends'", 
		null, null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
		"'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<'", "'<<='", null, null, "'define'", "'undef'", "'elif'", 
		"'endif'", "'line'", null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
		"ABSTRACT", "BOOL", "BREAK", "CASE", "CATCH", "CLASS", "CONST", "CONTINUE", 
		"DEFAULT", "DO", "ELSE", "ENUM", "FALSE", "FINALLY", "FOR", "FOREACH", 
		"GET", "IF", "LET", "NEW", "NULL", "OVERRIDE", "PARAMS", "PRIVATE", "PROTECTED", 
		"PUBLIC", "READONLY", "RETURN", "SET", "STATIC", "STRING", "SWITCH", "THIS", 
		"THROW", "TRUE", "TRY", "VAR", "VOID", "WHILE", "NUMBER", "SUPER", "MODULE", 
		"OF", "IMPORT", "FUNCTION", "CONSTRUCTOR", "EXPORT", "AS", "EXTENDS", 
		"IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"REAL_LITERAL", "REGULAR_STRING", "SINGLE_QUOTE_STRING_LITERAL", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", 
		"DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", 
		"PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
		"LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", "OP_DEC", 
		"OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
		"OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
		"OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
		"OP_LEFT_SHIFT_ASSIGNMENT", "DIRECTIVE_WHITESPACES", "DIGITS", "DEFINE", 
		"UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", "REGION", "ENDREGION", 
		"PRAGMA", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", 
		"TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypescriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TypescriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TypescriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TypescriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFilesContext : ParserRuleContext {
		public SourceFileContext[] sourceFile() {
			return GetRuleContexts<SourceFileContext>();
		}
		public SourceFileContext sourceFile(int i) {
			return GetRuleContext<SourceFileContext>(i);
		}
		public SourceFilesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFiles; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSourceFiles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSourceFiles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFiles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFilesContext sourceFiles() {
		SourceFilesContext _localctx = new SourceFilesContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFiles);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 188; sourceFile();
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileContext : ParserRuleContext {
		public string FilePath;
		public ITerminalNode Eof() { return GetToken(TypescriptParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(TypescriptParser.BYTE_ORDER_MARK, 0); }
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ModuleMemberDeclarationsContext moduleMemberDeclarations() {
			return GetRuleContext<ModuleMemberDeclarationsContext>(0);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 194; Match(BYTE_ORDER_MARK);
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 197; importDeclaration();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << CONST) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << MODULE) | (1L << FUNCTION) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 203; moduleMemberDeclarations();
				}
			}

			State = 206; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public SourceFileContext TargetFile { get; set; }
			public string TargetPath
		        {
		            get
		            {
		                var parent = (SourceFileContext) Parent;
		                var currentFolder = new FileInfo(parent.FilePath).Directory.FullName;
		                var importPath = Path.Combine(currentFolder, RemoveQuotes(stringLiteral().GetText()));
		                return Path.GetFullPath(importPath);
		            }
		        }

		        private string RemoveQuotes(string s)
		        {
		            return s.Substring(1, s.Length - 2);
		        }
				private string ignoreMe;
		public ITerminalNode IMPORT() { return GetToken(TypescriptParser.IMPORT, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(IMPORT);
			State = 209; stringLiteral();
			State = 210; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOrTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TypescriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TypescriptParser.DOT, i);
		}
		public ModuleOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleOrTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOrTypeNameContext moduleOrTypeName() {
		ModuleOrTypeNameContext _localctx = new ModuleOrTypeNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleOrTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 212; identifier();
			}
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 213; Match(DOT);
				State = 214; identifier();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeInOptionalParenthesisContext[] typeInOptionalParenthesis() {
			return GetRuleContexts<TypeInOptionalParenthesisContext>();
		}
		public TypeInOptionalParenthesisContext typeInOptionalParenthesis(int i) {
			return GetRuleContext<TypeInOptionalParenthesisContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(TypescriptParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(TypescriptParser.BITWISE_OR, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; typeInOptionalParenthesis();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 221; Match(BITWISE_OR);
				State = 222; typeInOptionalParenthesis();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInOptionalParenthesisContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public TypeInOptionalParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInOptionalParenthesis; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeInOptionalParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeInOptionalParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInOptionalParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInOptionalParenthesisContext typeInOptionalParenthesis() {
		TypeInOptionalParenthesisContext _localctx = new TypeInOptionalParenthesisContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeInOptionalParenthesis);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; Match(OPEN_PARENS);
				State = 229; type();
				State = 230; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode[] OPEN_BRACKET() { return GetTokens(TypescriptParser.OPEN_BRACKET); }
		public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(TypescriptParser.OPEN_BRACKET, i);
		}
		public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(TypescriptParser.CLOSE_BRACKET); }
		public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(TypescriptParser.CLOSE_BRACKET, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; baseType();
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 236; Match(OPEN_BRACKET);
					State = 237; Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseType);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; classType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245; functionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(TypescriptParser.NUMBER, 0); }
		public ITerminalNode BOOL() { return GetToken(TypescriptParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(TypescriptParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << STRING) | (1L << NUMBER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ModuleOrTypeNameContext moduleOrTypeName() {
			return GetRuleContext<ModuleOrTypeNameContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_classType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; moduleOrTypeName();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 251; typeArgumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public TypeListContext[] typeList() {
			return GetRuleContexts<TypeListContext>();
		}
		public TypeListContext typeList(int i) {
			return GetRuleContext<TypeListContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(LT);
			State = 255; typeList();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 256; Match(COMMA);
				State = 257; typeList();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 263; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ReturnTypeListContext returnTypeList() {
			return GetRuleContext<ReturnTypeListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(OPEN_PARENS);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 266; formalParameterList();
				}
			}

			State = 269; Match(CLOSE_PARENS);
			State = 270; rightArrow();
			State = 271; returnTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 24, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; argument();
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 274; Match(COMMA);
				State = 275; argument();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 281; identifier();
				State = 282; Match(COLON);
				}
				break;
			}
			State = 286; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public NonAssignmentExpressionContext nonAssignmentExpression() {
			return GetRuleContext<NonAssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; nonAssignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAssignmentExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public NonAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAssignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNonAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNonAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAssignmentExpressionContext nonAssignmentExpression() {
		NonAssignmentExpressionContext _localctx = new NonAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_nonAssignmentExpression);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292; lambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; conditionalOrExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; unaryExpression();
			State = 297; assignmentOperator();
			State = 298; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(TypescriptParser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(TypescriptParser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MOD_ASSIGNMENT, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (ASSIGNMENT - 81)) | (1L << (OP_ADD_ASSIGNMENT - 81)) | (1L << (OP_SUB_ASSIGNMENT - 81)) | (1L << (OP_MULT_ASSIGNMENT - 81)) | (1L << (OP_DIV_ASSIGNMENT - 81)) | (1L << (OP_MOD_ASSIGNMENT - 81)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(TypescriptParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(TypescriptParser.OP_OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; conditionalAndExpression();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 303; Match(OP_OR);
				State = 304; conditionalAndExpression();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(TypescriptParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(TypescriptParser.OP_AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; equalityExpression();
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 311; Match(OP_AND);
				State = 312; equalityExpression();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(TypescriptParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(TypescriptParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(TypescriptParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(TypescriptParser.OP_NE, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; castExpression();
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 319;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 320; castExpression();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TypescriptParser.AS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_castExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; relationalExpression();
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 327; Match(AS);
				State = 328; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(TypescriptParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(TypescriptParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(TypescriptParser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(TypescriptParser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(TypescriptParser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(TypescriptParser.OP_GE, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; additiveExpression();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (LT - 82)) | (1L << (GT - 82)) | (1L << (OP_LE - 82)) | (1L << (OP_GE - 82)))) != 0)) {
				{
				{
				State = 332;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (LT - 82)) | (1L << (GT - 82)) | (1L << (OP_LE - 82)) | (1L << (OP_GE - 82)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 333; additiveExpression();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(TypescriptParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TypescriptParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(TypescriptParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TypescriptParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; multiplicativeExpression();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 340;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 341; multiplicativeExpression();
				}
				}
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(TypescriptParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(TypescriptParser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(TypescriptParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(TypescriptParser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(TypescriptParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(TypescriptParser.PERCENT, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; unaryExpression();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (STAR - 73)) | (1L << (DIV - 73)) | (1L << (PERCENT - 73)))) != 0)) {
				{
				{
				State = 348;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (STAR - 73)) | (1L << (DIV - 73)) | (1L << (PERCENT - 73)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 349; unaryExpression();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(TypescriptParser.PLUS, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(TypescriptParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(TypescriptParser.BANG, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_unaryExpression);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case REGULAR_STRING:
			case SINGLE_QUOTE_STRING_LITERAL:
			case OPEN_BRACKET:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355; primaryExpression();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356; Match(PLUS);
				State = 357; unaryExpression();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358; Match(MINUS);
				State = 359; unaryExpression();
				}
				break;
			case BANG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 360; Match(BANG);
				State = 361; unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionStartContext pe;
		public PrimaryExpressionStartContext primaryExpressionStart() {
			return GetRuleContext<PrimaryExpressionStartContext>(0);
		}
		public BracketExpressionContext[] bracketExpression() {
			return GetRuleContexts<BracketExpressionContext>();
		}
		public BracketExpressionContext bracketExpression(int i) {
			return GetRuleContext<BracketExpressionContext>(i);
		}
		public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public MethodInvocationContext[] methodInvocation() {
			return GetRuleContexts<MethodInvocationContext>();
		}
		public MethodInvocationContext methodInvocation(int i) {
			return GetRuleContext<MethodInvocationContext>(i);
		}
		public ITerminalNode[] OP_INC() { return GetTokens(TypescriptParser.OP_INC); }
		public ITerminalNode OP_INC(int i) {
			return GetToken(TypescriptParser.OP_INC, i);
		}
		public ITerminalNode[] OP_DEC() { return GetTokens(TypescriptParser.OP_DEC); }
		public ITerminalNode OP_DEC(int i) {
			return GetToken(TypescriptParser.OP_DEC, i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_primaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; _localctx.pe = primaryExpressionStart();
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 365; bracketExpression();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OPEN_PARENS - 65)) | (1L << (DOT - 65)) | (1L << (OP_INC - 65)) | (1L << (OP_DEC - 65)))) != 0)) {
				{
				{
				State = 375;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 371; memberAccess();
					}
					break;
				case OPEN_PARENS:
					{
					State = 372; methodInvocation();
					}
					break;
				case OP_INC:
					{
					State = 373; Match(OP_INC);
					}
					break;
				case OP_DEC:
					{
					State = 374; Match(OP_DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					State = 377; bracketExpression();
					}
					}
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeMethodInvocationStatementContext : ParserRuleContext {
		public IdentifierContext pe;
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NativeMethodInvocationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeMethodInvocationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNativeMethodInvocationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNativeMethodInvocationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeMethodInvocationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeMethodInvocationStatementContext nativeMethodInvocationStatement() {
		NativeMethodInvocationStatementContext _localctx = new NativeMethodInvocationStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_nativeMethodInvocationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; _localctx.pe = identifier();
			State = 389; memberAccess();
			State = 390; methodInvocation();
			State = 391; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionStartContext : ParserRuleContext {
		public PrimaryExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpressionStart; } }
	 
		public PrimaryExpressionStartContext() { }
		public virtual void CopyFrom(PrimaryExpressionStartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisReferenceExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode THIS() { return GetToken(TypescriptParser.THIS, 0); }
		public ThisReferenceExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : PrimaryExpressionStartContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public SimpleNameExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayCreationExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionStartContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : PrimaryExpressionStartContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationContext : PrimaryExpressionStartContext {
		public ITerminalNode NEW() { return GetToken(TypescriptParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ObjectCreationExpressionContext objectCreationExpression() {
			return GetRuleContext<ObjectCreationExpressionContext>(0);
		}
		public ObjectCreationContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionStartContext primaryExpressionStart() {
		PrimaryExpressionStartContext _localctx = new PrimaryExpressionStartContext(Context, State);
		EnterRule(_localctx, 56, RULE_primaryExpressionStart);
		int _la;
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case REGULAR_STRING:
			case SINGLE_QUOTE_STRING_LITERAL:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 393; literal();
				}
				break;
			case GET:
			case LET:
			case SET:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; identifier();
				State = 396;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 395; typeArgumentList();
					}
					break;
				}
				}
				break;
			case OPEN_PARENS:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 398; Match(OPEN_PARENS);
				State = 399; expression();
				State = 400; Match(CLOSE_PARENS);
				}
				break;
			case THIS:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 402; Match(THIS);
				}
				break;
			case NEW:
				_localctx = new ObjectCreationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 403; Match(NEW);
				State = 404; type();
				State = 405; objectCreationExpression();
				}
				break;
			case OPEN_BRACKET:
				_localctx = new ArrayCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 407; Match(OPEN_BRACKET);
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (SINGLE_QUOTE_STRING_LITERAL - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)))) != 0)) {
					{
					State = 408; expressionList();
					}
				}

				State = 411; Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; expression();
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 415; Match(COMMA);
				State = 416; expression();
				}
				}
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TypescriptParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 60, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(DOT);
			State = 423; identifier();
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 424; typeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public BracketExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketExpressionContext bracketExpression() {
		BracketExpressionContext _localctx = new BracketExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_bracketExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(OPEN_BRACKET);
			State = 428; expression();
			State = 429; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public AnonymousFunctionBodyContext anonymousFunctionBody() {
			return GetRuleContext<AnonymousFunctionBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; anonymousFunctionSignature();
			State = 432; rightArrow();
			State = 433; anonymousFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
			return GetRuleContext<ExplicitAnonymousFunctionParameterListContext>(0);
		}
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 66, RULE_anonymousFunctionSignature);
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 435; Match(OPEN_PARENS);
				State = 436; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437; Match(OPEN_PARENS);
				State = 438; explicitAnonymousFunctionParameterList();
				State = 439; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
		ExplicitAnonymousFunctionParameterListContext _localctx = new ExplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 68, RULE_explicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; explicitAnonymousFunctionParameter();
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 444; Match(COMMA);
				State = 445; explicitAnonymousFunctionParameter();
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; identifier();
			State = 452; Match(COLON);
			State = 453; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ImplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitAnonymousFunctionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitAnonymousFunctionParameterListContext implicitAnonymousFunctionParameterList() {
		ImplicitAnonymousFunctionParameterListContext _localctx = new ImplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 72, RULE_implicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; identifier();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 456; Match(COMMA);
				State = 457; identifier();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AnonymousFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionBodyContext anonymousFunctionBody() {
		AnonymousFunctionBodyContext _localctx = new AnonymousFunctionBodyContext(Context, State);
		EnterRule(_localctx, 74, RULE_anonymousFunctionBody);
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case REGULAR_STRING:
			case SINGLE_QUOTE_STRING_LITERAL:
			case OPEN_BRACKET:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmbeddedContext : StatementContext {
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public EmbeddedContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbedded(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbedded(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement);
		try {
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 467; variableDeclaration();
				State = 468; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new EmbeddedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 470; embeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext embeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_embeddedStatement);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473; block();
				}
				break;
			case BREAK:
			case CONTINUE:
			case FALSE:
			case FOR:
			case GET:
			case IF:
			case LET:
			case NEW:
			case NULL:
			case RETURN:
			case SET:
			case SWITCH:
			case THIS:
			case TRUE:
			case VAR:
			case WHILE:
			case NUMBER:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case REGULAR_STRING:
			case SINGLE_QUOTE_STRING_LITERAL:
			case OPEN_BRACKET:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case BANG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474; simpleEmbeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleEmbeddedStatementContext : ParserRuleContext {
		public SimpleEmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleEmbeddedStatement; } }
	 
		public SimpleEmbeddedStatementContext() { }
		public virtual void CopyFrom(SimpleEmbeddedStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode WHILE() { return GetToken(TypescriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public WhileStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public EmptyStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOR() { return GetToken(TypescriptParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OF() { return GetToken(TypescriptParser.OF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForeachStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOR() { return GetToken(TypescriptParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(TypescriptParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(TypescriptParser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForInitializerContext forInitializer() {
			return GetRuleContext<ForInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIteratorContext forIterator() {
			return GetRuleContext<ForIteratorContext>(0);
		}
		public ForStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode BREAK() { return GetToken(TypescriptParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BreakStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : SimpleEmbeddedStatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode CONTINUE() { return GetToken(TypescriptParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ContinueStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode IF() { return GetToken(TypescriptParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext[] embeddedStatement() {
			return GetRuleContexts<EmbeddedStatementContext>();
		}
		public EmbeddedStatementContext embeddedStatement(int i) {
			return GetRuleContext<EmbeddedStatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TypescriptParser.ELSE, 0); }
		public IfStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode RETURN() { return GetToken(TypescriptParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SWITCH() { return GetToken(TypescriptParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public SwitchSectionContext[] switchSection() {
			return GetRuleContexts<SwitchSectionContext>();
		}
		public SwitchSectionContext switchSection(int i) {
			return GetRuleContext<SwitchSectionContext>(i);
		}
		public SwitchStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
		SimpleEmbeddedStatementContext _localctx = new SimpleEmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_simpleEmbeddedStatement);
		int _la;
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 478; expression();
				State = 479; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 481; Match(IF);
				State = 482; Match(OPEN_PARENS);
				State = 483; expression();
				State = 484; Match(CLOSE_PARENS);
				State = 485; embeddedStatement();
				State = 488;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 486; Match(ELSE);
					State = 487; embeddedStatement();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 490; Match(SWITCH);
				State = 491; Match(OPEN_PARENS);
				State = 492; expression();
				State = 493; Match(CLOSE_PARENS);
				State = 494; Match(OPEN_BRACE);
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 495; switchSection();
					}
					}
					State = 500;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 501; Match(CLOSE_BRACE);
				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 503; Match(WHILE);
				State = 504; Match(OPEN_PARENS);
				State = 505; expression();
				State = 506; Match(CLOSE_PARENS);
				State = 507; embeddedStatement();
				}
				break;
			case 6:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 509; Match(FOR);
				State = 510; Match(OPEN_PARENS);
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << FALSE) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << SET) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << REGULAR_STRING) | (1L << SINGLE_QUOTE_STRING_LITERAL) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)))) != 0)) {
					{
					State = 511; forInitializer();
					}
				}

				State = 514; Match(SEMICOLON);
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (SINGLE_QUOTE_STRING_LITERAL - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)))) != 0)) {
					{
					State = 515; expression();
					}
				}

				State = 518; Match(SEMICOLON);
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (SINGLE_QUOTE_STRING_LITERAL - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)))) != 0)) {
					{
					State = 519; forIterator();
					}
				}

				State = 522; Match(CLOSE_PARENS);
				State = 523; embeddedStatement();
				}
				break;
			case 7:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 524; Match(FOR);
				State = 525; Match(OPEN_PARENS);
				State = 526; variableType();
				State = 527; identifier();
				State = 528; Match(OF);
				State = 529; expression();
				State = 530; Match(CLOSE_PARENS);
				State = 531; embeddedStatement();
				}
				break;
			case 8:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 533; Match(BREAK);
				State = 534; Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 535; Match(CONTINUE);
				State = 536; Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 537; Match(RETURN);
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (SINGLE_QUOTE_STRING_LITERAL - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)))) != 0)) {
					{
					State = 538; expression();
					}
				}

				State = 541; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 82, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(OPEN_BRACE);
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << FALSE) | (1L << FOR) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << REGULAR_STRING) | (1L << SINGLE_QUOTE_STRING_LITERAL) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OPEN_PARENS - 65)) | (1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)))) != 0)) {
				{
				State = 545; statementList();
				}
			}

			State = 548; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; variableType();
			State = 551; variableDeclarator();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 552; Match(COMMA);
				State = 553; variableDeclarator();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public ITerminalNode CONST() { return GetToken(TypescriptParser.CONST, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_variableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << LET) | (1L << VAR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 88, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; identifier();
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 562; Match(COLON);
				State = 563; type();
				}
			}

			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 566; Match(ASSIGNMENT);
				State = 567; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchSectionContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchSectionContext switchSection() {
		SwitchSectionContext _localctx = new SwitchSectionContext(Context, State);
		EnterRule(_localctx, 90, RULE_switchSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 570; switchLabel();
				}
				}
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 575; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TypescriptParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TypescriptParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 92, RULE_switchLabel);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577; Match(CASE);
				State = 578; expression();
				State = 579; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581; Match(DEFAULT);
				State = 582; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 94, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 585; statement();
				}
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << FALSE) | (1L << FOR) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << WHILE) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << REGULAR_STRING) | (1L << SINGLE_QUOTE_STRING_LITERAL) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OPEN_PARENS - 65)) | (1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (BANG - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ForInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerContext forInitializer() {
		ForInitializerContext _localctx = new ForInitializerContext(Context, State);
		EnterRule(_localctx, 96, RULE_forInitializer);
		int _la;
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 591; expression();
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 592; Match(COMMA);
					State = 593; expression();
					}
					}
					State = 598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ForIteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForIterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForIterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorContext forIterator() {
		ForIteratorContext _localctx = new ForIteratorContext(Context, State);
		EnterRule(_localctx, 98, RULE_forIterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601; expression();
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 602; Match(COMMA);
				State = 603; expression();
				}
				}
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(TypescriptParser.MODULE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ITerminalNode EXPORT() { return GetToken(TypescriptParser.EXPORT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPORT) {
				{
				State = 609; Match(EXPORT);
				}
			}

			State = 612; Match(MODULE);
			State = 613; identifier();
			State = 614; moduleBody();
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 615; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public ModuleMemberDeclarationsContext moduleMemberDeclarations() {
			return GetRuleContext<ModuleMemberDeclarationsContext>(0);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(Context, State);
		EnterRule(_localctx, 102, RULE_moduleBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(OPEN_BRACE);
			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << CONST) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << MODULE) | (1L << FUNCTION) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 619; moduleMemberDeclarations();
				}
			}

			State = 622; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleMemberDeclarationsContext : ParserRuleContext {
		public ModuleMemberDeclarationContext[] moduleMemberDeclaration() {
			return GetRuleContexts<ModuleMemberDeclarationContext>();
		}
		public ModuleMemberDeclarationContext moduleMemberDeclaration(int i) {
			return GetRuleContext<ModuleMemberDeclarationContext>(i);
		}
		public ModuleMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleMemberDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleMemberDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleMemberDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleMemberDeclarationsContext moduleMemberDeclarations() {
		ModuleMemberDeclarationsContext _localctx = new ModuleMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 104, RULE_moduleMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 624; moduleMemberDeclaration();
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << CONST) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << MODULE) | (1L << FUNCTION) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleMemberDeclarationContext : ParserRuleContext {
		public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public NativeMethodInvocationStatementContext nativeMethodInvocationStatement() {
			return GetRuleContext<NativeMethodInvocationStatementContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ModuleMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterModuleMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitModuleMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleMemberDeclarationContext moduleMemberDeclaration() {
		ModuleMemberDeclarationContext _localctx = new ModuleMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 106, RULE_moduleMemberDeclaration);
		try {
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 629; moduleDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 630; typeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 631; variableDeclaration();
				State = 632; Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 634; nativeMethodInvocationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 635; functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(TypescriptParser.FUNCTION, 0); }
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ITerminalNode EXPORT() { return GetToken(TypescriptParser.EXPORT, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPORT) {
				{
				State = 638; Match(EXPORT);
				}
			}

			State = 641; Match(FUNCTION);
			State = 642; methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0)) {
				{
				State = 644; allMemberModifiers();
				}
			}

			State = 649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 647; classDefinition();
				}
				break;
			case ENUM:
				{
				State = 648; enumDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(LT);
			State = 652; typeParameter();
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 653; Match(COMMA);
				State = 654; typeParameter();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 660; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 114, RULE_typeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public ClassMemberDeclarationsContext classMemberDeclarations() {
			return GetRuleContext<ClassMemberDeclarationsContext>(0);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 116, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(OPEN_BRACE);
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << CONSTRUCTOR) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 665; classMemberDeclarations();
				}
			}

			State = 668; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationsContext : ParserRuleContext {
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationsContext classMemberDeclarations() {
		ClassMemberDeclarationsContext _localctx = new ClassMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 118, RULE_classMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 670; classMemberDeclaration();
				}
				}
				State = 673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << NUMBER) | (1L << CONSTRUCTOR) | (1L << EXPORT) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public CommonMemberDeclarationContext commonMemberDeclaration() {
			return GetRuleContext<CommonMemberDeclarationContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_classMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0)) {
				{
				State = 675; allMemberModifiers();
				}
			}

			State = 678; commonMemberDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifiersContext : ParserRuleContext {
		public AllMemberModifierContext[] allMemberModifier() {
			return GetRuleContexts<AllMemberModifierContext>();
		}
		public AllMemberModifierContext allMemberModifier(int i) {
			return GetRuleContext<AllMemberModifierContext>(i);
		}
		public AllMemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllMemberModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifiersContext allMemberModifiers() {
		AllMemberModifiersContext _localctx = new AllMemberModifiersContext(Context, State);
		EnterRule(_localctx, 122, RULE_allMemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 680; allMemberModifier();
				}
				}
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(TypescriptParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TypescriptParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(TypescriptParser.READONLY, 0); }
		public ITerminalNode STATIC() { return GetToken(TypescriptParser.STATIC, 0); }
		public ITerminalNode EXPORT() { return GetToken(TypescriptParser.EXPORT, 0); }
		public AllMemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllMemberModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifierContext allMemberModifier() {
		AllMemberModifierContext _localctx = new AllMemberModifierContext(Context, State);
		EnterRule(_localctx, 124, RULE_allMemberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << EXPORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonMemberDeclarationContext : ParserRuleContext {
		public TypedMemberDeclarationContext typedMemberDeclaration() {
			return GetRuleContext<TypedMemberDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public CommonMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCommonMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCommonMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonMemberDeclarationContext commonMemberDeclaration() {
		CommonMemberDeclarationContext _localctx = new CommonMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_commonMemberDeclaration);
		try {
			State = 689;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
			case LET:
			case SET:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 687; typedMemberDeclaration();
				}
				break;
			case CONSTRUCTOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 688; constructorDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedMemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GetterDeclarationContext getterDeclaration() {
			return GetRuleContext<GetterDeclarationContext>(0);
		}
		public SetterDeclarationContext setterDeclaration() {
			return GetRuleContext<SetterDeclarationContext>(0);
		}
		public ClassFieldContext classField() {
			return GetRuleContext<ClassFieldContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public TypedMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTypedMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTypedMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedMemberDeclarationContext typedMemberDeclaration() {
		TypedMemberDeclarationContext _localctx = new TypedMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_typedMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 691; methodDeclaration();
				}
				break;
			case 2:
				{
				State = 692; getterDeclaration();
				}
				break;
			case 3:
				{
				State = 693; setterDeclaration();
				}
				break;
			case 4:
				{
				State = 694; classField();
				State = 695; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassFieldContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public ClassFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassFieldContext classField() {
		ClassFieldContext _localctx = new ClassFieldContext(Context, State);
		EnterRule(_localctx, 130, RULE_classField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; variableDeclarator();
			State = 704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 700; Match(COMMA);
				State = 701; variableDeclarator();
				}
				}
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeListContext : ParserRuleContext {
		public ReturnTypeContext[] returnType() {
			return GetRuleContexts<ReturnTypeContext>();
		}
		public ReturnTypeContext returnType(int i) {
			return GetRuleContext<ReturnTypeContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(TypescriptParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(TypescriptParser.BITWISE_OR, i);
		}
		public ReturnTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeListContext returnTypeList() {
		ReturnTypeListContext _localctx = new ReturnTypeListContext(Context, State);
		EnterRule(_localctx, 132, RULE_returnTypeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 707; returnType();
			State = 712;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 708; Match(BITWISE_OR);
					State = 709; returnType();
					}
					} 
				}
				State = 714;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(TypescriptParser.VOID, 0); }
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 134, RULE_returnType);
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case GET:
			case LET:
			case SET:
			case STRING:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 715; type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 716; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 136, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FixedParametersContext fixedParameters() {
			return GetRuleContext<FixedParametersContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 138, RULE_formalParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721; fixedParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParametersContext : ParserRuleContext {
		public FixedParameterContext[] fixedParameter() {
			return GetRuleContexts<FixedParameterContext>();
		}
		public FixedParameterContext fixedParameter(int i) {
			return GetRuleContext<FixedParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public FixedParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixedParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixedParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedParametersContext fixedParameters() {
		FixedParametersContext _localctx = new FixedParametersContext(Context, State);
		EnterRule(_localctx, 140, RULE_fixedParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; fixedParameter();
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 724; Match(COMMA);
				State = 725; fixedParameter();
				}
				}
				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParameterContext : ParserRuleContext {
		public ArgDeclarationContext argDeclaration() {
			return GetRuleContext<ArgDeclarationContext>(0);
		}
		public FixedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedParameterContext fixedParameter() {
		FixedParameterContext _localctx = new FixedParameterContext(Context, State);
		EnterRule(_localctx, 142, RULE_fixedParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; argDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode SUPER() { return GetToken(TypescriptParser.SUPER, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 144, RULE_constructorInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(COLON);
			State = 734; Match(SUPER);
			State = 735; Match(OPEN_PARENS);
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (SINGLE_QUOTE_STRING_LITERAL - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)))) != 0)) {
				{
				State = 736; argumentList();
				}
			}

			State = 739; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 146, RULE_body);
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 741; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 742; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public VariantTypeParameterContext[] variantTypeParameter() {
			return GetRuleContexts<VariantTypeParameterContext>();
		}
		public VariantTypeParameterContext variantTypeParameter(int i) {
			return GetRuleContext<VariantTypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public VariantTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterListContext variantTypeParameterList() {
		VariantTypeParameterListContext _localctx = new VariantTypeParameterListContext(Context, State);
		EnterRule(_localctx, 148, RULE_variantTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(LT);
			State = 746; variantTypeParameter();
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 747; Match(COMMA);
				State = 748; variantTypeParameter();
				}
				}
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 754; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariantTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterContext variantTypeParameter() {
		VariantTypeParameterContext _localctx = new VariantTypeParameterContext(Context, State);
		EnterRule(_localctx, 150, RULE_variantTypeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 152, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(OPEN_BRACE);
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 759; enumMemberDeclaration();
				State = 764;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 760; Match(COMMA);
						State = 761; enumMemberDeclaration();
						}
						} 
					}
					State = 766;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
				}
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 767; Match(COMMA);
					}
				}

				}
			}

			State = 772; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 154, RULE_enumMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774; identifier();
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 775; Match(ASSIGNMENT);
				State = 776; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightArrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public RightArrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightArrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightArrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightArrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightArrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightArrowContext rightArrow() {
		RightArrowContext _localctx = new RightArrowContext(Context, State);
		EnterRule(_localctx, 156, RULE_rightArrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; _localctx.first = Match(ASSIGNMENT);
			State = 780; _localctx.second = Match(GT);
			State = 781;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 158, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; _localctx.first = Match(GT);
			State = 784; _localctx.second = Match(GT);
			State = 785;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(TypescriptParser.OP_GE, 0); }
		public RightShiftAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRightShiftAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRightShiftAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShiftAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftAssignmentContext rightShiftAssignment() {
		RightShiftAssignmentContext _localctx = new RightShiftAssignmentContext(Context, State);
		EnterRule(_localctx, 160, RULE_rightShiftAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; _localctx.first = Match(GT);
			State = 788; _localctx.second = Match(OP_GE);
			State = 789;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(TypescriptParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TypescriptParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(TypescriptParser.REAL_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(TypescriptParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 162, RULE_literal);
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 791; booleanLiteral();
				}
				break;
			case REGULAR_STRING:
			case SINGLE_QUOTE_STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 792; stringLiteral();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 793; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 794; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 795; Match(REAL_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 796; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(TypescriptParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(TypescriptParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 164, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(TypescriptParser.REGULAR_STRING, 0); }
		public ITerminalNode SINGLE_QUOTE_STRING_LITERAL() { return GetToken(TypescriptParser.SINGLE_QUOTE_STRING_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			_la = TokenStream.LA(1);
			if ( !(_la==REGULAR_STRING || _la==SINGLE_QUOTE_STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(TypescriptParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(TypescriptParser.EXTENDS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 168, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803; Match(CLASS);
			State = 804; identifier();
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 805; typeParameterList();
				}
			}

			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 808; Match(EXTENDS);
				State = 809; type();
				}
			}

			State = 812; classBody();
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 813; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(TypescriptParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 170, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; Match(ENUM);
			State = 817; identifier();
			State = 818; enumBody();
			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 819; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(TypescriptParser.CONSTRUCTOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(CONSTRUCTOR);
			State = 823; Match(OPEN_PARENS);
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 824; formalParameterList();
				}
			}

			State = 827; Match(CLOSE_PARENS);
			State = 828; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ReturnTypeListContext returnTypeList() {
			return GetRuleContext<ReturnTypeListContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 174, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; identifier();
			State = 832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 831; typeParameterList();
				}
			}

			State = 834; Match(OPEN_PARENS);
			State = 836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 835; formalParameterList();
				}
			}

			State = 838; Match(CLOSE_PARENS);
			{
			State = 839; Match(COLON);
			State = 840; returnTypeList();
			}
			State = 842; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterDeclarationContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ReturnTypeListContext returnTypeList() {
			return GetRuleContext<ReturnTypeListContext>(0);
		}
		public GetterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterGetterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitGetterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterDeclarationContext getterDeclaration() {
		GetterDeclarationContext _localctx = new GetterDeclarationContext(Context, State);
		EnterRule(_localctx, 176, RULE_getterDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(GET);
			State = 845; identifier();
			State = 846; Match(OPEN_PARENS);
			State = 847; Match(CLOSE_PARENS);
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 848; Match(COLON);
				State = 849; returnTypeList();
				}
			}

			State = 852; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterDeclarationContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ReturnTypeListContext returnTypeList() {
			return GetRuleContext<ReturnTypeListContext>(0);
		}
		public SetterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSetterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSetterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterDeclarationContext setterDeclaration() {
		SetterDeclarationContext _localctx = new SetterDeclarationContext(Context, State);
		EnterRule(_localctx, 178, RULE_setterDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(SET);
			State = 855; identifier();
			State = 856; Match(OPEN_PARENS);
			State = 857; formalParameterList();
			State = 858; Match(CLOSE_PARENS);
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 859; Match(COLON);
				State = 860; returnTypeList();
				}
			}

			State = 863; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDeclarationContext argDeclaration() {
		ArgDeclarationContext _localctx = new ArgDeclarationContext(Context, State);
		EnterRule(_localctx, 180, RULE_argDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865; identifier();
			State = 866; Match(COLON);
			State = 867; typeList();
			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 868; Match(ASSIGNMENT);
				State = 869; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 182, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872; Match(OPEN_PARENS);
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (SINGLE_QUOTE_STRING_LITERAL - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)))) != 0)) {
				{
				State = 873; argumentList();
				}
			}

			State = 876; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationExpressionContext objectCreationExpression() {
		ObjectCreationExpressionContext _localctx = new ObjectCreationExpressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_objectCreationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878; Match(OPEN_PARENS);
			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (NUMBER - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (SINGLE_QUOTE_STRING_LITERAL - 17)) | (1L << (OPEN_BRACKET - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)))) != 0)) {
				{
				State = 879; argumentList();
				}
			}

			State = 882; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TypescriptParser.IDENTIFIER, 0); }
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public ITerminalNode NUMBER() { return GetToken(TypescriptParser.NUMBER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 186, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 78: return rightArrow_sempred((RightArrowContext)_localctx, predIndex);
		case 79: return rightShift_sempred((RightShiftContext)_localctx, predIndex);
		case 80: return rightShiftAssignment_sempred((RightShiftAssignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rightArrow_sempred(RightArrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShift_sempred(RightShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShiftAssignment_sempred(RightShiftAssignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '{', '\x379', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x3', '\x2', '\a', '\x2', '\xC0', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\xC3', '\v', '\x2', '\x3', '\x3', '\x5', '\x3', 
		'\xC6', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '\xC9', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\xCC', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\xCF', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\xDA', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xDD', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xE2', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xE5', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xEC', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xF1', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xF4', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xF9', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xFF', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x105', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\x108', '\v', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x10E', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\x117', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\x11A', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x11F', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x125', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x129', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x134', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x137', '\v', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x13C', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x13F', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\x144', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\x147', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x14C', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\a', '\x18', '\x151', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x154', 
		'\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x159', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x15C', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x161', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\x164', '\v', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x16D', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x171', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x174', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x17A', '\n', '\x1C', '\x3', '\x1C', '\a', '\x1C', 
		'\x17D', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x180', '\v', '\x1C', 
		'\a', '\x1C', '\x182', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x185', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x18F', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x19C', '\n', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x19F', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\a', '\x1F', '\x1A4', '\n', '\x1F', '\f', '\x1F', 
		'\xE', '\x1F', '\x1A7', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x1AC', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1BC', 
		'\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x1C1', '\n', 
		'$', '\f', '$', '\xE', '$', '\x1C4', '\v', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', 
		'\x1CD', '\n', '&', '\f', '&', '\xE', '&', '\x1D0', '\v', '&', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x1D4', '\n', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1DA', '\n', '(', '\x3', ')', 
		'\x3', ')', '\x5', ')', '\x1DE', '\n', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x1EB', '\n', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', 
		'\x1F3', '\n', '*', '\f', '*', '\xE', '*', '\x1F6', '\v', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x203', 
		'\n', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x207', '\n', '*', '\x3', 
		'*', '\x3', '*', '\x5', '*', '\x20B', '\n', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x21E', '\n', '*', '\x3', 
		'*', '\x5', '*', '\x221', '\n', '*', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x225', '\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\a', ',', '\x22D', '\n', ',', '\f', ',', '\xE', ',', 
		'\x230', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x237', '\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', 
		'\x23B', '\n', '.', '\x3', '/', '\x6', '/', '\x23E', '\n', '/', '\r', 
		'/', '\xE', '/', '\x23F', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x24A', '\n', '\x30', '\x3', '\x31', '\x6', '\x31', '\x24D', 
		'\n', '\x31', '\r', '\x31', '\xE', '\x31', '\x24E', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x255', '\n', '\x32', 
		'\f', '\x32', '\xE', '\x32', '\x258', '\v', '\x32', '\x5', '\x32', '\x25A', 
		'\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', 
		'\x25F', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x262', '\v', '\x33', 
		'\x3', '\x34', '\x5', '\x34', '\x265', '\n', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x26B', '\n', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x26F', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x36', '\x6', '\x36', '\x274', '\n', '\x36', 
		'\r', '\x36', '\xE', '\x36', '\x275', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', 
		'\x37', '\x27F', '\n', '\x37', '\x3', '\x38', '\x5', '\x38', '\x282', 
		'\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', 
		'\x5', '\x39', '\x288', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x28C', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\a', ':', '\x292', '\n', ':', '\f', ':', '\xE', ':', '\x295', '\v', 
		':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x5', '<', '\x29D', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '=', 
		'\x6', '=', '\x2A2', '\n', '=', '\r', '=', '\xE', '=', '\x2A3', '\x3', 
		'>', '\x5', '>', '\x2A7', '\n', '>', '\x3', '>', '\x3', '>', '\x3', '?', 
		'\x6', '?', '\x2AC', '\n', '?', '\r', '?', '\xE', '?', '\x2AD', '\x3', 
		'@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x2B4', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x2BC', '\n', '\x42', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\a', '\x43', '\x2C1', '\n', '\x43', 
		'\f', '\x43', '\xE', '\x43', '\x2C4', '\v', '\x43', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\a', '\x44', '\x2C9', '\n', '\x44', '\f', '\x44', 
		'\xE', '\x44', '\x2CC', '\v', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x2D0', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\a', 'H', '\x2D9', '\n', 
		'H', '\f', 'H', '\xE', 'H', '\x2DC', '\v', 'H', '\x3', 'I', '\x3', 'I', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x2E4', '\n', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x2EA', 
		'\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\a', 'L', 
		'\x2F0', '\n', 'L', '\f', 'L', '\xE', 'L', '\x2F3', '\v', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\a', 'N', '\x2FD', '\n', 'N', '\f', 'N', '\xE', 'N', 
		'\x300', '\v', 'N', '\x3', 'N', '\x5', 'N', '\x303', '\n', 'N', '\x5', 
		'N', '\x305', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x5', 'O', '\x30C', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x320', '\n', 'S', 
		'\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x5', 'V', '\x329', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x5', 
		'V', '\x32D', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x331', 
		'\n', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', 
		'\x337', '\n', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x33C', 
		'\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', 
		'\x5', 'Y', '\x343', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x347', 
		'\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x5', 'Z', '\x355', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x5', '[', '\x360', '\n', '[', '\x3', '[', '\x3', '[', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x369', 
		'\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x36D', '\n', ']', '\x3', 
		']', '\x3', ']', '\x3', '^', '\x3', '^', '\x5', '^', '\x373', '\n', '^', 
		'\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x2', '\x2', 
		'`', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\x2', 
		'\r', '\x5', '\x2', '\b', '\b', '%', '%', '.', '.', '\x4', '\x2', 'S', 
		'S', '\x62', '\x66', '\x3', '\x2', '^', '_', '\x4', '\x2', 'T', 'U', '`', 
		'\x61', '\x3', '\x2', 'I', 'J', '\x3', '\x2', 'K', 'M', '\x5', '\x2', 
		'\r', '\r', '\x19', '\x19', '+', '+', '\x6', '\x2', '\x1E', '\x1E', ' ', 
		'!', '$', '$', '\x35', '\x35', '\x4', '\x2', '\x13', '\x13', ')', ')', 
		'\x3', '\x2', '=', '>', '\b', '\x2', '\x17', '\x17', '\x19', '\x19', '#', 
		'#', '+', '+', '.', '.', '\x38', '\x38', '\x2', '\x393', '\x2', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\xD2', '\x3', '\x2', '\x2', '\x2', '\b', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xDE', '\x3', '\x2', '\x2', '\x2', '\f', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x12', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x16', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x113', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x11E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x124', '\x3', '\x2', '\x2', '\x2', ' ', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x12E', '\x3', '\x2', '\x2', '\x2', '&', '\x130', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x138', '\x3', '\x2', '\x2', '\x2', '*', '\x140', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x30', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x34', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x186', '\x3', '\x2', '\x2', '\x2', ':', '\x19E', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1A0', '\x3', '\x2', '\x2', '\x2', '>', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1BB', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1BD', '\x3', '\x2', '\x2', '\x2', 'H', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1D3', '\x3', '\x2', '\x2', '\x2', 'N', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1DD', '\x3', '\x2', '\x2', '\x2', 'R', '\x220', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x228', '\x3', '\x2', '\x2', '\x2', 'X', '\x231', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x233', '\x3', '\x2', '\x2', '\x2', '\\', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x62', '\x259', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x66', '\x264', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x273', '\x3', '\x2', '\x2', '\x2', 'l', '\x27E', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x281', '\x3', '\x2', '\x2', '\x2', 'p', '\x287', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		't', '\x298', '\x3', '\x2', '\x2', '\x2', 'v', '\x29A', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x2A1', '\x3', '\x2', '\x2', '\x2', 'z', '\x2A6', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x2AB', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2B3', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x84', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x2D1', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x2D5', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x2DD', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x94', '\x2E9', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x98', '\x2F6', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x2F8', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x308', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x30D', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x311', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x31F', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x321', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x323', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x325', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x332', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x338', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x340', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x34E', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x358', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x363', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x370', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x376', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xC0', '\x5', '\x4', '\x3', '\x2', '\xBF', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', '\a', '\x3', '\x2', '\x2', 
		'\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', 
		'\x5', '\x6', '\x4', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCF', '\x5', 'j', '\x36', '\x2', '\xCE', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x2', '\x2', '\x3', 
		'\xD1', '\x5', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x32', 
		'\x2', '\x2', '\xD3', '\xD4', '\x5', '\xA8', 'U', '\x2', '\xD4', '\xD5', 
		'\a', 'H', '\x2', '\x2', '\xD5', '\a', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xDB', '\x5', '\xBC', '_', '\x2', '\xD7', '\xD8', '\a', '\x45', '\x2', 
		'\x2', '\xD8', '\xDA', '\x5', '\xBC', '_', '\x2', '\xD9', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\t', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xE3', '\x5', '\f', '\a', '\x2', '\xDF', 
		'\xE0', '\a', 'O', '\x2', '\x2', '\xE0', '\xE2', '\x5', '\f', '\a', '\x2', 
		'\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x43', 
		'\x2', '\x2', '\xE7', '\xE8', '\x5', '\xE', '\b', '\x2', '\xE8', '\xE9', 
		'\a', '\x44', '\x2', '\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xEC', '\x5', '\xE', '\b', '\x2', '\xEB', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xF2', '\x5', '\x10', '\t', '\x2', 
		'\xEE', '\xEF', '\a', '\x41', '\x2', '\x2', '\xEF', '\xF1', '\a', '\x42', 
		'\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF9', 
		'\x5', '\x12', '\n', '\x2', '\xF6', '\xF9', '\x5', '\x14', '\v', '\x2', 
		'\xF7', '\xF9', '\x5', '\x18', '\r', '\x2', '\xF8', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFB', '\t', '\x2', '\x2', '\x2', '\xFB', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xFE', '\x5', '\b', '\x5', '\x2', '\xFD', '\xFF', 
		'\x5', '\x16', '\f', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\x101', '\a', 'T', '\x2', '\x2', '\x101', '\x106', 
		'\x5', '\n', '\x6', '\x2', '\x102', '\x103', '\a', '\x46', '\x2', '\x2', 
		'\x103', '\x105', '\x5', '\n', '\x6', '\x2', '\x104', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x108', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x109', '\x3', '\x2', '\x2', '\x2', '\x108', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', 'U', '\x2', '\x2', 
		'\x10A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\a', '\x43', 
		'\x2', '\x2', '\x10C', '\x10E', '\x5', '\x8C', 'G', '\x2', '\x10D', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', 
		'\x44', '\x2', '\x2', '\x110', '\x111', '\x5', '\x9E', 'P', '\x2', '\x111', 
		'\x112', '\x5', '\x86', '\x44', '\x2', '\x112', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x113', '\x118', '\x5', '\x1C', '\xF', '\x2', '\x114', 
		'\x115', '\a', '\x46', '\x2', '\x2', '\x115', '\x117', '\x5', '\x1C', 
		'\xF', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x117', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x5', '\xBC', '_', '\x2', '\x11C', '\x11D', '\a', 'G', '\x2', 
		'\x2', '\x11D', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x120', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x5', 
		'\x1E', '\x10', '\x2', '\x121', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x125', '\x5', '\"', '\x12', '\x2', '\x123', '\x125', '\x5', ' ', '\x11', 
		'\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x129', '\x5', '\x42', '\"', '\x2', '\x127', '\x129', '\x5', 
		'&', '\x14', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12B', '\x5', '\x34', '\x1B', '\x2', '\x12B', '\x12C', 
		'\x5', '$', '\x13', '\x2', '\x12C', '\x12D', '\x5', '\x1E', '\x10', '\x2', 
		'\x12D', '#', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\t', '\x3', 
		'\x2', '\x2', '\x12F', '%', '\x3', '\x2', '\x2', '\x2', '\x130', '\x135', 
		'\x5', '(', '\x15', '\x2', '\x131', '\x132', '\a', '\\', '\x2', '\x2', 
		'\x132', '\x134', '\x5', '(', '\x15', '\x2', '\x133', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x137', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\'', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x13D', '\x5', '*', '\x16', '\x2', '\x139', 
		'\x13A', '\a', '[', '\x2', '\x2', '\x13A', '\x13C', '\x5', '*', '\x16', 
		'\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x140', '\x145', 
		'\x5', ',', '\x17', '\x2', '\x141', '\x142', '\t', '\x4', '\x2', '\x2', 
		'\x142', '\x144', '\x5', ',', '\x17', '\x2', '\x143', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x147', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '+', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x14B', '\x5', '.', '\x18', '\x2', '\x149', 
		'\x14A', '\a', '\x36', '\x2', '\x2', '\x14A', '\x14C', '\x5', '\xE', '\b', 
		'\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x152', '\x5', '\x30', '\x19', '\x2', '\x14E', '\x14F', '\t', 
		'\x5', '\x2', '\x2', '\x14F', '\x151', '\x5', '\x30', '\x19', '\x2', '\x150', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x15A', '\x5', 
		'\x32', '\x1A', '\x2', '\x156', '\x157', '\t', '\x6', '\x2', '\x2', '\x157', 
		'\x159', '\x5', '\x32', '\x1A', '\x2', '\x158', '\x156', '\x3', '\x2', 
		'\x2', '\x2', '\x159', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x31', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x162', '\x5', '\x34', '\x1B', '\x2', '\x15E', 
		'\x15F', '\t', '\a', '\x2', '\x2', '\x15F', '\x161', '\x5', '\x34', '\x1B', 
		'\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x161', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x16D', '\x5', '\x36', '\x1C', '\x2', '\x166', '\x167', '\a', 'I', '\x2', 
		'\x2', '\x167', '\x16D', '\x5', '\x34', '\x1B', '\x2', '\x168', '\x169', 
		'\a', 'J', '\x2', '\x2', '\x169', '\x16D', '\x5', '\x34', '\x1B', '\x2', 
		'\x16A', '\x16B', '\a', 'Q', '\x2', '\x2', '\x16B', '\x16D', '\x5', '\x34', 
		'\x1B', '\x2', '\x16C', '\x165', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x172', '\x5', ':', '\x1E', '\x2', 
		'\x16F', '\x171', '\x5', '@', '!', '\x2', '\x170', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', '\x171', '\x174', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x183', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x175', '\x17A', '\x5', '>', ' ', '\x2', '\x176', 
		'\x17A', '\x5', '\xB8', ']', '\x2', '\x177', '\x17A', '\a', 'Y', '\x2', 
		'\x2', '\x178', '\x17A', '\a', 'Z', '\x2', '\x2', '\x179', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x176', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x179', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17D', 
		'\x5', '@', '!', '\x2', '\x17C', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x182', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x179', '\x3', '\x2', '\x2', '\x2', '\x182', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x187', '\x5', '\xBC', '_', '\x2', '\x187', '\x188', '\x5', '>', ' ', 
		'\x2', '\x188', '\x189', '\x5', '\xB8', ']', '\x2', '\x189', '\x18A', 
		'\a', 'H', '\x2', '\x2', '\x18A', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x19F', '\x5', '\xA4', 'S', '\x2', '\x18C', '\x18E', '\x5', 
		'\xBC', '_', '\x2', '\x18D', '\x18F', '\x5', '\x16', '\f', '\x2', '\x18E', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', 
		'\a', '\x43', '\x2', '\x2', '\x191', '\x192', '\x5', '\x1E', '\x10', '\x2', 
		'\x192', '\x193', '\a', '\x44', '\x2', '\x2', '\x193', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x19F', '\a', '\'', '\x2', '\x2', '\x195', 
		'\x196', '\a', '\x1A', '\x2', '\x2', '\x196', '\x197', '\x5', '\xE', '\b', 
		'\x2', '\x197', '\x198', '\x5', '\xBA', '^', '\x2', '\x198', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19B', '\a', '\x41', '\x2', '\x2', 
		'\x19A', '\x19C', '\x5', '<', '\x1F', '\x2', '\x19B', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19F', '\a', '\x42', '\x2', 
		'\x2', '\x19E', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x194', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		';', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A5', '\x5', '\x1E', '\x10', 
		'\x2', '\x1A1', '\x1A2', '\a', '\x46', '\x2', '\x2', '\x1A2', '\x1A4', 
		'\x5', '\x1E', '\x10', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A9', '\a', '\x45', '\x2', '\x2', '\x1A9', '\x1AB', 
		'\x5', '\xBC', '_', '\x2', '\x1AA', '\x1AC', '\x5', '\x16', '\f', '\x2', 
		'\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '?', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1AE', '\a', '\x41', '\x2', '\x2', '\x1AE', '\x1AF', '\x5', '\x1E', 
		'\x10', '\x2', '\x1AF', '\x1B0', '\a', '\x42', '\x2', '\x2', '\x1B0', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', '\x44', '#', 
		'\x2', '\x1B2', '\x1B3', '\x5', '\x9E', 'P', '\x2', '\x1B3', '\x1B4', 
		'\x5', 'L', '\'', '\x2', '\x1B4', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\a', '\x43', '\x2', '\x2', '\x1B6', '\x1BC', '\a', 
		'\x44', '\x2', '\x2', '\x1B7', '\x1B8', '\a', '\x43', '\x2', '\x2', '\x1B8', 
		'\x1B9', '\x5', '\x46', '$', '\x2', '\x1B9', '\x1BA', '\a', '\x44', '\x2', 
		'\x2', '\x1BA', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1C2', '\x5', 
		'H', '%', '\x2', '\x1BE', '\x1BF', '\a', '\x46', '\x2', '\x2', '\x1BF', 
		'\x1C1', '\x5', 'H', '%', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C0', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', 'G', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C2', '\x3', '\x2', 
		'\x2', '\x2', '\x1C5', '\x1C6', '\x5', '\xBC', '_', '\x2', '\x1C6', '\x1C7', 
		'\a', 'G', '\x2', '\x2', '\x1C7', '\x1C8', '\x5', '\xE', '\b', '\x2', 
		'\x1C8', 'I', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CE', '\x5', '\xBC', 
		'_', '\x2', '\x1CA', '\x1CB', '\a', '\x46', '\x2', '\x2', '\x1CB', '\x1CD', 
		'\x5', '\xBC', '_', '\x2', '\x1CC', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1D4', '\x5', '\x1E', '\x10', '\x2', '\x1D2', '\x1D4', 
		'\x5', 'T', '+', '\x2', '\x1D3', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D4', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5', '\x1D6', '\x5', 'V', ',', '\x2', '\x1D6', '\x1D7', 
		'\a', 'H', '\x2', '\x2', '\x1D7', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8', '\x1DA', '\x5', 'P', ')', '\x2', '\x1D9', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DA', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DE', '\x5', 'T', '+', '\x2', 
		'\x1DC', '\x1DE', '\x5', 'R', '*', '\x2', '\x1DD', '\x1DB', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DE', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x221', '\a', 'H', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\x5', '\x1E', '\x10', '\x2', '\x1E1', '\x1E2', '\a', 
		'H', '\x2', '\x2', '\x1E2', '\x221', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1E4', '\a', '\x18', '\x2', '\x2', '\x1E4', '\x1E5', '\a', '\x43', '\x2', 
		'\x2', '\x1E5', '\x1E6', '\x5', '\x1E', '\x10', '\x2', '\x1E6', '\x1E7', 
		'\a', '\x44', '\x2', '\x2', '\x1E7', '\x1EA', '\x5', 'P', ')', '\x2', 
		'\x1E8', '\x1E9', '\a', '\x11', '\x2', '\x2', '\x1E9', '\x1EB', '\x5', 
		'P', ')', '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x221', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\a', '&', '\x2', '\x2', '\x1ED', '\x1EE', '\a', 
		'\x43', '\x2', '\x2', '\x1EE', '\x1EF', '\x5', '\x1E', '\x10', '\x2', 
		'\x1EF', '\x1F0', '\a', '\x44', '\x2', '\x2', '\x1F0', '\x1F4', '\a', 
		'?', '\x2', '\x2', '\x1F1', '\x1F3', '\x5', '\\', '/', '\x2', '\x1F2', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F6', '\x3', '\x2', '\x2', 
		'\x2', '\x1F4', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', 
		'\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\a', 
		'@', '\x2', '\x2', '\x1F8', '\x221', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\a', '-', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x43', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\x5', '\x1E', '\x10', '\x2', '\x1FC', '\x1FD', 
		'\a', '\x44', '\x2', '\x2', '\x1FD', '\x1FE', '\x5', 'P', ')', '\x2', 
		'\x1FE', '\x221', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', '\a', 
		'\x15', '\x2', '\x2', '\x200', '\x202', '\a', '\x43', '\x2', '\x2', '\x201', 
		'\x203', '\x5', '\x62', '\x32', '\x2', '\x202', '\x201', '\x3', '\x2', 
		'\x2', '\x2', '\x202', '\x203', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '\x204', '\x206', '\a', 'H', '\x2', '\x2', 
		'\x205', '\x207', '\x5', '\x1E', '\x10', '\x2', '\x206', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20A', '\a', 'H', '\x2', 
		'\x2', '\x209', '\x20B', '\x5', '\x64', '\x33', '\x2', '\x20A', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\a', 
		'\x44', '\x2', '\x2', '\x20D', '\x221', '\x5', 'P', ')', '\x2', '\x20E', 
		'\x20F', '\a', '\x15', '\x2', '\x2', '\x20F', '\x210', '\a', '\x43', '\x2', 
		'\x2', '\x210', '\x211', '\x5', 'X', '-', '\x2', '\x211', '\x212', '\x5', 
		'\xBC', '_', '\x2', '\x212', '\x213', '\a', '\x31', '\x2', '\x2', '\x213', 
		'\x214', '\x5', '\x1E', '\x10', '\x2', '\x214', '\x215', '\a', '\x44', 
		'\x2', '\x2', '\x215', '\x216', '\x5', 'P', ')', '\x2', '\x216', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\a', '\t', '\x2', '\x2', 
		'\x218', '\x221', '\a', 'H', '\x2', '\x2', '\x219', '\x21A', '\a', '\xE', 
		'\x2', '\x2', '\x21A', '\x221', '\a', 'H', '\x2', '\x2', '\x21B', '\x21D', 
		'\a', '\"', '\x2', '\x2', '\x21C', '\x21E', '\x5', '\x1E', '\x10', '\x2', 
		'\x21D', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21F', 
		'\x221', '\a', 'H', '\x2', '\x2', '\x220', '\x1DF', '\x3', '\x2', '\x2', 
		'\x2', '\x220', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x220', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x220', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x220', '\x1FF', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x220', '\x219', '\x3', '\x2', '\x2', 
		'\x2', '\x220', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x221', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x224', '\a', '?', '\x2', '\x2', '\x223', 
		'\x225', '\x5', '`', '\x31', '\x2', '\x224', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x224', '\x225', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\a', '@', '\x2', '\x2', 
		'\x227', 'U', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x5', 'X', 
		'-', '\x2', '\x229', '\x22E', '\x5', 'Z', '.', '\x2', '\x22A', '\x22B', 
		'\a', '\x46', '\x2', '\x2', '\x22B', '\x22D', '\x5', 'Z', '.', '\x2', 
		'\x22C', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x230', '\x3', 
		'\x2', '\x2', '\x2', '\x22E', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', 
		'\t', '\b', '\x2', '\x2', '\x232', 'Y', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x236', '\x5', '\xBC', '_', '\x2', '\x234', '\x235', '\a', 'G', '\x2', 
		'\x2', '\x235', '\x237', '\x5', '\xE', '\b', '\x2', '\x236', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', 
		'S', '\x2', '\x2', '\x239', '\x23B', '\x5', '\x1E', '\x10', '\x2', '\x23A', 
		'\x238', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '[', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23E', '\x5', 
		'^', '\x30', '\x2', '\x23D', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23E', 
		'\x23F', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', '\x2', '\x2', 
		'\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\x5', '`', '\x31', '\x2', 
		'\x242', ']', '\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\a', '\n', 
		'\x2', '\x2', '\x244', '\x245', '\x5', '\x1E', '\x10', '\x2', '\x245', 
		'\x246', '\a', 'G', '\x2', '\x2', '\x246', '\x24A', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x248', '\a', '\xF', '\x2', '\x2', '\x248', '\x24A', 
		'\a', 'G', '\x2', '\x2', '\x249', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x247', '\x3', '\x2', '\x2', '\x2', '\x24A', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x24B', '\x24D', '\x5', 'N', '(', '\x2', '\x24C', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x24F', '\x61', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x25A', '\x5', 'V', ',', '\x2', '\x251', '\x256', '\x5', '\x1E', '\x10', 
		'\x2', '\x252', '\x253', '\a', '\x46', '\x2', '\x2', '\x253', '\x255', 
		'\x5', '\x1E', '\x10', '\x2', '\x254', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x258', '\x3', '\x2', '\x2', '\x2', '\x256', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x25A', '\x3', '\x2', '\x2', '\x2', '\x258', '\x256', '\x3', '\x2', '\x2', 
		'\x2', '\x259', '\x250', '\x3', '\x2', '\x2', '\x2', '\x259', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x25A', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x25B', '\x260', '\x5', '\x1E', '\x10', '\x2', '\x25C', '\x25D', '\a', 
		'\x46', '\x2', '\x2', '\x25D', '\x25F', '\x5', '\x1E', '\x10', '\x2', 
		'\x25E', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x262', '\x3', 
		'\x2', '\x2', '\x2', '\x260', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x261', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x262', '\x260', '\x3', '\x2', '\x2', '\x2', '\x263', '\x265', 
		'\a', '\x35', '\x2', '\x2', '\x264', '\x263', '\x3', '\x2', '\x2', '\x2', 
		'\x264', '\x265', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x266', '\x267', '\a', '\x30', '\x2', '\x2', '\x267', 
		'\x268', '\x5', '\xBC', '_', '\x2', '\x268', '\x26A', '\x5', 'h', '\x35', 
		'\x2', '\x269', '\x26B', '\a', 'H', '\x2', '\x2', '\x26A', '\x269', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26B', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26E', '\a', '?', '\x2', '\x2', 
		'\x26D', '\x26F', '\x5', 'j', '\x36', '\x2', '\x26E', '\x26D', '\x3', 
		'\x2', '\x2', '\x2', '\x26E', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'\x270', '\x3', '\x2', '\x2', '\x2', '\x270', '\x271', '\a', '@', '\x2', 
		'\x2', '\x271', 'i', '\x3', '\x2', '\x2', '\x2', '\x272', '\x274', '\x5', 
		'l', '\x37', '\x2', '\x273', '\x272', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x275', '\x273', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x276', '\x3', '\x2', '\x2', '\x2', '\x276', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x277', '\x27F', '\x5', '\x66', '\x34', '\x2', '\x278', 
		'\x27F', '\x5', 'p', '\x39', '\x2', '\x279', '\x27A', '\x5', 'V', ',', 
		'\x2', '\x27A', '\x27B', '\a', 'H', '\x2', '\x2', '\x27B', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x27C', '\x27F', '\x5', '\x38', '\x1D', '\x2', '\x27D', 
		'\x27F', '\x5', 'n', '\x38', '\x2', '\x27E', '\x277', '\x3', '\x2', '\x2', 
		'\x2', '\x27E', '\x278', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27F', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x280', '\x282', '\a', '\x35', '\x2', '\x2', '\x281', '\x280', 
		'\x3', '\x2', '\x2', '\x2', '\x281', '\x282', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x283', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\a', 
		'\x33', '\x2', '\x2', '\x284', '\x285', '\x5', '\xB0', 'Y', '\x2', '\x285', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x286', '\x288', '\x5', '|', '?', '\x2', 
		'\x287', '\x286', '\x3', '\x2', '\x2', '\x2', '\x287', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x288', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x28C', '\x5', '\xAA', 'V', '\x2', '\x28A', '\x28C', '\x5', '\xAC', 'W', 
		'\x2', '\x28B', '\x289', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28A', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x28D', '\x28E', '\a', 'T', '\x2', '\x2', '\x28E', '\x293', '\x5', 't', 
		';', '\x2', '\x28F', '\x290', '\a', '\x46', '\x2', '\x2', '\x290', '\x292', 
		'\x5', 't', ';', '\x2', '\x291', '\x28F', '\x3', '\x2', '\x2', '\x2', 
		'\x292', '\x295', '\x3', '\x2', '\x2', '\x2', '\x293', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x296', '\x3', '\x2', '\x2', '\x2', '\x295', '\x293', '\x3', '\x2', '\x2', 
		'\x2', '\x296', '\x297', '\a', 'U', '\x2', '\x2', '\x297', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x298', '\x299', '\x5', '\xBC', '_', '\x2', '\x299', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29C', '\a', '?', '\x2', '\x2', 
		'\x29B', '\x29D', '\x5', 'x', '=', '\x2', '\x29C', '\x29B', '\x3', '\x2', 
		'\x2', '\x2', '\x29C', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x29F', '\a', '@', '\x2', '\x2', 
		'\x29F', 'w', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A2', '\x5', 'z', 
		'>', '\x2', '\x2A1', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', 
		'\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x2A3', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A4', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x2A5', '\x2A7', '\x5', '|', '?', '\x2', '\x2A6', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A7', '\x3', '\x2', '\x2', '\x2', 
		'\x2A7', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\x5', 
		'\x80', '\x41', '\x2', '\x2A9', '{', '\x3', '\x2', '\x2', '\x2', '\x2AA', 
		'\x2AC', '\x5', '~', '@', '\x2', '\x2AB', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x2AC', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', '}', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\t', '\t', 
		'\x2', '\x2', '\x2B0', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B4', 
		'\x5', '\x82', '\x42', '\x2', '\x2B2', '\x2B4', '\x5', '\xAE', 'X', '\x2', 
		'\x2B3', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B2', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', '\x81', '\x3', '\x2', '\x2', '\x2', '\x2B5', 
		'\x2BC', '\x5', '\xB0', 'Y', '\x2', '\x2B6', '\x2BC', '\x5', '\xB2', 'Z', 
		'\x2', '\x2B7', '\x2BC', '\x5', '\xB4', '[', '\x2', '\x2B8', '\x2B9', 
		'\x5', '\x84', '\x43', '\x2', '\x2B9', '\x2BA', '\a', 'H', '\x2', '\x2', 
		'\x2BA', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2B5', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2BB', 
		'\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2B8', '\x3', '\x2', '\x2', 
		'\x2', '\x2BC', '\x83', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2C2', 
		'\x5', 'Z', '.', '\x2', '\x2BE', '\x2BF', '\a', '\x46', '\x2', '\x2', 
		'\x2BF', '\x2C1', '\x5', 'Z', '.', '\x2', '\x2C0', '\x2BE', '\x3', '\x2', 
		'\x2', '\x2', '\x2C1', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C2', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2CA', '\x5', '\x88', '\x45', '\x2', '\x2C6', 
		'\x2C7', '\a', 'O', '\x2', '\x2', '\x2C7', '\x2C9', '\x5', '\x88', '\x45', 
		'\x2', '\x2C8', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CC', 
		'\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x2CA', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2D0', '\x5', '\xE', '\b', '\x2', '\x2CE', '\x2D0', '\a', ',', '\x2', 
		'\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2CE', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x2D1', '\x2D2', '\x5', 'T', '+', '\x2', '\x2D2', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x2D3', '\x2D4', '\x5', '\x8E', 'H', '\x2', '\x2D4', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2DA', '\x5', '\x90', 'I', '\x2', 
		'\x2D6', '\x2D7', '\a', '\x46', '\x2', '\x2', '\x2D7', '\x2D9', '\x5', 
		'\x90', 'I', '\x2', '\x2D8', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D9', 
		'\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2D8', '\x3', '\x2', '\x2', 
		'\x2', '\x2DA', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DA', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2DE', '\x5', '\xB6', '\\', '\x2', '\x2DE', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\a', 'G', '\x2', '\x2', '\x2E0', 
		'\x2E1', '\a', '/', '\x2', '\x2', '\x2E1', '\x2E3', '\a', '\x43', '\x2', 
		'\x2', '\x2E2', '\x2E4', '\x5', '\x1A', '\xE', '\x2', '\x2E3', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\a', 
		'\x44', '\x2', '\x2', '\x2E6', '\x93', '\x3', '\x2', '\x2', '\x2', '\x2E7', 
		'\x2EA', '\x5', 'T', '+', '\x2', '\x2E8', '\x2EA', '\a', 'H', '\x2', '\x2', 
		'\x2E9', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E8', '\x3', 
		'\x2', '\x2', '\x2', '\x2EA', '\x95', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2EC', '\a', 'T', '\x2', '\x2', '\x2EC', '\x2F1', '\x5', '\x98', 'M', 
		'\x2', '\x2ED', '\x2EE', '\a', '\x46', '\x2', '\x2', '\x2EE', '\x2F0', 
		'\x5', '\x98', 'M', '\x2', '\x2EF', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2F0', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2EF', '\x3', 
		'\x2', '\x2', '\x2', '\x2F1', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F1', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2F5', '\a', 'U', '\x2', '\x2', '\x2F5', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\x5', '\xBC', '_', '\x2', '\x2F7', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x304', '\a', '?', '\x2', 
		'\x2', '\x2F9', '\x2FE', '\x5', '\x9C', 'O', '\x2', '\x2FA', '\x2FB', 
		'\a', '\x46', '\x2', '\x2', '\x2FB', '\x2FD', '\x5', '\x9C', 'O', '\x2', 
		'\x2FC', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x300', '\x3', 
		'\x2', '\x2', '\x2', '\x2FE', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FE', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x301', '\x303', 
		'\a', '\x46', '\x2', '\x2', '\x302', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x302', '\x303', '\x3', '\x2', '\x2', '\x2', '\x303', '\x305', '\x3', 
		'\x2', '\x2', '\x2', '\x304', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x3', '\x2', '\x2', 
		'\x2', '\x306', '\x307', '\a', '@', '\x2', '\x2', '\x307', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x30B', '\x5', '\xBC', '_', '\x2', '\x309', 
		'\x30A', '\a', 'S', '\x2', '\x2', '\x30A', '\x30C', '\x5', '\x1E', '\x10', 
		'\x2', '\x30B', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', 
		'\x3', '\x2', '\x2', '\x2', '\x30C', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x30D', '\x30E', '\a', 'S', '\x2', '\x2', '\x30E', '\x30F', '\a', 'U', 
		'\x2', '\x2', '\x30F', '\x310', '\x6', 'P', '\x2', '\x3', '\x310', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x311', '\x312', '\a', 'U', '\x2', '\x2', 
		'\x312', '\x313', '\a', 'U', '\x2', '\x2', '\x313', '\x314', '\x6', 'Q', 
		'\x3', '\x3', '\x314', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', 
		'\a', 'U', '\x2', '\x2', '\x316', '\x317', '\a', '\x61', '\x2', '\x2', 
		'\x317', '\x318', '\x6', 'R', '\x4', '\x3', '\x318', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x319', '\x320', '\x5', '\xA6', 'T', '\x2', '\x31A', '\x320', 
		'\x5', '\xA8', 'U', '\x2', '\x31B', '\x320', '\a', ':', '\x2', '\x2', 
		'\x31C', '\x320', '\a', ';', '\x2', '\x2', '\x31D', '\x320', '\a', '<', 
		'\x2', '\x2', '\x31E', '\x320', '\a', '\x1B', '\x2', '\x2', '\x31F', '\x319', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x31A', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x31C', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x31E', '\x3', '\x2', '\x2', '\x2', '\x320', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x321', '\x322', '\t', '\n', '\x2', '\x2', '\x322', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x323', '\x324', '\t', '\v', '\x2', '\x2', '\x324', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x325', '\x326', '\a', '\f', '\x2', 
		'\x2', '\x326', '\x328', '\x5', '\xBC', '_', '\x2', '\x327', '\x329', 
		'\x5', 'r', ':', '\x2', '\x328', '\x327', '\x3', '\x2', '\x2', '\x2', 
		'\x328', '\x329', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32C', '\x3', 
		'\x2', '\x2', '\x2', '\x32A', '\x32B', '\a', '\x37', '\x2', '\x2', '\x32B', 
		'\x32D', '\x5', '\xE', '\b', '\x2', '\x32C', '\x32A', '\x3', '\x2', '\x2', 
		'\x2', '\x32C', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', 
		'\x3', '\x2', '\x2', '\x2', '\x32E', '\x330', '\x5', 'v', '<', '\x2', 
		'\x32F', '\x331', '\a', 'H', '\x2', '\x2', '\x330', '\x32F', '\x3', '\x2', 
		'\x2', '\x2', '\x330', '\x331', '\x3', '\x2', '\x2', '\x2', '\x331', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\a', '\x12', '\x2', '\x2', 
		'\x333', '\x334', '\x5', '\xBC', '_', '\x2', '\x334', '\x336', '\x5', 
		'\x9A', 'N', '\x2', '\x335', '\x337', '\a', 'H', '\x2', '\x2', '\x336', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', '\x3', '\x2', '\x2', 
		'\x2', '\x337', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', 
		'\a', '\x34', '\x2', '\x2', '\x339', '\x33B', '\a', '\x43', '\x2', '\x2', 
		'\x33A', '\x33C', '\x5', '\x8C', 'G', '\x2', '\x33B', '\x33A', '\x3', 
		'\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x33D', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33E', '\a', '\x44', '\x2', 
		'\x2', '\x33E', '\x33F', '\x5', '\x94', 'K', '\x2', '\x33F', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x340', '\x342', '\x5', '\xBC', '_', '\x2', '\x341', 
		'\x343', '\x5', 'r', ':', '\x2', '\x342', '\x341', '\x3', '\x2', '\x2', 
		'\x2', '\x342', '\x343', '\x3', '\x2', '\x2', '\x2', '\x343', '\x344', 
		'\x3', '\x2', '\x2', '\x2', '\x344', '\x346', '\a', '\x43', '\x2', '\x2', 
		'\x345', '\x347', '\x5', '\x8C', 'G', '\x2', '\x346', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', '\x347', 
		'\x348', '\x3', '\x2', '\x2', '\x2', '\x348', '\x349', '\a', '\x44', '\x2', 
		'\x2', '\x349', '\x34A', '\a', 'G', '\x2', '\x2', '\x34A', '\x34B', '\x5', 
		'\x86', '\x44', '\x2', '\x34B', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x34C', 
		'\x34D', '\x5', '\x8A', '\x46', '\x2', '\x34D', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\x34E', '\x34F', '\a', '\x17', '\x2', '\x2', '\x34F', '\x350', 
		'\x5', '\xBC', '_', '\x2', '\x350', '\x351', '\a', '\x43', '\x2', '\x2', 
		'\x351', '\x354', '\a', '\x44', '\x2', '\x2', '\x352', '\x353', '\a', 
		'G', '\x2', '\x2', '\x353', '\x355', '\x5', '\x86', '\x44', '\x2', '\x354', 
		'\x352', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', '\x3', '\x2', '\x2', 
		'\x2', '\x355', '\x356', '\x3', '\x2', '\x2', '\x2', '\x356', '\x357', 
		'\x5', '\x8A', '\x46', '\x2', '\x357', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x358', '\x359', '\a', '#', '\x2', '\x2', '\x359', '\x35A', '\x5', '\xBC', 
		'_', '\x2', '\x35A', '\x35B', '\a', '\x43', '\x2', '\x2', '\x35B', '\x35C', 
		'\x5', '\x8C', 'G', '\x2', '\x35C', '\x35F', '\a', '\x44', '\x2', '\x2', 
		'\x35D', '\x35E', '\a', 'G', '\x2', '\x2', '\x35E', '\x360', '\x5', '\x86', 
		'\x44', '\x2', '\x35F', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35F', 
		'\x360', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', '\x3', '\x2', '\x2', 
		'\x2', '\x361', '\x362', '\x5', '\x8A', '\x46', '\x2', '\x362', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x363', '\x364', '\x5', '\xBC', '_', '\x2', 
		'\x364', '\x365', '\a', 'G', '\x2', '\x2', '\x365', '\x368', '\x5', '\n', 
		'\x6', '\x2', '\x366', '\x367', '\a', 'S', '\x2', '\x2', '\x367', '\x369', 
		'\x5', '\x1E', '\x10', '\x2', '\x368', '\x366', '\x3', '\x2', '\x2', '\x2', 
		'\x368', '\x369', '\x3', '\x2', '\x2', '\x2', '\x369', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\x36A', '\x36C', '\a', '\x43', '\x2', '\x2', '\x36B', 
		'\x36D', '\x5', '\x1A', '\xE', '\x2', '\x36C', '\x36B', '\x3', '\x2', 
		'\x2', '\x2', '\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36E', 
		'\x3', '\x2', '\x2', '\x2', '\x36E', '\x36F', '\a', '\x44', '\x2', '\x2', 
		'\x36F', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x370', '\x372', '\a', '\x43', 
		'\x2', '\x2', '\x371', '\x373', '\x5', '\x1A', '\xE', '\x2', '\x372', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x372', '\x373', '\x3', '\x2', '\x2', 
		'\x2', '\x373', '\x374', '\x3', '\x2', '\x2', '\x2', '\x374', '\x375', 
		'\a', '\x44', '\x2', '\x2', '\x375', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\x376', '\x377', '\t', '\f', '\x2', '\x2', '\x377', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\xC1', '\xC5', '\xCA', '\xCE', '\xDB', '\xE3', 
		'\xEB', '\xF2', '\xF8', '\xFE', '\x106', '\x10D', '\x118', '\x11E', '\x124', 
		'\x128', '\x135', '\x13D', '\x145', '\x14B', '\x152', '\x15A', '\x162', 
		'\x16C', '\x172', '\x179', '\x17E', '\x183', '\x18E', '\x19B', '\x19E', 
		'\x1A5', '\x1AB', '\x1BB', '\x1C2', '\x1CE', '\x1D3', '\x1D9', '\x1DD', 
		'\x1EA', '\x1F4', '\x202', '\x206', '\x20A', '\x21D', '\x220', '\x224', 
		'\x22E', '\x236', '\x23A', '\x23F', '\x249', '\x24E', '\x256', '\x259', 
		'\x260', '\x264', '\x26A', '\x26E', '\x275', '\x27E', '\x281', '\x287', 
		'\x28B', '\x293', '\x29C', '\x2A3', '\x2A6', '\x2AD', '\x2B3', '\x2BB', 
		'\x2C2', '\x2CA', '\x2CF', '\x2DA', '\x2E3', '\x2E9', '\x2F1', '\x2FE', 
		'\x302', '\x304', '\x30B', '\x31F', '\x328', '\x32C', '\x330', '\x336', 
		'\x33B', '\x342', '\x346', '\x354', '\x35F', '\x368', '\x36C', '\x372',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
