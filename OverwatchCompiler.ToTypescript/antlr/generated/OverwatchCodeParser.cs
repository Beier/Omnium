//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Git\overwatch-typescript-compiler\OverwatchCompiler.ToTypescript\antlr\OverwatchCode.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class OverwatchCodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, T__156=157, T__157=158, T__158=159, T__159=160, T__160=161, 
		T__161=162, T__162=163, T__163=164, T__164=165, T__165=166, T__166=167, 
		T__167=168, T__168=169, T__169=170, T__170=171, T__171=172, T__172=173, 
		T__173=174, T__174=175, T__175=176, T__176=177, T__177=178, T__178=179, 
		T__179=180, T__180=181, T__181=182, T__182=183, T__183=184, T__184=185, 
		T__185=186, T__186=187, T__187=188, T__188=189, T__189=190, T__190=191, 
		T__191=192, T__192=193, T__193=194, T__194=195, T__195=196, T__196=197, 
		T__197=198, T__198=199, T__199=200, T__200=201, T__201=202, T__202=203, 
		T__203=204, T__204=205, T__205=206, T__206=207, T__207=208, T__208=209, 
		T__209=210, T__210=211, T__211=212, T__212=213, T__213=214, T__214=215, 
		T__215=216, T__216=217, T__217=218, T__218=219, T__219=220, T__220=221, 
		T__221=222, T__222=223, T__223=224, T__224=225, T__225=226, T__226=227, 
		T__227=228, T__228=229, T__229=230, T__230=231, T__231=232, T__232=233, 
		T__233=234, T__234=235, T__235=236, T__236=237, T__237=238, T__238=239, 
		T__239=240, T__240=241, T__241=242, T__242=243, T__243=244, T__244=245, 
		T__245=246, T__246=247, T__247=248, T__248=249, T__249=250, T__250=251, 
		T__251=252, T__252=253, T__253=254, T__254=255, T__255=256, T__256=257, 
		T__257=258, T__258=259, T__259=260, T__260=261, T__261=262, T__262=263, 
		T__263=264, T__264=265, T__265=266, T__266=267, T__267=268, T__268=269, 
		T__269=270, T__270=271, T__271=272, T__272=273, T__273=274, T__274=275, 
		T__275=276, T__276=277, T__277=278, T__278=279, T__279=280, T__280=281, 
		T__281=282, T__282=283, T__283=284, T__284=285, T__285=286, T__286=287, 
		T__287=288, T__288=289, T__289=290, T__290=291, T__291=292, T__292=293, 
		T__293=294, T__294=295, T__295=296, T__296=297, T__297=298, T__298=299, 
		T__299=300, T__300=301, T__301=302, T__302=303, T__303=304, T__304=305, 
		T__305=306, T__306=307, T__307=308, T__308=309, T__309=310, T__310=311, 
		T__311=312, T__312=313, T__313=314, T__314=315, T__315=316, T__316=317, 
		T__317=318, T__318=319, T__319=320, T__320=321, T__321=322, T__322=323, 
		T__323=324, T__324=325, T__325=326, T__326=327, T__327=328, T__328=329, 
		T__329=330, T__330=331, T__331=332, T__332=333, T__333=334, T__334=335, 
		T__335=336, T__336=337, T__337=338, T__338=339, T__339=340, T__340=341, 
		T__341=342, T__342=343, T__343=344, T__344=345, T__345=346, T__346=347, 
		T__347=348, T__348=349, T__349=350, T__350=351, T__351=352, T__352=353, 
		T__353=354, T__354=355, T__355=356, T__356=357, T__357=358, T__358=359, 
		T__359=360, T__360=361, T__361=362, T__362=363, T__363=364, T__364=365, 
		T__365=366, T__366=367, T__367=368, T__368=369, T__369=370, T__370=371, 
		T__371=372, T__372=373, T__373=374, T__374=375, T__375=376, T__376=377, 
		T__377=378, T__378=379, T__379=380, T__380=381, T__381=382, T__382=383, 
		T__383=384, T__384=385, T__385=386, T__386=387, T__387=388, T__388=389, 
		T__389=390, T__390=391, T__391=392, T__392=393, T__393=394, T__394=395, 
		T__395=396, T__396=397, T__397=398, T__398=399, T__399=400, T__400=401, 
		T__401=402, T__402=403, T__403=404, T__404=405, T__405=406, T__406=407, 
		T__407=408, T__408=409, T__409=410, T__410=411, T__411=412, T__412=413, 
		T__413=414, T__414=415, T__415=416, T__416=417, T__417=418, T__418=419, 
		T__419=420, T__420=421, T__421=422, T__422=423, T__423=424, T__424=425, 
		T__425=426, T__426=427, T__427=428, T__428=429, T__429=430, T__430=431, 
		T__431=432, T__432=433, T__433=434, T__434=435, T__435=436, T__436=437, 
		T__437=438, T__438=439, T__439=440, T__440=441, T__441=442, T__442=443, 
		T__443=444, T__444=445, T__445=446, T__446=447, ALL_TEAMS=448, Team1=449, 
		Team2=450, LETTER=451, INTEGER=452, SLOT=453, ALL=454, STRING=455, FLOAT=456, 
		NULL=457, BOOLEAN=458, WS=459, ERROR_CHAR=460;
	public const int
		RULE_root = 0, RULE_rule = 1, RULE_eventBlock = 2, RULE_eventType = 3, 
		RULE_ongoingGlobalEventType = 4, RULE_ongoingEachPlayerEventType = 5, 
		RULE_playerEarnedEliminationEventType = 6, RULE_playerDealtFinalBlowEventType = 7, 
		RULE_playerDealtDamageEventType = 8, RULE_playerTookDamageEventType = 9, 
		RULE_playerDiedEventType = 10, RULE_conditionBlock = 11, RULE_condition = 12, 
		RULE_actionBlock = 13, RULE_action = 14, RULE_setGlobalVariableAction = 15, 
		RULE_abortAction = 16, RULE_abortIfAction = 17, RULE_abortIfConditionIsFalseAction = 18, 
		RULE_abortIfConditionIsTrueAction = 19, RULE_allowButtonAction = 20, RULE_applyImpulseAction = 21, 
		RULE_bigMessageAction = 22, RULE_chaseGlobalVariableAtRateAction = 23, 
		RULE_chaseGlobalVariableOverTimeAction = 24, RULE_chasePlayerVariableAtRateAction = 25, 
		RULE_chasePlayerVariableOverTimeAction = 26, RULE_clearStatusAction = 27, 
		RULE_communicateAction = 28, RULE_createEffectAction = 29, RULE_createHudTextAction = 30, 
		RULE_createIconAction = 31, RULE_createInWorldTextAction = 32, RULE_damageAction = 33, 
		RULE_declareMatchDrawAction = 34, RULE_declarePlayerVictoryAction = 35, 
		RULE_declareRoundVictoryAction = 36, RULE_declareTeamVictoryAction = 37, 
		RULE_destroyAllEffectsAction = 38, RULE_destroyAllHudTextAction = 39, 
		RULE_destroyAllIconsAction = 40, RULE_destroyAllInWorldTextAction = 41, 
		RULE_destroyEffectAction = 42, RULE_destroyHudTextAction = 43, RULE_destroyIconAction = 44, 
		RULE_destroyInWorldTextAction = 45, RULE_disableBuiltInGameModeAnnouncerAction = 46, 
		RULE_disableBuiltInGameModeCompletionAction = 47, RULE_disableBuiltInGameModeMusicAction = 48, 
		RULE_disableBuiltInGameModeRespawningAction = 49, RULE_disableBuiltInGameModeScoringAction = 50, 
		RULE_disableDeathSpectateAllPlayersAction = 51, RULE_disableDeathSpectateTargetHudAction = 52, 
		RULE_disallowButtonAction = 53, RULE_enableBuiltInGameModeAnnouncerAction = 54, 
		RULE_enableBuiltInGameModeCompletionAction = 55, RULE_enableBuiltInGameModeMusicAction = 56, 
		RULE_enableBuiltInGameModeRespawningAction = 57, RULE_enableBuiltInGameModeScoringAction = 58, 
		RULE_enableDeathSpectateAllPlayersAction = 59, RULE_enableDeathSpectateTargetHudAction = 60, 
		RULE_goToAssembleHeroesAction = 61, RULE_healAction = 62, RULE_killAction = 63, 
		RULE_loopAction = 64, RULE_loopIfAction = 65, RULE_loopIfConditionIsFalseAction = 66, 
		RULE_loopIfConditionIsTrueAction = 67, RULE_modifyGlobalVariableAction = 68, 
		RULE_modifyGlobalVariableAtIndexAction = 69, RULE_modifyPlayerVariableAction = 70, 
		RULE_modifyPlayerVariableAtIndexAction = 71, RULE_modifyTeamScoreAction = 72, 
		RULE_pauseMatchTimeAction = 73, RULE_playEffectAction = 74, RULE_preloadHeroAction = 75, 
		RULE_pressButtonAction = 76, RULE_resetPlayerHeroAvailabilityAction = 77, 
		RULE_respawnAction = 78, RULE_resurrectAction = 79, RULE_setAbility1EnabledAction = 80, 
		RULE_setAbility2EnabledAction = 81, RULE_setDamageDealtAction = 82, RULE_setDamageReceivedAction = 83, 
		RULE_setFacingAction = 84, RULE_setGlobalVariableAtIndexAction = 85, RULE_setGravityAction = 86, 
		RULE_setHealingDealtAction = 87, RULE_setHealingReceivedAction = 88, RULE_setMatchTimeAction = 89, 
		RULE_setMaxHealthAction = 90, RULE_setMoveSpeedAction = 91, RULE_setObjectiveDescriptionAction = 92, 
		RULE_setPlayerAllowedHeroesAction = 93, RULE_setPlayerScoreAction = 94, 
		RULE_setPlayerVariableAction = 95, RULE_setPlayerVariableAtIndexAction = 96, 
		RULE_setPrimaryFireEnabledAction = 97, RULE_setProjectileGravityAction = 98, 
		RULE_setRespawnMaxTimeAction = 99, RULE_setSecondaryFireEnabledAction = 100, 
		RULE_setSlowMotionAction = 101, RULE_setStatusAction = 102, RULE_setTeamScoreAction = 103, 
		RULE_setUltimateAbilityEnabledAction = 104, RULE_setUltimateChargeAction = 105, 
		RULE_expression = 106, RULE_vectorExpression = 107, RULE_addExpression = 108, 
		RULE_absoluteValueExpression = 109, RULE_allDeadPlayersExpression = 110, 
		RULE_allHeroesExpression = 111, RULE_allLivingPlayersExpression = 112, 
		RULE_allPlayersExpression = 113, RULE_allPlayersNotOnObjectiveExpression = 114, 
		RULE_allPlayersOnObjectiveExpression = 115, RULE_allowedHeroesExpression = 116, 
		RULE_altitudeOfExpression = 117, RULE_eventPlayerExpression = 118, RULE_andExpression = 119, 
		RULE_angleDifferenceExpression = 120, RULE_appendToArrayExpression = 121, 
		RULE_arrayContainsExpression = 122, RULE_arraySliceExpression = 123, RULE_attackerExpression = 124, 
		RULE_backwardExpression = 125, RULE_closestPlayerToExpression = 126, RULE_compareExpression = 127, 
		RULE_controlModeScoringPercentageExpression = 128, RULE_globalVariableExpression = 129, 
		RULE_controlModeScoringTeamExpression = 130, RULE_cosineFromDegreesExpression = 131, 
		RULE_cosineFromRadiansExpression = 132, RULE_countOfExpression = 133, 
		RULE_crossProductExpression = 134, RULE_currentArrayElementExpression = 135, 
		RULE_directionFromAnglesExpression = 136, RULE_directionTowardsExpression = 137, 
		RULE_distanceBetweenExpression = 138, RULE_divideExpression = 139, RULE_dotProductExpression = 140, 
		RULE_downExpression = 141, RULE_emptyArrayExpression = 142, RULE_entityExistsExpression = 143, 
		RULE_eventDamageExpression = 144, RULE_eventWasCriticalHitExpression = 145, 
		RULE_eyePositionExpression = 146, RULE_facingDirectionOfExpression = 147, 
		RULE_farthestPlayerFromExpression = 148, RULE_filteredArrayExpression = 149, 
		RULE_firstOfExpression = 150, RULE_flagPositionExpression = 151, RULE_forwardExpression = 152, 
		RULE_hasSpawnedExpression = 153, RULE_hasStatusExpression = 154, RULE_healthExpression = 155, 
		RULE_healthPercentExpression = 156, RULE_heroExpression = 157, RULE_heroIconStringExpression = 158, 
		RULE_heroOfExpression = 159, RULE_horizontalAngleFromDirectionExpression = 160, 
		RULE_horizontalAngleTowardsExpression = 161, RULE_horizontalFacingAngleOfExpression = 162, 
		RULE_horizontalSpeedOfExpression = 163, RULE_indexOfArrayValueExpression = 164, 
		RULE_isAliveExpression = 165, RULE_isAssemblingHeroesExpression = 166, 
		RULE_isBetweenRoundsExpression = 167, RULE_isButtonHeldExpression = 168, 
		RULE_isCommunicatingExpression = 169, RULE_isCommunicatingAnyExpression = 170, 
		RULE_isCommunicatingAnyEmoteExpression = 171, RULE_isCommunicatingAnyVoicelineExpression = 172, 
		RULE_isControlModePointLockedExpression = 173, RULE_isCrouchingExpression = 174, 
		RULE_isCTFModeInSuddenDeathExpression = 175, RULE_isDeadExpression = 176, 
		RULE_isFiringPrimaryExpression = 177, RULE_isFiringSecondaryExpression = 178, 
		RULE_isFlagAtBaseExpression = 179, RULE_isFlagBeingCarriedExpression = 180, 
		RULE_isGameInProgressExpression = 181, RULE_isHeroBeingPlayedExpression = 182, 
		RULE_isInAirExpression = 183, RULE_isInLineofSightExpression = 184, RULE_isInSetupExpression = 185, 
		RULE_isInSpawnRoomExpression = 186, RULE_isInViewAngleExpression = 187, 
		RULE_isMatchCompleteExpression = 188, RULE_isMovingExpression = 189, RULE_isObjectiveCompleteExpression = 190, 
		RULE_isOnGroundExpression = 191, RULE_isOnObjectiveExpression = 192, RULE_isOnWallExpression = 193, 
		RULE_isPortraitOnFireExpression = 194, RULE_isStandingExpression = 195, 
		RULE_isTeamOnDefenseExpression = 196, RULE_isTeamOnOffenseExpression = 197, 
		RULE_isTrueForAllExpression = 198, RULE_isTrueForAnyExpression = 199, 
		RULE_isUsingAbility1Expression = 200, RULE_isUsingAbility2Expression = 201, 
		RULE_isUsingUltimateExpression = 202, RULE_isWaitingForPlayersExpression = 203, 
		RULE_lastCreatedEntityExpression = 204, RULE_lastDamageModificationIDExpression = 205, 
		RULE_lastDamageOverTimeIDExpression = 206, RULE_lastHealOverTimeIDExpression = 207, 
		RULE_lastOfExpression = 208, RULE_lastTextIDExpression = 209, RULE_leftExpression = 210, 
		RULE_localVectorOfExpression = 211, RULE_matchRoundExpression = 212, RULE_matchTimeExpression = 213, 
		RULE_maxExpression = 214, RULE_maxHealthExpression = 215, RULE_minExpression = 216, 
		RULE_moduloExpression = 217, RULE_multiplyExpression = 218, RULE_nearestWalkablePositionExpression = 219, 
		RULE_normalizeExpression = 220, RULE_notExpression = 221, RULE_numberOfDeadPlayersExpression = 222, 
		RULE_numberOfDeathsExpression = 223, RULE_numberOfEliminationsExpression = 224, 
		RULE_numberOfFinalBlowsExpression = 225, RULE_numberOfHeroesExpression = 226, 
		RULE_numberOfLivingPlayersExpression = 227, RULE_numberOfPlayersExpression = 228, 
		RULE_numberOfPlayersOnObjectiveExpression = 229, RULE_objectiveIndexExpression = 230, 
		RULE_objectivePositionExpression = 231, RULE_oppositeTeamOfExpression = 232, 
		RULE_orExpression = 233, RULE_payloadPositionExpression = 234, RULE_payloadProgressPercentageExpression = 235, 
		RULE_playerCarryingFlagExpression = 236, RULE_playerClosestToReticleExpression = 237, 
		RULE_playerVariableExpression = 238, RULE_playersInSlotExpression = 239, 
		RULE_playersInViewAngleExpression = 240, RULE_playersOnHeroExpression = 241, 
		RULE_playersWithinRadiusExpression = 242, RULE_pointCapturePercentageExpression = 243, 
		RULE_positionOfExpression = 244, RULE_raiseToPowerExpression = 245, RULE_randomIntegerExpression = 246, 
		RULE_randomRealExpression = 247, RULE_randomValueInArrayExpression = 248, 
		RULE_randomizedArrayExpression = 249, RULE_rayCastHitNormalExpression = 250, 
		RULE_rayCastHitPlayerExpression = 251, RULE_rayCastHitPositionExpression = 252, 
		RULE_removeFromArrayExpression = 253, RULE_rightExpression = 254, RULE_roundToIntegerExpression = 255, 
		RULE_scoreOfExpression = 256, RULE_sineFromDegreesExpression = 257, RULE_sineFromRadiansExpression = 258, 
		RULE_slotOfExpression = 259, RULE_sortedArrayExpression = 260, RULE_speedOfExpression = 261, 
		RULE_speedOfInDirectionExpression = 262, RULE_squareRootExpression = 263, 
		RULE_stringExpression = 264, RULE_subtractExpression = 265, RULE_teamOfExpression = 266, 
		RULE_teamScoreExpression = 267, RULE_throttleOfExpression = 268, RULE_totalTimeElapsedExpression = 269, 
		RULE_ultimateChargePercentExpression = 270, RULE_upExpression = 271, RULE_valueInArrayExpression = 272, 
		RULE_vectorTowardsExpression = 273, RULE_verticalFacingAngleOfExpression = 274, 
		RULE_verticalSpeedOfExpression = 275, RULE_victimExpression = 276, RULE_worldVectorOfExpression = 277, 
		RULE_xComponentOfExpression = 278, RULE_yComponentOfExpression = 279, 
		RULE_zComponentOfExpression = 280, RULE_team = 281, RULE_playerConstant = 282, 
		RULE_literal = 283, RULE_globalVariable = 284, RULE_playerVariable = 285, 
		RULE_heroType = 286, RULE_reaper = 287, RULE_tracer = 288, RULE_mercy = 289, 
		RULE_hanzo = 290, RULE_torbjorn = 291, RULE_reinhardt = 292, RULE_pharah = 293, 
		RULE_winston = 294, RULE_widowmaker = 295, RULE_bastion = 296, RULE_symmetra = 297, 
		RULE_zenyatta = 298, RULE_genji = 299, RULE_roadhog = 300, RULE_mcCree = 301, 
		RULE_junkrat = 302, RULE_zarya = 303, RULE_soldier76 = 304, RULE_lucio = 305, 
		RULE_dva = 306, RULE_mei = 307, RULE_sombra = 308, RULE_doomfist = 309, 
		RULE_ana = 310, RULE_orisa = 311, RULE_brigitte = 312, RULE_moira = 313, 
		RULE_wreckingBall = 314, RULE_ashe = 315, RULE_baptiste = 316, RULE_status = 317, 
		RULE_hacked = 318, RULE_burning = 319, RULE_knockedDown = 320, RULE_asleep = 321, 
		RULE_frozen = 322, RULE_unkillable = 323, RULE_invincible = 324, RULE_phasedOut = 325, 
		RULE_rooted = 326, RULE_stunned = 327, RULE_button = 328, RULE_primaryFire = 329, 
		RULE_secondaryFire = 330, RULE_ability1 = 331, RULE_ability2 = 332, RULE_ultimate = 333, 
		RULE_interact = 334, RULE_jump = 335, RULE_crouch = 336, RULE_communicationType = 337, 
		RULE_voiceLineUp = 338, RULE_voiceLineLeft = 339, RULE_voiceLineRight = 340, 
		RULE_voiceLineDown = 341, RULE_emoteUp = 342, RULE_emoteLeft = 343, RULE_emoteRight = 344, 
		RULE_emoteDown = 345, RULE_ultimateStatus = 346, RULE_hello = 347, RULE_needHealing = 348, 
		RULE_groupUp = 349, RULE_thanks = 350, RULE_acknowledge = 351, RULE_barrierBlockType = 352, 
		RULE_barriersDoNotBlockLOS = 353, RULE_enemyBarriersBlockLOS = 354, RULE_allBarriersBlockLOS = 355, 
		RULE_vectorTransformationType = 356, RULE_rotation = 357, RULE_rotationAndTranslation = 358, 
		RULE_lineOfSightCheckType = 359, RULE_off = 360, RULE_surfaces = 361, 
		RULE_surfacesAndEnemyBarriers = 362, RULE_surfacesAndAllBarriers = 363, 
		RULE_roundingDirection = 364, RULE_up = 365, RULE_down = 366, RULE_toNearest = 367, 
		RULE_motionType = 368, RULE_cancelContraryMotion = 369, RULE_incorporateContraryMotion = 370, 
		RULE_relativeTo = 371, RULE_toWorld = 372, RULE_toPlayer = 373, RULE_rateReevaluation = 374, 
		RULE_destinationAndRate = 375, RULE_timeReevaluation = 376, RULE_destinationAndDuration = 377, 
		RULE_none = 378, RULE_effectShape = 379, RULE_sphere = 380, RULE_lightShaft = 381, 
		RULE_orb = 382, RULE_ring = 383, RULE_cloud = 384, RULE_sparkles = 385, 
		RULE_goodAura = 386, RULE_badAura = 387, RULE_energySound = 388, RULE_pickUpSound = 389, 
		RULE_goodAuraSound = 390, RULE_badAuraSound = 391, RULE_sparklesSound = 392, 
		RULE_smokeSound = 393, RULE_decalSound = 394, RULE_beaconSound = 395, 
		RULE_color = 396, RULE_white = 397, RULE_yellow = 398, RULE_green = 399, 
		RULE_purple = 400, RULE_red = 401, RULE_blue = 402, RULE_team1 = 403, 
		RULE_team2 = 404, RULE_createEffectReevaluation = 405, RULE_visibleToPositionAndRadius = 406, 
		RULE_positionAandRadius = 407, RULE_visibleTo = 408, RULE_hudTextLocation = 409, 
		RULE_left = 410, RULE_top = 411, RULE_right = 412, RULE_hudTextReevaluation = 413, 
		RULE_visibleToAndString = 414, RULE_string = 415, RULE_icon = 416, RULE_arrowDown = 417, 
		RULE_arrowLeft = 418, RULE_arrowRight = 419, RULE_arrowUp = 420, RULE_asterisk = 421, 
		RULE_bolt = 422, RULE_checkmark = 423, RULE_circle = 424, RULE_club = 425, 
		RULE_diamond = 426, RULE_dizzy = 427, RULE_exclamationMark = 428, RULE_eye = 429, 
		RULE_fire = 430, RULE_flag = 431, RULE_halo = 432, RULE_happy = 433, RULE_heart = 434, 
		RULE_moon = 435, RULE_no = 436, RULE_plus = 437, RULE_poison = 438, RULE_poison2 = 439, 
		RULE_questionMark = 440, RULE_radioactive = 441, RULE_recycle = 442, RULE_ringThick = 443, 
		RULE_ringThin = 444, RULE_sad = 445, RULE_skull = 446, RULE_spade = 447, 
		RULE_spiral = 448, RULE_stop = 449, RULE_trashcan = 450, RULE_warning = 451, 
		RULE_x = 452, RULE_modification = 453, RULE_add = 454, RULE_subtract = 455, 
		RULE_multiply = 456, RULE_divide = 457, RULE_modulo = 458, RULE_raiseToPower = 459, 
		RULE_min = 460, RULE_max = 461, RULE_appendToArray = 462, RULE_removeFromArrayByValue = 463, 
		RULE_removeFromArrayByIndex = 464, RULE_animatedEffect = 465, RULE_goodExplosion = 466, 
		RULE_badExplosion = 467, RULE_ringExplosion = 468, RULE_goodPickupEffect = 469, 
		RULE_badPickupEffect = 470, RULE_debuffImpactSound = 471, RULE_buffImpactSound = 472, 
		RULE_ringExplosionSound = 473, RULE_buffExplosionSound = 474, RULE_explosionSound = 475, 
		RULE_iconReevaluation = 476, RULE_visibleToAndPosition = 477, RULE_position = 478, 
		RULE_inWorldTextClipping = 479, RULE_clipAgainstSurfaces = 480, RULE_doNotClip = 481, 
		RULE_inWorldTextReevaluation = 482, RULE_visibleToPositionAndString = 483, 
		RULE_binaryCompartorOperator = 484;
	public static readonly string[] ruleNames = {
		"root", "rule", "eventBlock", "eventType", "ongoingGlobalEventType", "ongoingEachPlayerEventType", 
		"playerEarnedEliminationEventType", "playerDealtFinalBlowEventType", "playerDealtDamageEventType", 
		"playerTookDamageEventType", "playerDiedEventType", "conditionBlock", 
		"condition", "actionBlock", "action", "setGlobalVariableAction", "abortAction", 
		"abortIfAction", "abortIfConditionIsFalseAction", "abortIfConditionIsTrueAction", 
		"allowButtonAction", "applyImpulseAction", "bigMessageAction", "chaseGlobalVariableAtRateAction", 
		"chaseGlobalVariableOverTimeAction", "chasePlayerVariableAtRateAction", 
		"chasePlayerVariableOverTimeAction", "clearStatusAction", "communicateAction", 
		"createEffectAction", "createHudTextAction", "createIconAction", "createInWorldTextAction", 
		"damageAction", "declareMatchDrawAction", "declarePlayerVictoryAction", 
		"declareRoundVictoryAction", "declareTeamVictoryAction", "destroyAllEffectsAction", 
		"destroyAllHudTextAction", "destroyAllIconsAction", "destroyAllInWorldTextAction", 
		"destroyEffectAction", "destroyHudTextAction", "destroyIconAction", "destroyInWorldTextAction", 
		"disableBuiltInGameModeAnnouncerAction", "disableBuiltInGameModeCompletionAction", 
		"disableBuiltInGameModeMusicAction", "disableBuiltInGameModeRespawningAction", 
		"disableBuiltInGameModeScoringAction", "disableDeathSpectateAllPlayersAction", 
		"disableDeathSpectateTargetHudAction", "disallowButtonAction", "enableBuiltInGameModeAnnouncerAction", 
		"enableBuiltInGameModeCompletionAction", "enableBuiltInGameModeMusicAction", 
		"enableBuiltInGameModeRespawningAction", "enableBuiltInGameModeScoringAction", 
		"enableDeathSpectateAllPlayersAction", "enableDeathSpectateTargetHudAction", 
		"goToAssembleHeroesAction", "healAction", "killAction", "loopAction", 
		"loopIfAction", "loopIfConditionIsFalseAction", "loopIfConditionIsTrueAction", 
		"modifyGlobalVariableAction", "modifyGlobalVariableAtIndexAction", "modifyPlayerVariableAction", 
		"modifyPlayerVariableAtIndexAction", "modifyTeamScoreAction", "pauseMatchTimeAction", 
		"playEffectAction", "preloadHeroAction", "pressButtonAction", "resetPlayerHeroAvailabilityAction", 
		"respawnAction", "resurrectAction", "setAbility1EnabledAction", "setAbility2EnabledAction", 
		"setDamageDealtAction", "setDamageReceivedAction", "setFacingAction", 
		"setGlobalVariableAtIndexAction", "setGravityAction", "setHealingDealtAction", 
		"setHealingReceivedAction", "setMatchTimeAction", "setMaxHealthAction", 
		"setMoveSpeedAction", "setObjectiveDescriptionAction", "setPlayerAllowedHeroesAction", 
		"setPlayerScoreAction", "setPlayerVariableAction", "setPlayerVariableAtIndexAction", 
		"setPrimaryFireEnabledAction", "setProjectileGravityAction", "setRespawnMaxTimeAction", 
		"setSecondaryFireEnabledAction", "setSlowMotionAction", "setStatusAction", 
		"setTeamScoreAction", "setUltimateAbilityEnabledAction", "setUltimateChargeAction", 
		"expression", "vectorExpression", "addExpression", "absoluteValueExpression", 
		"allDeadPlayersExpression", "allHeroesExpression", "allLivingPlayersExpression", 
		"allPlayersExpression", "allPlayersNotOnObjectiveExpression", "allPlayersOnObjectiveExpression", 
		"allowedHeroesExpression", "altitudeOfExpression", "eventPlayerExpression", 
		"andExpression", "angleDifferenceExpression", "appendToArrayExpression", 
		"arrayContainsExpression", "arraySliceExpression", "attackerExpression", 
		"backwardExpression", "closestPlayerToExpression", "compareExpression", 
		"controlModeScoringPercentageExpression", "globalVariableExpression", 
		"controlModeScoringTeamExpression", "cosineFromDegreesExpression", "cosineFromRadiansExpression", 
		"countOfExpression", "crossProductExpression", "currentArrayElementExpression", 
		"directionFromAnglesExpression", "directionTowardsExpression", "distanceBetweenExpression", 
		"divideExpression", "dotProductExpression", "downExpression", "emptyArrayExpression", 
		"entityExistsExpression", "eventDamageExpression", "eventWasCriticalHitExpression", 
		"eyePositionExpression", "facingDirectionOfExpression", "farthestPlayerFromExpression", 
		"filteredArrayExpression", "firstOfExpression", "flagPositionExpression", 
		"forwardExpression", "hasSpawnedExpression", "hasStatusExpression", "healthExpression", 
		"healthPercentExpression", "heroExpression", "heroIconStringExpression", 
		"heroOfExpression", "horizontalAngleFromDirectionExpression", "horizontalAngleTowardsExpression", 
		"horizontalFacingAngleOfExpression", "horizontalSpeedOfExpression", "indexOfArrayValueExpression", 
		"isAliveExpression", "isAssemblingHeroesExpression", "isBetweenRoundsExpression", 
		"isButtonHeldExpression", "isCommunicatingExpression", "isCommunicatingAnyExpression", 
		"isCommunicatingAnyEmoteExpression", "isCommunicatingAnyVoicelineExpression", 
		"isControlModePointLockedExpression", "isCrouchingExpression", "isCTFModeInSuddenDeathExpression", 
		"isDeadExpression", "isFiringPrimaryExpression", "isFiringSecondaryExpression", 
		"isFlagAtBaseExpression", "isFlagBeingCarriedExpression", "isGameInProgressExpression", 
		"isHeroBeingPlayedExpression", "isInAirExpression", "isInLineofSightExpression", 
		"isInSetupExpression", "isInSpawnRoomExpression", "isInViewAngleExpression", 
		"isMatchCompleteExpression", "isMovingExpression", "isObjectiveCompleteExpression", 
		"isOnGroundExpression", "isOnObjectiveExpression", "isOnWallExpression", 
		"isPortraitOnFireExpression", "isStandingExpression", "isTeamOnDefenseExpression", 
		"isTeamOnOffenseExpression", "isTrueForAllExpression", "isTrueForAnyExpression", 
		"isUsingAbility1Expression", "isUsingAbility2Expression", "isUsingUltimateExpression", 
		"isWaitingForPlayersExpression", "lastCreatedEntityExpression", "lastDamageModificationIDExpression", 
		"lastDamageOverTimeIDExpression", "lastHealOverTimeIDExpression", "lastOfExpression", 
		"lastTextIDExpression", "leftExpression", "localVectorOfExpression", "matchRoundExpression", 
		"matchTimeExpression", "maxExpression", "maxHealthExpression", "minExpression", 
		"moduloExpression", "multiplyExpression", "nearestWalkablePositionExpression", 
		"normalizeExpression", "notExpression", "numberOfDeadPlayersExpression", 
		"numberOfDeathsExpression", "numberOfEliminationsExpression", "numberOfFinalBlowsExpression", 
		"numberOfHeroesExpression", "numberOfLivingPlayersExpression", "numberOfPlayersExpression", 
		"numberOfPlayersOnObjectiveExpression", "objectiveIndexExpression", "objectivePositionExpression", 
		"oppositeTeamOfExpression", "orExpression", "payloadPositionExpression", 
		"payloadProgressPercentageExpression", "playerCarryingFlagExpression", 
		"playerClosestToReticleExpression", "playerVariableExpression", "playersInSlotExpression", 
		"playersInViewAngleExpression", "playersOnHeroExpression", "playersWithinRadiusExpression", 
		"pointCapturePercentageExpression", "positionOfExpression", "raiseToPowerExpression", 
		"randomIntegerExpression", "randomRealExpression", "randomValueInArrayExpression", 
		"randomizedArrayExpression", "rayCastHitNormalExpression", "rayCastHitPlayerExpression", 
		"rayCastHitPositionExpression", "removeFromArrayExpression", "rightExpression", 
		"roundToIntegerExpression", "scoreOfExpression", "sineFromDegreesExpression", 
		"sineFromRadiansExpression", "slotOfExpression", "sortedArrayExpression", 
		"speedOfExpression", "speedOfInDirectionExpression", "squareRootExpression", 
		"stringExpression", "subtractExpression", "teamOfExpression", "teamScoreExpression", 
		"throttleOfExpression", "totalTimeElapsedExpression", "ultimateChargePercentExpression", 
		"upExpression", "valueInArrayExpression", "vectorTowardsExpression", "verticalFacingAngleOfExpression", 
		"verticalSpeedOfExpression", "victimExpression", "worldVectorOfExpression", 
		"xComponentOfExpression", "yComponentOfExpression", "zComponentOfExpression", 
		"team", "playerConstant", "literal", "globalVariable", "playerVariable", 
		"heroType", "reaper", "tracer", "mercy", "hanzo", "torbjorn", "reinhardt", 
		"pharah", "winston", "widowmaker", "bastion", "symmetra", "zenyatta", 
		"genji", "roadhog", "mcCree", "junkrat", "zarya", "soldier76", "lucio", 
		"dva", "mei", "sombra", "doomfist", "ana", "orisa", "brigitte", "moira", 
		"wreckingBall", "ashe", "baptiste", "status", "hacked", "burning", "knockedDown", 
		"asleep", "frozen", "unkillable", "invincible", "phasedOut", "rooted", 
		"stunned", "button", "primaryFire", "secondaryFire", "ability1", "ability2", 
		"ultimate", "interact", "jump", "crouch", "communicationType", "voiceLineUp", 
		"voiceLineLeft", "voiceLineRight", "voiceLineDown", "emoteUp", "emoteLeft", 
		"emoteRight", "emoteDown", "ultimateStatus", "hello", "needHealing", "groupUp", 
		"thanks", "acknowledge", "barrierBlockType", "barriersDoNotBlockLOS", 
		"enemyBarriersBlockLOS", "allBarriersBlockLOS", "vectorTransformationType", 
		"rotation", "rotationAndTranslation", "lineOfSightCheckType", "off", "surfaces", 
		"surfacesAndEnemyBarriers", "surfacesAndAllBarriers", "roundingDirection", 
		"up", "down", "toNearest", "motionType", "cancelContraryMotion", "incorporateContraryMotion", 
		"relativeTo", "toWorld", "toPlayer", "rateReevaluation", "destinationAndRate", 
		"timeReevaluation", "destinationAndDuration", "none", "effectShape", "sphere", 
		"lightShaft", "orb", "ring", "cloud", "sparkles", "goodAura", "badAura", 
		"energySound", "pickUpSound", "goodAuraSound", "badAuraSound", "sparklesSound", 
		"smokeSound", "decalSound", "beaconSound", "color", "white", "yellow", 
		"green", "purple", "red", "blue", "team1", "team2", "createEffectReevaluation", 
		"visibleToPositionAndRadius", "positionAandRadius", "visibleTo", "hudTextLocation", 
		"left", "top", "right", "hudTextReevaluation", "visibleToAndString", "string", 
		"icon", "arrowDown", "arrowLeft", "arrowRight", "arrowUp", "asterisk", 
		"bolt", "checkmark", "circle", "club", "diamond", "dizzy", "exclamationMark", 
		"eye", "fire", "flag", "halo", "happy", "heart", "moon", "no", "plus", 
		"poison", "poison2", "questionMark", "radioactive", "recycle", "ringThick", 
		"ringThin", "sad", "skull", "spade", "spiral", "stop", "trashcan", "warning", 
		"x", "modification", "add", "subtract", "multiply", "divide", "modulo", 
		"raiseToPower", "min", "max", "appendToArray", "removeFromArrayByValue", 
		"removeFromArrayByIndex", "animatedEffect", "goodExplosion", "badExplosion", 
		"ringExplosion", "goodPickupEffect", "badPickupEffect", "debuffImpactSound", 
		"buffImpactSound", "ringExplosionSound", "buffExplosionSound", "explosionSound", 
		"iconReevaluation", "visibleToAndPosition", "position", "inWorldTextClipping", 
		"clipAgainstSurfaces", "doNotClip", "inWorldTextReevaluation", "visibleToPositionAndString", 
		"binaryCompartorOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'rule'", "'('", "')'", "'{'", "'}'", "'event'", "'Ongoing - Global;'", 
		"'Ongoing - Each Player;'", "';'", "'Player earned elimination;'", "'Player dealt final blow;'", 
		"'Player dealt damage;'", "'Player took damage;'", "'Player Died;'", "'conditions'", 
		"'actions'", "'Set Global Variable'", "','", "'Abort'", "'Abort If'", 
		"'Abort If Condition Is False'", "'Abort If Condition Is True'", "'Allow Button'", 
		"'Apply Impulse'", "'Big Message'", "'Chase Global Variable At Rate'", 
		"'Chase Global Variable Over Time'", "'Chase Player Variable At Rate'", 
		"'Chase Player Variable Over Time'", "'Clear Status'", "'Communicate'", 
		"'Create Effect'", "'Create HUD Text'", "'Create Icon'", "'Create In-World Text'", 
		"'Damage'", "'Declare Match Draw'", "'Declare Player Victory'", "'Declare Round Victory'", 
		"'Declare Team Victory'", "'Destroy All Effects'", "'Destroy All HUD Text'", 
		"'Destroy All Icons'", "'Destroy All In-World Text'", "'Destroy Effect'", 
		"'Destroy HUD Text'", "'Destroy Icon'", "'Destroy In-World Text'", "'Disable Built-In Game Mode Announcer'", 
		"'Disable Built-In Game Mode Completion'", "'Disable Built-In Game Mode Music'", 
		"'Disable Built-In Game Mode Respawning'", "'Disable Built-In Game Mode Scoring'", 
		"'Disable Death Spectate All Players'", "'Disable Death Spectate Target HUD'", 
		"'Disallow Button'", "'Enable Built-In Game Mode Announcer'", "'Enable Built-In Game Mode Completion'", 
		"'Enable Built-In Game Mode Music'", "'Enable Built-In Game Mode Respawning'", 
		"'Enable Built-In Game Mode Scoring'", "'Enable Death Spectate All Players'", 
		"'Enable Death Spectate Target HUD'", "'Go To Assemble Heroes'", "'Heal'", 
		"'Kill'", "'Loop'", "'Loop If'", "'Loop If Condition Is False'", "'Loop If Condition Is True'", 
		"'Modify Global Variable'", "'Modify Global Variable At Index'", "'Modify Player Variable'", 
		"'Modify Player Variable At Index'", "'Modify Team Score'", "'Pause Match Time'", 
		"'Play Effect'", "'Preload Hero'", "'Press Button'", "'Reset Player Hero Availability'", 
		"'Respawn'", "'Resurrect'", "'Set Ability 1 Enabled'", "'Set Ability 2 Enabled'", 
		"'Set Damage Dealt'", "'Set Damage Received'", "'Set Facing'", "'Set Global Variable At Index'", 
		"'Set Gravity'", "'Set Healing Dealt'", "'Set Healing Received'", "'Set Match Time'", 
		"'Set Max Health'", "'Set Move Speed'", "'Set Objective Description'", 
		"'Set Player Allowed Heroes'", "'Set Player Score'", "'Set Player Variable'", 
		"'Set Player Variable At Index'", "'Set Primary Fire Enabled'", "'Set Projectile Gravity'", 
		"'Set Respawn Max Time'", "'Set Secondary Fire Enabled'", "'Set Slow Motion'", 
		"'Set Status'", "'Set Team Score'", "'Set Ultimate Ability Enabled'", 
		"'Set Ultimate Charge'", "'Vector'", "'Add'", "'Absolute Value'", "'All Dead Players'", 
		"'All Heroes'", "'All Living Players'", "'All Players'", "'All Players Not On Objective'", 
		"'All Players On Objective'", "'Allowed Heroes'", "'Altitude Of'", "'Event Player'", 
		"'And'", "'Angle Difference'", "'Append To Array'", "'Array Contains'", 
		"'Array Slice'", "'Attacker'", "'Backward'", "'Closest Player To'", "'Compare'", 
		"'Control Mode Scoring Percentage'", "'Global Variable'", "'Control Mode Scoring Team'", 
		"'Cosine From Degrees'", "'Cosine From Radians'", "'Count Of'", "'Cross Product'", 
		"'Current Array Element'", "'Direction From Angles'", "'Direction Towards'", 
		"'Distance Between'", "'Divide'", "'Dot Product'", "'Down'", "'Empty Array'", 
		"'Entity Exists'", "'Event Damage'", "'Event Was Critical Hit'", "'Eye Position'", 
		"'Facing Direction Of'", "'Farthest Player From'", "'Filtered Array'", 
		"'First Of'", "'Flag Position'", "'Forward'", "'Has Spawned'", "'Has Status'", 
		"'Health'", "'Health Percent'", "'Hero'", "'Hero Icon String'", "'Hero Of'", 
		"'Horizontal Angle From Direction'", "'Horizontal Angle Towards'", "'Horizontal Facing Angle Of'", 
		"'Horizontal Speed Of'", "'Index Of Array Value'", "'Is Alive'", "'Is Assembling Heroes'", 
		"'Is Between Rounds'", "'Is Button Held'", "'Is Communicating'", "'Is Communicating Any'", 
		"'Is Communicating Any Emote'", "'Is Communicating Any Voice line'", "'Is Control Mode Point Locked'", 
		"'Is Crouching'", "'Is CTF Mode In Sudden Death'", "'Is Dead'", "'Is Firing Primary'", 
		"'Is Firing Secondary'", "'Is Flag At Base'", "'Is Flag Being Carried'", 
		"'Is Game In Progress'", "'Is Hero Being Played'", "'Is In Air'", "'Is In Line of Sight'", 
		"'Is In Setup'", "'Is In Spawn Room'", "'Is In View Angle'", "'Is Match Complete'", 
		"'Is Moving'", "'Is Objective Complete'", "'Is On Ground'", "'Is On Objective'", 
		"'Is On Wall'", "'Is Portrait On Fire'", "'Is Standing'", "'Is Team On Defense'", 
		"'Is Team On Offense'", "'Is True For All'", "'Is True For Any'", "'Is Using Ability 1'", 
		"'Is Using Ability 2'", "'Is Using Ultimate'", "'Is Waiting For Players'", 
		"'Last Created Entity'", "'Last Damage Modification ID'", "'Last Damage Over Time ID'", 
		"'Last Heal Over Time ID'", "'Last Of'", "'Last Text ID'", "'Left'", "'Local Vector Of'", 
		"'Match Round'", "'Match Time'", "'Max'", "'Max Health'", "'Min'", "'Modulo'", 
		"'Multiply'", "'Nearest Walkable Position'", "'Normalize'", "'Not'", "'Number of Dead Players'", 
		"'Number of Deaths'", "'Number of Eliminations'", "'Number of Final Blows'", 
		"'Number of Heroes'", "'Number of Living Players'", "'Number of Players'", 
		"'Number of Players On Objective'", "'Objective Index'", "'Objective Position'", 
		"'Opposite Team Of'", "'Or'", "'Payload Position'", "'Payload Progress Percentage'", 
		"'Player Carrying Flag'", "'Player Closest To Reticle'", "'Player Variable'", 
		"'Players In Slot'", "'Players in View Angle'", "'Players On Hero'", "'Players Within Radius'", 
		"'Point Capture Percentage'", "'Position Of'", "'Raise To Power'", "'Random Integer'", 
		"'Random Real'", "'Random Value In Array'", "'Randomized Array'", "'Ray Cast Hit Normal'", 
		"'Ray Cast Hit Player'", "'Ray Cast Hit Position'", "'Remove From Array'", 
		"'Right'", "'Round To Integer'", "'Score Of'", "'Sine From Degrees'", 
		"'Sine From Radians'", "'Slot Of'", "'Sorted Array'", "'Speed Of'", "'Speed Of In Direction'", 
		"'Square Root'", "'String'", "'Subtract'", "'Team Of'", "'Team Score'", 
		"'Throttle Of'", "'Total Time Elapsed'", "'Ultimate Charge Percent'", 
		"'Up'", "'Value In Array'", "'Vector Towards'", "'Vertical Facing Angle Of'", 
		"'Vertical Speed Of'", "'Victim'", "'World Vector Of'", "'X Component Of'", 
		"'Y Component Of'", "'Z Component Of'", "'Reaper'", "'Tracer'", "'Mercy'", 
		"'Hanzo'", "'Torbj\u00F6rn'", "'Reinhardt'", "'Pharah'", "'Winston'", 
		"'Widowmaker'", "'Bastion'", "'Symmetra'", "'Zenyatta'", "'Genji'", "'Roadhog'", 
		"'McCree'", "'Junkrat'", "'Zarya'", "'Soldier: 76'", "'L\u00FAcio'", "'D.Va'", 
		"'Mei'", "'Sombra'", "'Doomfist'", "'Ana'", "'Orisa'", "'Brigitte'", "'Moira'", 
		"'Wrecking Ball'", "'Ashe'", "'Baptiste'", "'Hacked'", "'Burning'", "'Knocked Down'", 
		"'Asleep'", "'Frozen'", "'Unkillable'", "'Invincible'", "'Phased Out'", 
		"'Rooted'", "'Stunned'", "'Primary Fire'", "'Secondary Fire'", "'Ability 1'", 
		"'Ability 2'", "'Ultimate'", "'Interact'", "'Jump'", "'Crouch'", "'Voice Line Up'", 
		"'Voice Line Left'", "'Voice Line Right'", "'Voice Line Down'", "'Emote Up'", 
		"'Emote Left'", "'Emote Right'", "'Emote Down'", "'Ultimate Status'", 
		"'Hello'", "'Need Healing'", "'Group Up'", "'Thanks'", "'Acknowledge'", 
		"'Barriers Do Not Block LOS'", "'Enemy Barriers Block LOS'", "'All Barriers Block LOS'", 
		"'Rotation'", "'Rotation And Translation'", "'Off'", "'Surfaces'", "'Surfaces And Enemy Barriers'", 
		"'Surfaces And All Barriers'", "'To Nearest'", "'Cancel Contrary Motion'", 
		"'Incorporate Contrary Motion'", "'To World'", "'To Player'", "'Destination and Rate'", 
		"'Destination and Duration'", "'None'", "'Sphere'", "'Light Shaft'", "'Orb'", 
		"'Ring'", "'Cloud'", "'Sparkles'", "'Good Aura'", "'Bad Aura'", "'Energy Sound'", 
		"'Pick-up Sound'", "'Good Aura Sound'", "'Bad Aura Sound'", "'Sparkles Sound'", 
		"'Smoke Sound'", "'Decal Sound'", "'Beacon Sound'", "'White'", "'Yellow'", 
		"'Green'", "'Purple'", "'Red'", "'Blue'", "'Visible To Position and Radius'", 
		"'Position and Radius'", "'Visible To'", "'Top'", "'Visible To and String'", 
		"'Arrow: Down'", "'Arrow: Left'", "'Arrow: Right'", "'Arrow: Up'", "'Asterisk'", 
		"'Bolt'", "'Checkmark'", "'Circle'", "'Club'", "'Diamond'", "'Dizzy'", 
		"'Exclamation Mark'", "'Eye'", "'Fire'", "'Flag'", "'Halo'", "'Happy'", 
		"'Heart'", "'Moon'", "'No'", "'Plus'", "'Poison'", "'Poison 2'", "'Question Mark'", 
		"'Radioactive'", "'Recycle'", "'Ring Thick'", "'Ring Thin'", "'Sad'", 
		"'Skull'", "'Spade'", "'Spiral'", "'Stop'", "'Trashcan'", "'Warning'", 
		"'X'", "'Remove From Array By Value'", "'Remove From Array By Index'", 
		"'Good Explosion'", "'Bad Explosion'", "'Ring Explosion'", "'Good Pickup Effect'", 
		"'Bad Pickup Effect'", "'Debuff Impact Sound'", "'Buff Impact Sound'", 
		"'Ring Explosion Sound'", "'Buff Explosion Sound'", "'Explosion Sound'", 
		"'Visible To and Position'", "'Position'", "'Clip Against Surfaces'", 
		"'Do Not Clip'", "'Visible To Position and String'", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'All Teams'", "'Team 1'", "'Team 2'", null, null, 
		"'Slot'", "'All'", null, null, "'Null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "ALL_TEAMS", "Team1", "Team2", "LETTER", "INTEGER", 
		"SLOT", "ALL", "STRING", "FLOAT", "NULL", "BOOLEAN", "WS", "ERROR_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OverwatchCode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OverwatchCodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OverwatchCodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OverwatchCodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(OverwatchCodeParser.Eof, 0); }
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 970; rule();
				}
				}
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 976; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(OverwatchCodeParser.STRING, 0); }
		public EventBlockContext eventBlock() {
			return GetRuleContext<EventBlockContext>(0);
		}
		public ConditionBlockContext conditionBlock() {
			return GetRuleContext<ConditionBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978; Match(T__0);
			State = 979; Match(T__1);
			State = 980; Match(STRING);
			State = 981; Match(T__2);
			State = 982; Match(T__3);
			State = 983; eventBlock();
			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 984; conditionBlock();
				}
			}

			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 987; actionBlock();
				}
			}

			State = 990; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventBlockContext : ParserRuleContext {
		public EventTypeContext eventType() {
			return GetRuleContext<EventTypeContext>(0);
		}
		public EventBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventBlockContext eventBlock() {
		EventBlockContext _localctx = new EventBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_eventBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992; Match(T__5);
			State = 993; Match(T__3);
			State = 994; eventType();
			State = 995; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventTypeContext : ParserRuleContext {
		public OngoingGlobalEventTypeContext ongoingGlobalEventType() {
			return GetRuleContext<OngoingGlobalEventTypeContext>(0);
		}
		public OngoingEachPlayerEventTypeContext ongoingEachPlayerEventType() {
			return GetRuleContext<OngoingEachPlayerEventTypeContext>(0);
		}
		public PlayerEarnedEliminationEventTypeContext playerEarnedEliminationEventType() {
			return GetRuleContext<PlayerEarnedEliminationEventTypeContext>(0);
		}
		public PlayerDealtFinalBlowEventTypeContext playerDealtFinalBlowEventType() {
			return GetRuleContext<PlayerDealtFinalBlowEventTypeContext>(0);
		}
		public PlayerDealtDamageEventTypeContext playerDealtDamageEventType() {
			return GetRuleContext<PlayerDealtDamageEventTypeContext>(0);
		}
		public PlayerTookDamageEventTypeContext playerTookDamageEventType() {
			return GetRuleContext<PlayerTookDamageEventTypeContext>(0);
		}
		public PlayerDiedEventTypeContext playerDiedEventType() {
			return GetRuleContext<PlayerDiedEventTypeContext>(0);
		}
		public EventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventTypeContext eventType() {
		EventTypeContext _localctx = new EventTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_eventType);
		try {
			State = 1004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 997; ongoingGlobalEventType();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 998; ongoingEachPlayerEventType();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 999; playerEarnedEliminationEventType();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1000; playerDealtFinalBlowEventType();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1001; playerDealtDamageEventType();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1002; playerTookDamageEventType();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1003; playerDiedEventType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngoingGlobalEventTypeContext : ParserRuleContext {
		public OngoingGlobalEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongoingGlobalEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOngoingGlobalEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOngoingGlobalEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngoingGlobalEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngoingGlobalEventTypeContext ongoingGlobalEventType() {
		OngoingGlobalEventTypeContext _localctx = new OngoingGlobalEventTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_ongoingGlobalEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngoingEachPlayerEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public OngoingEachPlayerEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongoingEachPlayerEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOngoingEachPlayerEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOngoingEachPlayerEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngoingEachPlayerEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngoingEachPlayerEventTypeContext ongoingEachPlayerEventType() {
		OngoingEachPlayerEventTypeContext _localctx = new OngoingEachPlayerEventTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_ongoingEachPlayerEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008; Match(T__7);
			State = 1009; team();
			State = 1010; Match(T__8);
			State = 1011; playerConstant();
			State = 1012; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerEarnedEliminationEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerEarnedEliminationEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerEarnedEliminationEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerEarnedEliminationEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerEarnedEliminationEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerEarnedEliminationEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerEarnedEliminationEventTypeContext playerEarnedEliminationEventType() {
		PlayerEarnedEliminationEventTypeContext _localctx = new PlayerEarnedEliminationEventTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_playerEarnedEliminationEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014; Match(T__9);
			State = 1015; team();
			State = 1016; Match(T__8);
			State = 1017; playerConstant();
			State = 1018; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerDealtFinalBlowEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerDealtFinalBlowEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerDealtFinalBlowEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerDealtFinalBlowEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerDealtFinalBlowEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerDealtFinalBlowEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerDealtFinalBlowEventTypeContext playerDealtFinalBlowEventType() {
		PlayerDealtFinalBlowEventTypeContext _localctx = new PlayerDealtFinalBlowEventTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_playerDealtFinalBlowEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020; Match(T__10);
			State = 1021; team();
			State = 1022; Match(T__8);
			State = 1023; playerConstant();
			State = 1024; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerDealtDamageEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerDealtDamageEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerDealtDamageEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerDealtDamageEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerDealtDamageEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerDealtDamageEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerDealtDamageEventTypeContext playerDealtDamageEventType() {
		PlayerDealtDamageEventTypeContext _localctx = new PlayerDealtDamageEventTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_playerDealtDamageEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026; Match(T__11);
			State = 1027; team();
			State = 1028; Match(T__8);
			State = 1029; playerConstant();
			State = 1030; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerTookDamageEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerTookDamageEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerTookDamageEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerTookDamageEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerTookDamageEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerTookDamageEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerTookDamageEventTypeContext playerTookDamageEventType() {
		PlayerTookDamageEventTypeContext _localctx = new PlayerTookDamageEventTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_playerTookDamageEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(T__12);
			State = 1033; team();
			State = 1034; Match(T__8);
			State = 1035; playerConstant();
			State = 1036; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerDiedEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerDiedEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerDiedEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerDiedEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerDiedEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerDiedEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerDiedEventTypeContext playerDiedEventType() {
		PlayerDiedEventTypeContext _localctx = new PlayerDiedEventTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_playerDiedEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038; Match(T__13);
			State = 1039; team();
			State = 1040; Match(T__8);
			State = 1041; playerConstant();
			State = 1042; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBlockContext : ParserRuleContext {
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterConditionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitConditionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBlockContext conditionBlock() {
		ConditionBlockContext _localctx = new ConditionBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_conditionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044; Match(T__14);
			State = 1045; Match(T__3);
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (T__108 - 109)) | (1L << (T__109 - 109)) | (1L << (T__110 - 109)) | (1L << (T__111 - 109)) | (1L << (T__112 - 109)) | (1L << (T__113 - 109)) | (1L << (T__114 - 109)) | (1L << (T__115 - 109)) | (1L << (T__116 - 109)) | (1L << (T__117 - 109)) | (1L << (T__118 - 109)) | (1L << (T__119 - 109)) | (1L << (T__120 - 109)) | (1L << (T__121 - 109)) | (1L << (T__122 - 109)) | (1L << (T__123 - 109)) | (1L << (T__124 - 109)) | (1L << (T__125 - 109)) | (1L << (T__126 - 109)) | (1L << (T__127 - 109)) | (1L << (T__128 - 109)) | (1L << (T__129 - 109)) | (1L << (T__130 - 109)) | (1L << (T__131 - 109)) | (1L << (T__132 - 109)) | (1L << (T__133 - 109)) | (1L << (T__134 - 109)) | (1L << (T__135 - 109)) | (1L << (T__136 - 109)) | (1L << (T__137 - 109)) | (1L << (T__138 - 109)) | (1L << (T__139 - 109)) | (1L << (T__140 - 109)) | (1L << (T__141 - 109)) | (1L << (T__142 - 109)) | (1L << (T__143 - 109)) | (1L << (T__144 - 109)) | (1L << (T__145 - 109)) | (1L << (T__146 - 109)) | (1L << (T__147 - 109)) | (1L << (T__148 - 109)) | (1L << (T__149 - 109)) | (1L << (T__150 - 109)) | (1L << (T__151 - 109)) | (1L << (T__152 - 109)) | (1L << (T__153 - 109)) | (1L << (T__154 - 109)) | (1L << (T__155 - 109)) | (1L << (T__156 - 109)) | (1L << (T__157 - 109)) | (1L << (T__158 - 109)) | (1L << (T__159 - 109)) | (1L << (T__160 - 109)) | (1L << (T__161 - 109)) | (1L << (T__162 - 109)) | (1L << (T__163 - 109)) | (1L << (T__164 - 109)) | (1L << (T__165 - 109)) | (1L << (T__166 - 109)) | (1L << (T__167 - 109)) | (1L << (T__168 - 109)) | (1L << (T__169 - 109)) | (1L << (T__170 - 109)) | (1L << (T__171 - 109)))) != 0) || ((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (T__172 - 173)) | (1L << (T__173 - 173)) | (1L << (T__174 - 173)) | (1L << (T__175 - 173)) | (1L << (T__176 - 173)) | (1L << (T__177 - 173)) | (1L << (T__178 - 173)) | (1L << (T__179 - 173)) | (1L << (T__180 - 173)) | (1L << (T__181 - 173)) | (1L << (T__182 - 173)) | (1L << (T__183 - 173)) | (1L << (T__184 - 173)) | (1L << (T__185 - 173)) | (1L << (T__186 - 173)) | (1L << (T__187 - 173)) | (1L << (T__188 - 173)) | (1L << (T__189 - 173)) | (1L << (T__190 - 173)) | (1L << (T__191 - 173)) | (1L << (T__192 - 173)) | (1L << (T__193 - 173)) | (1L << (T__194 - 173)) | (1L << (T__195 - 173)) | (1L << (T__196 - 173)) | (1L << (T__197 - 173)) | (1L << (T__198 - 173)) | (1L << (T__199 - 173)) | (1L << (T__200 - 173)) | (1L << (T__201 - 173)) | (1L << (T__202 - 173)) | (1L << (T__203 - 173)) | (1L << (T__204 - 173)) | (1L << (T__205 - 173)) | (1L << (T__206 - 173)) | (1L << (T__207 - 173)) | (1L << (T__208 - 173)) | (1L << (T__209 - 173)) | (1L << (T__210 - 173)) | (1L << (T__211 - 173)) | (1L << (T__212 - 173)) | (1L << (T__213 - 173)) | (1L << (T__214 - 173)) | (1L << (T__215 - 173)) | (1L << (T__216 - 173)) | (1L << (T__217 - 173)) | (1L << (T__218 - 173)) | (1L << (T__219 - 173)) | (1L << (T__220 - 173)) | (1L << (T__221 - 173)) | (1L << (T__222 - 173)) | (1L << (T__223 - 173)) | (1L << (T__224 - 173)) | (1L << (T__225 - 173)) | (1L << (T__226 - 173)) | (1L << (T__227 - 173)) | (1L << (T__228 - 173)) | (1L << (T__229 - 173)) | (1L << (T__230 - 173)) | (1L << (T__231 - 173)) | (1L << (T__232 - 173)) | (1L << (T__233 - 173)) | (1L << (T__234 - 173)) | (1L << (T__235 - 173)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (T__236 - 237)) | (1L << (T__237 - 237)) | (1L << (T__238 - 237)) | (1L << (T__239 - 237)) | (1L << (T__240 - 237)) | (1L << (T__241 - 237)) | (1L << (T__242 - 237)) | (1L << (T__243 - 237)) | (1L << (T__244 - 237)) | (1L << (T__245 - 237)) | (1L << (T__246 - 237)) | (1L << (T__247 - 237)) | (1L << (T__248 - 237)) | (1L << (T__249 - 237)) | (1L << (T__250 - 237)) | (1L << (T__251 - 237)) | (1L << (T__252 - 237)) | (1L << (T__253 - 237)) | (1L << (T__254 - 237)) | (1L << (T__255 - 237)) | (1L << (T__256 - 237)) | (1L << (T__257 - 237)) | (1L << (T__258 - 237)) | (1L << (T__259 - 237)) | (1L << (T__260 - 237)) | (1L << (T__261 - 237)) | (1L << (T__262 - 237)) | (1L << (T__263 - 237)) | (1L << (T__264 - 237)) | (1L << (T__265 - 237)) | (1L << (T__266 - 237)) | (1L << (T__267 - 237)) | (1L << (T__268 - 237)) | (1L << (T__269 - 237)) | (1L << (T__270 - 237)) | (1L << (T__271 - 237)) | (1L << (T__272 - 237)) | (1L << (T__273 - 237)) | (1L << (T__274 - 237)) | (1L << (T__275 - 237)) | (1L << (T__276 - 237)) | (1L << (T__277 - 237)) | (1L << (T__278 - 237)) | (1L << (T__279 - 237)) | (1L << (T__280 - 237)) | (1L << (T__281 - 237)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ALL_TEAMS - 448)) | (1L << (Team1 - 448)) | (1L << (Team2 - 448)) | (1L << (INTEGER - 448)) | (1L << (ALL - 448)) | (1L << (STRING - 448)) | (1L << (FLOAT - 448)) | (1L << (NULL - 448)) | (1L << (BOOLEAN - 448)))) != 0)) {
				{
				{
				State = 1046; condition();
				}
				}
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1052; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryCompartorOperatorContext binaryCompartorOperator() {
			return GetRuleContext<BinaryCompartorOperatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054; expression();
			State = 1055; binaryCompartorOperator();
			State = 1056; expression();
			State = 1057; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059; Match(T__15);
			State = 1060; Match(T__3);
			State = 1066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)))) != 0)) {
				{
				{
				State = 1061; action();
				State = 1062; Match(T__8);
				}
				}
				State = 1068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1069; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public SetGlobalVariableActionContext setGlobalVariableAction() {
			return GetRuleContext<SetGlobalVariableActionContext>(0);
		}
		public AbortActionContext abortAction() {
			return GetRuleContext<AbortActionContext>(0);
		}
		public AbortIfActionContext abortIfAction() {
			return GetRuleContext<AbortIfActionContext>(0);
		}
		public AbortIfConditionIsFalseActionContext abortIfConditionIsFalseAction() {
			return GetRuleContext<AbortIfConditionIsFalseActionContext>(0);
		}
		public AbortIfConditionIsTrueActionContext abortIfConditionIsTrueAction() {
			return GetRuleContext<AbortIfConditionIsTrueActionContext>(0);
		}
		public AllowButtonActionContext allowButtonAction() {
			return GetRuleContext<AllowButtonActionContext>(0);
		}
		public ApplyImpulseActionContext applyImpulseAction() {
			return GetRuleContext<ApplyImpulseActionContext>(0);
		}
		public BigMessageActionContext bigMessageAction() {
			return GetRuleContext<BigMessageActionContext>(0);
		}
		public ChaseGlobalVariableAtRateActionContext chaseGlobalVariableAtRateAction() {
			return GetRuleContext<ChaseGlobalVariableAtRateActionContext>(0);
		}
		public ChaseGlobalVariableOverTimeActionContext chaseGlobalVariableOverTimeAction() {
			return GetRuleContext<ChaseGlobalVariableOverTimeActionContext>(0);
		}
		public ChasePlayerVariableAtRateActionContext chasePlayerVariableAtRateAction() {
			return GetRuleContext<ChasePlayerVariableAtRateActionContext>(0);
		}
		public ChasePlayerVariableOverTimeActionContext chasePlayerVariableOverTimeAction() {
			return GetRuleContext<ChasePlayerVariableOverTimeActionContext>(0);
		}
		public ClearStatusActionContext clearStatusAction() {
			return GetRuleContext<ClearStatusActionContext>(0);
		}
		public CommunicateActionContext communicateAction() {
			return GetRuleContext<CommunicateActionContext>(0);
		}
		public CreateEffectActionContext createEffectAction() {
			return GetRuleContext<CreateEffectActionContext>(0);
		}
		public CreateHudTextActionContext createHudTextAction() {
			return GetRuleContext<CreateHudTextActionContext>(0);
		}
		public CreateIconActionContext createIconAction() {
			return GetRuleContext<CreateIconActionContext>(0);
		}
		public CreateInWorldTextActionContext createInWorldTextAction() {
			return GetRuleContext<CreateInWorldTextActionContext>(0);
		}
		public DamageActionContext damageAction() {
			return GetRuleContext<DamageActionContext>(0);
		}
		public DeclareMatchDrawActionContext declareMatchDrawAction() {
			return GetRuleContext<DeclareMatchDrawActionContext>(0);
		}
		public DeclarePlayerVictoryActionContext declarePlayerVictoryAction() {
			return GetRuleContext<DeclarePlayerVictoryActionContext>(0);
		}
		public DeclareRoundVictoryActionContext declareRoundVictoryAction() {
			return GetRuleContext<DeclareRoundVictoryActionContext>(0);
		}
		public DeclareTeamVictoryActionContext declareTeamVictoryAction() {
			return GetRuleContext<DeclareTeamVictoryActionContext>(0);
		}
		public DestroyAllEffectsActionContext destroyAllEffectsAction() {
			return GetRuleContext<DestroyAllEffectsActionContext>(0);
		}
		public DestroyAllHudTextActionContext destroyAllHudTextAction() {
			return GetRuleContext<DestroyAllHudTextActionContext>(0);
		}
		public DestroyAllIconsActionContext destroyAllIconsAction() {
			return GetRuleContext<DestroyAllIconsActionContext>(0);
		}
		public DestroyAllInWorldTextActionContext destroyAllInWorldTextAction() {
			return GetRuleContext<DestroyAllInWorldTextActionContext>(0);
		}
		public DestroyEffectActionContext destroyEffectAction() {
			return GetRuleContext<DestroyEffectActionContext>(0);
		}
		public DestroyHudTextActionContext destroyHudTextAction() {
			return GetRuleContext<DestroyHudTextActionContext>(0);
		}
		public DestroyIconActionContext destroyIconAction() {
			return GetRuleContext<DestroyIconActionContext>(0);
		}
		public DestroyInWorldTextActionContext destroyInWorldTextAction() {
			return GetRuleContext<DestroyInWorldTextActionContext>(0);
		}
		public DisableBuiltInGameModeAnnouncerActionContext disableBuiltInGameModeAnnouncerAction() {
			return GetRuleContext<DisableBuiltInGameModeAnnouncerActionContext>(0);
		}
		public DisableBuiltInGameModeCompletionActionContext disableBuiltInGameModeCompletionAction() {
			return GetRuleContext<DisableBuiltInGameModeCompletionActionContext>(0);
		}
		public DisableBuiltInGameModeMusicActionContext disableBuiltInGameModeMusicAction() {
			return GetRuleContext<DisableBuiltInGameModeMusicActionContext>(0);
		}
		public DisableBuiltInGameModeRespawningActionContext disableBuiltInGameModeRespawningAction() {
			return GetRuleContext<DisableBuiltInGameModeRespawningActionContext>(0);
		}
		public DisableBuiltInGameModeScoringActionContext disableBuiltInGameModeScoringAction() {
			return GetRuleContext<DisableBuiltInGameModeScoringActionContext>(0);
		}
		public DisableDeathSpectateAllPlayersActionContext disableDeathSpectateAllPlayersAction() {
			return GetRuleContext<DisableDeathSpectateAllPlayersActionContext>(0);
		}
		public DisableDeathSpectateTargetHudActionContext disableDeathSpectateTargetHudAction() {
			return GetRuleContext<DisableDeathSpectateTargetHudActionContext>(0);
		}
		public DisallowButtonActionContext disallowButtonAction() {
			return GetRuleContext<DisallowButtonActionContext>(0);
		}
		public EnableBuiltInGameModeAnnouncerActionContext enableBuiltInGameModeAnnouncerAction() {
			return GetRuleContext<EnableBuiltInGameModeAnnouncerActionContext>(0);
		}
		public EnableBuiltInGameModeCompletionActionContext enableBuiltInGameModeCompletionAction() {
			return GetRuleContext<EnableBuiltInGameModeCompletionActionContext>(0);
		}
		public EnableBuiltInGameModeMusicActionContext enableBuiltInGameModeMusicAction() {
			return GetRuleContext<EnableBuiltInGameModeMusicActionContext>(0);
		}
		public EnableBuiltInGameModeRespawningActionContext enableBuiltInGameModeRespawningAction() {
			return GetRuleContext<EnableBuiltInGameModeRespawningActionContext>(0);
		}
		public EnableBuiltInGameModeScoringActionContext enableBuiltInGameModeScoringAction() {
			return GetRuleContext<EnableBuiltInGameModeScoringActionContext>(0);
		}
		public EnableDeathSpectateAllPlayersActionContext enableDeathSpectateAllPlayersAction() {
			return GetRuleContext<EnableDeathSpectateAllPlayersActionContext>(0);
		}
		public EnableDeathSpectateTargetHudActionContext enableDeathSpectateTargetHudAction() {
			return GetRuleContext<EnableDeathSpectateTargetHudActionContext>(0);
		}
		public GoToAssembleHeroesActionContext goToAssembleHeroesAction() {
			return GetRuleContext<GoToAssembleHeroesActionContext>(0);
		}
		public HealActionContext healAction() {
			return GetRuleContext<HealActionContext>(0);
		}
		public KillActionContext killAction() {
			return GetRuleContext<KillActionContext>(0);
		}
		public LoopActionContext loopAction() {
			return GetRuleContext<LoopActionContext>(0);
		}
		public LoopIfActionContext loopIfAction() {
			return GetRuleContext<LoopIfActionContext>(0);
		}
		public LoopIfConditionIsFalseActionContext loopIfConditionIsFalseAction() {
			return GetRuleContext<LoopIfConditionIsFalseActionContext>(0);
		}
		public LoopIfConditionIsTrueActionContext loopIfConditionIsTrueAction() {
			return GetRuleContext<LoopIfConditionIsTrueActionContext>(0);
		}
		public ModifyGlobalVariableActionContext modifyGlobalVariableAction() {
			return GetRuleContext<ModifyGlobalVariableActionContext>(0);
		}
		public ModifyGlobalVariableAtIndexActionContext modifyGlobalVariableAtIndexAction() {
			return GetRuleContext<ModifyGlobalVariableAtIndexActionContext>(0);
		}
		public ModifyPlayerVariableActionContext modifyPlayerVariableAction() {
			return GetRuleContext<ModifyPlayerVariableActionContext>(0);
		}
		public ModifyPlayerVariableAtIndexActionContext modifyPlayerVariableAtIndexAction() {
			return GetRuleContext<ModifyPlayerVariableAtIndexActionContext>(0);
		}
		public ModifyTeamScoreActionContext modifyTeamScoreAction() {
			return GetRuleContext<ModifyTeamScoreActionContext>(0);
		}
		public PauseMatchTimeActionContext pauseMatchTimeAction() {
			return GetRuleContext<PauseMatchTimeActionContext>(0);
		}
		public PlayEffectActionContext playEffectAction() {
			return GetRuleContext<PlayEffectActionContext>(0);
		}
		public PreloadHeroActionContext preloadHeroAction() {
			return GetRuleContext<PreloadHeroActionContext>(0);
		}
		public PressButtonActionContext pressButtonAction() {
			return GetRuleContext<PressButtonActionContext>(0);
		}
		public ResetPlayerHeroAvailabilityActionContext resetPlayerHeroAvailabilityAction() {
			return GetRuleContext<ResetPlayerHeroAvailabilityActionContext>(0);
		}
		public RespawnActionContext respawnAction() {
			return GetRuleContext<RespawnActionContext>(0);
		}
		public ResurrectActionContext resurrectAction() {
			return GetRuleContext<ResurrectActionContext>(0);
		}
		public SetAbility1EnabledActionContext setAbility1EnabledAction() {
			return GetRuleContext<SetAbility1EnabledActionContext>(0);
		}
		public SetAbility2EnabledActionContext setAbility2EnabledAction() {
			return GetRuleContext<SetAbility2EnabledActionContext>(0);
		}
		public SetDamageDealtActionContext setDamageDealtAction() {
			return GetRuleContext<SetDamageDealtActionContext>(0);
		}
		public SetDamageReceivedActionContext setDamageReceivedAction() {
			return GetRuleContext<SetDamageReceivedActionContext>(0);
		}
		public SetFacingActionContext setFacingAction() {
			return GetRuleContext<SetFacingActionContext>(0);
		}
		public SetGlobalVariableAtIndexActionContext setGlobalVariableAtIndexAction() {
			return GetRuleContext<SetGlobalVariableAtIndexActionContext>(0);
		}
		public SetGravityActionContext setGravityAction() {
			return GetRuleContext<SetGravityActionContext>(0);
		}
		public SetHealingDealtActionContext setHealingDealtAction() {
			return GetRuleContext<SetHealingDealtActionContext>(0);
		}
		public SetHealingReceivedActionContext setHealingReceivedAction() {
			return GetRuleContext<SetHealingReceivedActionContext>(0);
		}
		public SetMatchTimeActionContext setMatchTimeAction() {
			return GetRuleContext<SetMatchTimeActionContext>(0);
		}
		public SetMaxHealthActionContext setMaxHealthAction() {
			return GetRuleContext<SetMaxHealthActionContext>(0);
		}
		public SetMoveSpeedActionContext setMoveSpeedAction() {
			return GetRuleContext<SetMoveSpeedActionContext>(0);
		}
		public SetObjectiveDescriptionActionContext setObjectiveDescriptionAction() {
			return GetRuleContext<SetObjectiveDescriptionActionContext>(0);
		}
		public SetPlayerAllowedHeroesActionContext setPlayerAllowedHeroesAction() {
			return GetRuleContext<SetPlayerAllowedHeroesActionContext>(0);
		}
		public SetPlayerScoreActionContext setPlayerScoreAction() {
			return GetRuleContext<SetPlayerScoreActionContext>(0);
		}
		public SetPlayerVariableActionContext setPlayerVariableAction() {
			return GetRuleContext<SetPlayerVariableActionContext>(0);
		}
		public SetPlayerVariableAtIndexActionContext setPlayerVariableAtIndexAction() {
			return GetRuleContext<SetPlayerVariableAtIndexActionContext>(0);
		}
		public SetPrimaryFireEnabledActionContext setPrimaryFireEnabledAction() {
			return GetRuleContext<SetPrimaryFireEnabledActionContext>(0);
		}
		public SetProjectileGravityActionContext setProjectileGravityAction() {
			return GetRuleContext<SetProjectileGravityActionContext>(0);
		}
		public SetRespawnMaxTimeActionContext setRespawnMaxTimeAction() {
			return GetRuleContext<SetRespawnMaxTimeActionContext>(0);
		}
		public SetSecondaryFireEnabledActionContext setSecondaryFireEnabledAction() {
			return GetRuleContext<SetSecondaryFireEnabledActionContext>(0);
		}
		public SetSlowMotionActionContext setSlowMotionAction() {
			return GetRuleContext<SetSlowMotionActionContext>(0);
		}
		public SetStatusActionContext setStatusAction() {
			return GetRuleContext<SetStatusActionContext>(0);
		}
		public SetTeamScoreActionContext setTeamScoreAction() {
			return GetRuleContext<SetTeamScoreActionContext>(0);
		}
		public SetUltimateAbilityEnabledActionContext setUltimateAbilityEnabledAction() {
			return GetRuleContext<SetUltimateAbilityEnabledActionContext>(0);
		}
		public SetUltimateChargeActionContext setUltimateChargeAction() {
			return GetRuleContext<SetUltimateChargeActionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 28, RULE_action);
		try {
			State = 1162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1071; setGlobalVariableAction();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1072; abortAction();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1073; abortIfAction();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1074; abortIfConditionIsFalseAction();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1075; abortIfConditionIsTrueAction();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1076; allowButtonAction();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1077; applyImpulseAction();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1078; bigMessageAction();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1079; chaseGlobalVariableAtRateAction();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1080; chaseGlobalVariableOverTimeAction();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1081; chasePlayerVariableAtRateAction();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1082; chasePlayerVariableOverTimeAction();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1083; clearStatusAction();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1084; communicateAction();
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1085; createEffectAction();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1086; createHudTextAction();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1087; createIconAction();
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1088; createInWorldTextAction();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1089; damageAction();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1090; declareMatchDrawAction();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1091; declarePlayerVictoryAction();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1092; declareRoundVictoryAction();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1093; declareTeamVictoryAction();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1094; destroyAllEffectsAction();
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1095; destroyAllHudTextAction();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1096; destroyAllIconsAction();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1097; destroyAllInWorldTextAction();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1098; destroyEffectAction();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1099; destroyHudTextAction();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1100; destroyIconAction();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1101; destroyInWorldTextAction();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1102; disableBuiltInGameModeAnnouncerAction();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1103; disableBuiltInGameModeCompletionAction();
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1104; disableBuiltInGameModeMusicAction();
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1105; disableBuiltInGameModeRespawningAction();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1106; disableBuiltInGameModeScoringAction();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1107; disableDeathSpectateAllPlayersAction();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1108; disableDeathSpectateTargetHudAction();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1109; disallowButtonAction();
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1110; enableBuiltInGameModeAnnouncerAction();
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1111; enableBuiltInGameModeCompletionAction();
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1112; enableBuiltInGameModeMusicAction();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1113; enableBuiltInGameModeRespawningAction();
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1114; enableBuiltInGameModeScoringAction();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1115; enableDeathSpectateAllPlayersAction();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1116; enableDeathSpectateTargetHudAction();
				}
				break;
			case T__63:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1117; goToAssembleHeroesAction();
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1118; healAction();
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1119; killAction();
				}
				break;
			case T__66:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1120; loopAction();
				}
				break;
			case T__67:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1121; loopIfAction();
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1122; loopIfConditionIsFalseAction();
				}
				break;
			case T__69:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1123; loopIfConditionIsTrueAction();
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1124; modifyGlobalVariableAction();
				}
				break;
			case T__71:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1125; modifyGlobalVariableAtIndexAction();
				}
				break;
			case T__72:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1126; modifyPlayerVariableAction();
				}
				break;
			case T__73:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1127; modifyPlayerVariableAtIndexAction();
				}
				break;
			case T__74:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1128; modifyTeamScoreAction();
				}
				break;
			case T__75:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1129; pauseMatchTimeAction();
				}
				break;
			case T__76:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1130; playEffectAction();
				}
				break;
			case T__77:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1131; preloadHeroAction();
				}
				break;
			case T__78:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1132; pressButtonAction();
				}
				break;
			case T__79:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1133; resetPlayerHeroAvailabilityAction();
				}
				break;
			case T__80:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1134; respawnAction();
				}
				break;
			case T__81:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1135; resurrectAction();
				}
				break;
			case T__82:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1136; setAbility1EnabledAction();
				}
				break;
			case T__83:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1137; setAbility2EnabledAction();
				}
				break;
			case T__84:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1138; setDamageDealtAction();
				}
				break;
			case T__85:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1139; setDamageReceivedAction();
				}
				break;
			case T__86:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1140; setFacingAction();
				}
				break;
			case T__87:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1141; setGlobalVariableAtIndexAction();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1142; setGravityAction();
				}
				break;
			case T__89:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1143; setHealingDealtAction();
				}
				break;
			case T__90:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1144; setHealingReceivedAction();
				}
				break;
			case T__91:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1145; setMatchTimeAction();
				}
				break;
			case T__92:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1146; setMaxHealthAction();
				}
				break;
			case T__93:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1147; setMoveSpeedAction();
				}
				break;
			case T__94:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1148; setObjectiveDescriptionAction();
				}
				break;
			case T__95:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1149; setPlayerAllowedHeroesAction();
				}
				break;
			case T__96:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1150; setPlayerScoreAction();
				}
				break;
			case T__97:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1151; setPlayerVariableAction();
				}
				break;
			case T__98:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1152; setPlayerVariableAtIndexAction();
				}
				break;
			case T__99:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1153; setPrimaryFireEnabledAction();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1154; setProjectileGravityAction();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1155; setRespawnMaxTimeAction();
				}
				break;
			case T__102:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1156; setSecondaryFireEnabledAction();
				}
				break;
			case T__103:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1157; setSlowMotionAction();
				}
				break;
			case T__104:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1158; setStatusAction();
				}
				break;
			case T__105:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1159; setTeamScoreAction();
				}
				break;
			case T__106:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1160; setUltimateAbilityEnabledAction();
				}
				break;
			case T__107:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1161; setUltimateChargeAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetGlobalVariableActionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetGlobalVariableActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setGlobalVariableAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetGlobalVariableAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetGlobalVariableAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetGlobalVariableAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetGlobalVariableActionContext setGlobalVariableAction() {
		SetGlobalVariableActionContext _localctx = new SetGlobalVariableActionContext(Context, State);
		EnterRule(_localctx, 30, RULE_setGlobalVariableAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164; Match(T__16);
			State = 1165; Match(T__1);
			State = 1166; globalVariable();
			State = 1167; Match(T__17);
			State = 1168; expression();
			State = 1169; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbortActionContext : ParserRuleContext {
		public AbortActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abortAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbortAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbortAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbortAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbortActionContext abortAction() {
		AbortActionContext _localctx = new AbortActionContext(Context, State);
		EnterRule(_localctx, 32, RULE_abortAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbortIfActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AbortIfActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abortIfAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbortIfAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbortIfAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbortIfAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbortIfActionContext abortIfAction() {
		AbortIfActionContext _localctx = new AbortIfActionContext(Context, State);
		EnterRule(_localctx, 34, RULE_abortIfAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173; Match(T__19);
			State = 1174; Match(T__1);
			State = 1175; expression();
			State = 1176; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbortIfConditionIsFalseActionContext : ParserRuleContext {
		public AbortIfConditionIsFalseActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abortIfConditionIsFalseAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbortIfConditionIsFalseAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbortIfConditionIsFalseAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbortIfConditionIsFalseAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbortIfConditionIsFalseActionContext abortIfConditionIsFalseAction() {
		AbortIfConditionIsFalseActionContext _localctx = new AbortIfConditionIsFalseActionContext(Context, State);
		EnterRule(_localctx, 36, RULE_abortIfConditionIsFalseAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbortIfConditionIsTrueActionContext : ParserRuleContext {
		public AbortIfConditionIsTrueActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abortIfConditionIsTrueAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbortIfConditionIsTrueAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbortIfConditionIsTrueAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbortIfConditionIsTrueAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbortIfConditionIsTrueActionContext abortIfConditionIsTrueAction() {
		AbortIfConditionIsTrueActionContext _localctx = new AbortIfConditionIsTrueActionContext(Context, State);
		EnterRule(_localctx, 38, RULE_abortIfConditionIsTrueAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllowButtonActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ButtonContext button() {
			return GetRuleContext<ButtonContext>(0);
		}
		public AllowButtonActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allowButtonAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllowButtonAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllowButtonAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllowButtonAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllowButtonActionContext allowButtonAction() {
		AllowButtonActionContext _localctx = new AllowButtonActionContext(Context, State);
		EnterRule(_localctx, 40, RULE_allowButtonAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182; Match(T__22);
			State = 1183; Match(T__1);
			State = 1184; expression();
			State = 1185; Match(T__17);
			State = 1186; button();
			State = 1187; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApplyImpulseActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelativeToContext relativeTo() {
			return GetRuleContext<RelativeToContext>(0);
		}
		public MotionTypeContext motionType() {
			return GetRuleContext<MotionTypeContext>(0);
		}
		public ApplyImpulseActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_applyImpulseAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterApplyImpulseAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitApplyImpulseAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApplyImpulseAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApplyImpulseActionContext applyImpulseAction() {
		ApplyImpulseActionContext _localctx = new ApplyImpulseActionContext(Context, State);
		EnterRule(_localctx, 42, RULE_applyImpulseAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1189; Match(T__23);
			State = 1190; Match(T__1);
			State = 1191; expression();
			State = 1192; Match(T__17);
			State = 1193; expression();
			State = 1194; Match(T__17);
			State = 1195; expression();
			State = 1196; Match(T__17);
			State = 1197; relativeTo();
			State = 1198; Match(T__17);
			State = 1199; motionType();
			State = 1200; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigMessageActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BigMessageActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigMessageAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBigMessageAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBigMessageAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigMessageAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigMessageActionContext bigMessageAction() {
		BigMessageActionContext _localctx = new BigMessageActionContext(Context, State);
		EnterRule(_localctx, 44, RULE_bigMessageAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202; Match(T__24);
			State = 1203; Match(T__1);
			State = 1204; expression();
			State = 1205; Match(T__17);
			State = 1206; expression();
			State = 1207; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChaseGlobalVariableAtRateActionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RateReevaluationContext rateReevaluation() {
			return GetRuleContext<RateReevaluationContext>(0);
		}
		public ChaseGlobalVariableAtRateActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chaseGlobalVariableAtRateAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterChaseGlobalVariableAtRateAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitChaseGlobalVariableAtRateAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChaseGlobalVariableAtRateAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChaseGlobalVariableAtRateActionContext chaseGlobalVariableAtRateAction() {
		ChaseGlobalVariableAtRateActionContext _localctx = new ChaseGlobalVariableAtRateActionContext(Context, State);
		EnterRule(_localctx, 46, RULE_chaseGlobalVariableAtRateAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209; Match(T__25);
			State = 1210; Match(T__1);
			State = 1211; globalVariable();
			State = 1212; Match(T__17);
			State = 1213; expression();
			State = 1214; Match(T__17);
			State = 1215; expression();
			State = 1216; Match(T__17);
			State = 1217; rateReevaluation();
			State = 1218; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChaseGlobalVariableOverTimeActionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TimeReevaluationContext timeReevaluation() {
			return GetRuleContext<TimeReevaluationContext>(0);
		}
		public ChaseGlobalVariableOverTimeActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chaseGlobalVariableOverTimeAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterChaseGlobalVariableOverTimeAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitChaseGlobalVariableOverTimeAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChaseGlobalVariableOverTimeAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChaseGlobalVariableOverTimeActionContext chaseGlobalVariableOverTimeAction() {
		ChaseGlobalVariableOverTimeActionContext _localctx = new ChaseGlobalVariableOverTimeActionContext(Context, State);
		EnterRule(_localctx, 48, RULE_chaseGlobalVariableOverTimeAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220; Match(T__26);
			State = 1221; Match(T__1);
			State = 1222; globalVariable();
			State = 1223; Match(T__17);
			State = 1224; expression();
			State = 1225; Match(T__17);
			State = 1226; expression();
			State = 1227; Match(T__17);
			State = 1228; timeReevaluation();
			State = 1229; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChasePlayerVariableAtRateActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public RateReevaluationContext rateReevaluation() {
			return GetRuleContext<RateReevaluationContext>(0);
		}
		public ChasePlayerVariableAtRateActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chasePlayerVariableAtRateAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterChasePlayerVariableAtRateAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitChasePlayerVariableAtRateAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChasePlayerVariableAtRateAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChasePlayerVariableAtRateActionContext chasePlayerVariableAtRateAction() {
		ChasePlayerVariableAtRateActionContext _localctx = new ChasePlayerVariableAtRateActionContext(Context, State);
		EnterRule(_localctx, 50, RULE_chasePlayerVariableAtRateAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231; Match(T__27);
			State = 1232; Match(T__1);
			State = 1233; expression();
			State = 1234; Match(T__17);
			State = 1235; playerVariable();
			State = 1236; Match(T__17);
			State = 1237; expression();
			State = 1238; Match(T__17);
			State = 1239; expression();
			State = 1240; Match(T__17);
			State = 1241; rateReevaluation();
			State = 1242; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChasePlayerVariableOverTimeActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public TimeReevaluationContext timeReevaluation() {
			return GetRuleContext<TimeReevaluationContext>(0);
		}
		public ChasePlayerVariableOverTimeActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chasePlayerVariableOverTimeAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterChasePlayerVariableOverTimeAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitChasePlayerVariableOverTimeAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChasePlayerVariableOverTimeAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChasePlayerVariableOverTimeActionContext chasePlayerVariableOverTimeAction() {
		ChasePlayerVariableOverTimeActionContext _localctx = new ChasePlayerVariableOverTimeActionContext(Context, State);
		EnterRule(_localctx, 52, RULE_chasePlayerVariableOverTimeAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244; Match(T__28);
			State = 1245; Match(T__1);
			State = 1246; expression();
			State = 1247; Match(T__17);
			State = 1248; playerVariable();
			State = 1249; Match(T__17);
			State = 1250; expression();
			State = 1251; Match(T__17);
			State = 1252; expression();
			State = 1253; Match(T__17);
			State = 1254; timeReevaluation();
			State = 1255; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClearStatusActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatusContext status() {
			return GetRuleContext<StatusContext>(0);
		}
		public ClearStatusActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clearStatusAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterClearStatusAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitClearStatusAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClearStatusAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClearStatusActionContext clearStatusAction() {
		ClearStatusActionContext _localctx = new ClearStatusActionContext(Context, State);
		EnterRule(_localctx, 54, RULE_clearStatusAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257; Match(T__29);
			State = 1258; Match(T__1);
			State = 1259; expression();
			State = 1260; Match(T__17);
			State = 1261; status();
			State = 1262; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommunicateActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CommunicationTypeContext communicationType() {
			return GetRuleContext<CommunicationTypeContext>(0);
		}
		public CommunicateActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_communicateAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCommunicateAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCommunicateAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommunicateAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommunicateActionContext communicateAction() {
		CommunicateActionContext _localctx = new CommunicateActionContext(Context, State);
		EnterRule(_localctx, 56, RULE_communicateAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264; Match(T__30);
			State = 1265; Match(T__1);
			State = 1266; expression();
			State = 1267; Match(T__17);
			State = 1268; communicationType();
			State = 1269; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEffectActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EffectShapeContext effectShape() {
			return GetRuleContext<EffectShapeContext>(0);
		}
		public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public CreateEffectReevaluationContext createEffectReevaluation() {
			return GetRuleContext<CreateEffectReevaluationContext>(0);
		}
		public CreateEffectActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEffectAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCreateEffectAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCreateEffectAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEffectAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEffectActionContext createEffectAction() {
		CreateEffectActionContext _localctx = new CreateEffectActionContext(Context, State);
		EnterRule(_localctx, 58, RULE_createEffectAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; Match(T__31);
			State = 1272; Match(T__1);
			State = 1273; expression();
			State = 1274; Match(T__17);
			State = 1275; effectShape();
			State = 1276; Match(T__17);
			State = 1277; color();
			State = 1278; Match(T__17);
			State = 1279; expression();
			State = 1280; Match(T__17);
			State = 1281; expression();
			State = 1282; Match(T__17);
			State = 1283; createEffectReevaluation();
			State = 1284; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateHudTextActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HudTextLocationContext hudTextLocation() {
			return GetRuleContext<HudTextLocationContext>(0);
		}
		public ColorContext[] color() {
			return GetRuleContexts<ColorContext>();
		}
		public ColorContext color(int i) {
			return GetRuleContext<ColorContext>(i);
		}
		public HudTextReevaluationContext hudTextReevaluation() {
			return GetRuleContext<HudTextReevaluationContext>(0);
		}
		public CreateHudTextActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createHudTextAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCreateHudTextAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCreateHudTextAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateHudTextAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateHudTextActionContext createHudTextAction() {
		CreateHudTextActionContext _localctx = new CreateHudTextActionContext(Context, State);
		EnterRule(_localctx, 60, RULE_createHudTextAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286; Match(T__32);
			State = 1287; Match(T__1);
			State = 1288; expression();
			State = 1289; Match(T__17);
			State = 1290; expression();
			State = 1291; Match(T__17);
			State = 1292; expression();
			State = 1293; Match(T__17);
			State = 1294; expression();
			State = 1295; Match(T__17);
			State = 1296; hudTextLocation();
			State = 1297; Match(T__17);
			State = 1298; expression();
			State = 1299; Match(T__17);
			State = 1300; color();
			State = 1301; Match(T__17);
			State = 1302; color();
			State = 1303; Match(T__17);
			State = 1304; color();
			State = 1305; Match(T__17);
			State = 1306; hudTextReevaluation();
			State = 1307; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIconActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IconContext icon() {
			return GetRuleContext<IconContext>(0);
		}
		public IconReevaluationContext iconReevaluation() {
			return GetRuleContext<IconReevaluationContext>(0);
		}
		public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public CreateIconActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIconAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCreateIconAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCreateIconAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIconAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIconActionContext createIconAction() {
		CreateIconActionContext _localctx = new CreateIconActionContext(Context, State);
		EnterRule(_localctx, 62, RULE_createIconAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309; Match(T__33);
			State = 1310; Match(T__1);
			State = 1311; expression();
			State = 1312; Match(T__17);
			State = 1313; expression();
			State = 1314; Match(T__17);
			State = 1315; icon();
			State = 1316; Match(T__17);
			State = 1317; iconReevaluation();
			State = 1318; Match(T__17);
			State = 1319; color();
			State = 1320; Match(T__17);
			State = 1321; expression();
			State = 1322; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateInWorldTextActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InWorldTextClippingContext inWorldTextClipping() {
			return GetRuleContext<InWorldTextClippingContext>(0);
		}
		public InWorldTextReevaluationContext inWorldTextReevaluation() {
			return GetRuleContext<InWorldTextReevaluationContext>(0);
		}
		public CreateInWorldTextActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createInWorldTextAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCreateInWorldTextAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCreateInWorldTextAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateInWorldTextAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateInWorldTextActionContext createInWorldTextAction() {
		CreateInWorldTextActionContext _localctx = new CreateInWorldTextActionContext(Context, State);
		EnterRule(_localctx, 64, RULE_createInWorldTextAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; Match(T__34);
			State = 1325; Match(T__1);
			State = 1326; expression();
			State = 1327; Match(T__17);
			State = 1328; expression();
			State = 1329; Match(T__17);
			State = 1330; expression();
			State = 1331; Match(T__17);
			State = 1332; expression();
			State = 1333; Match(T__17);
			State = 1334; inWorldTextClipping();
			State = 1335; Match(T__17);
			State = 1336; inWorldTextReevaluation();
			State = 1337; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DamageActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damageAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDamageAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDamageAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDamageAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DamageActionContext damageAction() {
		DamageActionContext _localctx = new DamageActionContext(Context, State);
		EnterRule(_localctx, 66, RULE_damageAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339; Match(T__35);
			State = 1340; Match(T__1);
			State = 1341; expression();
			State = 1342; Match(T__17);
			State = 1343; expression();
			State = 1344; Match(T__17);
			State = 1345; expression();
			State = 1346; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareMatchDrawActionContext : ParserRuleContext {
		public DeclareMatchDrawActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareMatchDrawAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDeclareMatchDrawAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDeclareMatchDrawAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareMatchDrawAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareMatchDrawActionContext declareMatchDrawAction() {
		DeclareMatchDrawActionContext _localctx = new DeclareMatchDrawActionContext(Context, State);
		EnterRule(_localctx, 68, RULE_declareMatchDrawAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarePlayerVictoryActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarePlayerVictoryActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarePlayerVictoryAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDeclarePlayerVictoryAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDeclarePlayerVictoryAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarePlayerVictoryAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarePlayerVictoryActionContext declarePlayerVictoryAction() {
		DeclarePlayerVictoryActionContext _localctx = new DeclarePlayerVictoryActionContext(Context, State);
		EnterRule(_localctx, 70, RULE_declarePlayerVictoryAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; Match(T__37);
			State = 1351; Match(T__1);
			State = 1352; expression();
			State = 1353; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareRoundVictoryActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareRoundVictoryActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareRoundVictoryAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDeclareRoundVictoryAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDeclareRoundVictoryAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareRoundVictoryAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareRoundVictoryActionContext declareRoundVictoryAction() {
		DeclareRoundVictoryActionContext _localctx = new DeclareRoundVictoryActionContext(Context, State);
		EnterRule(_localctx, 72, RULE_declareRoundVictoryAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355; Match(T__38);
			State = 1356; Match(T__1);
			State = 1357; expression();
			State = 1358; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareTeamVictoryActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareTeamVictoryActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareTeamVictoryAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDeclareTeamVictoryAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDeclareTeamVictoryAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareTeamVictoryAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareTeamVictoryActionContext declareTeamVictoryAction() {
		DeclareTeamVictoryActionContext _localctx = new DeclareTeamVictoryActionContext(Context, State);
		EnterRule(_localctx, 74, RULE_declareTeamVictoryAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360; Match(T__39);
			State = 1361; Match(T__1);
			State = 1362; expression();
			State = 1363; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyAllEffectsActionContext : ParserRuleContext {
		public DestroyAllEffectsActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyAllEffectsAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyAllEffectsAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyAllEffectsAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyAllEffectsAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyAllEffectsActionContext destroyAllEffectsAction() {
		DestroyAllEffectsActionContext _localctx = new DestroyAllEffectsActionContext(Context, State);
		EnterRule(_localctx, 76, RULE_destroyAllEffectsAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyAllHudTextActionContext : ParserRuleContext {
		public DestroyAllHudTextActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyAllHudTextAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyAllHudTextAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyAllHudTextAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyAllHudTextAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyAllHudTextActionContext destroyAllHudTextAction() {
		DestroyAllHudTextActionContext _localctx = new DestroyAllHudTextActionContext(Context, State);
		EnterRule(_localctx, 78, RULE_destroyAllHudTextAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367; Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyAllIconsActionContext : ParserRuleContext {
		public DestroyAllIconsActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyAllIconsAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyAllIconsAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyAllIconsAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyAllIconsAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyAllIconsActionContext destroyAllIconsAction() {
		DestroyAllIconsActionContext _localctx = new DestroyAllIconsActionContext(Context, State);
		EnterRule(_localctx, 80, RULE_destroyAllIconsAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369; Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyAllInWorldTextActionContext : ParserRuleContext {
		public DestroyAllInWorldTextActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyAllInWorldTextAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyAllInWorldTextAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyAllInWorldTextAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyAllInWorldTextAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyAllInWorldTextActionContext destroyAllInWorldTextAction() {
		DestroyAllInWorldTextActionContext _localctx = new DestroyAllInWorldTextActionContext(Context, State);
		EnterRule(_localctx, 82, RULE_destroyAllInWorldTextAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371; Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyEffectActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DestroyEffectActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyEffectAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyEffectAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyEffectAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyEffectAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyEffectActionContext destroyEffectAction() {
		DestroyEffectActionContext _localctx = new DestroyEffectActionContext(Context, State);
		EnterRule(_localctx, 84, RULE_destroyEffectAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373; Match(T__44);
			State = 1374; Match(T__1);
			State = 1375; expression();
			State = 1376; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyHudTextActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DestroyHudTextActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyHudTextAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyHudTextAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyHudTextAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyHudTextAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyHudTextActionContext destroyHudTextAction() {
		DestroyHudTextActionContext _localctx = new DestroyHudTextActionContext(Context, State);
		EnterRule(_localctx, 86, RULE_destroyHudTextAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378; Match(T__45);
			State = 1379; Match(T__1);
			State = 1380; expression();
			State = 1381; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyIconActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DestroyIconActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyIconAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyIconAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyIconAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyIconAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyIconActionContext destroyIconAction() {
		DestroyIconActionContext _localctx = new DestroyIconActionContext(Context, State);
		EnterRule(_localctx, 88, RULE_destroyIconAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383; Match(T__46);
			State = 1384; Match(T__1);
			State = 1385; expression();
			State = 1386; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyInWorldTextActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DestroyInWorldTextActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyInWorldTextAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestroyInWorldTextAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestroyInWorldTextAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestroyInWorldTextAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestroyInWorldTextActionContext destroyInWorldTextAction() {
		DestroyInWorldTextActionContext _localctx = new DestroyInWorldTextActionContext(Context, State);
		EnterRule(_localctx, 90, RULE_destroyInWorldTextAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388; Match(T__47);
			State = 1389; Match(T__1);
			State = 1390; expression();
			State = 1391; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisableBuiltInGameModeAnnouncerActionContext : ParserRuleContext {
		public DisableBuiltInGameModeAnnouncerActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disableBuiltInGameModeAnnouncerAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisableBuiltInGameModeAnnouncerAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisableBuiltInGameModeAnnouncerAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisableBuiltInGameModeAnnouncerAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisableBuiltInGameModeAnnouncerActionContext disableBuiltInGameModeAnnouncerAction() {
		DisableBuiltInGameModeAnnouncerActionContext _localctx = new DisableBuiltInGameModeAnnouncerActionContext(Context, State);
		EnterRule(_localctx, 92, RULE_disableBuiltInGameModeAnnouncerAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1393; Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisableBuiltInGameModeCompletionActionContext : ParserRuleContext {
		public DisableBuiltInGameModeCompletionActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disableBuiltInGameModeCompletionAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisableBuiltInGameModeCompletionAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisableBuiltInGameModeCompletionAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisableBuiltInGameModeCompletionAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisableBuiltInGameModeCompletionActionContext disableBuiltInGameModeCompletionAction() {
		DisableBuiltInGameModeCompletionActionContext _localctx = new DisableBuiltInGameModeCompletionActionContext(Context, State);
		EnterRule(_localctx, 94, RULE_disableBuiltInGameModeCompletionAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395; Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisableBuiltInGameModeMusicActionContext : ParserRuleContext {
		public DisableBuiltInGameModeMusicActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disableBuiltInGameModeMusicAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisableBuiltInGameModeMusicAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisableBuiltInGameModeMusicAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisableBuiltInGameModeMusicAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisableBuiltInGameModeMusicActionContext disableBuiltInGameModeMusicAction() {
		DisableBuiltInGameModeMusicActionContext _localctx = new DisableBuiltInGameModeMusicActionContext(Context, State);
		EnterRule(_localctx, 96, RULE_disableBuiltInGameModeMusicAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397; Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisableBuiltInGameModeRespawningActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DisableBuiltInGameModeRespawningActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disableBuiltInGameModeRespawningAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisableBuiltInGameModeRespawningAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisableBuiltInGameModeRespawningAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisableBuiltInGameModeRespawningAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisableBuiltInGameModeRespawningActionContext disableBuiltInGameModeRespawningAction() {
		DisableBuiltInGameModeRespawningActionContext _localctx = new DisableBuiltInGameModeRespawningActionContext(Context, State);
		EnterRule(_localctx, 98, RULE_disableBuiltInGameModeRespawningAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399; Match(T__51);
			State = 1400; Match(T__1);
			State = 1401; expression();
			State = 1402; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisableBuiltInGameModeScoringActionContext : ParserRuleContext {
		public DisableBuiltInGameModeScoringActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disableBuiltInGameModeScoringAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisableBuiltInGameModeScoringAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisableBuiltInGameModeScoringAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisableBuiltInGameModeScoringAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisableBuiltInGameModeScoringActionContext disableBuiltInGameModeScoringAction() {
		DisableBuiltInGameModeScoringActionContext _localctx = new DisableBuiltInGameModeScoringActionContext(Context, State);
		EnterRule(_localctx, 100, RULE_disableBuiltInGameModeScoringAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404; Match(T__52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisableDeathSpectateAllPlayersActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DisableDeathSpectateAllPlayersActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disableDeathSpectateAllPlayersAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisableDeathSpectateAllPlayersAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisableDeathSpectateAllPlayersAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisableDeathSpectateAllPlayersAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisableDeathSpectateAllPlayersActionContext disableDeathSpectateAllPlayersAction() {
		DisableDeathSpectateAllPlayersActionContext _localctx = new DisableDeathSpectateAllPlayersActionContext(Context, State);
		EnterRule(_localctx, 102, RULE_disableDeathSpectateAllPlayersAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1406; Match(T__53);
			State = 1407; Match(T__1);
			State = 1408; expression();
			State = 1409; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisableDeathSpectateTargetHudActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DisableDeathSpectateTargetHudActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disableDeathSpectateTargetHudAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisableDeathSpectateTargetHudAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisableDeathSpectateTargetHudAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisableDeathSpectateTargetHudAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisableDeathSpectateTargetHudActionContext disableDeathSpectateTargetHudAction() {
		DisableDeathSpectateTargetHudActionContext _localctx = new DisableDeathSpectateTargetHudActionContext(Context, State);
		EnterRule(_localctx, 104, RULE_disableDeathSpectateTargetHudAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411; Match(T__54);
			State = 1412; Match(T__1);
			State = 1413; expression();
			State = 1414; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisallowButtonActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ButtonContext button() {
			return GetRuleContext<ButtonContext>(0);
		}
		public DisallowButtonActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disallowButtonAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDisallowButtonAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDisallowButtonAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisallowButtonAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisallowButtonActionContext disallowButtonAction() {
		DisallowButtonActionContext _localctx = new DisallowButtonActionContext(Context, State);
		EnterRule(_localctx, 106, RULE_disallowButtonAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416; Match(T__55);
			State = 1417; Match(T__1);
			State = 1418; expression();
			State = 1419; Match(T__17);
			State = 1420; button();
			State = 1421; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableBuiltInGameModeAnnouncerActionContext : ParserRuleContext {
		public EnableBuiltInGameModeAnnouncerActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableBuiltInGameModeAnnouncerAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnableBuiltInGameModeAnnouncerAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnableBuiltInGameModeAnnouncerAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableBuiltInGameModeAnnouncerAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableBuiltInGameModeAnnouncerActionContext enableBuiltInGameModeAnnouncerAction() {
		EnableBuiltInGameModeAnnouncerActionContext _localctx = new EnableBuiltInGameModeAnnouncerActionContext(Context, State);
		EnterRule(_localctx, 108, RULE_enableBuiltInGameModeAnnouncerAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423; Match(T__56);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableBuiltInGameModeCompletionActionContext : ParserRuleContext {
		public EnableBuiltInGameModeCompletionActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableBuiltInGameModeCompletionAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnableBuiltInGameModeCompletionAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnableBuiltInGameModeCompletionAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableBuiltInGameModeCompletionAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableBuiltInGameModeCompletionActionContext enableBuiltInGameModeCompletionAction() {
		EnableBuiltInGameModeCompletionActionContext _localctx = new EnableBuiltInGameModeCompletionActionContext(Context, State);
		EnterRule(_localctx, 110, RULE_enableBuiltInGameModeCompletionAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425; Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableBuiltInGameModeMusicActionContext : ParserRuleContext {
		public EnableBuiltInGameModeMusicActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableBuiltInGameModeMusicAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnableBuiltInGameModeMusicAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnableBuiltInGameModeMusicAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableBuiltInGameModeMusicAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableBuiltInGameModeMusicActionContext enableBuiltInGameModeMusicAction() {
		EnableBuiltInGameModeMusicActionContext _localctx = new EnableBuiltInGameModeMusicActionContext(Context, State);
		EnterRule(_localctx, 112, RULE_enableBuiltInGameModeMusicAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1427; Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableBuiltInGameModeRespawningActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnableBuiltInGameModeRespawningActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableBuiltInGameModeRespawningAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnableBuiltInGameModeRespawningAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnableBuiltInGameModeRespawningAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableBuiltInGameModeRespawningAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableBuiltInGameModeRespawningActionContext enableBuiltInGameModeRespawningAction() {
		EnableBuiltInGameModeRespawningActionContext _localctx = new EnableBuiltInGameModeRespawningActionContext(Context, State);
		EnterRule(_localctx, 114, RULE_enableBuiltInGameModeRespawningAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1429; Match(T__59);
			State = 1430; Match(T__1);
			State = 1431; expression();
			State = 1432; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableBuiltInGameModeScoringActionContext : ParserRuleContext {
		public EnableBuiltInGameModeScoringActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableBuiltInGameModeScoringAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnableBuiltInGameModeScoringAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnableBuiltInGameModeScoringAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableBuiltInGameModeScoringAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableBuiltInGameModeScoringActionContext enableBuiltInGameModeScoringAction() {
		EnableBuiltInGameModeScoringActionContext _localctx = new EnableBuiltInGameModeScoringActionContext(Context, State);
		EnterRule(_localctx, 116, RULE_enableBuiltInGameModeScoringAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1434; Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableDeathSpectateAllPlayersActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnableDeathSpectateAllPlayersActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableDeathSpectateAllPlayersAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnableDeathSpectateAllPlayersAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnableDeathSpectateAllPlayersAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableDeathSpectateAllPlayersAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableDeathSpectateAllPlayersActionContext enableDeathSpectateAllPlayersAction() {
		EnableDeathSpectateAllPlayersActionContext _localctx = new EnableDeathSpectateAllPlayersActionContext(Context, State);
		EnterRule(_localctx, 118, RULE_enableDeathSpectateAllPlayersAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; Match(T__61);
			State = 1437; Match(T__1);
			State = 1438; expression();
			State = 1439; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableDeathSpectateTargetHudActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnableDeathSpectateTargetHudActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableDeathSpectateTargetHudAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnableDeathSpectateTargetHudAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnableDeathSpectateTargetHudAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableDeathSpectateTargetHudAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableDeathSpectateTargetHudActionContext enableDeathSpectateTargetHudAction() {
		EnableDeathSpectateTargetHudActionContext _localctx = new EnableDeathSpectateTargetHudActionContext(Context, State);
		EnterRule(_localctx, 120, RULE_enableDeathSpectateTargetHudAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441; Match(T__62);
			State = 1442; Match(T__1);
			State = 1443; expression();
			State = 1444; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToAssembleHeroesActionContext : ParserRuleContext {
		public GoToAssembleHeroesActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToAssembleHeroesAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGoToAssembleHeroesAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGoToAssembleHeroesAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToAssembleHeroesAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToAssembleHeroesActionContext goToAssembleHeroesAction() {
		GoToAssembleHeroesActionContext _localctx = new GoToAssembleHeroesActionContext(Context, State);
		EnterRule(_localctx, 122, RULE_goToAssembleHeroesAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446; Match(T__63);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HealActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHealAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHealAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealActionContext healAction() {
		HealActionContext _localctx = new HealActionContext(Context, State);
		EnterRule(_localctx, 124, RULE_healAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448; Match(T__64);
			State = 1449; Match(T__1);
			State = 1450; expression();
			State = 1451; Match(T__17);
			State = 1452; expression();
			State = 1453; Match(T__17);
			State = 1454; expression();
			State = 1455; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public KillActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterKillAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitKillAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillActionContext killAction() {
		KillActionContext _localctx = new KillActionContext(Context, State);
		EnterRule(_localctx, 126, RULE_killAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; Match(T__65);
			State = 1458; Match(T__1);
			State = 1459; expression();
			State = 1460; Match(T__17);
			State = 1461; expression();
			State = 1462; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopActionContext : ParserRuleContext {
		public LoopActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLoopAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLoopAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopActionContext loopAction() {
		LoopActionContext _localctx = new LoopActionContext(Context, State);
		EnterRule(_localctx, 128, RULE_loopAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; Match(T__66);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopIfActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopIfActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopIfAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLoopIfAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLoopIfAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopIfAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopIfActionContext loopIfAction() {
		LoopIfActionContext _localctx = new LoopIfActionContext(Context, State);
		EnterRule(_localctx, 130, RULE_loopIfAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; Match(T__67);
			State = 1467; Match(T__1);
			State = 1468; expression();
			State = 1469; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopIfConditionIsFalseActionContext : ParserRuleContext {
		public LoopIfConditionIsFalseActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopIfConditionIsFalseAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLoopIfConditionIsFalseAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLoopIfConditionIsFalseAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopIfConditionIsFalseAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopIfConditionIsFalseActionContext loopIfConditionIsFalseAction() {
		LoopIfConditionIsFalseActionContext _localctx = new LoopIfConditionIsFalseActionContext(Context, State);
		EnterRule(_localctx, 132, RULE_loopIfConditionIsFalseAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471; Match(T__68);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopIfConditionIsTrueActionContext : ParserRuleContext {
		public LoopIfConditionIsTrueActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopIfConditionIsTrueAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLoopIfConditionIsTrueAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLoopIfConditionIsTrueAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopIfConditionIsTrueAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopIfConditionIsTrueActionContext loopIfConditionIsTrueAction() {
		LoopIfConditionIsTrueActionContext _localctx = new LoopIfConditionIsTrueActionContext(Context, State);
		EnterRule(_localctx, 134, RULE_loopIfConditionIsTrueAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473; Match(T__69);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyGlobalVariableActionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public ModificationContext modification() {
			return GetRuleContext<ModificationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ModifyGlobalVariableActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifyGlobalVariableAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModifyGlobalVariableAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModifyGlobalVariableAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifyGlobalVariableAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyGlobalVariableActionContext modifyGlobalVariableAction() {
		ModifyGlobalVariableActionContext _localctx = new ModifyGlobalVariableActionContext(Context, State);
		EnterRule(_localctx, 136, RULE_modifyGlobalVariableAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; Match(T__70);
			State = 1476; Match(T__1);
			State = 1477; globalVariable();
			State = 1478; Match(T__17);
			State = 1479; modification();
			State = 1480; Match(T__17);
			State = 1481; expression();
			State = 1482; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyGlobalVariableAtIndexActionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModificationContext modification() {
			return GetRuleContext<ModificationContext>(0);
		}
		public ModifyGlobalVariableAtIndexActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifyGlobalVariableAtIndexAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModifyGlobalVariableAtIndexAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModifyGlobalVariableAtIndexAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifyGlobalVariableAtIndexAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyGlobalVariableAtIndexActionContext modifyGlobalVariableAtIndexAction() {
		ModifyGlobalVariableAtIndexActionContext _localctx = new ModifyGlobalVariableAtIndexActionContext(Context, State);
		EnterRule(_localctx, 138, RULE_modifyGlobalVariableAtIndexAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484; Match(T__71);
			State = 1485; Match(T__1);
			State = 1486; globalVariable();
			State = 1487; Match(T__17);
			State = 1488; expression();
			State = 1489; Match(T__17);
			State = 1490; modification();
			State = 1491; Match(T__17);
			State = 1492; expression();
			State = 1493; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyPlayerVariableActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public ModificationContext modification() {
			return GetRuleContext<ModificationContext>(0);
		}
		public ModifyPlayerVariableActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifyPlayerVariableAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModifyPlayerVariableAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModifyPlayerVariableAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifyPlayerVariableAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyPlayerVariableActionContext modifyPlayerVariableAction() {
		ModifyPlayerVariableActionContext _localctx = new ModifyPlayerVariableActionContext(Context, State);
		EnterRule(_localctx, 140, RULE_modifyPlayerVariableAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495; Match(T__72);
			State = 1496; Match(T__1);
			State = 1497; expression();
			State = 1498; Match(T__17);
			State = 1499; playerVariable();
			State = 1500; Match(T__17);
			State = 1501; modification();
			State = 1502; Match(T__17);
			State = 1503; expression();
			State = 1504; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyPlayerVariableAtIndexActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public ModificationContext modification() {
			return GetRuleContext<ModificationContext>(0);
		}
		public ModifyPlayerVariableAtIndexActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifyPlayerVariableAtIndexAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModifyPlayerVariableAtIndexAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModifyPlayerVariableAtIndexAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifyPlayerVariableAtIndexAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyPlayerVariableAtIndexActionContext modifyPlayerVariableAtIndexAction() {
		ModifyPlayerVariableAtIndexActionContext _localctx = new ModifyPlayerVariableAtIndexActionContext(Context, State);
		EnterRule(_localctx, 142, RULE_modifyPlayerVariableAtIndexAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506; Match(T__73);
			State = 1507; Match(T__1);
			State = 1508; expression();
			State = 1509; Match(T__17);
			State = 1510; playerVariable();
			State = 1511; Match(T__17);
			State = 1512; expression();
			State = 1513; Match(T__17);
			State = 1514; modification();
			State = 1515; Match(T__17);
			State = 1516; expression();
			State = 1517; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyTeamScoreActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModifyTeamScoreActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifyTeamScoreAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModifyTeamScoreAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModifyTeamScoreAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifyTeamScoreAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyTeamScoreActionContext modifyTeamScoreAction() {
		ModifyTeamScoreActionContext _localctx = new ModifyTeamScoreActionContext(Context, State);
		EnterRule(_localctx, 144, RULE_modifyTeamScoreAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519; Match(T__74);
			State = 1520; Match(T__1);
			State = 1521; expression();
			State = 1522; Match(T__17);
			State = 1523; expression();
			State = 1524; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PauseMatchTimeActionContext : ParserRuleContext {
		public PauseMatchTimeActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pauseMatchTimeAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPauseMatchTimeAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPauseMatchTimeAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPauseMatchTimeAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PauseMatchTimeActionContext pauseMatchTimeAction() {
		PauseMatchTimeActionContext _localctx = new PauseMatchTimeActionContext(Context, State);
		EnterRule(_localctx, 146, RULE_pauseMatchTimeAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526; Match(T__75);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayEffectActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AnimatedEffectContext animatedEffect() {
			return GetRuleContext<AnimatedEffectContext>(0);
		}
		public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public PlayEffectActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playEffectAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayEffectAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayEffectAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayEffectAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayEffectActionContext playEffectAction() {
		PlayEffectActionContext _localctx = new PlayEffectActionContext(Context, State);
		EnterRule(_localctx, 148, RULE_playEffectAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1528; Match(T__76);
			State = 1529; Match(T__1);
			State = 1530; expression();
			State = 1531; Match(T__17);
			State = 1532; animatedEffect();
			State = 1533; Match(T__17);
			State = 1534; color();
			State = 1535; Match(T__17);
			State = 1536; expression();
			State = 1537; Match(T__17);
			State = 1538; expression();
			State = 1539; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadHeroActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PreloadHeroActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadHeroAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPreloadHeroAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPreloadHeroAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreloadHeroAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreloadHeroActionContext preloadHeroAction() {
		PreloadHeroActionContext _localctx = new PreloadHeroActionContext(Context, State);
		EnterRule(_localctx, 150, RULE_preloadHeroAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541; Match(T__77);
			State = 1542; Match(T__1);
			State = 1543; expression();
			State = 1544; Match(T__17);
			State = 1545; expression();
			State = 1546; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PressButtonActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ButtonContext button() {
			return GetRuleContext<ButtonContext>(0);
		}
		public PressButtonActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pressButtonAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPressButtonAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPressButtonAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPressButtonAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PressButtonActionContext pressButtonAction() {
		PressButtonActionContext _localctx = new PressButtonActionContext(Context, State);
		EnterRule(_localctx, 152, RULE_pressButtonAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548; Match(T__78);
			State = 1549; Match(T__1);
			State = 1550; expression();
			State = 1551; Match(T__17);
			State = 1552; button();
			State = 1553; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetPlayerHeroAvailabilityActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResetPlayerHeroAvailabilityActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetPlayerHeroAvailabilityAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterResetPlayerHeroAvailabilityAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitResetPlayerHeroAvailabilityAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetPlayerHeroAvailabilityAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetPlayerHeroAvailabilityActionContext resetPlayerHeroAvailabilityAction() {
		ResetPlayerHeroAvailabilityActionContext _localctx = new ResetPlayerHeroAvailabilityActionContext(Context, State);
		EnterRule(_localctx, 154, RULE_resetPlayerHeroAvailabilityAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555; Match(T__79);
			State = 1556; Match(T__1);
			State = 1557; expression();
			State = 1558; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RespawnActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RespawnActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_respawnAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRespawnAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRespawnAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRespawnAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RespawnActionContext respawnAction() {
		RespawnActionContext _localctx = new RespawnActionContext(Context, State);
		EnterRule(_localctx, 156, RULE_respawnAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560; Match(T__80);
			State = 1561; Match(T__1);
			State = 1562; expression();
			State = 1563; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResurrectActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResurrectActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resurrectAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterResurrectAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitResurrectAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResurrectAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResurrectActionContext resurrectAction() {
		ResurrectActionContext _localctx = new ResurrectActionContext(Context, State);
		EnterRule(_localctx, 158, RULE_resurrectAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; Match(T__81);
			State = 1566; Match(T__1);
			State = 1567; expression();
			State = 1568; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAbility1EnabledActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetAbility1EnabledActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAbility1EnabledAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetAbility1EnabledAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetAbility1EnabledAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAbility1EnabledAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAbility1EnabledActionContext setAbility1EnabledAction() {
		SetAbility1EnabledActionContext _localctx = new SetAbility1EnabledActionContext(Context, State);
		EnterRule(_localctx, 160, RULE_setAbility1EnabledAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570; Match(T__82);
			State = 1571; Match(T__1);
			State = 1572; expression();
			State = 1573; Match(T__17);
			State = 1574; expression();
			State = 1575; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAbility2EnabledActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetAbility2EnabledActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAbility2EnabledAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetAbility2EnabledAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetAbility2EnabledAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAbility2EnabledAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAbility2EnabledActionContext setAbility2EnabledAction() {
		SetAbility2EnabledActionContext _localctx = new SetAbility2EnabledActionContext(Context, State);
		EnterRule(_localctx, 162, RULE_setAbility2EnabledAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577; Match(T__83);
			State = 1578; Match(T__1);
			State = 1579; expression();
			State = 1580; Match(T__17);
			State = 1581; expression();
			State = 1582; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetDamageDealtActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetDamageDealtActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setDamageDealtAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetDamageDealtAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetDamageDealtAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetDamageDealtAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetDamageDealtActionContext setDamageDealtAction() {
		SetDamageDealtActionContext _localctx = new SetDamageDealtActionContext(Context, State);
		EnterRule(_localctx, 164, RULE_setDamageDealtAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584; Match(T__84);
			State = 1585; Match(T__1);
			State = 1586; expression();
			State = 1587; Match(T__17);
			State = 1588; expression();
			State = 1589; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetDamageReceivedActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetDamageReceivedActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setDamageReceivedAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetDamageReceivedAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetDamageReceivedAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetDamageReceivedAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetDamageReceivedActionContext setDamageReceivedAction() {
		SetDamageReceivedActionContext _localctx = new SetDamageReceivedActionContext(Context, State);
		EnterRule(_localctx, 166, RULE_setDamageReceivedAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591; Match(T__85);
			State = 1592; Match(T__1);
			State = 1593; expression();
			State = 1594; Match(T__17);
			State = 1595; expression();
			State = 1596; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetFacingActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelativeToContext relativeTo() {
			return GetRuleContext<RelativeToContext>(0);
		}
		public SetFacingActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setFacingAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetFacingAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetFacingAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetFacingAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetFacingActionContext setFacingAction() {
		SetFacingActionContext _localctx = new SetFacingActionContext(Context, State);
		EnterRule(_localctx, 168, RULE_setFacingAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1598; Match(T__86);
			State = 1599; Match(T__1);
			State = 1600; expression();
			State = 1601; Match(T__17);
			State = 1602; expression();
			State = 1603; Match(T__17);
			State = 1604; relativeTo();
			State = 1605; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetGlobalVariableAtIndexActionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetGlobalVariableAtIndexActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setGlobalVariableAtIndexAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetGlobalVariableAtIndexAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetGlobalVariableAtIndexAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetGlobalVariableAtIndexAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetGlobalVariableAtIndexActionContext setGlobalVariableAtIndexAction() {
		SetGlobalVariableAtIndexActionContext _localctx = new SetGlobalVariableAtIndexActionContext(Context, State);
		EnterRule(_localctx, 170, RULE_setGlobalVariableAtIndexAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607; Match(T__87);
			State = 1608; Match(T__1);
			State = 1609; globalVariable();
			State = 1610; Match(T__17);
			State = 1611; expression();
			State = 1612; Match(T__17);
			State = 1613; expression();
			State = 1614; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetGravityActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetGravityActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setGravityAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetGravityAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetGravityAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetGravityAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetGravityActionContext setGravityAction() {
		SetGravityActionContext _localctx = new SetGravityActionContext(Context, State);
		EnterRule(_localctx, 172, RULE_setGravityAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616; Match(T__88);
			State = 1617; Match(T__1);
			State = 1618; expression();
			State = 1619; Match(T__17);
			State = 1620; expression();
			State = 1621; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetHealingDealtActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetHealingDealtActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setHealingDealtAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetHealingDealtAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetHealingDealtAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetHealingDealtAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetHealingDealtActionContext setHealingDealtAction() {
		SetHealingDealtActionContext _localctx = new SetHealingDealtActionContext(Context, State);
		EnterRule(_localctx, 174, RULE_setHealingDealtAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1623; Match(T__89);
			State = 1624; Match(T__1);
			State = 1625; expression();
			State = 1626; Match(T__17);
			State = 1627; expression();
			State = 1628; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetHealingReceivedActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetHealingReceivedActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setHealingReceivedAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetHealingReceivedAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetHealingReceivedAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetHealingReceivedAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetHealingReceivedActionContext setHealingReceivedAction() {
		SetHealingReceivedActionContext _localctx = new SetHealingReceivedActionContext(Context, State);
		EnterRule(_localctx, 176, RULE_setHealingReceivedAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630; Match(T__90);
			State = 1631; Match(T__1);
			State = 1632; expression();
			State = 1633; Match(T__17);
			State = 1634; expression();
			State = 1635; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetMatchTimeActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetMatchTimeActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setMatchTimeAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetMatchTimeAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetMatchTimeAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetMatchTimeAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetMatchTimeActionContext setMatchTimeAction() {
		SetMatchTimeActionContext _localctx = new SetMatchTimeActionContext(Context, State);
		EnterRule(_localctx, 178, RULE_setMatchTimeAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637; Match(T__91);
			State = 1638; Match(T__1);
			State = 1639; expression();
			State = 1640; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetMaxHealthActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetMaxHealthActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setMaxHealthAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetMaxHealthAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetMaxHealthAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetMaxHealthAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetMaxHealthActionContext setMaxHealthAction() {
		SetMaxHealthActionContext _localctx = new SetMaxHealthActionContext(Context, State);
		EnterRule(_localctx, 180, RULE_setMaxHealthAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1642; Match(T__92);
			State = 1643; Match(T__1);
			State = 1644; expression();
			State = 1645; Match(T__17);
			State = 1646; expression();
			State = 1647; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetMoveSpeedActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetMoveSpeedActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setMoveSpeedAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetMoveSpeedAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetMoveSpeedAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetMoveSpeedAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetMoveSpeedActionContext setMoveSpeedAction() {
		SetMoveSpeedActionContext _localctx = new SetMoveSpeedActionContext(Context, State);
		EnterRule(_localctx, 182, RULE_setMoveSpeedAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649; Match(T__93);
			State = 1650; Match(T__1);
			State = 1651; expression();
			State = 1652; Match(T__17);
			State = 1653; expression();
			State = 1654; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetObjectiveDescriptionActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HudTextReevaluationContext hudTextReevaluation() {
			return GetRuleContext<HudTextReevaluationContext>(0);
		}
		public SetObjectiveDescriptionActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setObjectiveDescriptionAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetObjectiveDescriptionAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetObjectiveDescriptionAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetObjectiveDescriptionAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetObjectiveDescriptionActionContext setObjectiveDescriptionAction() {
		SetObjectiveDescriptionActionContext _localctx = new SetObjectiveDescriptionActionContext(Context, State);
		EnterRule(_localctx, 184, RULE_setObjectiveDescriptionAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656; Match(T__94);
			State = 1657; Match(T__1);
			State = 1658; expression();
			State = 1659; Match(T__17);
			State = 1660; expression();
			State = 1661; Match(T__17);
			State = 1662; hudTextReevaluation();
			State = 1663; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPlayerAllowedHeroesActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetPlayerAllowedHeroesActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPlayerAllowedHeroesAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetPlayerAllowedHeroesAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetPlayerAllowedHeroesAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPlayerAllowedHeroesAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPlayerAllowedHeroesActionContext setPlayerAllowedHeroesAction() {
		SetPlayerAllowedHeroesActionContext _localctx = new SetPlayerAllowedHeroesActionContext(Context, State);
		EnterRule(_localctx, 186, RULE_setPlayerAllowedHeroesAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665; Match(T__95);
			State = 1666; Match(T__1);
			State = 1667; expression();
			State = 1668; Match(T__17);
			State = 1669; expression();
			State = 1670; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPlayerScoreActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetPlayerScoreActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPlayerScoreAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetPlayerScoreAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetPlayerScoreAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPlayerScoreAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPlayerScoreActionContext setPlayerScoreAction() {
		SetPlayerScoreActionContext _localctx = new SetPlayerScoreActionContext(Context, State);
		EnterRule(_localctx, 188, RULE_setPlayerScoreAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672; Match(T__96);
			State = 1673; Match(T__1);
			State = 1674; expression();
			State = 1675; Match(T__17);
			State = 1676; expression();
			State = 1677; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPlayerVariableActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public SetPlayerVariableActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPlayerVariableAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetPlayerVariableAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetPlayerVariableAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPlayerVariableAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPlayerVariableActionContext setPlayerVariableAction() {
		SetPlayerVariableActionContext _localctx = new SetPlayerVariableActionContext(Context, State);
		EnterRule(_localctx, 190, RULE_setPlayerVariableAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679; Match(T__97);
			State = 1680; Match(T__1);
			State = 1681; expression();
			State = 1682; Match(T__17);
			State = 1683; playerVariable();
			State = 1684; Match(T__17);
			State = 1685; expression();
			State = 1686; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPlayerVariableAtIndexActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public SetPlayerVariableAtIndexActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPlayerVariableAtIndexAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetPlayerVariableAtIndexAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetPlayerVariableAtIndexAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPlayerVariableAtIndexAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPlayerVariableAtIndexActionContext setPlayerVariableAtIndexAction() {
		SetPlayerVariableAtIndexActionContext _localctx = new SetPlayerVariableAtIndexActionContext(Context, State);
		EnterRule(_localctx, 192, RULE_setPlayerVariableAtIndexAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688; Match(T__98);
			State = 1689; Match(T__1);
			State = 1690; expression();
			State = 1691; Match(T__17);
			State = 1692; playerVariable();
			State = 1693; Match(T__17);
			State = 1694; expression();
			State = 1695; Match(T__17);
			State = 1696; expression();
			State = 1697; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPrimaryFireEnabledActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetPrimaryFireEnabledActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPrimaryFireEnabledAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetPrimaryFireEnabledAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetPrimaryFireEnabledAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPrimaryFireEnabledAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPrimaryFireEnabledActionContext setPrimaryFireEnabledAction() {
		SetPrimaryFireEnabledActionContext _localctx = new SetPrimaryFireEnabledActionContext(Context, State);
		EnterRule(_localctx, 194, RULE_setPrimaryFireEnabledAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1699; Match(T__99);
			State = 1700; Match(T__1);
			State = 1701; expression();
			State = 1702; Match(T__17);
			State = 1703; expression();
			State = 1704; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetProjectileGravityActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetProjectileGravityActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setProjectileGravityAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetProjectileGravityAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetProjectileGravityAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetProjectileGravityAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetProjectileGravityActionContext setProjectileGravityAction() {
		SetProjectileGravityActionContext _localctx = new SetProjectileGravityActionContext(Context, State);
		EnterRule(_localctx, 196, RULE_setProjectileGravityAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706; Match(T__100);
			State = 1707; Match(T__1);
			State = 1708; expression();
			State = 1709; Match(T__17);
			State = 1710; expression();
			State = 1711; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRespawnMaxTimeActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetRespawnMaxTimeActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRespawnMaxTimeAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetRespawnMaxTimeAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetRespawnMaxTimeAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRespawnMaxTimeAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetRespawnMaxTimeActionContext setRespawnMaxTimeAction() {
		SetRespawnMaxTimeActionContext _localctx = new SetRespawnMaxTimeActionContext(Context, State);
		EnterRule(_localctx, 198, RULE_setRespawnMaxTimeAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1713; Match(T__101);
			State = 1714; Match(T__1);
			State = 1715; expression();
			State = 1716; Match(T__17);
			State = 1717; expression();
			State = 1718; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSecondaryFireEnabledActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetSecondaryFireEnabledActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSecondaryFireEnabledAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetSecondaryFireEnabledAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetSecondaryFireEnabledAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSecondaryFireEnabledAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSecondaryFireEnabledActionContext setSecondaryFireEnabledAction() {
		SetSecondaryFireEnabledActionContext _localctx = new SetSecondaryFireEnabledActionContext(Context, State);
		EnterRule(_localctx, 200, RULE_setSecondaryFireEnabledAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720; Match(T__102);
			State = 1721; Match(T__1);
			State = 1722; expression();
			State = 1723; Match(T__17);
			State = 1724; expression();
			State = 1725; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSlowMotionActionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetSlowMotionActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSlowMotionAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetSlowMotionAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetSlowMotionAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSlowMotionAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSlowMotionActionContext setSlowMotionAction() {
		SetSlowMotionActionContext _localctx = new SetSlowMotionActionContext(Context, State);
		EnterRule(_localctx, 202, RULE_setSlowMotionAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1727; Match(T__103);
			State = 1728; Match(T__1);
			State = 1729; expression();
			State = 1730; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatusActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatusContext status() {
			return GetRuleContext<StatusContext>(0);
		}
		public SetStatusActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatusAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetStatusAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetStatusAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatusAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatusActionContext setStatusAction() {
		SetStatusActionContext _localctx = new SetStatusActionContext(Context, State);
		EnterRule(_localctx, 204, RULE_setStatusAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1732; Match(T__104);
			State = 1733; Match(T__1);
			State = 1734; expression();
			State = 1735; Match(T__17);
			State = 1736; expression();
			State = 1737; Match(T__17);
			State = 1738; status();
			State = 1739; Match(T__17);
			State = 1740; expression();
			State = 1741; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTeamScoreActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetTeamScoreActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTeamScoreAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetTeamScoreAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetTeamScoreAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTeamScoreAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTeamScoreActionContext setTeamScoreAction() {
		SetTeamScoreActionContext _localctx = new SetTeamScoreActionContext(Context, State);
		EnterRule(_localctx, 206, RULE_setTeamScoreAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743; Match(T__105);
			State = 1744; Match(T__1);
			State = 1745; expression();
			State = 1746; Match(T__17);
			State = 1747; expression();
			State = 1748; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetUltimateAbilityEnabledActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetUltimateAbilityEnabledActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setUltimateAbilityEnabledAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetUltimateAbilityEnabledAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetUltimateAbilityEnabledAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetUltimateAbilityEnabledAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetUltimateAbilityEnabledActionContext setUltimateAbilityEnabledAction() {
		SetUltimateAbilityEnabledActionContext _localctx = new SetUltimateAbilityEnabledActionContext(Context, State);
		EnterRule(_localctx, 208, RULE_setUltimateAbilityEnabledAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750; Match(T__106);
			State = 1751; Match(T__1);
			State = 1752; expression();
			State = 1753; Match(T__17);
			State = 1754; expression();
			State = 1755; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetUltimateChargeActionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetUltimateChargeActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setUltimateChargeAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetUltimateChargeAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetUltimateChargeAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetUltimateChargeAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetUltimateChargeActionContext setUltimateChargeAction() {
		SetUltimateChargeActionContext _localctx = new SetUltimateChargeActionContext(Context, State);
		EnterRule(_localctx, 210, RULE_setUltimateChargeAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1757; Match(T__107);
			State = 1758; Match(T__1);
			State = 1759; expression();
			State = 1760; Match(T__17);
			State = 1761; expression();
			State = 1762; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public VectorExpressionContext vectorExpression() {
			return GetRuleContext<VectorExpressionContext>(0);
		}
		public AddExpressionContext addExpression() {
			return GetRuleContext<AddExpressionContext>(0);
		}
		public AbsoluteValueExpressionContext absoluteValueExpression() {
			return GetRuleContext<AbsoluteValueExpressionContext>(0);
		}
		public AllDeadPlayersExpressionContext allDeadPlayersExpression() {
			return GetRuleContext<AllDeadPlayersExpressionContext>(0);
		}
		public AllHeroesExpressionContext allHeroesExpression() {
			return GetRuleContext<AllHeroesExpressionContext>(0);
		}
		public AllLivingPlayersExpressionContext allLivingPlayersExpression() {
			return GetRuleContext<AllLivingPlayersExpressionContext>(0);
		}
		public AllPlayersExpressionContext allPlayersExpression() {
			return GetRuleContext<AllPlayersExpressionContext>(0);
		}
		public AllPlayersNotOnObjectiveExpressionContext allPlayersNotOnObjectiveExpression() {
			return GetRuleContext<AllPlayersNotOnObjectiveExpressionContext>(0);
		}
		public AllPlayersOnObjectiveExpressionContext allPlayersOnObjectiveExpression() {
			return GetRuleContext<AllPlayersOnObjectiveExpressionContext>(0);
		}
		public AllowedHeroesExpressionContext allowedHeroesExpression() {
			return GetRuleContext<AllowedHeroesExpressionContext>(0);
		}
		public AltitudeOfExpressionContext altitudeOfExpression() {
			return GetRuleContext<AltitudeOfExpressionContext>(0);
		}
		public EventPlayerExpressionContext eventPlayerExpression() {
			return GetRuleContext<EventPlayerExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AngleDifferenceExpressionContext angleDifferenceExpression() {
			return GetRuleContext<AngleDifferenceExpressionContext>(0);
		}
		public AppendToArrayExpressionContext appendToArrayExpression() {
			return GetRuleContext<AppendToArrayExpressionContext>(0);
		}
		public ArrayContainsExpressionContext arrayContainsExpression() {
			return GetRuleContext<ArrayContainsExpressionContext>(0);
		}
		public ArraySliceExpressionContext arraySliceExpression() {
			return GetRuleContext<ArraySliceExpressionContext>(0);
		}
		public AttackerExpressionContext attackerExpression() {
			return GetRuleContext<AttackerExpressionContext>(0);
		}
		public BackwardExpressionContext backwardExpression() {
			return GetRuleContext<BackwardExpressionContext>(0);
		}
		public ClosestPlayerToExpressionContext closestPlayerToExpression() {
			return GetRuleContext<ClosestPlayerToExpressionContext>(0);
		}
		public CompareExpressionContext compareExpression() {
			return GetRuleContext<CompareExpressionContext>(0);
		}
		public ControlModeScoringPercentageExpressionContext controlModeScoringPercentageExpression() {
			return GetRuleContext<ControlModeScoringPercentageExpressionContext>(0);
		}
		public GlobalVariableExpressionContext globalVariableExpression() {
			return GetRuleContext<GlobalVariableExpressionContext>(0);
		}
		public ControlModeScoringTeamExpressionContext controlModeScoringTeamExpression() {
			return GetRuleContext<ControlModeScoringTeamExpressionContext>(0);
		}
		public CosineFromDegreesExpressionContext cosineFromDegreesExpression() {
			return GetRuleContext<CosineFromDegreesExpressionContext>(0);
		}
		public CosineFromRadiansExpressionContext cosineFromRadiansExpression() {
			return GetRuleContext<CosineFromRadiansExpressionContext>(0);
		}
		public CountOfExpressionContext countOfExpression() {
			return GetRuleContext<CountOfExpressionContext>(0);
		}
		public CrossProductExpressionContext crossProductExpression() {
			return GetRuleContext<CrossProductExpressionContext>(0);
		}
		public CurrentArrayElementExpressionContext currentArrayElementExpression() {
			return GetRuleContext<CurrentArrayElementExpressionContext>(0);
		}
		public DirectionFromAnglesExpressionContext directionFromAnglesExpression() {
			return GetRuleContext<DirectionFromAnglesExpressionContext>(0);
		}
		public DirectionTowardsExpressionContext directionTowardsExpression() {
			return GetRuleContext<DirectionTowardsExpressionContext>(0);
		}
		public DistanceBetweenExpressionContext distanceBetweenExpression() {
			return GetRuleContext<DistanceBetweenExpressionContext>(0);
		}
		public DivideExpressionContext divideExpression() {
			return GetRuleContext<DivideExpressionContext>(0);
		}
		public DotProductExpressionContext dotProductExpression() {
			return GetRuleContext<DotProductExpressionContext>(0);
		}
		public DownExpressionContext downExpression() {
			return GetRuleContext<DownExpressionContext>(0);
		}
		public EmptyArrayExpressionContext emptyArrayExpression() {
			return GetRuleContext<EmptyArrayExpressionContext>(0);
		}
		public EntityExistsExpressionContext entityExistsExpression() {
			return GetRuleContext<EntityExistsExpressionContext>(0);
		}
		public EventDamageExpressionContext eventDamageExpression() {
			return GetRuleContext<EventDamageExpressionContext>(0);
		}
		public EventWasCriticalHitExpressionContext eventWasCriticalHitExpression() {
			return GetRuleContext<EventWasCriticalHitExpressionContext>(0);
		}
		public EyePositionExpressionContext eyePositionExpression() {
			return GetRuleContext<EyePositionExpressionContext>(0);
		}
		public FacingDirectionOfExpressionContext facingDirectionOfExpression() {
			return GetRuleContext<FacingDirectionOfExpressionContext>(0);
		}
		public FarthestPlayerFromExpressionContext farthestPlayerFromExpression() {
			return GetRuleContext<FarthestPlayerFromExpressionContext>(0);
		}
		public FilteredArrayExpressionContext filteredArrayExpression() {
			return GetRuleContext<FilteredArrayExpressionContext>(0);
		}
		public FirstOfExpressionContext firstOfExpression() {
			return GetRuleContext<FirstOfExpressionContext>(0);
		}
		public FlagPositionExpressionContext flagPositionExpression() {
			return GetRuleContext<FlagPositionExpressionContext>(0);
		}
		public ForwardExpressionContext forwardExpression() {
			return GetRuleContext<ForwardExpressionContext>(0);
		}
		public HasSpawnedExpressionContext hasSpawnedExpression() {
			return GetRuleContext<HasSpawnedExpressionContext>(0);
		}
		public HasStatusExpressionContext hasStatusExpression() {
			return GetRuleContext<HasStatusExpressionContext>(0);
		}
		public HealthExpressionContext healthExpression() {
			return GetRuleContext<HealthExpressionContext>(0);
		}
		public HealthPercentExpressionContext healthPercentExpression() {
			return GetRuleContext<HealthPercentExpressionContext>(0);
		}
		public HeroExpressionContext heroExpression() {
			return GetRuleContext<HeroExpressionContext>(0);
		}
		public HeroIconStringExpressionContext heroIconStringExpression() {
			return GetRuleContext<HeroIconStringExpressionContext>(0);
		}
		public HeroOfExpressionContext heroOfExpression() {
			return GetRuleContext<HeroOfExpressionContext>(0);
		}
		public HorizontalAngleFromDirectionExpressionContext horizontalAngleFromDirectionExpression() {
			return GetRuleContext<HorizontalAngleFromDirectionExpressionContext>(0);
		}
		public HorizontalAngleTowardsExpressionContext horizontalAngleTowardsExpression() {
			return GetRuleContext<HorizontalAngleTowardsExpressionContext>(0);
		}
		public HorizontalFacingAngleOfExpressionContext horizontalFacingAngleOfExpression() {
			return GetRuleContext<HorizontalFacingAngleOfExpressionContext>(0);
		}
		public HorizontalSpeedOfExpressionContext horizontalSpeedOfExpression() {
			return GetRuleContext<HorizontalSpeedOfExpressionContext>(0);
		}
		public IndexOfArrayValueExpressionContext indexOfArrayValueExpression() {
			return GetRuleContext<IndexOfArrayValueExpressionContext>(0);
		}
		public IsAliveExpressionContext isAliveExpression() {
			return GetRuleContext<IsAliveExpressionContext>(0);
		}
		public IsAssemblingHeroesExpressionContext isAssemblingHeroesExpression() {
			return GetRuleContext<IsAssemblingHeroesExpressionContext>(0);
		}
		public IsBetweenRoundsExpressionContext isBetweenRoundsExpression() {
			return GetRuleContext<IsBetweenRoundsExpressionContext>(0);
		}
		public IsButtonHeldExpressionContext isButtonHeldExpression() {
			return GetRuleContext<IsButtonHeldExpressionContext>(0);
		}
		public IsCommunicatingExpressionContext isCommunicatingExpression() {
			return GetRuleContext<IsCommunicatingExpressionContext>(0);
		}
		public IsCommunicatingAnyExpressionContext isCommunicatingAnyExpression() {
			return GetRuleContext<IsCommunicatingAnyExpressionContext>(0);
		}
		public IsCommunicatingAnyEmoteExpressionContext isCommunicatingAnyEmoteExpression() {
			return GetRuleContext<IsCommunicatingAnyEmoteExpressionContext>(0);
		}
		public IsCommunicatingAnyVoicelineExpressionContext isCommunicatingAnyVoicelineExpression() {
			return GetRuleContext<IsCommunicatingAnyVoicelineExpressionContext>(0);
		}
		public IsControlModePointLockedExpressionContext isControlModePointLockedExpression() {
			return GetRuleContext<IsControlModePointLockedExpressionContext>(0);
		}
		public IsCrouchingExpressionContext isCrouchingExpression() {
			return GetRuleContext<IsCrouchingExpressionContext>(0);
		}
		public IsCTFModeInSuddenDeathExpressionContext isCTFModeInSuddenDeathExpression() {
			return GetRuleContext<IsCTFModeInSuddenDeathExpressionContext>(0);
		}
		public IsDeadExpressionContext isDeadExpression() {
			return GetRuleContext<IsDeadExpressionContext>(0);
		}
		public IsFiringPrimaryExpressionContext isFiringPrimaryExpression() {
			return GetRuleContext<IsFiringPrimaryExpressionContext>(0);
		}
		public IsFiringSecondaryExpressionContext isFiringSecondaryExpression() {
			return GetRuleContext<IsFiringSecondaryExpressionContext>(0);
		}
		public IsFlagAtBaseExpressionContext isFlagAtBaseExpression() {
			return GetRuleContext<IsFlagAtBaseExpressionContext>(0);
		}
		public IsFlagBeingCarriedExpressionContext isFlagBeingCarriedExpression() {
			return GetRuleContext<IsFlagBeingCarriedExpressionContext>(0);
		}
		public IsGameInProgressExpressionContext isGameInProgressExpression() {
			return GetRuleContext<IsGameInProgressExpressionContext>(0);
		}
		public IsHeroBeingPlayedExpressionContext isHeroBeingPlayedExpression() {
			return GetRuleContext<IsHeroBeingPlayedExpressionContext>(0);
		}
		public IsInAirExpressionContext isInAirExpression() {
			return GetRuleContext<IsInAirExpressionContext>(0);
		}
		public IsInLineofSightExpressionContext isInLineofSightExpression() {
			return GetRuleContext<IsInLineofSightExpressionContext>(0);
		}
		public IsInSetupExpressionContext isInSetupExpression() {
			return GetRuleContext<IsInSetupExpressionContext>(0);
		}
		public IsInSpawnRoomExpressionContext isInSpawnRoomExpression() {
			return GetRuleContext<IsInSpawnRoomExpressionContext>(0);
		}
		public IsInViewAngleExpressionContext isInViewAngleExpression() {
			return GetRuleContext<IsInViewAngleExpressionContext>(0);
		}
		public IsMatchCompleteExpressionContext isMatchCompleteExpression() {
			return GetRuleContext<IsMatchCompleteExpressionContext>(0);
		}
		public IsMovingExpressionContext isMovingExpression() {
			return GetRuleContext<IsMovingExpressionContext>(0);
		}
		public IsObjectiveCompleteExpressionContext isObjectiveCompleteExpression() {
			return GetRuleContext<IsObjectiveCompleteExpressionContext>(0);
		}
		public IsOnGroundExpressionContext isOnGroundExpression() {
			return GetRuleContext<IsOnGroundExpressionContext>(0);
		}
		public IsOnObjectiveExpressionContext isOnObjectiveExpression() {
			return GetRuleContext<IsOnObjectiveExpressionContext>(0);
		}
		public IsOnWallExpressionContext isOnWallExpression() {
			return GetRuleContext<IsOnWallExpressionContext>(0);
		}
		public IsPortraitOnFireExpressionContext isPortraitOnFireExpression() {
			return GetRuleContext<IsPortraitOnFireExpressionContext>(0);
		}
		public IsStandingExpressionContext isStandingExpression() {
			return GetRuleContext<IsStandingExpressionContext>(0);
		}
		public IsTeamOnDefenseExpressionContext isTeamOnDefenseExpression() {
			return GetRuleContext<IsTeamOnDefenseExpressionContext>(0);
		}
		public IsTeamOnOffenseExpressionContext isTeamOnOffenseExpression() {
			return GetRuleContext<IsTeamOnOffenseExpressionContext>(0);
		}
		public IsTrueForAllExpressionContext isTrueForAllExpression() {
			return GetRuleContext<IsTrueForAllExpressionContext>(0);
		}
		public IsTrueForAnyExpressionContext isTrueForAnyExpression() {
			return GetRuleContext<IsTrueForAnyExpressionContext>(0);
		}
		public IsUsingAbility1ExpressionContext isUsingAbility1Expression() {
			return GetRuleContext<IsUsingAbility1ExpressionContext>(0);
		}
		public IsUsingAbility2ExpressionContext isUsingAbility2Expression() {
			return GetRuleContext<IsUsingAbility2ExpressionContext>(0);
		}
		public IsUsingUltimateExpressionContext isUsingUltimateExpression() {
			return GetRuleContext<IsUsingUltimateExpressionContext>(0);
		}
		public IsWaitingForPlayersExpressionContext isWaitingForPlayersExpression() {
			return GetRuleContext<IsWaitingForPlayersExpressionContext>(0);
		}
		public LastCreatedEntityExpressionContext lastCreatedEntityExpression() {
			return GetRuleContext<LastCreatedEntityExpressionContext>(0);
		}
		public LastDamageModificationIDExpressionContext lastDamageModificationIDExpression() {
			return GetRuleContext<LastDamageModificationIDExpressionContext>(0);
		}
		public LastDamageOverTimeIDExpressionContext lastDamageOverTimeIDExpression() {
			return GetRuleContext<LastDamageOverTimeIDExpressionContext>(0);
		}
		public LastHealOverTimeIDExpressionContext lastHealOverTimeIDExpression() {
			return GetRuleContext<LastHealOverTimeIDExpressionContext>(0);
		}
		public LastOfExpressionContext lastOfExpression() {
			return GetRuleContext<LastOfExpressionContext>(0);
		}
		public LastTextIDExpressionContext lastTextIDExpression() {
			return GetRuleContext<LastTextIDExpressionContext>(0);
		}
		public LeftExpressionContext leftExpression() {
			return GetRuleContext<LeftExpressionContext>(0);
		}
		public LocalVectorOfExpressionContext localVectorOfExpression() {
			return GetRuleContext<LocalVectorOfExpressionContext>(0);
		}
		public MatchRoundExpressionContext matchRoundExpression() {
			return GetRuleContext<MatchRoundExpressionContext>(0);
		}
		public MatchTimeExpressionContext matchTimeExpression() {
			return GetRuleContext<MatchTimeExpressionContext>(0);
		}
		public MaxExpressionContext maxExpression() {
			return GetRuleContext<MaxExpressionContext>(0);
		}
		public MaxHealthExpressionContext maxHealthExpression() {
			return GetRuleContext<MaxHealthExpressionContext>(0);
		}
		public MinExpressionContext minExpression() {
			return GetRuleContext<MinExpressionContext>(0);
		}
		public ModuloExpressionContext moduloExpression() {
			return GetRuleContext<ModuloExpressionContext>(0);
		}
		public MultiplyExpressionContext multiplyExpression() {
			return GetRuleContext<MultiplyExpressionContext>(0);
		}
		public NearestWalkablePositionExpressionContext nearestWalkablePositionExpression() {
			return GetRuleContext<NearestWalkablePositionExpressionContext>(0);
		}
		public NormalizeExpressionContext normalizeExpression() {
			return GetRuleContext<NormalizeExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public NumberOfDeadPlayersExpressionContext numberOfDeadPlayersExpression() {
			return GetRuleContext<NumberOfDeadPlayersExpressionContext>(0);
		}
		public NumberOfDeathsExpressionContext numberOfDeathsExpression() {
			return GetRuleContext<NumberOfDeathsExpressionContext>(0);
		}
		public NumberOfEliminationsExpressionContext numberOfEliminationsExpression() {
			return GetRuleContext<NumberOfEliminationsExpressionContext>(0);
		}
		public NumberOfFinalBlowsExpressionContext numberOfFinalBlowsExpression() {
			return GetRuleContext<NumberOfFinalBlowsExpressionContext>(0);
		}
		public NumberOfHeroesExpressionContext numberOfHeroesExpression() {
			return GetRuleContext<NumberOfHeroesExpressionContext>(0);
		}
		public NumberOfLivingPlayersExpressionContext numberOfLivingPlayersExpression() {
			return GetRuleContext<NumberOfLivingPlayersExpressionContext>(0);
		}
		public NumberOfPlayersExpressionContext numberOfPlayersExpression() {
			return GetRuleContext<NumberOfPlayersExpressionContext>(0);
		}
		public NumberOfPlayersOnObjectiveExpressionContext numberOfPlayersOnObjectiveExpression() {
			return GetRuleContext<NumberOfPlayersOnObjectiveExpressionContext>(0);
		}
		public ObjectiveIndexExpressionContext objectiveIndexExpression() {
			return GetRuleContext<ObjectiveIndexExpressionContext>(0);
		}
		public ObjectivePositionExpressionContext objectivePositionExpression() {
			return GetRuleContext<ObjectivePositionExpressionContext>(0);
		}
		public OppositeTeamOfExpressionContext oppositeTeamOfExpression() {
			return GetRuleContext<OppositeTeamOfExpressionContext>(0);
		}
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public PayloadPositionExpressionContext payloadPositionExpression() {
			return GetRuleContext<PayloadPositionExpressionContext>(0);
		}
		public PayloadProgressPercentageExpressionContext payloadProgressPercentageExpression() {
			return GetRuleContext<PayloadProgressPercentageExpressionContext>(0);
		}
		public PlayerCarryingFlagExpressionContext playerCarryingFlagExpression() {
			return GetRuleContext<PlayerCarryingFlagExpressionContext>(0);
		}
		public PlayerClosestToReticleExpressionContext playerClosestToReticleExpression() {
			return GetRuleContext<PlayerClosestToReticleExpressionContext>(0);
		}
		public PlayerVariableExpressionContext playerVariableExpression() {
			return GetRuleContext<PlayerVariableExpressionContext>(0);
		}
		public PlayersInSlotExpressionContext playersInSlotExpression() {
			return GetRuleContext<PlayersInSlotExpressionContext>(0);
		}
		public PlayersInViewAngleExpressionContext playersInViewAngleExpression() {
			return GetRuleContext<PlayersInViewAngleExpressionContext>(0);
		}
		public PlayersOnHeroExpressionContext playersOnHeroExpression() {
			return GetRuleContext<PlayersOnHeroExpressionContext>(0);
		}
		public PlayersWithinRadiusExpressionContext playersWithinRadiusExpression() {
			return GetRuleContext<PlayersWithinRadiusExpressionContext>(0);
		}
		public PointCapturePercentageExpressionContext pointCapturePercentageExpression() {
			return GetRuleContext<PointCapturePercentageExpressionContext>(0);
		}
		public PositionOfExpressionContext positionOfExpression() {
			return GetRuleContext<PositionOfExpressionContext>(0);
		}
		public RaiseToPowerExpressionContext raiseToPowerExpression() {
			return GetRuleContext<RaiseToPowerExpressionContext>(0);
		}
		public RandomIntegerExpressionContext randomIntegerExpression() {
			return GetRuleContext<RandomIntegerExpressionContext>(0);
		}
		public RandomRealExpressionContext randomRealExpression() {
			return GetRuleContext<RandomRealExpressionContext>(0);
		}
		public RandomValueInArrayExpressionContext randomValueInArrayExpression() {
			return GetRuleContext<RandomValueInArrayExpressionContext>(0);
		}
		public RandomizedArrayExpressionContext randomizedArrayExpression() {
			return GetRuleContext<RandomizedArrayExpressionContext>(0);
		}
		public RayCastHitNormalExpressionContext rayCastHitNormalExpression() {
			return GetRuleContext<RayCastHitNormalExpressionContext>(0);
		}
		public RayCastHitPlayerExpressionContext rayCastHitPlayerExpression() {
			return GetRuleContext<RayCastHitPlayerExpressionContext>(0);
		}
		public RayCastHitPositionExpressionContext rayCastHitPositionExpression() {
			return GetRuleContext<RayCastHitPositionExpressionContext>(0);
		}
		public RemoveFromArrayExpressionContext removeFromArrayExpression() {
			return GetRuleContext<RemoveFromArrayExpressionContext>(0);
		}
		public RightExpressionContext rightExpression() {
			return GetRuleContext<RightExpressionContext>(0);
		}
		public RoundToIntegerExpressionContext roundToIntegerExpression() {
			return GetRuleContext<RoundToIntegerExpressionContext>(0);
		}
		public ScoreOfExpressionContext scoreOfExpression() {
			return GetRuleContext<ScoreOfExpressionContext>(0);
		}
		public SineFromDegreesExpressionContext sineFromDegreesExpression() {
			return GetRuleContext<SineFromDegreesExpressionContext>(0);
		}
		public SineFromRadiansExpressionContext sineFromRadiansExpression() {
			return GetRuleContext<SineFromRadiansExpressionContext>(0);
		}
		public SlotOfExpressionContext slotOfExpression() {
			return GetRuleContext<SlotOfExpressionContext>(0);
		}
		public SortedArrayExpressionContext sortedArrayExpression() {
			return GetRuleContext<SortedArrayExpressionContext>(0);
		}
		public SpeedOfExpressionContext speedOfExpression() {
			return GetRuleContext<SpeedOfExpressionContext>(0);
		}
		public SpeedOfInDirectionExpressionContext speedOfInDirectionExpression() {
			return GetRuleContext<SpeedOfInDirectionExpressionContext>(0);
		}
		public SquareRootExpressionContext squareRootExpression() {
			return GetRuleContext<SquareRootExpressionContext>(0);
		}
		public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public SubtractExpressionContext subtractExpression() {
			return GetRuleContext<SubtractExpressionContext>(0);
		}
		public TeamOfExpressionContext teamOfExpression() {
			return GetRuleContext<TeamOfExpressionContext>(0);
		}
		public TeamScoreExpressionContext teamScoreExpression() {
			return GetRuleContext<TeamScoreExpressionContext>(0);
		}
		public ThrottleOfExpressionContext throttleOfExpression() {
			return GetRuleContext<ThrottleOfExpressionContext>(0);
		}
		public TotalTimeElapsedExpressionContext totalTimeElapsedExpression() {
			return GetRuleContext<TotalTimeElapsedExpressionContext>(0);
		}
		public UltimateChargePercentExpressionContext ultimateChargePercentExpression() {
			return GetRuleContext<UltimateChargePercentExpressionContext>(0);
		}
		public UpExpressionContext upExpression() {
			return GetRuleContext<UpExpressionContext>(0);
		}
		public ValueInArrayExpressionContext valueInArrayExpression() {
			return GetRuleContext<ValueInArrayExpressionContext>(0);
		}
		public VectorTowardsExpressionContext vectorTowardsExpression() {
			return GetRuleContext<VectorTowardsExpressionContext>(0);
		}
		public VerticalFacingAngleOfExpressionContext verticalFacingAngleOfExpression() {
			return GetRuleContext<VerticalFacingAngleOfExpressionContext>(0);
		}
		public VerticalSpeedOfExpressionContext verticalSpeedOfExpression() {
			return GetRuleContext<VerticalSpeedOfExpressionContext>(0);
		}
		public VictimExpressionContext victimExpression() {
			return GetRuleContext<VictimExpressionContext>(0);
		}
		public WorldVectorOfExpressionContext worldVectorOfExpression() {
			return GetRuleContext<WorldVectorOfExpressionContext>(0);
		}
		public XComponentOfExpressionContext xComponentOfExpression() {
			return GetRuleContext<XComponentOfExpressionContext>(0);
		}
		public YComponentOfExpressionContext yComponentOfExpression() {
			return GetRuleContext<YComponentOfExpressionContext>(0);
		}
		public ZComponentOfExpressionContext zComponentOfExpression() {
			return GetRuleContext<ZComponentOfExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 212, RULE_expression);
		try {
			State = 1940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case STRING:
			case FLOAT:
			case NULL:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1764; literal();
				}
				break;
			case ALL_TEAMS:
			case Team1:
			case Team2:
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1765; team();
				}
				break;
			case T__108:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1766; vectorExpression();
				}
				break;
			case T__109:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1767; addExpression();
				}
				break;
			case T__110:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1768; absoluteValueExpression();
				}
				break;
			case T__111:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1769; allDeadPlayersExpression();
				}
				break;
			case T__112:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1770; allHeroesExpression();
				}
				break;
			case T__113:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1771; allLivingPlayersExpression();
				}
				break;
			case T__114:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1772; allPlayersExpression();
				}
				break;
			case T__115:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1773; allPlayersNotOnObjectiveExpression();
				}
				break;
			case T__116:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1774; allPlayersOnObjectiveExpression();
				}
				break;
			case T__117:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1775; allowedHeroesExpression();
				}
				break;
			case T__118:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1776; altitudeOfExpression();
				}
				break;
			case T__119:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1777; eventPlayerExpression();
				}
				break;
			case T__120:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1778; andExpression();
				}
				break;
			case T__121:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1779; angleDifferenceExpression();
				}
				break;
			case T__122:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1780; appendToArrayExpression();
				}
				break;
			case T__123:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1781; arrayContainsExpression();
				}
				break;
			case T__124:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1782; arraySliceExpression();
				}
				break;
			case T__125:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1783; attackerExpression();
				}
				break;
			case T__126:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1784; backwardExpression();
				}
				break;
			case T__127:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1785; closestPlayerToExpression();
				}
				break;
			case T__128:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1786; compareExpression();
				}
				break;
			case T__129:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1787; controlModeScoringPercentageExpression();
				}
				break;
			case T__130:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1788; globalVariableExpression();
				}
				break;
			case T__131:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1789; controlModeScoringTeamExpression();
				}
				break;
			case T__132:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1790; cosineFromDegreesExpression();
				}
				break;
			case T__133:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1791; cosineFromRadiansExpression();
				}
				break;
			case T__134:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1792; countOfExpression();
				}
				break;
			case T__135:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1793; crossProductExpression();
				}
				break;
			case T__136:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1794; currentArrayElementExpression();
				}
				break;
			case T__137:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1795; directionFromAnglesExpression();
				}
				break;
			case T__138:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1796; directionTowardsExpression();
				}
				break;
			case T__139:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1797; distanceBetweenExpression();
				}
				break;
			case T__140:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1798; divideExpression();
				}
				break;
			case T__141:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1799; dotProductExpression();
				}
				break;
			case T__142:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1800; downExpression();
				}
				break;
			case T__143:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1801; emptyArrayExpression();
				}
				break;
			case T__144:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1802; entityExistsExpression();
				}
				break;
			case T__145:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1803; eventDamageExpression();
				}
				break;
			case T__146:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1804; eventWasCriticalHitExpression();
				}
				break;
			case T__147:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1805; eyePositionExpression();
				}
				break;
			case T__148:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1806; facingDirectionOfExpression();
				}
				break;
			case T__149:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1807; farthestPlayerFromExpression();
				}
				break;
			case T__150:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1808; filteredArrayExpression();
				}
				break;
			case T__151:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1809; firstOfExpression();
				}
				break;
			case T__152:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1810; flagPositionExpression();
				}
				break;
			case T__153:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1811; forwardExpression();
				}
				break;
			case T__154:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1812; hasSpawnedExpression();
				}
				break;
			case T__155:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1813; hasStatusExpression();
				}
				break;
			case T__156:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1814; healthExpression();
				}
				break;
			case T__157:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1815; healthPercentExpression();
				}
				break;
			case T__158:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1816; heroExpression();
				}
				break;
			case T__159:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1817; heroIconStringExpression();
				}
				break;
			case T__160:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1818; heroOfExpression();
				}
				break;
			case T__161:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1819; horizontalAngleFromDirectionExpression();
				}
				break;
			case T__162:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1820; horizontalAngleTowardsExpression();
				}
				break;
			case T__163:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1821; horizontalFacingAngleOfExpression();
				}
				break;
			case T__164:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1822; horizontalSpeedOfExpression();
				}
				break;
			case T__165:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1823; indexOfArrayValueExpression();
				}
				break;
			case T__166:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1824; isAliveExpression();
				}
				break;
			case T__167:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1825; isAssemblingHeroesExpression();
				}
				break;
			case T__168:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1826; isBetweenRoundsExpression();
				}
				break;
			case T__169:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1827; isButtonHeldExpression();
				}
				break;
			case T__170:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1828; isCommunicatingExpression();
				}
				break;
			case T__171:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1829; isCommunicatingAnyExpression();
				}
				break;
			case T__172:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1830; isCommunicatingAnyEmoteExpression();
				}
				break;
			case T__173:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1831; isCommunicatingAnyVoicelineExpression();
				}
				break;
			case T__174:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1832; isControlModePointLockedExpression();
				}
				break;
			case T__175:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1833; isCrouchingExpression();
				}
				break;
			case T__176:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1834; isCTFModeInSuddenDeathExpression();
				}
				break;
			case T__177:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1835; isDeadExpression();
				}
				break;
			case T__178:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1836; isFiringPrimaryExpression();
				}
				break;
			case T__179:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1837; isFiringSecondaryExpression();
				}
				break;
			case T__180:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1838; isFlagAtBaseExpression();
				}
				break;
			case T__181:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1839; isFlagBeingCarriedExpression();
				}
				break;
			case T__182:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1840; isGameInProgressExpression();
				}
				break;
			case T__183:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1841; isHeroBeingPlayedExpression();
				}
				break;
			case T__184:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1842; isInAirExpression();
				}
				break;
			case T__185:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1843; isInLineofSightExpression();
				}
				break;
			case T__186:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1844; isInSetupExpression();
				}
				break;
			case T__187:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1845; isInSpawnRoomExpression();
				}
				break;
			case T__188:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1846; isInViewAngleExpression();
				}
				break;
			case T__189:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1847; isMatchCompleteExpression();
				}
				break;
			case T__190:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1848; isMovingExpression();
				}
				break;
			case T__191:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1849; isObjectiveCompleteExpression();
				}
				break;
			case T__192:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1850; isOnGroundExpression();
				}
				break;
			case T__193:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1851; isOnObjectiveExpression();
				}
				break;
			case T__194:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1852; isOnWallExpression();
				}
				break;
			case T__195:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1853; isPortraitOnFireExpression();
				}
				break;
			case T__196:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1854; isStandingExpression();
				}
				break;
			case T__197:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1855; isTeamOnDefenseExpression();
				}
				break;
			case T__198:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1856; isTeamOnOffenseExpression();
				}
				break;
			case T__199:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1857; isTrueForAllExpression();
				}
				break;
			case T__200:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1858; isTrueForAnyExpression();
				}
				break;
			case T__201:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1859; isUsingAbility1Expression();
				}
				break;
			case T__202:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1860; isUsingAbility2Expression();
				}
				break;
			case T__203:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1861; isUsingUltimateExpression();
				}
				break;
			case T__204:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1862; isWaitingForPlayersExpression();
				}
				break;
			case T__205:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1863; lastCreatedEntityExpression();
				}
				break;
			case T__206:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1864; lastDamageModificationIDExpression();
				}
				break;
			case T__207:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1865; lastDamageOverTimeIDExpression();
				}
				break;
			case T__208:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1866; lastHealOverTimeIDExpression();
				}
				break;
			case T__209:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1867; lastOfExpression();
				}
				break;
			case T__210:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1868; lastTextIDExpression();
				}
				break;
			case T__211:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1869; leftExpression();
				}
				break;
			case T__212:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1870; localVectorOfExpression();
				}
				break;
			case T__213:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1871; matchRoundExpression();
				}
				break;
			case T__214:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1872; matchTimeExpression();
				}
				break;
			case T__215:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1873; maxExpression();
				}
				break;
			case T__216:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1874; maxHealthExpression();
				}
				break;
			case T__217:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1875; minExpression();
				}
				break;
			case T__218:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1876; moduloExpression();
				}
				break;
			case T__219:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1877; multiplyExpression();
				}
				break;
			case T__220:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1878; nearestWalkablePositionExpression();
				}
				break;
			case T__221:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1879; normalizeExpression();
				}
				break;
			case T__222:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1880; notExpression();
				}
				break;
			case T__223:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1881; numberOfDeadPlayersExpression();
				}
				break;
			case T__224:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1882; numberOfDeathsExpression();
				}
				break;
			case T__225:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1883; numberOfEliminationsExpression();
				}
				break;
			case T__226:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1884; numberOfFinalBlowsExpression();
				}
				break;
			case T__227:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1885; numberOfHeroesExpression();
				}
				break;
			case T__228:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1886; numberOfLivingPlayersExpression();
				}
				break;
			case T__229:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1887; numberOfPlayersExpression();
				}
				break;
			case T__230:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1888; numberOfPlayersOnObjectiveExpression();
				}
				break;
			case T__231:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1889; objectiveIndexExpression();
				}
				break;
			case T__232:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1890; objectivePositionExpression();
				}
				break;
			case T__233:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1891; oppositeTeamOfExpression();
				}
				break;
			case T__234:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1892; orExpression();
				}
				break;
			case T__235:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1893; payloadPositionExpression();
				}
				break;
			case T__236:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1894; payloadProgressPercentageExpression();
				}
				break;
			case T__237:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1895; playerCarryingFlagExpression();
				}
				break;
			case T__238:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1896; playerClosestToReticleExpression();
				}
				break;
			case T__239:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1897; playerVariableExpression();
				}
				break;
			case T__240:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1898; playersInSlotExpression();
				}
				break;
			case T__241:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1899; playersInViewAngleExpression();
				}
				break;
			case T__242:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1900; playersOnHeroExpression();
				}
				break;
			case T__243:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1901; playersWithinRadiusExpression();
				}
				break;
			case T__244:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1902; pointCapturePercentageExpression();
				}
				break;
			case T__245:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1903; positionOfExpression();
				}
				break;
			case T__246:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1904; raiseToPowerExpression();
				}
				break;
			case T__247:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1905; randomIntegerExpression();
				}
				break;
			case T__248:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1906; randomRealExpression();
				}
				break;
			case T__249:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1907; randomValueInArrayExpression();
				}
				break;
			case T__250:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1908; randomizedArrayExpression();
				}
				break;
			case T__251:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1909; rayCastHitNormalExpression();
				}
				break;
			case T__252:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1910; rayCastHitPlayerExpression();
				}
				break;
			case T__253:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1911; rayCastHitPositionExpression();
				}
				break;
			case T__254:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1912; removeFromArrayExpression();
				}
				break;
			case T__255:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1913; rightExpression();
				}
				break;
			case T__256:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1914; roundToIntegerExpression();
				}
				break;
			case T__257:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1915; scoreOfExpression();
				}
				break;
			case T__258:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1916; sineFromDegreesExpression();
				}
				break;
			case T__259:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1917; sineFromRadiansExpression();
				}
				break;
			case T__260:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1918; slotOfExpression();
				}
				break;
			case T__261:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1919; sortedArrayExpression();
				}
				break;
			case T__262:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1920; speedOfExpression();
				}
				break;
			case T__263:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1921; speedOfInDirectionExpression();
				}
				break;
			case T__264:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1922; squareRootExpression();
				}
				break;
			case T__265:
				EnterOuterAlt(_localctx, 160);
				{
				State = 1923; stringExpression();
				}
				break;
			case T__266:
				EnterOuterAlt(_localctx, 161);
				{
				State = 1924; subtractExpression();
				}
				break;
			case T__267:
				EnterOuterAlt(_localctx, 162);
				{
				State = 1925; teamOfExpression();
				}
				break;
			case T__268:
				EnterOuterAlt(_localctx, 163);
				{
				State = 1926; teamScoreExpression();
				}
				break;
			case T__269:
				EnterOuterAlt(_localctx, 164);
				{
				State = 1927; throttleOfExpression();
				}
				break;
			case T__270:
				EnterOuterAlt(_localctx, 165);
				{
				State = 1928; totalTimeElapsedExpression();
				}
				break;
			case T__271:
				EnterOuterAlt(_localctx, 166);
				{
				State = 1929; ultimateChargePercentExpression();
				}
				break;
			case T__272:
				EnterOuterAlt(_localctx, 167);
				{
				State = 1930; upExpression();
				}
				break;
			case T__273:
				EnterOuterAlt(_localctx, 168);
				{
				State = 1931; valueInArrayExpression();
				}
				break;
			case T__274:
				EnterOuterAlt(_localctx, 169);
				{
				State = 1932; vectorTowardsExpression();
				}
				break;
			case T__275:
				EnterOuterAlt(_localctx, 170);
				{
				State = 1933; verticalFacingAngleOfExpression();
				}
				break;
			case T__276:
				EnterOuterAlt(_localctx, 171);
				{
				State = 1934; verticalSpeedOfExpression();
				}
				break;
			case T__277:
				EnterOuterAlt(_localctx, 172);
				{
				State = 1935; victimExpression();
				}
				break;
			case T__278:
				EnterOuterAlt(_localctx, 173);
				{
				State = 1936; worldVectorOfExpression();
				}
				break;
			case T__279:
				EnterOuterAlt(_localctx, 174);
				{
				State = 1937; xComponentOfExpression();
				}
				break;
			case T__280:
				EnterOuterAlt(_localctx, 175);
				{
				State = 1938; yComponentOfExpression();
				}
				break;
			case T__281:
				EnterOuterAlt(_localctx, 176);
				{
				State = 1939; zComponentOfExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVectorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorExpressionContext vectorExpression() {
		VectorExpressionContext _localctx = new VectorExpressionContext(Context, State);
		EnterRule(_localctx, 214, RULE_vectorExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; Match(T__108);
			State = 1943; Match(T__1);
			State = 1944; expression();
			State = 1945; Match(T__17);
			State = 1946; expression();
			State = 1947; Match(T__17);
			State = 1948; expression();
			State = 1949; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExpressionContext addExpression() {
		AddExpressionContext _localctx = new AddExpressionContext(Context, State);
		EnterRule(_localctx, 216, RULE_addExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951; Match(T__109);
			State = 1952; Match(T__1);
			State = 1953; expression();
			State = 1954; Match(T__17);
			State = 1955; expression();
			State = 1956; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsoluteValueExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AbsoluteValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absoluteValueExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbsoluteValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbsoluteValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsoluteValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsoluteValueExpressionContext absoluteValueExpression() {
		AbsoluteValueExpressionContext _localctx = new AbsoluteValueExpressionContext(Context, State);
		EnterRule(_localctx, 218, RULE_absoluteValueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958; Match(T__110);
			State = 1959; Match(T__1);
			State = 1960; expression();
			State = 1961; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllDeadPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllDeadPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allDeadPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllDeadPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllDeadPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllDeadPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllDeadPlayersExpressionContext allDeadPlayersExpression() {
		AllDeadPlayersExpressionContext _localctx = new AllDeadPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_allDeadPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1963; Match(T__111);
			State = 1964; Match(T__1);
			State = 1965; expression();
			State = 1966; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllHeroesExpressionContext : ParserRuleContext {
		public AllHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllHeroesExpressionContext allHeroesExpression() {
		AllHeroesExpressionContext _localctx = new AllHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_allHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968; Match(T__112);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllLivingPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllLivingPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allLivingPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllLivingPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllLivingPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllLivingPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllLivingPlayersExpressionContext allLivingPlayersExpression() {
		AllLivingPlayersExpressionContext _localctx = new AllLivingPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_allLivingPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1970; Match(T__113);
			State = 1971; Match(T__1);
			State = 1972; expression();
			State = 1973; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllPlayersExpressionContext allPlayersExpression() {
		AllPlayersExpressionContext _localctx = new AllPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 226, RULE_allPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975; Match(T__114);
			State = 1976; Match(T__1);
			State = 1977; expression();
			State = 1978; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllPlayersNotOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllPlayersNotOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allPlayersNotOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllPlayersNotOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllPlayersNotOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllPlayersNotOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllPlayersNotOnObjectiveExpressionContext allPlayersNotOnObjectiveExpression() {
		AllPlayersNotOnObjectiveExpressionContext _localctx = new AllPlayersNotOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 228, RULE_allPlayersNotOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980; Match(T__115);
			State = 1981; Match(T__1);
			State = 1982; expression();
			State = 1983; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllPlayersOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllPlayersOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allPlayersOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllPlayersOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllPlayersOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllPlayersOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllPlayersOnObjectiveExpressionContext allPlayersOnObjectiveExpression() {
		AllPlayersOnObjectiveExpressionContext _localctx = new AllPlayersOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 230, RULE_allPlayersOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985; Match(T__116);
			State = 1986; Match(T__1);
			State = 1987; expression();
			State = 1988; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllowedHeroesExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllowedHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allowedHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllowedHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllowedHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllowedHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllowedHeroesExpressionContext allowedHeroesExpression() {
		AllowedHeroesExpressionContext _localctx = new AllowedHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 232, RULE_allowedHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990; Match(T__117);
			State = 1991; Match(T__1);
			State = 1992; expression();
			State = 1993; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltitudeOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AltitudeOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altitudeOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAltitudeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAltitudeOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltitudeOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltitudeOfExpressionContext altitudeOfExpression() {
		AltitudeOfExpressionContext _localctx = new AltitudeOfExpressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_altitudeOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1995; Match(T__118);
			State = 1996; Match(T__1);
			State = 1997; expression();
			State = 1998; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventPlayerExpressionContext : ParserRuleContext {
		public EventPlayerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventPlayerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventPlayerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventPlayerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventPlayerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventPlayerExpressionContext eventPlayerExpression() {
		EventPlayerExpressionContext _localctx = new EventPlayerExpressionContext(Context, State);
		EnterRule(_localctx, 236, RULE_eventPlayerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000; Match(T__119);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 238, RULE_andExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2002; Match(T__120);
			State = 2003; Match(T__1);
			State = 2004; expression();
			State = 2005; Match(T__17);
			State = 2006; expression();
			State = 2007; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AngleDifferenceExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AngleDifferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_angleDifferenceExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAngleDifferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAngleDifferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAngleDifferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AngleDifferenceExpressionContext angleDifferenceExpression() {
		AngleDifferenceExpressionContext _localctx = new AngleDifferenceExpressionContext(Context, State);
		EnterRule(_localctx, 240, RULE_angleDifferenceExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009; Match(T__121);
			State = 2010; Match(T__1);
			State = 2011; expression();
			State = 2012; Match(T__17);
			State = 2013; expression();
			State = 2014; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppendToArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AppendToArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appendToArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAppendToArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAppendToArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppendToArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppendToArrayExpressionContext appendToArrayExpression() {
		AppendToArrayExpressionContext _localctx = new AppendToArrayExpressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_appendToArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2016; Match(T__122);
			State = 2017; Match(T__1);
			State = 2018; expression();
			State = 2019; Match(T__17);
			State = 2020; expression();
			State = 2021; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContainsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayContainsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayContainsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArrayContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArrayContainsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayContainsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContainsExpressionContext arrayContainsExpression() {
		ArrayContainsExpressionContext _localctx = new ArrayContainsExpressionContext(Context, State);
		EnterRule(_localctx, 244, RULE_arrayContainsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023; Match(T__123);
			State = 2024; Match(T__1);
			State = 2025; expression();
			State = 2026; Match(T__17);
			State = 2027; expression();
			State = 2028; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySliceExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArraySliceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySliceExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArraySliceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArraySliceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySliceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySliceExpressionContext arraySliceExpression() {
		ArraySliceExpressionContext _localctx = new ArraySliceExpressionContext(Context, State);
		EnterRule(_localctx, 246, RULE_arraySliceExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2030; Match(T__124);
			State = 2031; Match(T__1);
			State = 2032; expression();
			State = 2033; Match(T__17);
			State = 2034; expression();
			State = 2035; Match(T__17);
			State = 2036; expression();
			State = 2037; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttackerExpressionContext : ParserRuleContext {
		public AttackerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attackerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAttackerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAttackerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttackerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttackerExpressionContext attackerExpression() {
		AttackerExpressionContext _localctx = new AttackerExpressionContext(Context, State);
		EnterRule(_localctx, 248, RULE_attackerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039; Match(T__125);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardExpressionContext : ParserRuleContext {
		public BackwardExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBackwardExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBackwardExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardExpressionContext backwardExpression() {
		BackwardExpressionContext _localctx = new BackwardExpressionContext(Context, State);
		EnterRule(_localctx, 250, RULE_backwardExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2041; Match(T__126);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosestPlayerToExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ClosestPlayerToExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closestPlayerToExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterClosestPlayerToExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitClosestPlayerToExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosestPlayerToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosestPlayerToExpressionContext closestPlayerToExpression() {
		ClosestPlayerToExpressionContext _localctx = new ClosestPlayerToExpressionContext(Context, State);
		EnterRule(_localctx, 252, RULE_closestPlayerToExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2043; Match(T__127);
			State = 2044; Match(T__1);
			State = 2045; expression();
			State = 2046; Match(T__17);
			State = 2047; expression();
			State = 2048; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryCompartorOperatorContext binaryCompartorOperator() {
			return GetRuleContext<BinaryCompartorOperatorContext>(0);
		}
		public CompareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExpressionContext compareExpression() {
		CompareExpressionContext _localctx = new CompareExpressionContext(Context, State);
		EnterRule(_localctx, 254, RULE_compareExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050; Match(T__128);
			State = 2051; Match(T__1);
			State = 2052; expression();
			State = 2053; Match(T__17);
			State = 2054; binaryCompartorOperator();
			State = 2055; Match(T__17);
			State = 2056; expression();
			State = 2057; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlModeScoringPercentageExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlModeScoringPercentageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlModeScoringPercentageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterControlModeScoringPercentageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitControlModeScoringPercentageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlModeScoringPercentageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlModeScoringPercentageExpressionContext controlModeScoringPercentageExpression() {
		ControlModeScoringPercentageExpressionContext _localctx = new ControlModeScoringPercentageExpressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_controlModeScoringPercentageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2059; Match(T__129);
			State = 2060; Match(T__1);
			State = 2061; expression();
			State = 2062; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableExpressionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public GlobalVariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGlobalVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGlobalVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableExpressionContext globalVariableExpression() {
		GlobalVariableExpressionContext _localctx = new GlobalVariableExpressionContext(Context, State);
		EnterRule(_localctx, 258, RULE_globalVariableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; Match(T__130);
			State = 2065; Match(T__1);
			State = 2066; globalVariable();
			State = 2067; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlModeScoringTeamExpressionContext : ParserRuleContext {
		public ControlModeScoringTeamExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlModeScoringTeamExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterControlModeScoringTeamExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitControlModeScoringTeamExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlModeScoringTeamExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlModeScoringTeamExpressionContext controlModeScoringTeamExpression() {
		ControlModeScoringTeamExpressionContext _localctx = new ControlModeScoringTeamExpressionContext(Context, State);
		EnterRule(_localctx, 260, RULE_controlModeScoringTeamExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069; Match(T__131);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosineFromDegreesExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CosineFromDegreesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosineFromDegreesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCosineFromDegreesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCosineFromDegreesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosineFromDegreesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CosineFromDegreesExpressionContext cosineFromDegreesExpression() {
		CosineFromDegreesExpressionContext _localctx = new CosineFromDegreesExpressionContext(Context, State);
		EnterRule(_localctx, 262, RULE_cosineFromDegreesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071; Match(T__132);
			State = 2072; Match(T__1);
			State = 2073; expression();
			State = 2074; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosineFromRadiansExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CosineFromRadiansExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosineFromRadiansExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCosineFromRadiansExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCosineFromRadiansExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosineFromRadiansExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CosineFromRadiansExpressionContext cosineFromRadiansExpression() {
		CosineFromRadiansExpressionContext _localctx = new CosineFromRadiansExpressionContext(Context, State);
		EnterRule(_localctx, 264, RULE_cosineFromRadiansExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2076; Match(T__133);
			State = 2077; Match(T__1);
			State = 2078; expression();
			State = 2079; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CountOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCountOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCountOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountOfExpressionContext countOfExpression() {
		CountOfExpressionContext _localctx = new CountOfExpressionContext(Context, State);
		EnterRule(_localctx, 266, RULE_countOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2081; Match(T__134);
			State = 2082; Match(T__1);
			State = 2083; expression();
			State = 2084; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrossProductExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CrossProductExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crossProductExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCrossProductExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCrossProductExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrossProductExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrossProductExpressionContext crossProductExpression() {
		CrossProductExpressionContext _localctx = new CrossProductExpressionContext(Context, State);
		EnterRule(_localctx, 268, RULE_crossProductExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086; Match(T__135);
			State = 2087; Match(T__1);
			State = 2088; expression();
			State = 2089; Match(T__17);
			State = 2090; expression();
			State = 2091; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentArrayElementExpressionContext : ParserRuleContext {
		public CurrentArrayElementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentArrayElementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCurrentArrayElementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCurrentArrayElementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentArrayElementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentArrayElementExpressionContext currentArrayElementExpression() {
		CurrentArrayElementExpressionContext _localctx = new CurrentArrayElementExpressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_currentArrayElementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093; Match(T__136);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionFromAnglesExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DirectionFromAnglesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionFromAnglesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDirectionFromAnglesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDirectionFromAnglesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectionFromAnglesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionFromAnglesExpressionContext directionFromAnglesExpression() {
		DirectionFromAnglesExpressionContext _localctx = new DirectionFromAnglesExpressionContext(Context, State);
		EnterRule(_localctx, 272, RULE_directionFromAnglesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2095; Match(T__137);
			State = 2096; Match(T__1);
			State = 2097; expression();
			State = 2098; Match(T__17);
			State = 2099; expression();
			State = 2100; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionTowardsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DirectionTowardsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionTowardsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDirectionTowardsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDirectionTowardsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectionTowardsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionTowardsExpressionContext directionTowardsExpression() {
		DirectionTowardsExpressionContext _localctx = new DirectionTowardsExpressionContext(Context, State);
		EnterRule(_localctx, 274, RULE_directionTowardsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2102; Match(T__138);
			State = 2103; Match(T__1);
			State = 2104; expression();
			State = 2105; Match(T__17);
			State = 2106; expression();
			State = 2107; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceBetweenExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DistanceBetweenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceBetweenExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDistanceBetweenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDistanceBetweenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceBetweenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceBetweenExpressionContext distanceBetweenExpression() {
		DistanceBetweenExpressionContext _localctx = new DistanceBetweenExpressionContext(Context, State);
		EnterRule(_localctx, 276, RULE_distanceBetweenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2109; Match(T__139);
			State = 2110; Match(T__1);
			State = 2111; expression();
			State = 2112; Match(T__17);
			State = 2113; expression();
			State = 2114; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divideExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivideExpressionContext divideExpression() {
		DivideExpressionContext _localctx = new DivideExpressionContext(Context, State);
		EnterRule(_localctx, 278, RULE_divideExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116; Match(T__140);
			State = 2117; Match(T__1);
			State = 2118; expression();
			State = 2119; Match(T__17);
			State = 2120; expression();
			State = 2121; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotProductExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotProductExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotProductExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDotProductExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDotProductExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotProductExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotProductExpressionContext dotProductExpression() {
		DotProductExpressionContext _localctx = new DotProductExpressionContext(Context, State);
		EnterRule(_localctx, 280, RULE_dotProductExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2123; Match(T__141);
			State = 2124; Match(T__1);
			State = 2125; expression();
			State = 2126; Match(T__17);
			State = 2127; expression();
			State = 2128; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DownExpressionContext : ParserRuleContext {
		public DownExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_downExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDownExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDownExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDownExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DownExpressionContext downExpression() {
		DownExpressionContext _localctx = new DownExpressionContext(Context, State);
		EnterRule(_localctx, 282, RULE_downExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2130; Match(T__142);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyArrayExpressionContext : ParserRuleContext {
		public EmptyArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmptyArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmptyArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyArrayExpressionContext emptyArrayExpression() {
		EmptyArrayExpressionContext _localctx = new EmptyArrayExpressionContext(Context, State);
		EnterRule(_localctx, 284, RULE_emptyArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132; Match(T__143);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityExistsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EntityExistsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityExistsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEntityExistsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEntityExistsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityExistsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityExistsExpressionContext entityExistsExpression() {
		EntityExistsExpressionContext _localctx = new EntityExistsExpressionContext(Context, State);
		EnterRule(_localctx, 286, RULE_entityExistsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2134; Match(T__144);
			State = 2135; Match(T__1);
			State = 2136; expression();
			State = 2137; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDamageExpressionContext : ParserRuleContext {
		public EventDamageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDamageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventDamageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventDamageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDamageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDamageExpressionContext eventDamageExpression() {
		EventDamageExpressionContext _localctx = new EventDamageExpressionContext(Context, State);
		EnterRule(_localctx, 288, RULE_eventDamageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139; Match(T__145);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventWasCriticalHitExpressionContext : ParserRuleContext {
		public EventWasCriticalHitExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventWasCriticalHitExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventWasCriticalHitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventWasCriticalHitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventWasCriticalHitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventWasCriticalHitExpressionContext eventWasCriticalHitExpression() {
		EventWasCriticalHitExpressionContext _localctx = new EventWasCriticalHitExpressionContext(Context, State);
		EnterRule(_localctx, 290, RULE_eventWasCriticalHitExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2141; Match(T__146);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EyePositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EyePositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eyePositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEyePositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEyePositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEyePositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EyePositionExpressionContext eyePositionExpression() {
		EyePositionExpressionContext _localctx = new EyePositionExpressionContext(Context, State);
		EnterRule(_localctx, 292, RULE_eyePositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2143; Match(T__147);
			State = 2144; Match(T__1);
			State = 2145; expression();
			State = 2146; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FacingDirectionOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FacingDirectionOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_facingDirectionOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFacingDirectionOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFacingDirectionOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFacingDirectionOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FacingDirectionOfExpressionContext facingDirectionOfExpression() {
		FacingDirectionOfExpressionContext _localctx = new FacingDirectionOfExpressionContext(Context, State);
		EnterRule(_localctx, 294, RULE_facingDirectionOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2148; Match(T__148);
			State = 2149; Match(T__1);
			State = 2150; expression();
			State = 2151; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FarthestPlayerFromExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FarthestPlayerFromExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_farthestPlayerFromExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFarthestPlayerFromExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFarthestPlayerFromExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFarthestPlayerFromExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FarthestPlayerFromExpressionContext farthestPlayerFromExpression() {
		FarthestPlayerFromExpressionContext _localctx = new FarthestPlayerFromExpressionContext(Context, State);
		EnterRule(_localctx, 296, RULE_farthestPlayerFromExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2153; Match(T__149);
			State = 2154; Match(T__1);
			State = 2155; expression();
			State = 2156; Match(T__17);
			State = 2157; expression();
			State = 2158; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilteredArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FilteredArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filteredArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFilteredArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFilteredArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilteredArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilteredArrayExpressionContext filteredArrayExpression() {
		FilteredArrayExpressionContext _localctx = new FilteredArrayExpressionContext(Context, State);
		EnterRule(_localctx, 298, RULE_filteredArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160; Match(T__150);
			State = 2161; Match(T__1);
			State = 2162; expression();
			State = 2163; Match(T__17);
			State = 2164; expression();
			State = 2165; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FirstOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFirstOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFirstOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstOfExpressionContext firstOfExpression() {
		FirstOfExpressionContext _localctx = new FirstOfExpressionContext(Context, State);
		EnterRule(_localctx, 300, RULE_firstOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167; Match(T__151);
			State = 2168; Match(T__1);
			State = 2169; expression();
			State = 2170; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagPositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FlagPositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flagPositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFlagPositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFlagPositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagPositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagPositionExpressionContext flagPositionExpression() {
		FlagPositionExpressionContext _localctx = new FlagPositionExpressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_flagPositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2172; Match(T__152);
			State = 2173; Match(T__1);
			State = 2174; expression();
			State = 2175; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForwardExpressionContext : ParserRuleContext {
		public ForwardExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forwardExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterForwardExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitForwardExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForwardExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForwardExpressionContext forwardExpression() {
		ForwardExpressionContext _localctx = new ForwardExpressionContext(Context, State);
		EnterRule(_localctx, 304, RULE_forwardExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2177; Match(T__153);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HasSpawnedExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HasSpawnedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hasSpawnedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHasSpawnedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHasSpawnedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasSpawnedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HasSpawnedExpressionContext hasSpawnedExpression() {
		HasSpawnedExpressionContext _localctx = new HasSpawnedExpressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_hasSpawnedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2179; Match(T__154);
			State = 2180; Match(T__1);
			State = 2181; expression();
			State = 2182; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HasStatusExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatusContext status() {
			return GetRuleContext<StatusContext>(0);
		}
		public HasStatusExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hasStatusExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHasStatusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHasStatusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasStatusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HasStatusExpressionContext hasStatusExpression() {
		HasStatusExpressionContext _localctx = new HasStatusExpressionContext(Context, State);
		EnterRule(_localctx, 308, RULE_hasStatusExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184; Match(T__155);
			State = 2185; Match(T__1);
			State = 2186; expression();
			State = 2187; Match(T__17);
			State = 2188; status();
			State = 2189; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HealthExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHealthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHealthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthExpressionContext healthExpression() {
		HealthExpressionContext _localctx = new HealthExpressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_healthExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2191; Match(T__156);
			State = 2192; Match(T__1);
			State = 2193; expression();
			State = 2194; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthPercentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HealthPercentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthPercentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHealthPercentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHealthPercentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthPercentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthPercentExpressionContext healthPercentExpression() {
		HealthPercentExpressionContext _localctx = new HealthPercentExpressionContext(Context, State);
		EnterRule(_localctx, 312, RULE_healthPercentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2196; Match(T__157);
			State = 2197; Match(T__1);
			State = 2198; expression();
			State = 2199; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroExpressionContext : ParserRuleContext {
		public HeroTypeContext heroType() {
			return GetRuleContext<HeroTypeContext>(0);
		}
		public HeroExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroExpressionContext heroExpression() {
		HeroExpressionContext _localctx = new HeroExpressionContext(Context, State);
		EnterRule(_localctx, 314, RULE_heroExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201; Match(T__158);
			State = 2202; Match(T__1);
			State = 2203; heroType();
			State = 2204; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroIconStringExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HeroIconStringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroIconStringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroIconStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroIconStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroIconStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroIconStringExpressionContext heroIconStringExpression() {
		HeroIconStringExpressionContext _localctx = new HeroIconStringExpressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_heroIconStringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2206; Match(T__159);
			State = 2207; Match(T__1);
			State = 2208; expression();
			State = 2209; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HeroOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroOfExpressionContext heroOfExpression() {
		HeroOfExpressionContext _localctx = new HeroOfExpressionContext(Context, State);
		EnterRule(_localctx, 318, RULE_heroOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211; Match(T__160);
			State = 2212; Match(T__1);
			State = 2213; expression();
			State = 2214; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalAngleFromDirectionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HorizontalAngleFromDirectionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalAngleFromDirectionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalAngleFromDirectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalAngleFromDirectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalAngleFromDirectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalAngleFromDirectionExpressionContext horizontalAngleFromDirectionExpression() {
		HorizontalAngleFromDirectionExpressionContext _localctx = new HorizontalAngleFromDirectionExpressionContext(Context, State);
		EnterRule(_localctx, 320, RULE_horizontalAngleFromDirectionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2216; Match(T__161);
			State = 2217; Match(T__1);
			State = 2218; expression();
			State = 2219; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalAngleTowardsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HorizontalAngleTowardsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalAngleTowardsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalAngleTowardsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalAngleTowardsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalAngleTowardsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalAngleTowardsExpressionContext horizontalAngleTowardsExpression() {
		HorizontalAngleTowardsExpressionContext _localctx = new HorizontalAngleTowardsExpressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_horizontalAngleTowardsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2221; Match(T__162);
			State = 2222; Match(T__1);
			State = 2223; expression();
			State = 2224; Match(T__17);
			State = 2225; expression();
			State = 2226; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalFacingAngleOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HorizontalFacingAngleOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalFacingAngleOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalFacingAngleOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalFacingAngleOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalFacingAngleOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalFacingAngleOfExpressionContext horizontalFacingAngleOfExpression() {
		HorizontalFacingAngleOfExpressionContext _localctx = new HorizontalFacingAngleOfExpressionContext(Context, State);
		EnterRule(_localctx, 324, RULE_horizontalFacingAngleOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228; Match(T__163);
			State = 2229; Match(T__1);
			State = 2230; expression();
			State = 2231; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalSpeedOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HorizontalSpeedOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalSpeedOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalSpeedOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalSpeedOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalSpeedOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalSpeedOfExpressionContext horizontalSpeedOfExpression() {
		HorizontalSpeedOfExpressionContext _localctx = new HorizontalSpeedOfExpressionContext(Context, State);
		EnterRule(_localctx, 326, RULE_horizontalSpeedOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233; Match(T__164);
			State = 2234; Match(T__1);
			State = 2235; expression();
			State = 2236; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOfArrayValueExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexOfArrayValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOfArrayValueExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIndexOfArrayValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIndexOfArrayValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOfArrayValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOfArrayValueExpressionContext indexOfArrayValueExpression() {
		IndexOfArrayValueExpressionContext _localctx = new IndexOfArrayValueExpressionContext(Context, State);
		EnterRule(_localctx, 328, RULE_indexOfArrayValueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2238; Match(T__165);
			State = 2239; Match(T__1);
			State = 2240; expression();
			State = 2241; Match(T__17);
			State = 2242; expression();
			State = 2243; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsAliveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsAliveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isAliveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsAliveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsAliveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsAliveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsAliveExpressionContext isAliveExpression() {
		IsAliveExpressionContext _localctx = new IsAliveExpressionContext(Context, State);
		EnterRule(_localctx, 330, RULE_isAliveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2245; Match(T__166);
			State = 2246; Match(T__1);
			State = 2247; expression();
			State = 2248; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsAssemblingHeroesExpressionContext : ParserRuleContext {
		public IsAssemblingHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isAssemblingHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsAssemblingHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsAssemblingHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsAssemblingHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsAssemblingHeroesExpressionContext isAssemblingHeroesExpression() {
		IsAssemblingHeroesExpressionContext _localctx = new IsAssemblingHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 332, RULE_isAssemblingHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2250; Match(T__167);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsBetweenRoundsExpressionContext : ParserRuleContext {
		public IsBetweenRoundsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isBetweenRoundsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsBetweenRoundsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsBetweenRoundsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsBetweenRoundsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsBetweenRoundsExpressionContext isBetweenRoundsExpression() {
		IsBetweenRoundsExpressionContext _localctx = new IsBetweenRoundsExpressionContext(Context, State);
		EnterRule(_localctx, 334, RULE_isBetweenRoundsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2252; Match(T__168);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsButtonHeldExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ButtonContext button() {
			return GetRuleContext<ButtonContext>(0);
		}
		public IsButtonHeldExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isButtonHeldExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsButtonHeldExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsButtonHeldExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsButtonHeldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsButtonHeldExpressionContext isButtonHeldExpression() {
		IsButtonHeldExpressionContext _localctx = new IsButtonHeldExpressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_isButtonHeldExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2254; Match(T__169);
			State = 2255; Match(T__1);
			State = 2256; expression();
			State = 2257; Match(T__17);
			State = 2258; button();
			State = 2259; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CommunicationTypeContext communicationType() {
			return GetRuleContext<CommunicationTypeContext>(0);
		}
		public IsCommunicatingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingExpressionContext isCommunicatingExpression() {
		IsCommunicatingExpressionContext _localctx = new IsCommunicatingExpressionContext(Context, State);
		EnterRule(_localctx, 338, RULE_isCommunicatingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2261; Match(T__170);
			State = 2262; Match(T__1);
			State = 2263; expression();
			State = 2264; Match(T__17);
			State = 2265; communicationType();
			State = 2266; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingAnyExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCommunicatingAnyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingAnyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingAnyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingAnyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingAnyExpressionContext isCommunicatingAnyExpression() {
		IsCommunicatingAnyExpressionContext _localctx = new IsCommunicatingAnyExpressionContext(Context, State);
		EnterRule(_localctx, 340, RULE_isCommunicatingAnyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2268; Match(T__171);
			State = 2269; Match(T__1);
			State = 2270; expression();
			State = 2271; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingAnyEmoteExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCommunicatingAnyEmoteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingAnyEmoteExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingAnyEmoteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingAnyEmoteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingAnyEmoteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingAnyEmoteExpressionContext isCommunicatingAnyEmoteExpression() {
		IsCommunicatingAnyEmoteExpressionContext _localctx = new IsCommunicatingAnyEmoteExpressionContext(Context, State);
		EnterRule(_localctx, 342, RULE_isCommunicatingAnyEmoteExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2273; Match(T__172);
			State = 2274; Match(T__1);
			State = 2275; expression();
			State = 2276; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingAnyVoicelineExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCommunicatingAnyVoicelineExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingAnyVoicelineExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingAnyVoicelineExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingAnyVoicelineExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingAnyVoicelineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingAnyVoicelineExpressionContext isCommunicatingAnyVoicelineExpression() {
		IsCommunicatingAnyVoicelineExpressionContext _localctx = new IsCommunicatingAnyVoicelineExpressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_isCommunicatingAnyVoicelineExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2278; Match(T__173);
			State = 2279; Match(T__1);
			State = 2280; expression();
			State = 2281; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsControlModePointLockedExpressionContext : ParserRuleContext {
		public IsControlModePointLockedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isControlModePointLockedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsControlModePointLockedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsControlModePointLockedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsControlModePointLockedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsControlModePointLockedExpressionContext isControlModePointLockedExpression() {
		IsControlModePointLockedExpressionContext _localctx = new IsControlModePointLockedExpressionContext(Context, State);
		EnterRule(_localctx, 346, RULE_isControlModePointLockedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2283; Match(T__174);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCrouchingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCrouchingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCrouchingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCrouchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCrouchingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCrouchingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCrouchingExpressionContext isCrouchingExpression() {
		IsCrouchingExpressionContext _localctx = new IsCrouchingExpressionContext(Context, State);
		EnterRule(_localctx, 348, RULE_isCrouchingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285; Match(T__175);
			State = 2286; Match(T__1);
			State = 2287; expression();
			State = 2288; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCTFModeInSuddenDeathExpressionContext : ParserRuleContext {
		public IsCTFModeInSuddenDeathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCTFModeInSuddenDeathExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCTFModeInSuddenDeathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCTFModeInSuddenDeathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCTFModeInSuddenDeathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCTFModeInSuddenDeathExpressionContext isCTFModeInSuddenDeathExpression() {
		IsCTFModeInSuddenDeathExpressionContext _localctx = new IsCTFModeInSuddenDeathExpressionContext(Context, State);
		EnterRule(_localctx, 350, RULE_isCTFModeInSuddenDeathExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290; Match(T__176);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDeadExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsDeadExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDeadExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsDeadExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsDeadExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDeadExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDeadExpressionContext isDeadExpression() {
		IsDeadExpressionContext _localctx = new IsDeadExpressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_isDeadExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2292; Match(T__177);
			State = 2293; Match(T__1);
			State = 2294; expression();
			State = 2295; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFiringPrimaryExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFiringPrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFiringPrimaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFiringPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFiringPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFiringPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFiringPrimaryExpressionContext isFiringPrimaryExpression() {
		IsFiringPrimaryExpressionContext _localctx = new IsFiringPrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 354, RULE_isFiringPrimaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297; Match(T__178);
			State = 2298; Match(T__1);
			State = 2299; expression();
			State = 2300; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFiringSecondaryExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFiringSecondaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFiringSecondaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFiringSecondaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFiringSecondaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFiringSecondaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFiringSecondaryExpressionContext isFiringSecondaryExpression() {
		IsFiringSecondaryExpressionContext _localctx = new IsFiringSecondaryExpressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_isFiringSecondaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302; Match(T__179);
			State = 2303; Match(T__1);
			State = 2304; expression();
			State = 2305; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFlagAtBaseExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFlagAtBaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFlagAtBaseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFlagAtBaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFlagAtBaseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFlagAtBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFlagAtBaseExpressionContext isFlagAtBaseExpression() {
		IsFlagAtBaseExpressionContext _localctx = new IsFlagAtBaseExpressionContext(Context, State);
		EnterRule(_localctx, 358, RULE_isFlagAtBaseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2307; Match(T__180);
			State = 2308; Match(T__1);
			State = 2309; expression();
			State = 2310; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFlagBeingCarriedExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFlagBeingCarriedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFlagBeingCarriedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFlagBeingCarriedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFlagBeingCarriedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFlagBeingCarriedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFlagBeingCarriedExpressionContext isFlagBeingCarriedExpression() {
		IsFlagBeingCarriedExpressionContext _localctx = new IsFlagBeingCarriedExpressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_isFlagBeingCarriedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2312; Match(T__181);
			State = 2313; Match(T__1);
			State = 2314; expression();
			State = 2315; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsGameInProgressExpressionContext : ParserRuleContext {
		public IsGameInProgressExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isGameInProgressExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsGameInProgressExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsGameInProgressExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsGameInProgressExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsGameInProgressExpressionContext isGameInProgressExpression() {
		IsGameInProgressExpressionContext _localctx = new IsGameInProgressExpressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_isGameInProgressExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2317; Match(T__182);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsHeroBeingPlayedExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsHeroBeingPlayedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isHeroBeingPlayedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsHeroBeingPlayedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsHeroBeingPlayedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsHeroBeingPlayedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsHeroBeingPlayedExpressionContext isHeroBeingPlayedExpression() {
		IsHeroBeingPlayedExpressionContext _localctx = new IsHeroBeingPlayedExpressionContext(Context, State);
		EnterRule(_localctx, 364, RULE_isHeroBeingPlayedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2319; Match(T__183);
			State = 2320; Match(T__1);
			State = 2321; expression();
			State = 2322; Match(T__17);
			State = 2323; expression();
			State = 2324; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInAirExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsInAirExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInAirExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInAirExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInAirExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInAirExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInAirExpressionContext isInAirExpression() {
		IsInAirExpressionContext _localctx = new IsInAirExpressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_isInAirExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2326; Match(T__184);
			State = 2327; Match(T__1);
			State = 2328; expression();
			State = 2329; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInLineofSightExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BarrierBlockTypeContext barrierBlockType() {
			return GetRuleContext<BarrierBlockTypeContext>(0);
		}
		public IsInLineofSightExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInLineofSightExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInLineofSightExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInLineofSightExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInLineofSightExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInLineofSightExpressionContext isInLineofSightExpression() {
		IsInLineofSightExpressionContext _localctx = new IsInLineofSightExpressionContext(Context, State);
		EnterRule(_localctx, 368, RULE_isInLineofSightExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331; Match(T__185);
			State = 2332; Match(T__1);
			State = 2333; expression();
			State = 2334; Match(T__17);
			State = 2335; expression();
			State = 2336; Match(T__17);
			State = 2337; barrierBlockType();
			State = 2338; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInSetupExpressionContext : ParserRuleContext {
		public IsInSetupExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInSetupExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInSetupExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInSetupExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInSetupExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInSetupExpressionContext isInSetupExpression() {
		IsInSetupExpressionContext _localctx = new IsInSetupExpressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_isInSetupExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340; Match(T__186);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInSpawnRoomExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsInSpawnRoomExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInSpawnRoomExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInSpawnRoomExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInSpawnRoomExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInSpawnRoomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInSpawnRoomExpressionContext isInSpawnRoomExpression() {
		IsInSpawnRoomExpressionContext _localctx = new IsInSpawnRoomExpressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_isInSpawnRoomExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2342; Match(T__187);
			State = 2343; Match(T__1);
			State = 2344; expression();
			State = 2345; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInViewAngleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsInViewAngleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInViewAngleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInViewAngleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInViewAngleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInViewAngleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInViewAngleExpressionContext isInViewAngleExpression() {
		IsInViewAngleExpressionContext _localctx = new IsInViewAngleExpressionContext(Context, State);
		EnterRule(_localctx, 374, RULE_isInViewAngleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2347; Match(T__188);
			State = 2348; Match(T__1);
			State = 2349; expression();
			State = 2350; Match(T__17);
			State = 2351; expression();
			State = 2352; Match(T__17);
			State = 2353; expression();
			State = 2354; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsMatchCompleteExpressionContext : ParserRuleContext {
		public IsMatchCompleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isMatchCompleteExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsMatchCompleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsMatchCompleteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsMatchCompleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsMatchCompleteExpressionContext isMatchCompleteExpression() {
		IsMatchCompleteExpressionContext _localctx = new IsMatchCompleteExpressionContext(Context, State);
		EnterRule(_localctx, 376, RULE_isMatchCompleteExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2356; Match(T__189);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsMovingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsMovingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isMovingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsMovingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsMovingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsMovingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsMovingExpressionContext isMovingExpression() {
		IsMovingExpressionContext _localctx = new IsMovingExpressionContext(Context, State);
		EnterRule(_localctx, 378, RULE_isMovingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358; Match(T__190);
			State = 2359; Match(T__1);
			State = 2360; expression();
			State = 2361; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsObjectiveCompleteExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsObjectiveCompleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isObjectiveCompleteExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsObjectiveCompleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsObjectiveCompleteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsObjectiveCompleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsObjectiveCompleteExpressionContext isObjectiveCompleteExpression() {
		IsObjectiveCompleteExpressionContext _localctx = new IsObjectiveCompleteExpressionContext(Context, State);
		EnterRule(_localctx, 380, RULE_isObjectiveCompleteExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363; Match(T__191);
			State = 2364; Match(T__1);
			State = 2365; expression();
			State = 2366; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOnGroundExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOnGroundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOnGroundExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsOnGroundExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsOnGroundExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOnGroundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOnGroundExpressionContext isOnGroundExpression() {
		IsOnGroundExpressionContext _localctx = new IsOnGroundExpressionContext(Context, State);
		EnterRule(_localctx, 382, RULE_isOnGroundExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2368; Match(T__192);
			State = 2369; Match(T__1);
			State = 2370; expression();
			State = 2371; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOnObjectiveExpressionContext isOnObjectiveExpression() {
		IsOnObjectiveExpressionContext _localctx = new IsOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 384, RULE_isOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2373; Match(T__193);
			State = 2374; Match(T__1);
			State = 2375; expression();
			State = 2376; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOnWallExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOnWallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOnWallExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsOnWallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsOnWallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOnWallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOnWallExpressionContext isOnWallExpression() {
		IsOnWallExpressionContext _localctx = new IsOnWallExpressionContext(Context, State);
		EnterRule(_localctx, 386, RULE_isOnWallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2378; Match(T__194);
			State = 2379; Match(T__1);
			State = 2380; expression();
			State = 2381; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsPortraitOnFireExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsPortraitOnFireExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isPortraitOnFireExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsPortraitOnFireExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsPortraitOnFireExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPortraitOnFireExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsPortraitOnFireExpressionContext isPortraitOnFireExpression() {
		IsPortraitOnFireExpressionContext _localctx = new IsPortraitOnFireExpressionContext(Context, State);
		EnterRule(_localctx, 388, RULE_isPortraitOnFireExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2383; Match(T__195);
			State = 2384; Match(T__1);
			State = 2385; expression();
			State = 2386; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsStandingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsStandingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isStandingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsStandingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsStandingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsStandingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsStandingExpressionContext isStandingExpression() {
		IsStandingExpressionContext _localctx = new IsStandingExpressionContext(Context, State);
		EnterRule(_localctx, 390, RULE_isStandingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2388; Match(T__196);
			State = 2389; Match(T__1);
			State = 2390; expression();
			State = 2391; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTeamOnDefenseExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTeamOnDefenseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTeamOnDefenseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTeamOnDefenseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTeamOnDefenseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTeamOnDefenseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTeamOnDefenseExpressionContext isTeamOnDefenseExpression() {
		IsTeamOnDefenseExpressionContext _localctx = new IsTeamOnDefenseExpressionContext(Context, State);
		EnterRule(_localctx, 392, RULE_isTeamOnDefenseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393; Match(T__197);
			State = 2394; Match(T__1);
			State = 2395; expression();
			State = 2396; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTeamOnOffenseExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTeamOnOffenseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTeamOnOffenseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTeamOnOffenseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTeamOnOffenseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTeamOnOffenseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTeamOnOffenseExpressionContext isTeamOnOffenseExpression() {
		IsTeamOnOffenseExpressionContext _localctx = new IsTeamOnOffenseExpressionContext(Context, State);
		EnterRule(_localctx, 394, RULE_isTeamOnOffenseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2398; Match(T__198);
			State = 2399; Match(T__1);
			State = 2400; expression();
			State = 2401; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTrueForAllExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsTrueForAllExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTrueForAllExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTrueForAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTrueForAllExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTrueForAllExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTrueForAllExpressionContext isTrueForAllExpression() {
		IsTrueForAllExpressionContext _localctx = new IsTrueForAllExpressionContext(Context, State);
		EnterRule(_localctx, 396, RULE_isTrueForAllExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2403; Match(T__199);
			State = 2404; Match(T__1);
			State = 2405; expression();
			State = 2406; Match(T__17);
			State = 2407; expression();
			State = 2408; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTrueForAnyExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsTrueForAnyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTrueForAnyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTrueForAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTrueForAnyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTrueForAnyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTrueForAnyExpressionContext isTrueForAnyExpression() {
		IsTrueForAnyExpressionContext _localctx = new IsTrueForAnyExpressionContext(Context, State);
		EnterRule(_localctx, 398, RULE_isTrueForAnyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2410; Match(T__200);
			State = 2411; Match(T__1);
			State = 2412; expression();
			State = 2413; Match(T__17);
			State = 2414; expression();
			State = 2415; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsUsingAbility1ExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsUsingAbility1ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isUsingAbility1Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsUsingAbility1Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsUsingAbility1Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsUsingAbility1Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsUsingAbility1ExpressionContext isUsingAbility1Expression() {
		IsUsingAbility1ExpressionContext _localctx = new IsUsingAbility1ExpressionContext(Context, State);
		EnterRule(_localctx, 400, RULE_isUsingAbility1Expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2417; Match(T__201);
			State = 2418; Match(T__1);
			State = 2419; expression();
			State = 2420; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsUsingAbility2ExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsUsingAbility2ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isUsingAbility2Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsUsingAbility2Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsUsingAbility2Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsUsingAbility2Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsUsingAbility2ExpressionContext isUsingAbility2Expression() {
		IsUsingAbility2ExpressionContext _localctx = new IsUsingAbility2ExpressionContext(Context, State);
		EnterRule(_localctx, 402, RULE_isUsingAbility2Expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2422; Match(T__202);
			State = 2423; Match(T__1);
			State = 2424; expression();
			State = 2425; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsUsingUltimateExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsUsingUltimateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isUsingUltimateExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsUsingUltimateExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsUsingUltimateExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsUsingUltimateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsUsingUltimateExpressionContext isUsingUltimateExpression() {
		IsUsingUltimateExpressionContext _localctx = new IsUsingUltimateExpressionContext(Context, State);
		EnterRule(_localctx, 404, RULE_isUsingUltimateExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427; Match(T__203);
			State = 2428; Match(T__1);
			State = 2429; expression();
			State = 2430; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsWaitingForPlayersExpressionContext : ParserRuleContext {
		public IsWaitingForPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isWaitingForPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsWaitingForPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsWaitingForPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsWaitingForPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsWaitingForPlayersExpressionContext isWaitingForPlayersExpression() {
		IsWaitingForPlayersExpressionContext _localctx = new IsWaitingForPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 406, RULE_isWaitingForPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2432; Match(T__204);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastCreatedEntityExpressionContext : ParserRuleContext {
		public LastCreatedEntityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastCreatedEntityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastCreatedEntityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastCreatedEntityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastCreatedEntityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastCreatedEntityExpressionContext lastCreatedEntityExpression() {
		LastCreatedEntityExpressionContext _localctx = new LastCreatedEntityExpressionContext(Context, State);
		EnterRule(_localctx, 408, RULE_lastCreatedEntityExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2434; Match(T__205);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastDamageModificationIDExpressionContext : ParserRuleContext {
		public LastDamageModificationIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastDamageModificationIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastDamageModificationIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastDamageModificationIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastDamageModificationIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastDamageModificationIDExpressionContext lastDamageModificationIDExpression() {
		LastDamageModificationIDExpressionContext _localctx = new LastDamageModificationIDExpressionContext(Context, State);
		EnterRule(_localctx, 410, RULE_lastDamageModificationIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436; Match(T__206);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastDamageOverTimeIDExpressionContext : ParserRuleContext {
		public LastDamageOverTimeIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastDamageOverTimeIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastDamageOverTimeIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastDamageOverTimeIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastDamageOverTimeIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastDamageOverTimeIDExpressionContext lastDamageOverTimeIDExpression() {
		LastDamageOverTimeIDExpressionContext _localctx = new LastDamageOverTimeIDExpressionContext(Context, State);
		EnterRule(_localctx, 412, RULE_lastDamageOverTimeIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2438; Match(T__207);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastHealOverTimeIDExpressionContext : ParserRuleContext {
		public LastHealOverTimeIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastHealOverTimeIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastHealOverTimeIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastHealOverTimeIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastHealOverTimeIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastHealOverTimeIDExpressionContext lastHealOverTimeIDExpression() {
		LastHealOverTimeIDExpressionContext _localctx = new LastHealOverTimeIDExpressionContext(Context, State);
		EnterRule(_localctx, 414, RULE_lastHealOverTimeIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2440; Match(T__208);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LastOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastOfExpressionContext lastOfExpression() {
		LastOfExpressionContext _localctx = new LastOfExpressionContext(Context, State);
		EnterRule(_localctx, 416, RULE_lastOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2442; Match(T__209);
			State = 2443; Match(T__1);
			State = 2444; expression();
			State = 2445; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastTextIDExpressionContext : ParserRuleContext {
		public LastTextIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastTextIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastTextIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastTextIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastTextIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastTextIDExpressionContext lastTextIDExpression() {
		LastTextIDExpressionContext _localctx = new LastTextIDExpressionContext(Context, State);
		EnterRule(_localctx, 418, RULE_lastTextIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2447; Match(T__210);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftExpressionContext : ParserRuleContext {
		public LeftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLeftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLeftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftExpressionContext leftExpression() {
		LeftExpressionContext _localctx = new LeftExpressionContext(Context, State);
		EnterRule(_localctx, 420, RULE_leftExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2449; Match(T__211);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVectorOfExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorTransformationTypeContext vectorTransformationType() {
			return GetRuleContext<VectorTransformationTypeContext>(0);
		}
		public LocalVectorOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVectorOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLocalVectorOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLocalVectorOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVectorOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVectorOfExpressionContext localVectorOfExpression() {
		LocalVectorOfExpressionContext _localctx = new LocalVectorOfExpressionContext(Context, State);
		EnterRule(_localctx, 422, RULE_localVectorOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451; Match(T__212);
			State = 2452; Match(T__1);
			State = 2453; expression();
			State = 2454; Match(T__17);
			State = 2455; expression();
			State = 2456; Match(T__17);
			State = 2457; vectorTransformationType();
			State = 2458; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRoundExpressionContext : ParserRuleContext {
		public MatchRoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRoundExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMatchRoundExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMatchRoundExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRoundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRoundExpressionContext matchRoundExpression() {
		MatchRoundExpressionContext _localctx = new MatchRoundExpressionContext(Context, State);
		EnterRule(_localctx, 424, RULE_matchRoundExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2460; Match(T__213);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchTimeExpressionContext : ParserRuleContext {
		public MatchTimeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchTimeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMatchTimeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMatchTimeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchTimeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchTimeExpressionContext matchTimeExpression() {
		MatchTimeExpressionContext _localctx = new MatchTimeExpressionContext(Context, State);
		EnterRule(_localctx, 426, RULE_matchTimeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462; Match(T__214);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MaxExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMaxExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMaxExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxExpressionContext maxExpression() {
		MaxExpressionContext _localctx = new MaxExpressionContext(Context, State);
		EnterRule(_localctx, 428, RULE_maxExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2464; Match(T__215);
			State = 2465; Match(T__1);
			State = 2466; expression();
			State = 2467; Match(T__17);
			State = 2468; expression();
			State = 2469; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxHealthExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MaxHealthExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxHealthExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMaxHealthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMaxHealthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxHealthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxHealthExpressionContext maxHealthExpression() {
		MaxHealthExpressionContext _localctx = new MaxHealthExpressionContext(Context, State);
		EnterRule(_localctx, 430, RULE_maxHealthExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2471; Match(T__216);
			State = 2472; Match(T__1);
			State = 2473; expression();
			State = 2474; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MinExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMinExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMinExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinExpressionContext minExpression() {
		MinExpressionContext _localctx = new MinExpressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_minExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476; Match(T__217);
			State = 2477; Match(T__1);
			State = 2478; expression();
			State = 2479; Match(T__17);
			State = 2480; expression();
			State = 2481; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduloExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuloExpressionContext moduloExpression() {
		ModuloExpressionContext _localctx = new ModuloExpressionContext(Context, State);
		EnterRule(_localctx, 434, RULE_moduloExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2483; Match(T__218);
			State = 2484; Match(T__1);
			State = 2485; expression();
			State = 2486; Match(T__17);
			State = 2487; expression();
			State = 2488; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpressionContext multiplyExpression() {
		MultiplyExpressionContext _localctx = new MultiplyExpressionContext(Context, State);
		EnterRule(_localctx, 436, RULE_multiplyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2490; Match(T__219);
			State = 2491; Match(T__1);
			State = 2492; expression();
			State = 2493; Match(T__17);
			State = 2494; expression();
			State = 2495; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NearestWalkablePositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NearestWalkablePositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nearestWalkablePositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNearestWalkablePositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNearestWalkablePositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNearestWalkablePositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NearestWalkablePositionExpressionContext nearestWalkablePositionExpression() {
		NearestWalkablePositionExpressionContext _localctx = new NearestWalkablePositionExpressionContext(Context, State);
		EnterRule(_localctx, 438, RULE_nearestWalkablePositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497; Match(T__220);
			State = 2498; Match(T__1);
			State = 2499; expression();
			State = 2500; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalizeExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NormalizeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalizeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNormalizeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNormalizeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalizeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalizeExpressionContext normalizeExpression() {
		NormalizeExpressionContext _localctx = new NormalizeExpressionContext(Context, State);
		EnterRule(_localctx, 440, RULE_normalizeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2502; Match(T__221);
			State = 2503; Match(T__1);
			State = 2504; expression();
			State = 2505; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 442, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507; Match(T__222);
			State = 2508; Match(T__1);
			State = 2509; expression();
			State = 2510; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfDeadPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfDeadPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfDeadPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfDeadPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfDeadPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfDeadPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfDeadPlayersExpressionContext numberOfDeadPlayersExpression() {
		NumberOfDeadPlayersExpressionContext _localctx = new NumberOfDeadPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 444, RULE_numberOfDeadPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2512; Match(T__223);
			State = 2513; Match(T__1);
			State = 2514; expression();
			State = 2515; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfDeathsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfDeathsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfDeathsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfDeathsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfDeathsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfDeathsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfDeathsExpressionContext numberOfDeathsExpression() {
		NumberOfDeathsExpressionContext _localctx = new NumberOfDeathsExpressionContext(Context, State);
		EnterRule(_localctx, 446, RULE_numberOfDeathsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2517; Match(T__224);
			State = 2518; Match(T__1);
			State = 2519; expression();
			State = 2520; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfEliminationsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfEliminationsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfEliminationsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfEliminationsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfEliminationsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfEliminationsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfEliminationsExpressionContext numberOfEliminationsExpression() {
		NumberOfEliminationsExpressionContext _localctx = new NumberOfEliminationsExpressionContext(Context, State);
		EnterRule(_localctx, 448, RULE_numberOfEliminationsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2522; Match(T__225);
			State = 2523; Match(T__1);
			State = 2524; expression();
			State = 2525; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfFinalBlowsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfFinalBlowsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfFinalBlowsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfFinalBlowsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfFinalBlowsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfFinalBlowsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfFinalBlowsExpressionContext numberOfFinalBlowsExpression() {
		NumberOfFinalBlowsExpressionContext _localctx = new NumberOfFinalBlowsExpressionContext(Context, State);
		EnterRule(_localctx, 450, RULE_numberOfFinalBlowsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527; Match(T__226);
			State = 2528; Match(T__1);
			State = 2529; expression();
			State = 2530; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfHeroesExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NumberOfHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfHeroesExpressionContext numberOfHeroesExpression() {
		NumberOfHeroesExpressionContext _localctx = new NumberOfHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 452, RULE_numberOfHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2532; Match(T__227);
			State = 2533; Match(T__1);
			State = 2534; expression();
			State = 2535; Match(T__17);
			State = 2536; expression();
			State = 2537; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfLivingPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfLivingPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfLivingPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfLivingPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfLivingPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfLivingPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfLivingPlayersExpressionContext numberOfLivingPlayersExpression() {
		NumberOfLivingPlayersExpressionContext _localctx = new NumberOfLivingPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 454, RULE_numberOfLivingPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539; Match(T__228);
			State = 2540; Match(T__1);
			State = 2541; expression();
			State = 2542; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPlayersExpressionContext numberOfPlayersExpression() {
		NumberOfPlayersExpressionContext _localctx = new NumberOfPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 456, RULE_numberOfPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2544; Match(T__229);
			State = 2545; Match(T__1);
			State = 2546; expression();
			State = 2547; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPlayersOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfPlayersOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPlayersOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfPlayersOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfPlayersOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPlayersOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPlayersOnObjectiveExpressionContext numberOfPlayersOnObjectiveExpression() {
		NumberOfPlayersOnObjectiveExpressionContext _localctx = new NumberOfPlayersOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 458, RULE_numberOfPlayersOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2549; Match(T__230);
			State = 2550; Match(T__1);
			State = 2551; expression();
			State = 2552; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectiveIndexExpressionContext : ParserRuleContext {
		public ObjectiveIndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectiveIndexExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterObjectiveIndexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitObjectiveIndexExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectiveIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectiveIndexExpressionContext objectiveIndexExpression() {
		ObjectiveIndexExpressionContext _localctx = new ObjectiveIndexExpressionContext(Context, State);
		EnterRule(_localctx, 460, RULE_objectiveIndexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2554; Match(T__231);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectivePositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectivePositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectivePositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterObjectivePositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitObjectivePositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectivePositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectivePositionExpressionContext objectivePositionExpression() {
		ObjectivePositionExpressionContext _localctx = new ObjectivePositionExpressionContext(Context, State);
		EnterRule(_localctx, 462, RULE_objectivePositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2556; Match(T__232);
			State = 2557; Match(T__1);
			State = 2558; expression();
			State = 2559; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OppositeTeamOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OppositeTeamOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oppositeTeamOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOppositeTeamOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOppositeTeamOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOppositeTeamOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OppositeTeamOfExpressionContext oppositeTeamOfExpression() {
		OppositeTeamOfExpressionContext _localctx = new OppositeTeamOfExpressionContext(Context, State);
		EnterRule(_localctx, 464, RULE_oppositeTeamOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2561; Match(T__233);
			State = 2562; Match(T__1);
			State = 2563; expression();
			State = 2564; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 466, RULE_orExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2566; Match(T__234);
			State = 2567; Match(T__1);
			State = 2568; expression();
			State = 2569; Match(T__17);
			State = 2570; expression();
			State = 2571; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PayloadPositionExpressionContext : ParserRuleContext {
		public PayloadPositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_payloadPositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPayloadPositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPayloadPositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPayloadPositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PayloadPositionExpressionContext payloadPositionExpression() {
		PayloadPositionExpressionContext _localctx = new PayloadPositionExpressionContext(Context, State);
		EnterRule(_localctx, 468, RULE_payloadPositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2573; Match(T__235);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PayloadProgressPercentageExpressionContext : ParserRuleContext {
		public PayloadProgressPercentageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_payloadProgressPercentageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPayloadProgressPercentageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPayloadProgressPercentageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPayloadProgressPercentageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PayloadProgressPercentageExpressionContext payloadProgressPercentageExpression() {
		PayloadProgressPercentageExpressionContext _localctx = new PayloadProgressPercentageExpressionContext(Context, State);
		EnterRule(_localctx, 470, RULE_payloadProgressPercentageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2575; Match(T__236);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerCarryingFlagExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PlayerCarryingFlagExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerCarryingFlagExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerCarryingFlagExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerCarryingFlagExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerCarryingFlagExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerCarryingFlagExpressionContext playerCarryingFlagExpression() {
		PlayerCarryingFlagExpressionContext _localctx = new PlayerCarryingFlagExpressionContext(Context, State);
		EnterRule(_localctx, 472, RULE_playerCarryingFlagExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2577; Match(T__237);
			State = 2578; Match(T__1);
			State = 2579; expression();
			State = 2580; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerClosestToReticleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerClosestToReticleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerClosestToReticleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerClosestToReticleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerClosestToReticleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerClosestToReticleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerClosestToReticleExpressionContext playerClosestToReticleExpression() {
		PlayerClosestToReticleExpressionContext _localctx = new PlayerClosestToReticleExpressionContext(Context, State);
		EnterRule(_localctx, 474, RULE_playerClosestToReticleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2582; Match(T__238);
			State = 2583; Match(T__1);
			State = 2584; expression();
			State = 2585; Match(T__17);
			State = 2586; expression();
			State = 2587; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerVariableExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public PlayerVariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerVariableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerVariableExpressionContext playerVariableExpression() {
		PlayerVariableExpressionContext _localctx = new PlayerVariableExpressionContext(Context, State);
		EnterRule(_localctx, 476, RULE_playerVariableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2589; Match(T__239);
			State = 2590; Match(T__1);
			State = 2591; expression();
			State = 2592; Match(T__17);
			State = 2593; playerVariable();
			State = 2594; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersInSlotExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayersInSlotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersInSlotExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersInSlotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersInSlotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersInSlotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersInSlotExpressionContext playersInSlotExpression() {
		PlayersInSlotExpressionContext _localctx = new PlayersInSlotExpressionContext(Context, State);
		EnterRule(_localctx, 478, RULE_playersInSlotExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2596; Match(T__240);
			State = 2597; Match(T__1);
			State = 2598; expression();
			State = 2599; Match(T__17);
			State = 2600; expression();
			State = 2601; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersInViewAngleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayersInViewAngleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersInViewAngleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersInViewAngleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersInViewAngleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersInViewAngleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersInViewAngleExpressionContext playersInViewAngleExpression() {
		PlayersInViewAngleExpressionContext _localctx = new PlayersInViewAngleExpressionContext(Context, State);
		EnterRule(_localctx, 480, RULE_playersInViewAngleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603; Match(T__241);
			State = 2604; Match(T__1);
			State = 2605; expression();
			State = 2606; Match(T__17);
			State = 2607; expression();
			State = 2608; Match(T__17);
			State = 2609; expression();
			State = 2610; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersOnHeroExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayersOnHeroExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersOnHeroExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersOnHeroExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersOnHeroExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersOnHeroExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersOnHeroExpressionContext playersOnHeroExpression() {
		PlayersOnHeroExpressionContext _localctx = new PlayersOnHeroExpressionContext(Context, State);
		EnterRule(_localctx, 482, RULE_playersOnHeroExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612; Match(T__242);
			State = 2613; Match(T__1);
			State = 2614; expression();
			State = 2615; Match(T__17);
			State = 2616; expression();
			State = 2617; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersWithinRadiusExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LineOfSightCheckTypeContext lineOfSightCheckType() {
			return GetRuleContext<LineOfSightCheckTypeContext>(0);
		}
		public PlayersWithinRadiusExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersWithinRadiusExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersWithinRadiusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersWithinRadiusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersWithinRadiusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersWithinRadiusExpressionContext playersWithinRadiusExpression() {
		PlayersWithinRadiusExpressionContext _localctx = new PlayersWithinRadiusExpressionContext(Context, State);
		EnterRule(_localctx, 484, RULE_playersWithinRadiusExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2619; Match(T__243);
			State = 2620; Match(T__1);
			State = 2621; expression();
			State = 2622; Match(T__17);
			State = 2623; expression();
			State = 2624; Match(T__17);
			State = 2625; expression();
			State = 2626; Match(T__17);
			State = 2627; lineOfSightCheckType();
			State = 2628; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointCapturePercentageExpressionContext : ParserRuleContext {
		public PointCapturePercentageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointCapturePercentageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPointCapturePercentageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPointCapturePercentageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointCapturePercentageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointCapturePercentageExpressionContext pointCapturePercentageExpression() {
		PointCapturePercentageExpressionContext _localctx = new PointCapturePercentageExpressionContext(Context, State);
		EnterRule(_localctx, 486, RULE_pointCapturePercentageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2630; Match(T__244);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPositionOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPositionOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionOfExpressionContext positionOfExpression() {
		PositionOfExpressionContext _localctx = new PositionOfExpressionContext(Context, State);
		EnterRule(_localctx, 488, RULE_positionOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2632; Match(T__245);
			State = 2633; Match(T__1);
			State = 2634; expression();
			State = 2635; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseToPowerExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RaiseToPowerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseToPowerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRaiseToPowerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRaiseToPowerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseToPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseToPowerExpressionContext raiseToPowerExpression() {
		RaiseToPowerExpressionContext _localctx = new RaiseToPowerExpressionContext(Context, State);
		EnterRule(_localctx, 490, RULE_raiseToPowerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2637; Match(T__246);
			State = 2638; Match(T__1);
			State = 2639; expression();
			State = 2640; Match(T__17);
			State = 2641; expression();
			State = 2642; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomIntegerExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomIntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomIntegerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomIntegerExpressionContext randomIntegerExpression() {
		RandomIntegerExpressionContext _localctx = new RandomIntegerExpressionContext(Context, State);
		EnterRule(_localctx, 492, RULE_randomIntegerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2644; Match(T__247);
			State = 2645; Match(T__1);
			State = 2646; expression();
			State = 2647; Match(T__17);
			State = 2648; expression();
			State = 2649; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomRealExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomRealExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomRealExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomRealExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomRealExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomRealExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomRealExpressionContext randomRealExpression() {
		RandomRealExpressionContext _localctx = new RandomRealExpressionContext(Context, State);
		EnterRule(_localctx, 494, RULE_randomRealExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2651; Match(T__248);
			State = 2652; Match(T__1);
			State = 2653; expression();
			State = 2654; Match(T__17);
			State = 2655; expression();
			State = 2656; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomValueInArrayExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RandomValueInArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomValueInArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomValueInArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomValueInArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomValueInArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomValueInArrayExpressionContext randomValueInArrayExpression() {
		RandomValueInArrayExpressionContext _localctx = new RandomValueInArrayExpressionContext(Context, State);
		EnterRule(_localctx, 496, RULE_randomValueInArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658; Match(T__249);
			State = 2659; Match(T__1);
			State = 2660; expression();
			State = 2661; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizedArrayExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RandomizedArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizedArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomizedArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomizedArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizedArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizedArrayExpressionContext randomizedArrayExpression() {
		RandomizedArrayExpressionContext _localctx = new RandomizedArrayExpressionContext(Context, State);
		EnterRule(_localctx, 498, RULE_randomizedArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2663; Match(T__250);
			State = 2664; Match(T__1);
			State = 2665; expression();
			State = 2666; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RayCastHitNormalExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RayCastHitNormalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rayCastHitNormalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRayCastHitNormalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRayCastHitNormalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRayCastHitNormalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RayCastHitNormalExpressionContext rayCastHitNormalExpression() {
		RayCastHitNormalExpressionContext _localctx = new RayCastHitNormalExpressionContext(Context, State);
		EnterRule(_localctx, 500, RULE_rayCastHitNormalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2668; Match(T__251);
			State = 2669; Match(T__1);
			State = 2670; expression();
			State = 2671; Match(T__17);
			State = 2672; expression();
			State = 2673; Match(T__17);
			State = 2674; expression();
			State = 2675; Match(T__17);
			State = 2676; expression();
			State = 2677; Match(T__17);
			State = 2678; expression();
			State = 2679; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RayCastHitPlayerExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RayCastHitPlayerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rayCastHitPlayerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRayCastHitPlayerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRayCastHitPlayerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRayCastHitPlayerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RayCastHitPlayerExpressionContext rayCastHitPlayerExpression() {
		RayCastHitPlayerExpressionContext _localctx = new RayCastHitPlayerExpressionContext(Context, State);
		EnterRule(_localctx, 502, RULE_rayCastHitPlayerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2681; Match(T__252);
			State = 2682; Match(T__1);
			State = 2683; expression();
			State = 2684; Match(T__17);
			State = 2685; expression();
			State = 2686; Match(T__17);
			State = 2687; expression();
			State = 2688; Match(T__17);
			State = 2689; expression();
			State = 2690; Match(T__17);
			State = 2691; expression();
			State = 2692; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RayCastHitPositionExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RayCastHitPositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rayCastHitPositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRayCastHitPositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRayCastHitPositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRayCastHitPositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RayCastHitPositionExpressionContext rayCastHitPositionExpression() {
		RayCastHitPositionExpressionContext _localctx = new RayCastHitPositionExpressionContext(Context, State);
		EnterRule(_localctx, 504, RULE_rayCastHitPositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2694; Match(T__253);
			State = 2695; Match(T__1);
			State = 2696; expression();
			State = 2697; Match(T__17);
			State = 2698; expression();
			State = 2699; Match(T__17);
			State = 2700; expression();
			State = 2701; Match(T__17);
			State = 2702; expression();
			State = 2703; Match(T__17);
			State = 2704; expression();
			State = 2705; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveFromArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RemoveFromArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeFromArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRemoveFromArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRemoveFromArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveFromArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveFromArrayExpressionContext removeFromArrayExpression() {
		RemoveFromArrayExpressionContext _localctx = new RemoveFromArrayExpressionContext(Context, State);
		EnterRule(_localctx, 506, RULE_removeFromArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2707; Match(T__254);
			State = 2708; Match(T__1);
			State = 2709; expression();
			State = 2710; Match(T__17);
			State = 2711; expression();
			State = 2712; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightExpressionContext : ParserRuleContext {
		public RightExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRightExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRightExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightExpressionContext rightExpression() {
		RightExpressionContext _localctx = new RightExpressionContext(Context, State);
		EnterRule(_localctx, 508, RULE_rightExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2714; Match(T__255);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundToIntegerExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RoundingDirectionContext roundingDirection() {
			return GetRuleContext<RoundingDirectionContext>(0);
		}
		public RoundToIntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundToIntegerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoundToIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoundToIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundToIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoundToIntegerExpressionContext roundToIntegerExpression() {
		RoundToIntegerExpressionContext _localctx = new RoundToIntegerExpressionContext(Context, State);
		EnterRule(_localctx, 510, RULE_roundToIntegerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2716; Match(T__256);
			State = 2717; Match(T__1);
			State = 2718; expression();
			State = 2719; Match(T__17);
			State = 2720; roundingDirection();
			State = 2721; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScoreOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoreOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterScoreOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitScoreOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScoreOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScoreOfExpressionContext scoreOfExpression() {
		ScoreOfExpressionContext _localctx = new ScoreOfExpressionContext(Context, State);
		EnterRule(_localctx, 512, RULE_scoreOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2723; Match(T__257);
			State = 2724; Match(T__1);
			State = 2725; expression();
			State = 2726; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SineFromDegreesExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SineFromDegreesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sineFromDegreesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSineFromDegreesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSineFromDegreesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSineFromDegreesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SineFromDegreesExpressionContext sineFromDegreesExpression() {
		SineFromDegreesExpressionContext _localctx = new SineFromDegreesExpressionContext(Context, State);
		EnterRule(_localctx, 514, RULE_sineFromDegreesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2728; Match(T__258);
			State = 2729; Match(T__1);
			State = 2730; expression();
			State = 2731; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SineFromRadiansExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SineFromRadiansExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sineFromRadiansExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSineFromRadiansExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSineFromRadiansExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSineFromRadiansExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SineFromRadiansExpressionContext sineFromRadiansExpression() {
		SineFromRadiansExpressionContext _localctx = new SineFromRadiansExpressionContext(Context, State);
		EnterRule(_localctx, 516, RULE_sineFromRadiansExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2733; Match(T__259);
			State = 2734; Match(T__1);
			State = 2735; expression();
			State = 2736; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlotOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SlotOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slotOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSlotOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSlotOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlotOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlotOfExpressionContext slotOfExpression() {
		SlotOfExpressionContext _localctx = new SlotOfExpressionContext(Context, State);
		EnterRule(_localctx, 518, RULE_slotOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2738; Match(T__260);
			State = 2739; Match(T__1);
			State = 2740; expression();
			State = 2741; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortedArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SortedArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortedArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSortedArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSortedArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortedArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortedArrayExpressionContext sortedArrayExpression() {
		SortedArrayExpressionContext _localctx = new SortedArrayExpressionContext(Context, State);
		EnterRule(_localctx, 520, RULE_sortedArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2743; Match(T__261);
			State = 2744; Match(T__1);
			State = 2745; expression();
			State = 2746; Match(T__17);
			State = 2747; expression();
			State = 2748; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpeedOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSpeedOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSpeedOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedOfExpressionContext speedOfExpression() {
		SpeedOfExpressionContext _localctx = new SpeedOfExpressionContext(Context, State);
		EnterRule(_localctx, 522, RULE_speedOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2750; Match(T__262);
			State = 2751; Match(T__1);
			State = 2752; expression();
			State = 2753; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedOfInDirectionExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SpeedOfInDirectionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedOfInDirectionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSpeedOfInDirectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSpeedOfInDirectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedOfInDirectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedOfInDirectionExpressionContext speedOfInDirectionExpression() {
		SpeedOfInDirectionExpressionContext _localctx = new SpeedOfInDirectionExpressionContext(Context, State);
		EnterRule(_localctx, 524, RULE_speedOfInDirectionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2755; Match(T__263);
			State = 2756; Match(T__1);
			State = 2757; expression();
			State = 2758; Match(T__17);
			State = 2759; expression();
			State = 2760; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareRootExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SquareRootExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareRootExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSquareRootExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSquareRootExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareRootExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareRootExpressionContext squareRootExpression() {
		SquareRootExpressionContext _localctx = new SquareRootExpressionContext(Context, State);
		EnterRule(_localctx, 526, RULE_squareRootExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2762; Match(T__264);
			State = 2763; Match(T__1);
			State = 2764; expression();
			State = 2765; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(Context, State);
		EnterRule(_localctx, 528, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2767; Match(T__265);
			State = 2768; Match(T__1);
			State = 2769; expression();
			State = 2770; Match(T__17);
			State = 2771; expression();
			State = 2772; Match(T__17);
			State = 2773; expression();
			State = 2774; Match(T__17);
			State = 2775; expression();
			State = 2776; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtractExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSubtractExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSubtractExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractExpressionContext subtractExpression() {
		SubtractExpressionContext _localctx = new SubtractExpressionContext(Context, State);
		EnterRule(_localctx, 530, RULE_subtractExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2778; Match(T__266);
			State = 2779; Match(T__1);
			State = 2780; expression();
			State = 2781; Match(T__17);
			State = 2782; expression();
			State = 2783; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TeamOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeamOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeamOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeamOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamOfExpressionContext teamOfExpression() {
		TeamOfExpressionContext _localctx = new TeamOfExpressionContext(Context, State);
		EnterRule(_localctx, 532, RULE_teamOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2785; Match(T__267);
			State = 2786; Match(T__1);
			State = 2787; expression();
			State = 2788; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamScoreExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TeamScoreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamScoreExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeamScoreExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeamScoreExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeamScoreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamScoreExpressionContext teamScoreExpression() {
		TeamScoreExpressionContext _localctx = new TeamScoreExpressionContext(Context, State);
		EnterRule(_localctx, 534, RULE_teamScoreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2790; Match(T__268);
			State = 2791; Match(T__1);
			State = 2792; expression();
			State = 2793; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrottleOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrottleOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throttleOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterThrottleOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitThrottleOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrottleOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrottleOfExpressionContext throttleOfExpression() {
		ThrottleOfExpressionContext _localctx = new ThrottleOfExpressionContext(Context, State);
		EnterRule(_localctx, 536, RULE_throttleOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2795; Match(T__269);
			State = 2796; Match(T__1);
			State = 2797; expression();
			State = 2798; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalTimeElapsedExpressionContext : ParserRuleContext {
		public TotalTimeElapsedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalTimeElapsedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTotalTimeElapsedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTotalTimeElapsedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalTimeElapsedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalTimeElapsedExpressionContext totalTimeElapsedExpression() {
		TotalTimeElapsedExpressionContext _localctx = new TotalTimeElapsedExpressionContext(Context, State);
		EnterRule(_localctx, 538, RULE_totalTimeElapsedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2800; Match(T__270);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UltimateChargePercentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UltimateChargePercentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ultimateChargePercentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUltimateChargePercentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUltimateChargePercentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUltimateChargePercentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UltimateChargePercentExpressionContext ultimateChargePercentExpression() {
		UltimateChargePercentExpressionContext _localctx = new UltimateChargePercentExpressionContext(Context, State);
		EnterRule(_localctx, 540, RULE_ultimateChargePercentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2802; Match(T__271);
			State = 2803; Match(T__1);
			State = 2804; expression();
			State = 2805; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpExpressionContext : ParserRuleContext {
		public UpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUpExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpExpressionContext upExpression() {
		UpExpressionContext _localctx = new UpExpressionContext(Context, State);
		EnterRule(_localctx, 542, RULE_upExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2807; Match(T__272);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueInArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ValueInArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueInArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterValueInArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitValueInArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueInArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueInArrayExpressionContext valueInArrayExpression() {
		ValueInArrayExpressionContext _localctx = new ValueInArrayExpressionContext(Context, State);
		EnterRule(_localctx, 544, RULE_valueInArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2809; Match(T__273);
			State = 2810; Match(T__1);
			State = 2811; expression();
			State = 2812; Match(T__17);
			State = 2813; expression();
			State = 2814; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorTowardsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorTowardsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorTowardsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVectorTowardsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVectorTowardsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorTowardsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorTowardsExpressionContext vectorTowardsExpression() {
		VectorTowardsExpressionContext _localctx = new VectorTowardsExpressionContext(Context, State);
		EnterRule(_localctx, 546, RULE_vectorTowardsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816; Match(T__274);
			State = 2817; Match(T__1);
			State = 2818; expression();
			State = 2819; Match(T__17);
			State = 2820; expression();
			State = 2821; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerticalFacingAngleOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VerticalFacingAngleOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verticalFacingAngleOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVerticalFacingAngleOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVerticalFacingAngleOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerticalFacingAngleOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerticalFacingAngleOfExpressionContext verticalFacingAngleOfExpression() {
		VerticalFacingAngleOfExpressionContext _localctx = new VerticalFacingAngleOfExpressionContext(Context, State);
		EnterRule(_localctx, 548, RULE_verticalFacingAngleOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2823; Match(T__275);
			State = 2824; Match(T__1);
			State = 2825; expression();
			State = 2826; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerticalSpeedOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VerticalSpeedOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verticalSpeedOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVerticalSpeedOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVerticalSpeedOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerticalSpeedOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerticalSpeedOfExpressionContext verticalSpeedOfExpression() {
		VerticalSpeedOfExpressionContext _localctx = new VerticalSpeedOfExpressionContext(Context, State);
		EnterRule(_localctx, 550, RULE_verticalSpeedOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2828; Match(T__276);
			State = 2829; Match(T__1);
			State = 2830; expression();
			State = 2831; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VictimExpressionContext : ParserRuleContext {
		public VictimExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_victimExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVictimExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVictimExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVictimExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VictimExpressionContext victimExpression() {
		VictimExpressionContext _localctx = new VictimExpressionContext(Context, State);
		EnterRule(_localctx, 552, RULE_victimExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2833; Match(T__277);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldVectorOfExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorTransformationTypeContext vectorTransformationType() {
			return GetRuleContext<VectorTransformationTypeContext>(0);
		}
		public WorldVectorOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldVectorOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWorldVectorOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWorldVectorOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldVectorOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldVectorOfExpressionContext worldVectorOfExpression() {
		WorldVectorOfExpressionContext _localctx = new WorldVectorOfExpressionContext(Context, State);
		EnterRule(_localctx, 554, RULE_worldVectorOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2835; Match(T__278);
			State = 2836; Match(T__1);
			State = 2837; expression();
			State = 2838; Match(T__17);
			State = 2839; expression();
			State = 2840; Match(T__17);
			State = 2841; vectorTransformationType();
			State = 2842; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XComponentOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XComponentOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xComponentOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterXComponentOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitXComponentOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXComponentOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XComponentOfExpressionContext xComponentOfExpression() {
		XComponentOfExpressionContext _localctx = new XComponentOfExpressionContext(Context, State);
		EnterRule(_localctx, 556, RULE_xComponentOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2844; Match(T__279);
			State = 2845; Match(T__1);
			State = 2846; expression();
			State = 2847; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YComponentOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YComponentOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yComponentOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterYComponentOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitYComponentOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYComponentOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YComponentOfExpressionContext yComponentOfExpression() {
		YComponentOfExpressionContext _localctx = new YComponentOfExpressionContext(Context, State);
		EnterRule(_localctx, 558, RULE_yComponentOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2849; Match(T__280);
			State = 2850; Match(T__1);
			State = 2851; expression();
			State = 2852; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZComponentOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ZComponentOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zComponentOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterZComponentOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitZComponentOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZComponentOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZComponentOfExpressionContext zComponentOfExpression() {
		ZComponentOfExpressionContext _localctx = new ZComponentOfExpressionContext(Context, State);
		EnterRule(_localctx, 560, RULE_zComponentOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2854; Match(T__281);
			State = 2855; Match(T__1);
			State = 2856; expression();
			State = 2857; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(OverwatchCodeParser.ALL, 0); }
		public ITerminalNode ALL_TEAMS() { return GetToken(OverwatchCodeParser.ALL_TEAMS, 0); }
		public ITerminalNode Team1() { return GetToken(OverwatchCodeParser.Team1, 0); }
		public ITerminalNode Team2() { return GetToken(OverwatchCodeParser.Team2, 0); }
		public TeamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamContext team() {
		TeamContext _localctx = new TeamContext(Context, State);
		EnterRule(_localctx, 562, RULE_team);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2859;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ALL_TEAMS - 448)) | (1L << (Team1 - 448)) | (1L << (Team2 - 448)) | (1L << (ALL - 448)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerConstantContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(OverwatchCodeParser.ALL, 0); }
		public ITerminalNode SLOT() { return GetToken(OverwatchCodeParser.SLOT, 0); }
		public ITerminalNode INTEGER() { return GetToken(OverwatchCodeParser.INTEGER, 0); }
		public HeroTypeContext heroType() {
			return GetRuleContext<HeroTypeContext>(0);
		}
		public PlayerConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerConstantContext playerConstant() {
		PlayerConstantContext _localctx = new PlayerConstantContext(Context, State);
		EnterRule(_localctx, 564, RULE_playerConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 2861; Match(ALL);
				}
				break;
			case SLOT:
				{
				State = 2862; Match(SLOT);
				State = 2863; Match(INTEGER);
				}
				break;
			case T__282:
			case T__283:
			case T__284:
			case T__285:
			case T__286:
			case T__287:
			case T__288:
			case T__289:
			case T__290:
			case T__291:
			case T__292:
			case T__293:
			case T__294:
			case T__295:
			case T__296:
			case T__297:
			case T__298:
			case T__299:
			case T__300:
			case T__301:
			case T__302:
			case T__303:
			case T__304:
			case T__305:
			case T__306:
			case T__307:
			case T__308:
			case T__309:
			case T__310:
			case T__311:
				{
				State = 2864; heroType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(OverwatchCodeParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(OverwatchCodeParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(OverwatchCodeParser.STRING, 0); }
		public ITerminalNode NULL() { return GetToken(OverwatchCodeParser.NULL, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(OverwatchCodeParser.BOOLEAN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 566, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2867;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (INTEGER - 452)) | (1L << (STRING - 452)) | (1L << (FLOAT - 452)) | (1L << (NULL - 452)) | (1L << (BOOLEAN - 452)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(OverwatchCodeParser.LETTER, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 568, RULE_globalVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2869; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerVariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(OverwatchCodeParser.LETTER, 0); }
		public PlayerVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerVariableContext playerVariable() {
		PlayerVariableContext _localctx = new PlayerVariableContext(Context, State);
		EnterRule(_localctx, 570, RULE_playerVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2871; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroTypeContext : ParserRuleContext {
		public ReaperContext reaper() {
			return GetRuleContext<ReaperContext>(0);
		}
		public TracerContext tracer() {
			return GetRuleContext<TracerContext>(0);
		}
		public MercyContext mercy() {
			return GetRuleContext<MercyContext>(0);
		}
		public HanzoContext hanzo() {
			return GetRuleContext<HanzoContext>(0);
		}
		public TorbjornContext torbjorn() {
			return GetRuleContext<TorbjornContext>(0);
		}
		public ReinhardtContext reinhardt() {
			return GetRuleContext<ReinhardtContext>(0);
		}
		public PharahContext pharah() {
			return GetRuleContext<PharahContext>(0);
		}
		public WinstonContext winston() {
			return GetRuleContext<WinstonContext>(0);
		}
		public WidowmakerContext widowmaker() {
			return GetRuleContext<WidowmakerContext>(0);
		}
		public BastionContext bastion() {
			return GetRuleContext<BastionContext>(0);
		}
		public SymmetraContext symmetra() {
			return GetRuleContext<SymmetraContext>(0);
		}
		public ZenyattaContext zenyatta() {
			return GetRuleContext<ZenyattaContext>(0);
		}
		public GenjiContext genji() {
			return GetRuleContext<GenjiContext>(0);
		}
		public RoadhogContext roadhog() {
			return GetRuleContext<RoadhogContext>(0);
		}
		public McCreeContext mcCree() {
			return GetRuleContext<McCreeContext>(0);
		}
		public JunkratContext junkrat() {
			return GetRuleContext<JunkratContext>(0);
		}
		public ZaryaContext zarya() {
			return GetRuleContext<ZaryaContext>(0);
		}
		public Soldier76Context soldier76() {
			return GetRuleContext<Soldier76Context>(0);
		}
		public LucioContext lucio() {
			return GetRuleContext<LucioContext>(0);
		}
		public DvaContext dva() {
			return GetRuleContext<DvaContext>(0);
		}
		public MeiContext mei() {
			return GetRuleContext<MeiContext>(0);
		}
		public SombraContext sombra() {
			return GetRuleContext<SombraContext>(0);
		}
		public DoomfistContext doomfist() {
			return GetRuleContext<DoomfistContext>(0);
		}
		public AnaContext ana() {
			return GetRuleContext<AnaContext>(0);
		}
		public OrisaContext orisa() {
			return GetRuleContext<OrisaContext>(0);
		}
		public BrigitteContext brigitte() {
			return GetRuleContext<BrigitteContext>(0);
		}
		public MoiraContext moira() {
			return GetRuleContext<MoiraContext>(0);
		}
		public WreckingBallContext wreckingBall() {
			return GetRuleContext<WreckingBallContext>(0);
		}
		public AsheContext ashe() {
			return GetRuleContext<AsheContext>(0);
		}
		public BaptisteContext baptiste() {
			return GetRuleContext<BaptisteContext>(0);
		}
		public HeroTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroTypeContext heroType() {
		HeroTypeContext _localctx = new HeroTypeContext(Context, State);
		EnterRule(_localctx, 572, RULE_heroType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__282:
				{
				State = 2873; reaper();
				}
				break;
			case T__283:
				{
				State = 2874; tracer();
				}
				break;
			case T__284:
				{
				State = 2875; mercy();
				}
				break;
			case T__285:
				{
				State = 2876; hanzo();
				}
				break;
			case T__286:
				{
				State = 2877; torbjorn();
				}
				break;
			case T__287:
				{
				State = 2878; reinhardt();
				}
				break;
			case T__288:
				{
				State = 2879; pharah();
				}
				break;
			case T__289:
				{
				State = 2880; winston();
				}
				break;
			case T__290:
				{
				State = 2881; widowmaker();
				}
				break;
			case T__291:
				{
				State = 2882; bastion();
				}
				break;
			case T__292:
				{
				State = 2883; symmetra();
				}
				break;
			case T__293:
				{
				State = 2884; zenyatta();
				}
				break;
			case T__294:
				{
				State = 2885; genji();
				}
				break;
			case T__295:
				{
				State = 2886; roadhog();
				}
				break;
			case T__296:
				{
				State = 2887; mcCree();
				}
				break;
			case T__297:
				{
				State = 2888; junkrat();
				}
				break;
			case T__298:
				{
				State = 2889; zarya();
				}
				break;
			case T__299:
				{
				State = 2890; soldier76();
				}
				break;
			case T__300:
				{
				State = 2891; lucio();
				}
				break;
			case T__301:
				{
				State = 2892; dva();
				}
				break;
			case T__302:
				{
				State = 2893; mei();
				}
				break;
			case T__303:
				{
				State = 2894; sombra();
				}
				break;
			case T__304:
				{
				State = 2895; doomfist();
				}
				break;
			case T__305:
				{
				State = 2896; ana();
				}
				break;
			case T__306:
				{
				State = 2897; orisa();
				}
				break;
			case T__307:
				{
				State = 2898; brigitte();
				}
				break;
			case T__308:
				{
				State = 2899; moira();
				}
				break;
			case T__309:
				{
				State = 2900; wreckingBall();
				}
				break;
			case T__310:
				{
				State = 2901; ashe();
				}
				break;
			case T__311:
				{
				State = 2902; baptiste();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReaperContext : ParserRuleContext {
		public ReaperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reaper; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterReaper(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitReaper(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReaper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReaperContext reaper() {
		ReaperContext _localctx = new ReaperContext(Context, State);
		EnterRule(_localctx, 574, RULE_reaper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905; Match(T__282);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TracerContext : ParserRuleContext {
		public TracerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tracer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTracer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTracer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTracer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TracerContext tracer() {
		TracerContext _localctx = new TracerContext(Context, State);
		EnterRule(_localctx, 576, RULE_tracer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2907; Match(T__283);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MercyContext : ParserRuleContext {
		public MercyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mercy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMercy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMercy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMercy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MercyContext mercy() {
		MercyContext _localctx = new MercyContext(Context, State);
		EnterRule(_localctx, 578, RULE_mercy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909; Match(T__284);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HanzoContext : ParserRuleContext {
		public HanzoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hanzo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHanzo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHanzo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHanzo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HanzoContext hanzo() {
		HanzoContext _localctx = new HanzoContext(Context, State);
		EnterRule(_localctx, 580, RULE_hanzo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2911; Match(T__285);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TorbjornContext : ParserRuleContext {
		public TorbjornContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_torbjorn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTorbjorn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTorbjorn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTorbjorn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TorbjornContext torbjorn() {
		TorbjornContext _localctx = new TorbjornContext(Context, State);
		EnterRule(_localctx, 582, RULE_torbjorn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2913; Match(T__286);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReinhardtContext : ParserRuleContext {
		public ReinhardtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reinhardt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterReinhardt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitReinhardt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReinhardt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReinhardtContext reinhardt() {
		ReinhardtContext _localctx = new ReinhardtContext(Context, State);
		EnterRule(_localctx, 584, RULE_reinhardt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2915; Match(T__287);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PharahContext : ParserRuleContext {
		public PharahContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pharah; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPharah(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPharah(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPharah(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PharahContext pharah() {
		PharahContext _localctx = new PharahContext(Context, State);
		EnterRule(_localctx, 586, RULE_pharah);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2917; Match(T__288);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WinstonContext : ParserRuleContext {
		public WinstonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_winston; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWinston(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWinston(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWinston(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WinstonContext winston() {
		WinstonContext _localctx = new WinstonContext(Context, State);
		EnterRule(_localctx, 588, RULE_winston);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2919; Match(T__289);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidowmakerContext : ParserRuleContext {
		public WidowmakerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widowmaker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWidowmaker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWidowmaker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidowmaker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidowmakerContext widowmaker() {
		WidowmakerContext _localctx = new WidowmakerContext(Context, State);
		EnterRule(_localctx, 590, RULE_widowmaker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2921; Match(T__290);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BastionContext : ParserRuleContext {
		public BastionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bastion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBastion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBastion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBastion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BastionContext bastion() {
		BastionContext _localctx = new BastionContext(Context, State);
		EnterRule(_localctx, 592, RULE_bastion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2923; Match(T__291);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymmetraContext : ParserRuleContext {
		public SymmetraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symmetra; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSymmetra(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSymmetra(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymmetra(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymmetraContext symmetra() {
		SymmetraContext _localctx = new SymmetraContext(Context, State);
		EnterRule(_localctx, 594, RULE_symmetra);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2925; Match(T__292);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZenyattaContext : ParserRuleContext {
		public ZenyattaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zenyatta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterZenyatta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitZenyatta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZenyatta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZenyattaContext zenyatta() {
		ZenyattaContext _localctx = new ZenyattaContext(Context, State);
		EnterRule(_localctx, 596, RULE_zenyatta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2927; Match(T__293);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenjiContext : ParserRuleContext {
		public GenjiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genji; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGenji(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGenji(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenji(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenjiContext genji() {
		GenjiContext _localctx = new GenjiContext(Context, State);
		EnterRule(_localctx, 598, RULE_genji);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2929; Match(T__294);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoadhogContext : ParserRuleContext {
		public RoadhogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roadhog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoadhog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoadhog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoadhog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoadhogContext roadhog() {
		RoadhogContext _localctx = new RoadhogContext(Context, State);
		EnterRule(_localctx, 600, RULE_roadhog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2931; Match(T__295);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class McCreeContext : ParserRuleContext {
		public McCreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mcCree; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMcCree(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMcCree(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMcCree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public McCreeContext mcCree() {
		McCreeContext _localctx = new McCreeContext(Context, State);
		EnterRule(_localctx, 602, RULE_mcCree);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2933; Match(T__296);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JunkratContext : ParserRuleContext {
		public JunkratContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_junkrat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterJunkrat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitJunkrat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJunkrat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JunkratContext junkrat() {
		JunkratContext _localctx = new JunkratContext(Context, State);
		EnterRule(_localctx, 604, RULE_junkrat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2935; Match(T__297);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZaryaContext : ParserRuleContext {
		public ZaryaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zarya; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterZarya(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitZarya(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZarya(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZaryaContext zarya() {
		ZaryaContext _localctx = new ZaryaContext(Context, State);
		EnterRule(_localctx, 606, RULE_zarya);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937; Match(T__298);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Soldier76Context : ParserRuleContext {
		public Soldier76Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soldier76; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSoldier76(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSoldier76(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoldier76(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Soldier76Context soldier76() {
		Soldier76Context _localctx = new Soldier76Context(Context, State);
		EnterRule(_localctx, 608, RULE_soldier76);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2939; Match(T__299);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LucioContext : ParserRuleContext {
		public LucioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lucio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLucio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLucio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLucio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LucioContext lucio() {
		LucioContext _localctx = new LucioContext(Context, State);
		EnterRule(_localctx, 610, RULE_lucio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2941; Match(T__300);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DvaContext : ParserRuleContext {
		public DvaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DvaContext dva() {
		DvaContext _localctx = new DvaContext(Context, State);
		EnterRule(_localctx, 612, RULE_dva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2943; Match(T__301);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeiContext : ParserRuleContext {
		public MeiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mei; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMei(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMei(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMei(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeiContext mei() {
		MeiContext _localctx = new MeiContext(Context, State);
		EnterRule(_localctx, 614, RULE_mei);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945; Match(T__302);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SombraContext : ParserRuleContext {
		public SombraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sombra; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSombra(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSombra(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSombra(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SombraContext sombra() {
		SombraContext _localctx = new SombraContext(Context, State);
		EnterRule(_localctx, 616, RULE_sombra);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2947; Match(T__303);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoomfistContext : ParserRuleContext {
		public DoomfistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doomfist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDoomfist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDoomfist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoomfist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoomfistContext doomfist() {
		DoomfistContext _localctx = new DoomfistContext(Context, State);
		EnterRule(_localctx, 618, RULE_doomfist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2949; Match(T__304);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnaContext : ParserRuleContext {
		public AnaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ana; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAna(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAna(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAna(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnaContext ana() {
		AnaContext _localctx = new AnaContext(Context, State);
		EnterRule(_localctx, 620, RULE_ana);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2951; Match(T__305);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrisaContext : ParserRuleContext {
		public OrisaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orisa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOrisa(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOrisa(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrisa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrisaContext orisa() {
		OrisaContext _localctx = new OrisaContext(Context, State);
		EnterRule(_localctx, 622, RULE_orisa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2953; Match(T__306);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrigitteContext : ParserRuleContext {
		public BrigitteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brigitte; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBrigitte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBrigitte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrigitte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrigitteContext brigitte() {
		BrigitteContext _localctx = new BrigitteContext(Context, State);
		EnterRule(_localctx, 624, RULE_brigitte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2955; Match(T__307);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoiraContext : ParserRuleContext {
		public MoiraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moira; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMoira(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMoira(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoira(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoiraContext moira() {
		MoiraContext _localctx = new MoiraContext(Context, State);
		EnterRule(_localctx, 626, RULE_moira);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2957; Match(T__308);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WreckingBallContext : ParserRuleContext {
		public WreckingBallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wreckingBall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWreckingBall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWreckingBall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWreckingBall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WreckingBallContext wreckingBall() {
		WreckingBallContext _localctx = new WreckingBallContext(Context, State);
		EnterRule(_localctx, 628, RULE_wreckingBall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2959; Match(T__309);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsheContext : ParserRuleContext {
		public AsheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ashe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAshe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAshe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAshe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsheContext ashe() {
		AsheContext _localctx = new AsheContext(Context, State);
		EnterRule(_localctx, 630, RULE_ashe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2961; Match(T__310);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaptisteContext : ParserRuleContext {
		public BaptisteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baptiste; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBaptiste(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBaptiste(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaptiste(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaptisteContext baptiste() {
		BaptisteContext _localctx = new BaptisteContext(Context, State);
		EnterRule(_localctx, 632, RULE_baptiste);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2963; Match(T__311);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusContext : ParserRuleContext {
		public HackedContext hacked() {
			return GetRuleContext<HackedContext>(0);
		}
		public BurningContext burning() {
			return GetRuleContext<BurningContext>(0);
		}
		public KnockedDownContext knockedDown() {
			return GetRuleContext<KnockedDownContext>(0);
		}
		public AsleepContext asleep() {
			return GetRuleContext<AsleepContext>(0);
		}
		public FrozenContext frozen() {
			return GetRuleContext<FrozenContext>(0);
		}
		public UnkillableContext unkillable() {
			return GetRuleContext<UnkillableContext>(0);
		}
		public InvincibleContext invincible() {
			return GetRuleContext<InvincibleContext>(0);
		}
		public PhasedOutContext phasedOut() {
			return GetRuleContext<PhasedOutContext>(0);
		}
		public RootedContext rooted() {
			return GetRuleContext<RootedContext>(0);
		}
		public StunnedContext stunned() {
			return GetRuleContext<StunnedContext>(0);
		}
		public StatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_status; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterStatus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitStatus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusContext status() {
		StatusContext _localctx = new StatusContext(Context, State);
		EnterRule(_localctx, 634, RULE_status);
		try {
			State = 2975;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__312:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2965; hacked();
				}
				break;
			case T__313:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2966; burning();
				}
				break;
			case T__314:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2967; knockedDown();
				}
				break;
			case T__315:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2968; asleep();
				}
				break;
			case T__316:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2969; frozen();
				}
				break;
			case T__317:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2970; unkillable();
				}
				break;
			case T__318:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2971; invincible();
				}
				break;
			case T__319:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2972; phasedOut();
				}
				break;
			case T__320:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2973; rooted();
				}
				break;
			case T__321:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2974; stunned();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HackedContext : ParserRuleContext {
		public HackedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hacked; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHacked(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHacked(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHacked(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HackedContext hacked() {
		HackedContext _localctx = new HackedContext(Context, State);
		EnterRule(_localctx, 636, RULE_hacked);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2977; Match(T__312);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BurningContext : ParserRuleContext {
		public BurningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_burning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBurning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBurning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBurning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BurningContext burning() {
		BurningContext _localctx = new BurningContext(Context, State);
		EnterRule(_localctx, 638, RULE_burning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2979; Match(T__313);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KnockedDownContext : ParserRuleContext {
		public KnockedDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_knockedDown; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterKnockedDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitKnockedDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnockedDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KnockedDownContext knockedDown() {
		KnockedDownContext _localctx = new KnockedDownContext(Context, State);
		EnterRule(_localctx, 640, RULE_knockedDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2981; Match(T__314);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsleepContext : ParserRuleContext {
		public AsleepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asleep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAsleep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAsleep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsleep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsleepContext asleep() {
		AsleepContext _localctx = new AsleepContext(Context, State);
		EnterRule(_localctx, 642, RULE_asleep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2983; Match(T__315);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrozenContext : ParserRuleContext {
		public FrozenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frozen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFrozen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFrozen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrozen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrozenContext frozen() {
		FrozenContext _localctx = new FrozenContext(Context, State);
		EnterRule(_localctx, 644, RULE_frozen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2985; Match(T__316);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnkillableContext : ParserRuleContext {
		public UnkillableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unkillable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUnkillable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUnkillable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnkillable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnkillableContext unkillable() {
		UnkillableContext _localctx = new UnkillableContext(Context, State);
		EnterRule(_localctx, 646, RULE_unkillable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2987; Match(T__317);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvincibleContext : ParserRuleContext {
		public InvincibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invincible; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterInvincible(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitInvincible(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvincible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvincibleContext invincible() {
		InvincibleContext _localctx = new InvincibleContext(Context, State);
		EnterRule(_localctx, 648, RULE_invincible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2989; Match(T__318);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhasedOutContext : ParserRuleContext {
		public PhasedOutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phasedOut; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPhasedOut(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPhasedOut(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhasedOut(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhasedOutContext phasedOut() {
		PhasedOutContext _localctx = new PhasedOutContext(Context, State);
		EnterRule(_localctx, 650, RULE_phasedOut);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2991; Match(T__319);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootedContext : ParserRuleContext {
		public RootedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rooted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRooted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRooted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRooted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootedContext rooted() {
		RootedContext _localctx = new RootedContext(Context, State);
		EnterRule(_localctx, 652, RULE_rooted);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2993; Match(T__320);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StunnedContext : ParserRuleContext {
		public StunnedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stunned; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterStunned(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitStunned(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStunned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StunnedContext stunned() {
		StunnedContext _localctx = new StunnedContext(Context, State);
		EnterRule(_localctx, 654, RULE_stunned);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2995; Match(T__321);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ButtonContext : ParserRuleContext {
		public PrimaryFireContext primaryFire() {
			return GetRuleContext<PrimaryFireContext>(0);
		}
		public SecondaryFireContext secondaryFire() {
			return GetRuleContext<SecondaryFireContext>(0);
		}
		public Ability1Context ability1() {
			return GetRuleContext<Ability1Context>(0);
		}
		public Ability2Context ability2() {
			return GetRuleContext<Ability2Context>(0);
		}
		public UltimateContext ultimate() {
			return GetRuleContext<UltimateContext>(0);
		}
		public InteractContext interact() {
			return GetRuleContext<InteractContext>(0);
		}
		public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		public CrouchContext crouch() {
			return GetRuleContext<CrouchContext>(0);
		}
		public ButtonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_button; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterButton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitButton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitButton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ButtonContext button() {
		ButtonContext _localctx = new ButtonContext(Context, State);
		EnterRule(_localctx, 656, RULE_button);
		try {
			State = 3005;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__322:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2997; primaryFire();
				}
				break;
			case T__323:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2998; secondaryFire();
				}
				break;
			case T__324:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2999; ability1();
				}
				break;
			case T__325:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3000; ability2();
				}
				break;
			case T__326:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3001; ultimate();
				}
				break;
			case T__327:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3002; interact();
				}
				break;
			case T__328:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3003; jump();
				}
				break;
			case T__329:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3004; crouch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryFireContext : ParserRuleContext {
		public PrimaryFireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryFire; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPrimaryFire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPrimaryFire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryFire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryFireContext primaryFire() {
		PrimaryFireContext _localctx = new PrimaryFireContext(Context, State);
		EnterRule(_localctx, 658, RULE_primaryFire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3007; Match(T__322);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondaryFireContext : ParserRuleContext {
		public SecondaryFireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondaryFire; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSecondaryFire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSecondaryFire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondaryFire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondaryFireContext secondaryFire() {
		SecondaryFireContext _localctx = new SecondaryFireContext(Context, State);
		EnterRule(_localctx, 660, RULE_secondaryFire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009; Match(T__323);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ability1Context : ParserRuleContext {
		public Ability1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ability1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbility1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbility1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbility1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ability1Context ability1() {
		Ability1Context _localctx = new Ability1Context(Context, State);
		EnterRule(_localctx, 662, RULE_ability1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3011; Match(T__324);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ability2Context : ParserRuleContext {
		public Ability2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ability2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbility2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbility2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbility2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ability2Context ability2() {
		Ability2Context _localctx = new Ability2Context(Context, State);
		EnterRule(_localctx, 664, RULE_ability2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3013; Match(T__325);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UltimateContext : ParserRuleContext {
		public UltimateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ultimate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUltimate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUltimate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUltimate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UltimateContext ultimate() {
		UltimateContext _localctx = new UltimateContext(Context, State);
		EnterRule(_localctx, 666, RULE_ultimate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3015; Match(T__326);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractContext : ParserRuleContext {
		public InteractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterInteract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitInteract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteractContext interact() {
		InteractContext _localctx = new InteractContext(Context, State);
		EnterRule(_localctx, 668, RULE_interact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017; Match(T__327);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 670, RULE_jump);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3019; Match(T__328);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrouchContext : ParserRuleContext {
		public CrouchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crouch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCrouch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCrouch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrouch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrouchContext crouch() {
		CrouchContext _localctx = new CrouchContext(Context, State);
		EnterRule(_localctx, 672, RULE_crouch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3021; Match(T__329);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommunicationTypeContext : ParserRuleContext {
		public VoiceLineUpContext voiceLineUp() {
			return GetRuleContext<VoiceLineUpContext>(0);
		}
		public VoiceLineLeftContext voiceLineLeft() {
			return GetRuleContext<VoiceLineLeftContext>(0);
		}
		public VoiceLineRightContext voiceLineRight() {
			return GetRuleContext<VoiceLineRightContext>(0);
		}
		public VoiceLineDownContext voiceLineDown() {
			return GetRuleContext<VoiceLineDownContext>(0);
		}
		public EmoteUpContext emoteUp() {
			return GetRuleContext<EmoteUpContext>(0);
		}
		public EmoteLeftContext emoteLeft() {
			return GetRuleContext<EmoteLeftContext>(0);
		}
		public EmoteRightContext emoteRight() {
			return GetRuleContext<EmoteRightContext>(0);
		}
		public EmoteDownContext emoteDown() {
			return GetRuleContext<EmoteDownContext>(0);
		}
		public UltimateStatusContext ultimateStatus() {
			return GetRuleContext<UltimateStatusContext>(0);
		}
		public HelloContext hello() {
			return GetRuleContext<HelloContext>(0);
		}
		public NeedHealingContext needHealing() {
			return GetRuleContext<NeedHealingContext>(0);
		}
		public GroupUpContext groupUp() {
			return GetRuleContext<GroupUpContext>(0);
		}
		public ThanksContext thanks() {
			return GetRuleContext<ThanksContext>(0);
		}
		public AcknowledgeContext acknowledge() {
			return GetRuleContext<AcknowledgeContext>(0);
		}
		public CommunicationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_communicationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCommunicationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCommunicationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommunicationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommunicationTypeContext communicationType() {
		CommunicationTypeContext _localctx = new CommunicationTypeContext(Context, State);
		EnterRule(_localctx, 674, RULE_communicationType);
		try {
			State = 3037;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__330:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3023; voiceLineUp();
				}
				break;
			case T__331:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3024; voiceLineLeft();
				}
				break;
			case T__332:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3025; voiceLineRight();
				}
				break;
			case T__333:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3026; voiceLineDown();
				}
				break;
			case T__334:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3027; emoteUp();
				}
				break;
			case T__335:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3028; emoteLeft();
				}
				break;
			case T__336:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3029; emoteRight();
				}
				break;
			case T__337:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3030; emoteDown();
				}
				break;
			case T__338:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3031; ultimateStatus();
				}
				break;
			case T__339:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3032; hello();
				}
				break;
			case T__340:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3033; needHealing();
				}
				break;
			case T__341:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3034; groupUp();
				}
				break;
			case T__342:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3035; thanks();
				}
				break;
			case T__343:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3036; acknowledge();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineUpContext : ParserRuleContext {
		public VoiceLineUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineUp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineUpContext voiceLineUp() {
		VoiceLineUpContext _localctx = new VoiceLineUpContext(Context, State);
		EnterRule(_localctx, 676, RULE_voiceLineUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3039; Match(T__330);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineLeftContext : ParserRuleContext {
		public VoiceLineLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineLeft; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineLeft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineLeft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineLeftContext voiceLineLeft() {
		VoiceLineLeftContext _localctx = new VoiceLineLeftContext(Context, State);
		EnterRule(_localctx, 678, RULE_voiceLineLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3041; Match(T__331);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineRightContext : ParserRuleContext {
		public VoiceLineRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineRight; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineRight(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineRight(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineRightContext voiceLineRight() {
		VoiceLineRightContext _localctx = new VoiceLineRightContext(Context, State);
		EnterRule(_localctx, 680, RULE_voiceLineRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3043; Match(T__332);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineDownContext : ParserRuleContext {
		public VoiceLineDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineDown; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineDownContext voiceLineDown() {
		VoiceLineDownContext _localctx = new VoiceLineDownContext(Context, State);
		EnterRule(_localctx, 682, RULE_voiceLineDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3045; Match(T__333);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteUpContext : ParserRuleContext {
		public EmoteUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteUp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteUpContext emoteUp() {
		EmoteUpContext _localctx = new EmoteUpContext(Context, State);
		EnterRule(_localctx, 684, RULE_emoteUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3047; Match(T__334);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteLeftContext : ParserRuleContext {
		public EmoteLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteLeft; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteLeft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteLeft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteLeftContext emoteLeft() {
		EmoteLeftContext _localctx = new EmoteLeftContext(Context, State);
		EnterRule(_localctx, 686, RULE_emoteLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3049; Match(T__335);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteRightContext : ParserRuleContext {
		public EmoteRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteRight; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteRight(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteRight(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteRightContext emoteRight() {
		EmoteRightContext _localctx = new EmoteRightContext(Context, State);
		EnterRule(_localctx, 688, RULE_emoteRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3051; Match(T__336);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteDownContext : ParserRuleContext {
		public EmoteDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteDown; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteDownContext emoteDown() {
		EmoteDownContext _localctx = new EmoteDownContext(Context, State);
		EnterRule(_localctx, 690, RULE_emoteDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3053; Match(T__337);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UltimateStatusContext : ParserRuleContext {
		public UltimateStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ultimateStatus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUltimateStatus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUltimateStatus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUltimateStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UltimateStatusContext ultimateStatus() {
		UltimateStatusContext _localctx = new UltimateStatusContext(Context, State);
		EnterRule(_localctx, 692, RULE_ultimateStatus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3055; Match(T__338);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelloContext : ParserRuleContext {
		public HelloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hello; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHello(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHello(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHello(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelloContext hello() {
		HelloContext _localctx = new HelloContext(Context, State);
		EnterRule(_localctx, 694, RULE_hello);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3057; Match(T__339);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeedHealingContext : ParserRuleContext {
		public NeedHealingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_needHealing; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNeedHealing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNeedHealing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeedHealing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeedHealingContext needHealing() {
		NeedHealingContext _localctx = new NeedHealingContext(Context, State);
		EnterRule(_localctx, 696, RULE_needHealing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3059; Match(T__340);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupUpContext : ParserRuleContext {
		public GroupUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupUp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGroupUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGroupUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupUpContext groupUp() {
		GroupUpContext _localctx = new GroupUpContext(Context, State);
		EnterRule(_localctx, 698, RULE_groupUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3061; Match(T__341);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThanksContext : ParserRuleContext {
		public ThanksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thanks; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterThanks(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitThanks(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThanks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThanksContext thanks() {
		ThanksContext _localctx = new ThanksContext(Context, State);
		EnterRule(_localctx, 700, RULE_thanks);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3063; Match(T__342);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcknowledgeContext : ParserRuleContext {
		public AcknowledgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acknowledge; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAcknowledge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAcknowledge(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcknowledge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcknowledgeContext acknowledge() {
		AcknowledgeContext _localctx = new AcknowledgeContext(Context, State);
		EnterRule(_localctx, 702, RULE_acknowledge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3065; Match(T__343);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BarrierBlockTypeContext : ParserRuleContext {
		public BarriersDoNotBlockLOSContext barriersDoNotBlockLOS() {
			return GetRuleContext<BarriersDoNotBlockLOSContext>(0);
		}
		public EnemyBarriersBlockLOSContext enemyBarriersBlockLOS() {
			return GetRuleContext<EnemyBarriersBlockLOSContext>(0);
		}
		public AllBarriersBlockLOSContext allBarriersBlockLOS() {
			return GetRuleContext<AllBarriersBlockLOSContext>(0);
		}
		public BarrierBlockTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_barrierBlockType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBarrierBlockType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBarrierBlockType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBarrierBlockType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BarrierBlockTypeContext barrierBlockType() {
		BarrierBlockTypeContext _localctx = new BarrierBlockTypeContext(Context, State);
		EnterRule(_localctx, 704, RULE_barrierBlockType);
		try {
			State = 3070;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__344:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3067; barriersDoNotBlockLOS();
				}
				break;
			case T__345:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3068; enemyBarriersBlockLOS();
				}
				break;
			case T__346:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3069; allBarriersBlockLOS();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BarriersDoNotBlockLOSContext : ParserRuleContext {
		public BarriersDoNotBlockLOSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_barriersDoNotBlockLOS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBarriersDoNotBlockLOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBarriersDoNotBlockLOS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBarriersDoNotBlockLOS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BarriersDoNotBlockLOSContext barriersDoNotBlockLOS() {
		BarriersDoNotBlockLOSContext _localctx = new BarriersDoNotBlockLOSContext(Context, State);
		EnterRule(_localctx, 706, RULE_barriersDoNotBlockLOS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3072; Match(T__344);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnemyBarriersBlockLOSContext : ParserRuleContext {
		public EnemyBarriersBlockLOSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enemyBarriersBlockLOS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnemyBarriersBlockLOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnemyBarriersBlockLOS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnemyBarriersBlockLOS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnemyBarriersBlockLOSContext enemyBarriersBlockLOS() {
		EnemyBarriersBlockLOSContext _localctx = new EnemyBarriersBlockLOSContext(Context, State);
		EnterRule(_localctx, 708, RULE_enemyBarriersBlockLOS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3074; Match(T__345);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllBarriersBlockLOSContext : ParserRuleContext {
		public AllBarriersBlockLOSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allBarriersBlockLOS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllBarriersBlockLOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllBarriersBlockLOS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllBarriersBlockLOS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllBarriersBlockLOSContext allBarriersBlockLOS() {
		AllBarriersBlockLOSContext _localctx = new AllBarriersBlockLOSContext(Context, State);
		EnterRule(_localctx, 710, RULE_allBarriersBlockLOS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3076; Match(T__346);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorTransformationTypeContext : ParserRuleContext {
		public RotationContext rotation() {
			return GetRuleContext<RotationContext>(0);
		}
		public RotationAndTranslationContext rotationAndTranslation() {
			return GetRuleContext<RotationAndTranslationContext>(0);
		}
		public VectorTransformationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorTransformationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVectorTransformationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVectorTransformationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorTransformationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorTransformationTypeContext vectorTransformationType() {
		VectorTransformationTypeContext _localctx = new VectorTransformationTypeContext(Context, State);
		EnterRule(_localctx, 712, RULE_vectorTransformationType);
		try {
			State = 3080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__347:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3078; rotation();
				}
				break;
			case T__348:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3079; rotationAndTranslation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotationContext : ParserRuleContext {
		public RotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotationContext rotation() {
		RotationContext _localctx = new RotationContext(Context, State);
		EnterRule(_localctx, 714, RULE_rotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3082; Match(T__347);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotationAndTranslationContext : ParserRuleContext {
		public RotationAndTranslationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotationAndTranslation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRotationAndTranslation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRotationAndTranslation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotationAndTranslation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotationAndTranslationContext rotationAndTranslation() {
		RotationAndTranslationContext _localctx = new RotationAndTranslationContext(Context, State);
		EnterRule(_localctx, 716, RULE_rotationAndTranslation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3084; Match(T__348);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineOfSightCheckTypeContext : ParserRuleContext {
		public OffContext off() {
			return GetRuleContext<OffContext>(0);
		}
		public SurfacesContext surfaces() {
			return GetRuleContext<SurfacesContext>(0);
		}
		public SurfacesAndEnemyBarriersContext surfacesAndEnemyBarriers() {
			return GetRuleContext<SurfacesAndEnemyBarriersContext>(0);
		}
		public SurfacesAndAllBarriersContext surfacesAndAllBarriers() {
			return GetRuleContext<SurfacesAndAllBarriersContext>(0);
		}
		public LineOfSightCheckTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineOfSightCheckType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLineOfSightCheckType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLineOfSightCheckType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineOfSightCheckType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineOfSightCheckTypeContext lineOfSightCheckType() {
		LineOfSightCheckTypeContext _localctx = new LineOfSightCheckTypeContext(Context, State);
		EnterRule(_localctx, 718, RULE_lineOfSightCheckType);
		try {
			State = 3090;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__349:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3086; off();
				}
				break;
			case T__350:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3087; surfaces();
				}
				break;
			case T__351:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3088; surfacesAndEnemyBarriers();
				}
				break;
			case T__352:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3089; surfacesAndAllBarriers();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffContext : ParserRuleContext {
		public OffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOff(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOff(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffContext off() {
		OffContext _localctx = new OffContext(Context, State);
		EnterRule(_localctx, 720, RULE_off);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3092; Match(T__349);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfacesContext : ParserRuleContext {
		public SurfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSurfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSurfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfacesContext surfaces() {
		SurfacesContext _localctx = new SurfacesContext(Context, State);
		EnterRule(_localctx, 722, RULE_surfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3094; Match(T__350);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfacesAndEnemyBarriersContext : ParserRuleContext {
		public SurfacesAndEnemyBarriersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfacesAndEnemyBarriers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSurfacesAndEnemyBarriers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSurfacesAndEnemyBarriers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfacesAndEnemyBarriers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfacesAndEnemyBarriersContext surfacesAndEnemyBarriers() {
		SurfacesAndEnemyBarriersContext _localctx = new SurfacesAndEnemyBarriersContext(Context, State);
		EnterRule(_localctx, 724, RULE_surfacesAndEnemyBarriers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3096; Match(T__351);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfacesAndAllBarriersContext : ParserRuleContext {
		public SurfacesAndAllBarriersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfacesAndAllBarriers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSurfacesAndAllBarriers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSurfacesAndAllBarriers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfacesAndAllBarriers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfacesAndAllBarriersContext surfacesAndAllBarriers() {
		SurfacesAndAllBarriersContext _localctx = new SurfacesAndAllBarriersContext(Context, State);
		EnterRule(_localctx, 726, RULE_surfacesAndAllBarriers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3098; Match(T__352);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundingDirectionContext : ParserRuleContext {
		public UpContext up() {
			return GetRuleContext<UpContext>(0);
		}
		public DownContext down() {
			return GetRuleContext<DownContext>(0);
		}
		public ToNearestContext toNearest() {
			return GetRuleContext<ToNearestContext>(0);
		}
		public RoundingDirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundingDirection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoundingDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoundingDirection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundingDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoundingDirectionContext roundingDirection() {
		RoundingDirectionContext _localctx = new RoundingDirectionContext(Context, State);
		EnterRule(_localctx, 728, RULE_roundingDirection);
		try {
			State = 3103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__272:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3100; up();
				}
				break;
			case T__142:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3101; down();
				}
				break;
			case T__353:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3102; toNearest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpContext : ParserRuleContext {
		public UpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_up; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpContext up() {
		UpContext _localctx = new UpContext(Context, State);
		EnterRule(_localctx, 730, RULE_up);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3105; Match(T__272);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DownContext : ParserRuleContext {
		public DownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_down; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DownContext down() {
		DownContext _localctx = new DownContext(Context, State);
		EnterRule(_localctx, 732, RULE_down);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3107; Match(T__142);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToNearestContext : ParserRuleContext {
		public ToNearestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toNearest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterToNearest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitToNearest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToNearest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToNearestContext toNearest() {
		ToNearestContext _localctx = new ToNearestContext(Context, State);
		EnterRule(_localctx, 734, RULE_toNearest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3109; Match(T__353);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MotionTypeContext : ParserRuleContext {
		public CancelContraryMotionContext cancelContraryMotion() {
			return GetRuleContext<CancelContraryMotionContext>(0);
		}
		public IncorporateContraryMotionContext incorporateContraryMotion() {
			return GetRuleContext<IncorporateContraryMotionContext>(0);
		}
		public MotionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_motionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMotionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMotionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMotionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MotionTypeContext motionType() {
		MotionTypeContext _localctx = new MotionTypeContext(Context, State);
		EnterRule(_localctx, 736, RULE_motionType);
		try {
			State = 3113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__354:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3111; cancelContraryMotion();
				}
				break;
			case T__355:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3112; incorporateContraryMotion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CancelContraryMotionContext : ParserRuleContext {
		public CancelContraryMotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cancelContraryMotion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCancelContraryMotion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCancelContraryMotion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCancelContraryMotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CancelContraryMotionContext cancelContraryMotion() {
		CancelContraryMotionContext _localctx = new CancelContraryMotionContext(Context, State);
		EnterRule(_localctx, 738, RULE_cancelContraryMotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3115; Match(T__354);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncorporateContraryMotionContext : ParserRuleContext {
		public IncorporateContraryMotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incorporateContraryMotion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIncorporateContraryMotion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIncorporateContraryMotion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncorporateContraryMotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncorporateContraryMotionContext incorporateContraryMotion() {
		IncorporateContraryMotionContext _localctx = new IncorporateContraryMotionContext(Context, State);
		EnterRule(_localctx, 740, RULE_incorporateContraryMotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3117; Match(T__355);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeToContext : ParserRuleContext {
		public ToWorldContext toWorld() {
			return GetRuleContext<ToWorldContext>(0);
		}
		public ToPlayerContext toPlayer() {
			return GetRuleContext<ToPlayerContext>(0);
		}
		public RelativeToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeTo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRelativeTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRelativeTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeToContext relativeTo() {
		RelativeToContext _localctx = new RelativeToContext(Context, State);
		EnterRule(_localctx, 742, RULE_relativeTo);
		try {
			State = 3121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__356:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3119; toWorld();
				}
				break;
			case T__357:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3120; toPlayer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToWorldContext : ParserRuleContext {
		public ToWorldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toWorld; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterToWorld(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitToWorld(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToWorld(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToWorldContext toWorld() {
		ToWorldContext _localctx = new ToWorldContext(Context, State);
		EnterRule(_localctx, 744, RULE_toWorld);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3123; Match(T__356);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToPlayerContext : ParserRuleContext {
		public ToPlayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toPlayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterToPlayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitToPlayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPlayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToPlayerContext toPlayer() {
		ToPlayerContext _localctx = new ToPlayerContext(Context, State);
		EnterRule(_localctx, 746, RULE_toPlayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3125; Match(T__357);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateReevaluationContext : ParserRuleContext {
		public DestinationAndRateContext destinationAndRate() {
			return GetRuleContext<DestinationAndRateContext>(0);
		}
		public NoneContext none() {
			return GetRuleContext<NoneContext>(0);
		}
		public RateReevaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateReevaluation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRateReevaluation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRateReevaluation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateReevaluation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateReevaluationContext rateReevaluation() {
		RateReevaluationContext _localctx = new RateReevaluationContext(Context, State);
		EnterRule(_localctx, 748, RULE_rateReevaluation);
		try {
			State = 3129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__358:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3127; destinationAndRate();
				}
				break;
			case T__360:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3128; none();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestinationAndRateContext : ParserRuleContext {
		public DestinationAndRateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destinationAndRate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestinationAndRate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestinationAndRate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestinationAndRate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestinationAndRateContext destinationAndRate() {
		DestinationAndRateContext _localctx = new DestinationAndRateContext(Context, State);
		EnterRule(_localctx, 750, RULE_destinationAndRate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3131; Match(T__358);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeReevaluationContext : ParserRuleContext {
		public DestinationAndDurationContext destinationAndDuration() {
			return GetRuleContext<DestinationAndDurationContext>(0);
		}
		public NoneContext none() {
			return GetRuleContext<NoneContext>(0);
		}
		public TimeReevaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeReevaluation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTimeReevaluation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTimeReevaluation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeReevaluation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeReevaluationContext timeReevaluation() {
		TimeReevaluationContext _localctx = new TimeReevaluationContext(Context, State);
		EnterRule(_localctx, 752, RULE_timeReevaluation);
		try {
			State = 3135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__359:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3133; destinationAndDuration();
				}
				break;
			case T__360:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3134; none();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestinationAndDurationContext : ParserRuleContext {
		public DestinationAndDurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destinationAndDuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDestinationAndDuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDestinationAndDuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestinationAndDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestinationAndDurationContext destinationAndDuration() {
		DestinationAndDurationContext _localctx = new DestinationAndDurationContext(Context, State);
		EnterRule(_localctx, 754, RULE_destinationAndDuration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3137; Match(T__359);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoneContext : ParserRuleContext {
		public NoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_none; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNone(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoneContext none() {
		NoneContext _localctx = new NoneContext(Context, State);
		EnterRule(_localctx, 756, RULE_none);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3139; Match(T__360);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectShapeContext : ParserRuleContext {
		public SphereContext sphere() {
			return GetRuleContext<SphereContext>(0);
		}
		public LightShaftContext lightShaft() {
			return GetRuleContext<LightShaftContext>(0);
		}
		public OrbContext orb() {
			return GetRuleContext<OrbContext>(0);
		}
		public RingContext ring() {
			return GetRuleContext<RingContext>(0);
		}
		public CloudContext cloud() {
			return GetRuleContext<CloudContext>(0);
		}
		public SparklesContext sparkles() {
			return GetRuleContext<SparklesContext>(0);
		}
		public GoodAuraContext goodAura() {
			return GetRuleContext<GoodAuraContext>(0);
		}
		public BadAuraContext badAura() {
			return GetRuleContext<BadAuraContext>(0);
		}
		public EnergySoundContext energySound() {
			return GetRuleContext<EnergySoundContext>(0);
		}
		public PickUpSoundContext pickUpSound() {
			return GetRuleContext<PickUpSoundContext>(0);
		}
		public GoodAuraSoundContext goodAuraSound() {
			return GetRuleContext<GoodAuraSoundContext>(0);
		}
		public BadAuraSoundContext badAuraSound() {
			return GetRuleContext<BadAuraSoundContext>(0);
		}
		public SparklesSoundContext sparklesSound() {
			return GetRuleContext<SparklesSoundContext>(0);
		}
		public SmokeSoundContext smokeSound() {
			return GetRuleContext<SmokeSoundContext>(0);
		}
		public DecalSoundContext decalSound() {
			return GetRuleContext<DecalSoundContext>(0);
		}
		public BeaconSoundContext beaconSound() {
			return GetRuleContext<BeaconSoundContext>(0);
		}
		public EffectShapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectShape; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEffectShape(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEffectShape(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectShape(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectShapeContext effectShape() {
		EffectShapeContext _localctx = new EffectShapeContext(Context, State);
		EnterRule(_localctx, 758, RULE_effectShape);
		try {
			State = 3157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__361:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3141; sphere();
				}
				break;
			case T__362:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3142; lightShaft();
				}
				break;
			case T__363:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3143; orb();
				}
				break;
			case T__364:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3144; ring();
				}
				break;
			case T__365:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3145; cloud();
				}
				break;
			case T__366:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3146; sparkles();
				}
				break;
			case T__367:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3147; goodAura();
				}
				break;
			case T__368:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3148; badAura();
				}
				break;
			case T__369:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3149; energySound();
				}
				break;
			case T__370:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3150; pickUpSound();
				}
				break;
			case T__371:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3151; goodAuraSound();
				}
				break;
			case T__372:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3152; badAuraSound();
				}
				break;
			case T__373:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3153; sparklesSound();
				}
				break;
			case T__374:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3154; smokeSound();
				}
				break;
			case T__375:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3155; decalSound();
				}
				break;
			case T__376:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3156; beaconSound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SphereContext : ParserRuleContext {
		public SphereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sphere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSphere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSphere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSphere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SphereContext sphere() {
		SphereContext _localctx = new SphereContext(Context, State);
		EnterRule(_localctx, 760, RULE_sphere);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3159; Match(T__361);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LightShaftContext : ParserRuleContext {
		public LightShaftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lightShaft; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLightShaft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLightShaft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLightShaft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LightShaftContext lightShaft() {
		LightShaftContext _localctx = new LightShaftContext(Context, State);
		EnterRule(_localctx, 762, RULE_lightShaft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3161; Match(T__362);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrbContext : ParserRuleContext {
		public OrbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOrb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOrb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrbContext orb() {
		OrbContext _localctx = new OrbContext(Context, State);
		EnterRule(_localctx, 764, RULE_orb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3163; Match(T__363);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RingContext : ParserRuleContext {
		public RingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RingContext ring() {
		RingContext _localctx = new RingContext(Context, State);
		EnterRule(_localctx, 766, RULE_ring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3165; Match(T__364);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloudContext : ParserRuleContext {
		public CloudContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloud; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCloud(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCloud(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloud(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloudContext cloud() {
		CloudContext _localctx = new CloudContext(Context, State);
		EnterRule(_localctx, 768, RULE_cloud);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3167; Match(T__365);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparklesContext : ParserRuleContext {
		public SparklesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparkles; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSparkles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSparkles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparkles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparklesContext sparkles() {
		SparklesContext _localctx = new SparklesContext(Context, State);
		EnterRule(_localctx, 770, RULE_sparkles);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3169; Match(T__366);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoodAuraContext : ParserRuleContext {
		public GoodAuraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goodAura; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGoodAura(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGoodAura(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodAura(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoodAuraContext goodAura() {
		GoodAuraContext _localctx = new GoodAuraContext(Context, State);
		EnterRule(_localctx, 772, RULE_goodAura);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3171; Match(T__367);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BadAuraContext : ParserRuleContext {
		public BadAuraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_badAura; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBadAura(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBadAura(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadAura(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BadAuraContext badAura() {
		BadAuraContext _localctx = new BadAuraContext(Context, State);
		EnterRule(_localctx, 774, RULE_badAura);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3173; Match(T__368);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnergySoundContext : ParserRuleContext {
		public EnergySoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_energySound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnergySound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnergySound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnergySound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnergySoundContext energySound() {
		EnergySoundContext _localctx = new EnergySoundContext(Context, State);
		EnterRule(_localctx, 776, RULE_energySound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3175; Match(T__369);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickUpSoundContext : ParserRuleContext {
		public PickUpSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickUpSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPickUpSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPickUpSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPickUpSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PickUpSoundContext pickUpSound() {
		PickUpSoundContext _localctx = new PickUpSoundContext(Context, State);
		EnterRule(_localctx, 778, RULE_pickUpSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3177; Match(T__370);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoodAuraSoundContext : ParserRuleContext {
		public GoodAuraSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goodAuraSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGoodAuraSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGoodAuraSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodAuraSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoodAuraSoundContext goodAuraSound() {
		GoodAuraSoundContext _localctx = new GoodAuraSoundContext(Context, State);
		EnterRule(_localctx, 780, RULE_goodAuraSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3179; Match(T__371);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BadAuraSoundContext : ParserRuleContext {
		public BadAuraSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_badAuraSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBadAuraSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBadAuraSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadAuraSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BadAuraSoundContext badAuraSound() {
		BadAuraSoundContext _localctx = new BadAuraSoundContext(Context, State);
		EnterRule(_localctx, 782, RULE_badAuraSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3181; Match(T__372);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparklesSoundContext : ParserRuleContext {
		public SparklesSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparklesSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSparklesSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSparklesSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparklesSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparklesSoundContext sparklesSound() {
		SparklesSoundContext _localctx = new SparklesSoundContext(Context, State);
		EnterRule(_localctx, 784, RULE_sparklesSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3183; Match(T__373);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SmokeSoundContext : ParserRuleContext {
		public SmokeSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smokeSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSmokeSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSmokeSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmokeSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SmokeSoundContext smokeSound() {
		SmokeSoundContext _localctx = new SmokeSoundContext(Context, State);
		EnterRule(_localctx, 786, RULE_smokeSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3185; Match(T__374);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecalSoundContext : ParserRuleContext {
		public DecalSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decalSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDecalSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDecalSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecalSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecalSoundContext decalSound() {
		DecalSoundContext _localctx = new DecalSoundContext(Context, State);
		EnterRule(_localctx, 788, RULE_decalSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3187; Match(T__375);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeaconSoundContext : ParserRuleContext {
		public BeaconSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beaconSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBeaconSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBeaconSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeaconSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeaconSoundContext beaconSound() {
		BeaconSoundContext _localctx = new BeaconSoundContext(Context, State);
		EnterRule(_localctx, 790, RULE_beaconSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3189; Match(T__376);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		public WhiteContext white() {
			return GetRuleContext<WhiteContext>(0);
		}
		public YellowContext yellow() {
			return GetRuleContext<YellowContext>(0);
		}
		public GreenContext green() {
			return GetRuleContext<GreenContext>(0);
		}
		public PurpleContext purple() {
			return GetRuleContext<PurpleContext>(0);
		}
		public RedContext red() {
			return GetRuleContext<RedContext>(0);
		}
		public BlueContext blue() {
			return GetRuleContext<BlueContext>(0);
		}
		public Team1Context team1() {
			return GetRuleContext<Team1Context>(0);
		}
		public Team2Context team2() {
			return GetRuleContext<Team2Context>(0);
		}
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 792, RULE_color);
		try {
			State = 3199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__377:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3191; white();
				}
				break;
			case T__378:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3192; yellow();
				}
				break;
			case T__379:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3193; green();
				}
				break;
			case T__380:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3194; purple();
				}
				break;
			case T__381:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3195; red();
				}
				break;
			case T__382:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3196; blue();
				}
				break;
			case Team1:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3197; team1();
				}
				break;
			case Team2:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3198; team2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteContext : ParserRuleContext {
		public WhiteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_white; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWhite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWhite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhiteContext white() {
		WhiteContext _localctx = new WhiteContext(Context, State);
		EnterRule(_localctx, 794, RULE_white);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3201; Match(T__377);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YellowContext : ParserRuleContext {
		public YellowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yellow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterYellow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitYellow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYellow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YellowContext yellow() {
		YellowContext _localctx = new YellowContext(Context, State);
		EnterRule(_localctx, 796, RULE_yellow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3203; Match(T__378);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreenContext : ParserRuleContext {
		public GreenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_green; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGreen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGreen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreenContext green() {
		GreenContext _localctx = new GreenContext(Context, State);
		EnterRule(_localctx, 798, RULE_green);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3205; Match(T__379);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurpleContext : ParserRuleContext {
		public PurpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPurple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPurple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurpleContext purple() {
		PurpleContext _localctx = new PurpleContext(Context, State);
		EnterRule(_localctx, 800, RULE_purple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3207; Match(T__380);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedContext : ParserRuleContext {
		public RedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_red; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRed(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedContext red() {
		RedContext _localctx = new RedContext(Context, State);
		EnterRule(_localctx, 802, RULE_red);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3209; Match(T__381);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlueContext : ParserRuleContext {
		public BlueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBlue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBlue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlueContext blue() {
		BlueContext _localctx = new BlueContext(Context, State);
		EnterRule(_localctx, 804, RULE_blue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3211; Match(T__382);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Team1Context : ParserRuleContext {
		public ITerminalNode Team1() { return GetToken(OverwatchCodeParser.Team1, 0); }
		public Team1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeam1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeam1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeam1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Team1Context team1() {
		Team1Context _localctx = new Team1Context(Context, State);
		EnterRule(_localctx, 806, RULE_team1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3213; Match(Team1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Team2Context : ParserRuleContext {
		public ITerminalNode Team2() { return GetToken(OverwatchCodeParser.Team2, 0); }
		public Team2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeam2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeam2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeam2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Team2Context team2() {
		Team2Context _localctx = new Team2Context(Context, State);
		EnterRule(_localctx, 808, RULE_team2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3215; Match(Team2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEffectReevaluationContext : ParserRuleContext {
		public VisibleToPositionAndRadiusContext visibleToPositionAndRadius() {
			return GetRuleContext<VisibleToPositionAndRadiusContext>(0);
		}
		public PositionAandRadiusContext positionAandRadius() {
			return GetRuleContext<PositionAandRadiusContext>(0);
		}
		public VisibleToContext visibleTo() {
			return GetRuleContext<VisibleToContext>(0);
		}
		public NoneContext none() {
			return GetRuleContext<NoneContext>(0);
		}
		public CreateEffectReevaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEffectReevaluation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCreateEffectReevaluation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCreateEffectReevaluation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEffectReevaluation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEffectReevaluationContext createEffectReevaluation() {
		CreateEffectReevaluationContext _localctx = new CreateEffectReevaluationContext(Context, State);
		EnterRule(_localctx, 810, RULE_createEffectReevaluation);
		try {
			State = 3221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__383:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3217; visibleToPositionAndRadius();
				}
				break;
			case T__384:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3218; positionAandRadius();
				}
				break;
			case T__385:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3219; visibleTo();
				}
				break;
			case T__360:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3220; none();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibleToPositionAndRadiusContext : ParserRuleContext {
		public VisibleToPositionAndRadiusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibleToPositionAndRadius; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVisibleToPositionAndRadius(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVisibleToPositionAndRadius(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibleToPositionAndRadius(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibleToPositionAndRadiusContext visibleToPositionAndRadius() {
		VisibleToPositionAndRadiusContext _localctx = new VisibleToPositionAndRadiusContext(Context, State);
		EnterRule(_localctx, 812, RULE_visibleToPositionAndRadius);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3223; Match(T__383);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionAandRadiusContext : ParserRuleContext {
		public PositionAandRadiusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionAandRadius; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPositionAandRadius(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPositionAandRadius(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionAandRadius(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionAandRadiusContext positionAandRadius() {
		PositionAandRadiusContext _localctx = new PositionAandRadiusContext(Context, State);
		EnterRule(_localctx, 814, RULE_positionAandRadius);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3225; Match(T__384);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibleToContext : ParserRuleContext {
		public VisibleToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibleTo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVisibleTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVisibleTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibleTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibleToContext visibleTo() {
		VisibleToContext _localctx = new VisibleToContext(Context, State);
		EnterRule(_localctx, 816, RULE_visibleTo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3227; Match(T__385);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HudTextLocationContext : ParserRuleContext {
		public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		public TopContext top() {
			return GetRuleContext<TopContext>(0);
		}
		public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public HudTextLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hudTextLocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHudTextLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHudTextLocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHudTextLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HudTextLocationContext hudTextLocation() {
		HudTextLocationContext _localctx = new HudTextLocationContext(Context, State);
		EnterRule(_localctx, 818, RULE_hudTextLocation);
		try {
			State = 3232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__211:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3229; left();
				}
				break;
			case T__386:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3230; top();
				}
				break;
			case T__255:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3231; right();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftContext : ParserRuleContext {
		public LeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLeft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLeft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftContext left() {
		LeftContext _localctx = new LeftContext(Context, State);
		EnterRule(_localctx, 820, RULE_left);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3234; Match(T__211);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopContext : ParserRuleContext {
		public TopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopContext top() {
		TopContext _localctx = new TopContext(Context, State);
		EnterRule(_localctx, 822, RULE_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236; Match(T__386);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightContext : ParserRuleContext {
		public RightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRight(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRight(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightContext right() {
		RightContext _localctx = new RightContext(Context, State);
		EnterRule(_localctx, 824, RULE_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3238; Match(T__255);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HudTextReevaluationContext : ParserRuleContext {
		public VisibleToAndStringContext visibleToAndString() {
			return GetRuleContext<VisibleToAndStringContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public HudTextReevaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hudTextReevaluation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHudTextReevaluation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHudTextReevaluation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHudTextReevaluation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HudTextReevaluationContext hudTextReevaluation() {
		HudTextReevaluationContext _localctx = new HudTextReevaluationContext(Context, State);
		EnterRule(_localctx, 826, RULE_hudTextReevaluation);
		try {
			State = 3242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__387:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3240; visibleToAndString();
				}
				break;
			case T__265:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3241; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibleToAndStringContext : ParserRuleContext {
		public VisibleToAndStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibleToAndString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVisibleToAndString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVisibleToAndString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibleToAndString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibleToAndStringContext visibleToAndString() {
		VisibleToAndStringContext _localctx = new VisibleToAndStringContext(Context, State);
		EnterRule(_localctx, 828, RULE_visibleToAndString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3244; Match(T__387);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 830, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3246; Match(T__265);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IconContext : ParserRuleContext {
		public ArrowDownContext arrowDown() {
			return GetRuleContext<ArrowDownContext>(0);
		}
		public ArrowLeftContext arrowLeft() {
			return GetRuleContext<ArrowLeftContext>(0);
		}
		public ArrowRightContext arrowRight() {
			return GetRuleContext<ArrowRightContext>(0);
		}
		public ArrowUpContext arrowUp() {
			return GetRuleContext<ArrowUpContext>(0);
		}
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public BoltContext bolt() {
			return GetRuleContext<BoltContext>(0);
		}
		public CheckmarkContext checkmark() {
			return GetRuleContext<CheckmarkContext>(0);
		}
		public CircleContext circle() {
			return GetRuleContext<CircleContext>(0);
		}
		public ClubContext club() {
			return GetRuleContext<ClubContext>(0);
		}
		public DiamondContext diamond() {
			return GetRuleContext<DiamondContext>(0);
		}
		public DizzyContext dizzy() {
			return GetRuleContext<DizzyContext>(0);
		}
		public ExclamationMarkContext exclamationMark() {
			return GetRuleContext<ExclamationMarkContext>(0);
		}
		public EyeContext eye() {
			return GetRuleContext<EyeContext>(0);
		}
		public FireContext fire() {
			return GetRuleContext<FireContext>(0);
		}
		public FlagContext flag() {
			return GetRuleContext<FlagContext>(0);
		}
		public HaloContext halo() {
			return GetRuleContext<HaloContext>(0);
		}
		public HappyContext happy() {
			return GetRuleContext<HappyContext>(0);
		}
		public HeartContext heart() {
			return GetRuleContext<HeartContext>(0);
		}
		public MoonContext moon() {
			return GetRuleContext<MoonContext>(0);
		}
		public NoContext no() {
			return GetRuleContext<NoContext>(0);
		}
		public PlusContext plus() {
			return GetRuleContext<PlusContext>(0);
		}
		public PoisonContext poison() {
			return GetRuleContext<PoisonContext>(0);
		}
		public Poison2Context poison2() {
			return GetRuleContext<Poison2Context>(0);
		}
		public QuestionMarkContext questionMark() {
			return GetRuleContext<QuestionMarkContext>(0);
		}
		public RadioactiveContext radioactive() {
			return GetRuleContext<RadioactiveContext>(0);
		}
		public RecycleContext recycle() {
			return GetRuleContext<RecycleContext>(0);
		}
		public RingThickContext ringThick() {
			return GetRuleContext<RingThickContext>(0);
		}
		public RingThinContext ringThin() {
			return GetRuleContext<RingThinContext>(0);
		}
		public SadContext sad() {
			return GetRuleContext<SadContext>(0);
		}
		public SkullContext skull() {
			return GetRuleContext<SkullContext>(0);
		}
		public SpadeContext spade() {
			return GetRuleContext<SpadeContext>(0);
		}
		public SpiralContext spiral() {
			return GetRuleContext<SpiralContext>(0);
		}
		public StopContext stop() {
			return GetRuleContext<StopContext>(0);
		}
		public TrashcanContext trashcan() {
			return GetRuleContext<TrashcanContext>(0);
		}
		public WarningContext warning() {
			return GetRuleContext<WarningContext>(0);
		}
		public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		public IconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_icon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIcon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIcon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIcon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IconContext icon() {
		IconContext _localctx = new IconContext(Context, State);
		EnterRule(_localctx, 832, RULE_icon);
		try {
			State = 3284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__388:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3248; arrowDown();
				}
				break;
			case T__389:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3249; arrowLeft();
				}
				break;
			case T__390:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3250; arrowRight();
				}
				break;
			case T__391:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3251; arrowUp();
				}
				break;
			case T__392:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3252; asterisk();
				}
				break;
			case T__393:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3253; bolt();
				}
				break;
			case T__394:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3254; checkmark();
				}
				break;
			case T__395:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3255; circle();
				}
				break;
			case T__396:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3256; club();
				}
				break;
			case T__397:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3257; diamond();
				}
				break;
			case T__398:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3258; dizzy();
				}
				break;
			case T__399:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3259; exclamationMark();
				}
				break;
			case T__400:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3260; eye();
				}
				break;
			case T__401:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3261; fire();
				}
				break;
			case T__402:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3262; flag();
				}
				break;
			case T__403:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3263; halo();
				}
				break;
			case T__404:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3264; happy();
				}
				break;
			case T__405:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3265; heart();
				}
				break;
			case T__406:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3266; moon();
				}
				break;
			case T__407:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3267; no();
				}
				break;
			case T__408:
				EnterOuterAlt(_localctx, 21);
				{
				State = 3268; plus();
				}
				break;
			case T__409:
				EnterOuterAlt(_localctx, 22);
				{
				State = 3269; poison();
				}
				break;
			case T__410:
				EnterOuterAlt(_localctx, 23);
				{
				State = 3270; poison2();
				}
				break;
			case T__411:
				EnterOuterAlt(_localctx, 24);
				{
				State = 3271; questionMark();
				}
				break;
			case T__412:
				EnterOuterAlt(_localctx, 25);
				{
				State = 3272; radioactive();
				}
				break;
			case T__413:
				EnterOuterAlt(_localctx, 26);
				{
				State = 3273; recycle();
				}
				break;
			case T__414:
				EnterOuterAlt(_localctx, 27);
				{
				State = 3274; ringThick();
				}
				break;
			case T__415:
				EnterOuterAlt(_localctx, 28);
				{
				State = 3275; ringThin();
				}
				break;
			case T__416:
				EnterOuterAlt(_localctx, 29);
				{
				State = 3276; sad();
				}
				break;
			case T__417:
				EnterOuterAlt(_localctx, 30);
				{
				State = 3277; skull();
				}
				break;
			case T__418:
				EnterOuterAlt(_localctx, 31);
				{
				State = 3278; spade();
				}
				break;
			case T__419:
				EnterOuterAlt(_localctx, 32);
				{
				State = 3279; spiral();
				}
				break;
			case T__420:
				EnterOuterAlt(_localctx, 33);
				{
				State = 3280; stop();
				}
				break;
			case T__421:
				EnterOuterAlt(_localctx, 34);
				{
				State = 3281; trashcan();
				}
				break;
			case T__422:
				EnterOuterAlt(_localctx, 35);
				{
				State = 3282; warning();
				}
				break;
			case T__423:
				EnterOuterAlt(_localctx, 36);
				{
				State = 3283; x();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowDownContext : ParserRuleContext {
		public ArrowDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowDown; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArrowDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArrowDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowDownContext arrowDown() {
		ArrowDownContext _localctx = new ArrowDownContext(Context, State);
		EnterRule(_localctx, 834, RULE_arrowDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3286; Match(T__388);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowLeftContext : ParserRuleContext {
		public ArrowLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowLeft; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArrowLeft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArrowLeft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowLeftContext arrowLeft() {
		ArrowLeftContext _localctx = new ArrowLeftContext(Context, State);
		EnterRule(_localctx, 836, RULE_arrowLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3288; Match(T__389);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowRightContext : ParserRuleContext {
		public ArrowRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowRight; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArrowRight(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArrowRight(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowRightContext arrowRight() {
		ArrowRightContext _localctx = new ArrowRightContext(Context, State);
		EnterRule(_localctx, 838, RULE_arrowRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3290; Match(T__390);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowUpContext : ParserRuleContext {
		public ArrowUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowUp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArrowUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArrowUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowUpContext arrowUp() {
		ArrowUpContext _localctx = new ArrowUpContext(Context, State);
		EnterRule(_localctx, 840, RULE_arrowUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3292; Match(T__391);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsterisk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(Context, State);
		EnterRule(_localctx, 842, RULE_asterisk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3294; Match(T__392);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoltContext : ParserRuleContext {
		public BoltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bolt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBolt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBolt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBolt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoltContext bolt() {
		BoltContext _localctx = new BoltContext(Context, State);
		EnterRule(_localctx, 844, RULE_bolt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3296; Match(T__393);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckmarkContext : ParserRuleContext {
		public CheckmarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkmark; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCheckmark(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCheckmark(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckmark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckmarkContext checkmark() {
		CheckmarkContext _localctx = new CheckmarkContext(Context, State);
		EnterRule(_localctx, 846, RULE_checkmark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298; Match(T__394);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleContext : ParserRuleContext {
		public CircleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCircle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCircle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleContext circle() {
		CircleContext _localctx = new CircleContext(Context, State);
		EnterRule(_localctx, 848, RULE_circle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3300; Match(T__395);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClubContext : ParserRuleContext {
		public ClubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_club; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterClub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitClub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClubContext club() {
		ClubContext _localctx = new ClubContext(Context, State);
		EnterRule(_localctx, 850, RULE_club);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3302; Match(T__396);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiamondContext : ParserRuleContext {
		public DiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiamondContext diamond() {
		DiamondContext _localctx = new DiamondContext(Context, State);
		EnterRule(_localctx, 852, RULE_diamond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3304; Match(T__397);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DizzyContext : ParserRuleContext {
		public DizzyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dizzy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDizzy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDizzy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDizzy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DizzyContext dizzy() {
		DizzyContext _localctx = new DizzyContext(Context, State);
		EnterRule(_localctx, 854, RULE_dizzy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3306; Match(T__398);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclamationMarkContext : ParserRuleContext {
		public ExclamationMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclamationMark; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterExclamationMark(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitExclamationMark(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclamationMark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclamationMarkContext exclamationMark() {
		ExclamationMarkContext _localctx = new ExclamationMarkContext(Context, State);
		EnterRule(_localctx, 856, RULE_exclamationMark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3308; Match(T__399);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EyeContext : ParserRuleContext {
		public EyeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eye; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEye(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEye(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEye(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EyeContext eye() {
		EyeContext _localctx = new EyeContext(Context, State);
		EnterRule(_localctx, 858, RULE_eye);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3310; Match(T__400);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FireContext : ParserRuleContext {
		public FireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fire; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FireContext fire() {
		FireContext _localctx = new FireContext(Context, State);
		EnterRule(_localctx, 860, RULE_fire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3312; Match(T__401);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagContext : ParserRuleContext {
		public FlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFlag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFlag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagContext flag() {
		FlagContext _localctx = new FlagContext(Context, State);
		EnterRule(_localctx, 862, RULE_flag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3314; Match(T__402);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HaloContext : ParserRuleContext {
		public HaloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHalo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHalo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HaloContext halo() {
		HaloContext _localctx = new HaloContext(Context, State);
		EnterRule(_localctx, 864, RULE_halo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3316; Match(T__403);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HappyContext : ParserRuleContext {
		public HappyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_happy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHappy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHappy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHappy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HappyContext happy() {
		HappyContext _localctx = new HappyContext(Context, State);
		EnterRule(_localctx, 866, RULE_happy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3318; Match(T__404);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeartContext : ParserRuleContext {
		public HeartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeartContext heart() {
		HeartContext _localctx = new HeartContext(Context, State);
		EnterRule(_localctx, 868, RULE_heart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3320; Match(T__405);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoonContext : ParserRuleContext {
		public MoonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMoon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMoon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoonContext moon() {
		MoonContext _localctx = new MoonContext(Context, State);
		EnterRule(_localctx, 870, RULE_moon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3322; Match(T__406);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoContext : ParserRuleContext {
		public NoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_no; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoContext no() {
		NoContext _localctx = new NoContext(Context, State);
		EnterRule(_localctx, 872, RULE_no);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3324; Match(T__407);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusContext : ParserRuleContext {
		public PlusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusContext plus() {
		PlusContext _localctx = new PlusContext(Context, State);
		EnterRule(_localctx, 874, RULE_plus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3326; Match(T__408);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PoisonContext : ParserRuleContext {
		public PoisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_poison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPoison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPoison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PoisonContext poison() {
		PoisonContext _localctx = new PoisonContext(Context, State);
		EnterRule(_localctx, 876, RULE_poison);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3328; Match(T__409);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Poison2Context : ParserRuleContext {
		public Poison2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_poison2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPoison2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPoison2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoison2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Poison2Context poison2() {
		Poison2Context _localctx = new Poison2Context(Context, State);
		EnterRule(_localctx, 878, RULE_poison2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3330; Match(T__410);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionMarkContext : ParserRuleContext {
		public QuestionMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionMark; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterQuestionMark(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitQuestionMark(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestionMark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionMarkContext questionMark() {
		QuestionMarkContext _localctx = new QuestionMarkContext(Context, State);
		EnterRule(_localctx, 880, RULE_questionMark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3332; Match(T__411);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RadioactiveContext : ParserRuleContext {
		public RadioactiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_radioactive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRadioactive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRadioactive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRadioactive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RadioactiveContext radioactive() {
		RadioactiveContext _localctx = new RadioactiveContext(Context, State);
		EnterRule(_localctx, 882, RULE_radioactive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3334; Match(T__412);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecycleContext : ParserRuleContext {
		public RecycleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recycle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRecycle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRecycle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecycle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecycleContext recycle() {
		RecycleContext _localctx = new RecycleContext(Context, State);
		EnterRule(_localctx, 884, RULE_recycle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3336; Match(T__413);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RingThickContext : ParserRuleContext {
		public RingThickContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ringThick; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRingThick(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRingThick(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRingThick(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RingThickContext ringThick() {
		RingThickContext _localctx = new RingThickContext(Context, State);
		EnterRule(_localctx, 886, RULE_ringThick);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3338; Match(T__414);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RingThinContext : ParserRuleContext {
		public RingThinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ringThin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRingThin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRingThin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRingThin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RingThinContext ringThin() {
		RingThinContext _localctx = new RingThinContext(Context, State);
		EnterRule(_localctx, 888, RULE_ringThin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3340; Match(T__415);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SadContext : ParserRuleContext {
		public SadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sad; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SadContext sad() {
		SadContext _localctx = new SadContext(Context, State);
		EnterRule(_localctx, 890, RULE_sad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3342; Match(T__416);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkullContext : ParserRuleContext {
		public SkullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skull; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSkull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSkull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkullContext skull() {
		SkullContext _localctx = new SkullContext(Context, State);
		EnterRule(_localctx, 892, RULE_skull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3344; Match(T__417);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpadeContext : ParserRuleContext {
		public SpadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spade; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSpade(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSpade(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpadeContext spade() {
		SpadeContext _localctx = new SpadeContext(Context, State);
		EnterRule(_localctx, 894, RULE_spade);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3346; Match(T__418);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpiralContext : ParserRuleContext {
		public SpiralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spiral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSpiral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSpiral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpiral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpiralContext spiral() {
		SpiralContext _localctx = new SpiralContext(Context, State);
		EnterRule(_localctx, 896, RULE_spiral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3348; Match(T__419);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopContext : ParserRuleContext {
		public StopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterStop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitStop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopContext stop() {
		StopContext _localctx = new StopContext(Context, State);
		EnterRule(_localctx, 898, RULE_stop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3350; Match(T__420);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrashcanContext : ParserRuleContext {
		public TrashcanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trashcan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTrashcan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTrashcan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrashcan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrashcanContext trashcan() {
		TrashcanContext _localctx = new TrashcanContext(Context, State);
		EnterRule(_localctx, 900, RULE_trashcan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3352; Match(T__421);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WarningContext : ParserRuleContext {
		public WarningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_warning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWarning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWarning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWarning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WarningContext warning() {
		WarningContext _localctx = new WarningContext(Context, State);
		EnterRule(_localctx, 902, RULE_warning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3354; Match(T__422);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitX(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(Context, State);
		EnterRule(_localctx, 904, RULE_x);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3356; Match(T__423);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModificationContext : ParserRuleContext {
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public RaiseToPowerContext raiseToPower() {
			return GetRuleContext<RaiseToPowerContext>(0);
		}
		public MinContext min() {
			return GetRuleContext<MinContext>(0);
		}
		public MaxContext max() {
			return GetRuleContext<MaxContext>(0);
		}
		public AppendToArrayContext appendToArray() {
			return GetRuleContext<AppendToArrayContext>(0);
		}
		public RemoveFromArrayByValueContext removeFromArrayByValue() {
			return GetRuleContext<RemoveFromArrayByValueContext>(0);
		}
		public RemoveFromArrayByIndexContext removeFromArrayByIndex() {
			return GetRuleContext<RemoveFromArrayByIndexContext>(0);
		}
		public ModificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModificationContext modification() {
		ModificationContext _localctx = new ModificationContext(Context, State);
		EnterRule(_localctx, 906, RULE_modification);
		try {
			State = 3369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__109:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3358; add();
				}
				break;
			case T__266:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3359; subtract();
				}
				break;
			case T__219:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3360; multiply();
				}
				break;
			case T__140:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3361; divide();
				}
				break;
			case T__218:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3362; modulo();
				}
				break;
			case T__246:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3363; raiseToPower();
				}
				break;
			case T__217:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3364; min();
				}
				break;
			case T__215:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3365; max();
				}
				break;
			case T__122:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3366; appendToArray();
				}
				break;
			case T__424:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3367; removeFromArrayByValue();
				}
				break;
			case T__425:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3368; removeFromArrayByIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 908, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3371; Match(T__109);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 910, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3373; Match(T__266);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 912, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3375; Match(T__219);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 914, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3377; Match(T__140);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 916, RULE_modulo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3379; Match(T__218);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseToPowerContext : ParserRuleContext {
		public RaiseToPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseToPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRaiseToPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRaiseToPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseToPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseToPowerContext raiseToPower() {
		RaiseToPowerContext _localctx = new RaiseToPowerContext(Context, State);
		EnterRule(_localctx, 918, RULE_raiseToPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381; Match(T__246);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinContext : ParserRuleContext {
		public MinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_min; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinContext min() {
		MinContext _localctx = new MinContext(Context, State);
		EnterRule(_localctx, 920, RULE_min);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3383; Match(T__217);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxContext : ParserRuleContext {
		public MaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_max; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMax(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMax(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxContext max() {
		MaxContext _localctx = new MaxContext(Context, State);
		EnterRule(_localctx, 922, RULE_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3385; Match(T__215);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppendToArrayContext : ParserRuleContext {
		public AppendToArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appendToArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAppendToArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAppendToArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppendToArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppendToArrayContext appendToArray() {
		AppendToArrayContext _localctx = new AppendToArrayContext(Context, State);
		EnterRule(_localctx, 924, RULE_appendToArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3387; Match(T__122);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveFromArrayByValueContext : ParserRuleContext {
		public RemoveFromArrayByValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeFromArrayByValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRemoveFromArrayByValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRemoveFromArrayByValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveFromArrayByValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveFromArrayByValueContext removeFromArrayByValue() {
		RemoveFromArrayByValueContext _localctx = new RemoveFromArrayByValueContext(Context, State);
		EnterRule(_localctx, 926, RULE_removeFromArrayByValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3389; Match(T__424);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveFromArrayByIndexContext : ParserRuleContext {
		public RemoveFromArrayByIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeFromArrayByIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRemoveFromArrayByIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRemoveFromArrayByIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveFromArrayByIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveFromArrayByIndexContext removeFromArrayByIndex() {
		RemoveFromArrayByIndexContext _localctx = new RemoveFromArrayByIndexContext(Context, State);
		EnterRule(_localctx, 928, RULE_removeFromArrayByIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3391; Match(T__425);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimatedEffectContext : ParserRuleContext {
		public GoodExplosionContext goodExplosion() {
			return GetRuleContext<GoodExplosionContext>(0);
		}
		public BadExplosionContext badExplosion() {
			return GetRuleContext<BadExplosionContext>(0);
		}
		public RingExplosionContext ringExplosion() {
			return GetRuleContext<RingExplosionContext>(0);
		}
		public GoodPickupEffectContext goodPickupEffect() {
			return GetRuleContext<GoodPickupEffectContext>(0);
		}
		public BadPickupEffectContext badPickupEffect() {
			return GetRuleContext<BadPickupEffectContext>(0);
		}
		public DebuffImpactSoundContext debuffImpactSound() {
			return GetRuleContext<DebuffImpactSoundContext>(0);
		}
		public BuffImpactSoundContext buffImpactSound() {
			return GetRuleContext<BuffImpactSoundContext>(0);
		}
		public RingExplosionSoundContext ringExplosionSound() {
			return GetRuleContext<RingExplosionSoundContext>(0);
		}
		public BuffExplosionSoundContext buffExplosionSound() {
			return GetRuleContext<BuffExplosionSoundContext>(0);
		}
		public ExplosionSoundContext explosionSound() {
			return GetRuleContext<ExplosionSoundContext>(0);
		}
		public AnimatedEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animatedEffect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAnimatedEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAnimatedEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimatedEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimatedEffectContext animatedEffect() {
		AnimatedEffectContext _localctx = new AnimatedEffectContext(Context, State);
		EnterRule(_localctx, 930, RULE_animatedEffect);
		try {
			State = 3403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__426:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3393; goodExplosion();
				}
				break;
			case T__427:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3394; badExplosion();
				}
				break;
			case T__428:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3395; ringExplosion();
				}
				break;
			case T__429:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3396; goodPickupEffect();
				}
				break;
			case T__430:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3397; badPickupEffect();
				}
				break;
			case T__431:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3398; debuffImpactSound();
				}
				break;
			case T__432:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3399; buffImpactSound();
				}
				break;
			case T__433:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3400; ringExplosionSound();
				}
				break;
			case T__434:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3401; buffExplosionSound();
				}
				break;
			case T__435:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3402; explosionSound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoodExplosionContext : ParserRuleContext {
		public GoodExplosionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goodExplosion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGoodExplosion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGoodExplosion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodExplosion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoodExplosionContext goodExplosion() {
		GoodExplosionContext _localctx = new GoodExplosionContext(Context, State);
		EnterRule(_localctx, 932, RULE_goodExplosion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3405; Match(T__426);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BadExplosionContext : ParserRuleContext {
		public BadExplosionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_badExplosion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBadExplosion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBadExplosion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadExplosion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BadExplosionContext badExplosion() {
		BadExplosionContext _localctx = new BadExplosionContext(Context, State);
		EnterRule(_localctx, 934, RULE_badExplosion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3407; Match(T__427);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RingExplosionContext : ParserRuleContext {
		public RingExplosionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ringExplosion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRingExplosion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRingExplosion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRingExplosion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RingExplosionContext ringExplosion() {
		RingExplosionContext _localctx = new RingExplosionContext(Context, State);
		EnterRule(_localctx, 936, RULE_ringExplosion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3409; Match(T__428);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoodPickupEffectContext : ParserRuleContext {
		public GoodPickupEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goodPickupEffect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGoodPickupEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGoodPickupEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodPickupEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoodPickupEffectContext goodPickupEffect() {
		GoodPickupEffectContext _localctx = new GoodPickupEffectContext(Context, State);
		EnterRule(_localctx, 938, RULE_goodPickupEffect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3411; Match(T__429);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BadPickupEffectContext : ParserRuleContext {
		public BadPickupEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_badPickupEffect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBadPickupEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBadPickupEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadPickupEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BadPickupEffectContext badPickupEffect() {
		BadPickupEffectContext _localctx = new BadPickupEffectContext(Context, State);
		EnterRule(_localctx, 940, RULE_badPickupEffect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3413; Match(T__430);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuffImpactSoundContext : ParserRuleContext {
		public DebuffImpactSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuffImpactSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDebuffImpactSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDebuffImpactSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebuffImpactSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebuffImpactSoundContext debuffImpactSound() {
		DebuffImpactSoundContext _localctx = new DebuffImpactSoundContext(Context, State);
		EnterRule(_localctx, 942, RULE_debuffImpactSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3415; Match(T__431);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuffImpactSoundContext : ParserRuleContext {
		public BuffImpactSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buffImpactSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBuffImpactSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBuffImpactSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuffImpactSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuffImpactSoundContext buffImpactSound() {
		BuffImpactSoundContext _localctx = new BuffImpactSoundContext(Context, State);
		EnterRule(_localctx, 944, RULE_buffImpactSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3417; Match(T__432);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RingExplosionSoundContext : ParserRuleContext {
		public RingExplosionSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ringExplosionSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRingExplosionSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRingExplosionSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRingExplosionSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RingExplosionSoundContext ringExplosionSound() {
		RingExplosionSoundContext _localctx = new RingExplosionSoundContext(Context, State);
		EnterRule(_localctx, 946, RULE_ringExplosionSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3419; Match(T__433);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuffExplosionSoundContext : ParserRuleContext {
		public BuffExplosionSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buffExplosionSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBuffExplosionSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBuffExplosionSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuffExplosionSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuffExplosionSoundContext buffExplosionSound() {
		BuffExplosionSoundContext _localctx = new BuffExplosionSoundContext(Context, State);
		EnterRule(_localctx, 948, RULE_buffExplosionSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3421; Match(T__434);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplosionSoundContext : ParserRuleContext {
		public ExplosionSoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explosionSound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterExplosionSound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitExplosionSound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplosionSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplosionSoundContext explosionSound() {
		ExplosionSoundContext _localctx = new ExplosionSoundContext(Context, State);
		EnterRule(_localctx, 950, RULE_explosionSound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3423; Match(T__435);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IconReevaluationContext : ParserRuleContext {
		public VisibleToAndPositionContext visibleToAndPosition() {
			return GetRuleContext<VisibleToAndPositionContext>(0);
		}
		public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		public VisibleToContext visibleTo() {
			return GetRuleContext<VisibleToContext>(0);
		}
		public NoneContext none() {
			return GetRuleContext<NoneContext>(0);
		}
		public IconReevaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iconReevaluation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIconReevaluation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIconReevaluation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIconReevaluation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IconReevaluationContext iconReevaluation() {
		IconReevaluationContext _localctx = new IconReevaluationContext(Context, State);
		EnterRule(_localctx, 952, RULE_iconReevaluation);
		try {
			State = 3429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__436:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3425; visibleToAndPosition();
				}
				break;
			case T__437:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3426; position();
				}
				break;
			case T__385:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3427; visibleTo();
				}
				break;
			case T__360:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3428; none();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibleToAndPositionContext : ParserRuleContext {
		public VisibleToAndPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibleToAndPosition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVisibleToAndPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVisibleToAndPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibleToAndPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibleToAndPositionContext visibleToAndPosition() {
		VisibleToAndPositionContext _localctx = new VisibleToAndPositionContext(Context, State);
		EnterRule(_localctx, 954, RULE_visibleToAndPosition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3431; Match(T__436);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(Context, State);
		EnterRule(_localctx, 956, RULE_position);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3433; Match(T__437);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InWorldTextClippingContext : ParserRuleContext {
		public ClipAgainstSurfacesContext clipAgainstSurfaces() {
			return GetRuleContext<ClipAgainstSurfacesContext>(0);
		}
		public DoNotClipContext doNotClip() {
			return GetRuleContext<DoNotClipContext>(0);
		}
		public InWorldTextClippingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inWorldTextClipping; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterInWorldTextClipping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitInWorldTextClipping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInWorldTextClipping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InWorldTextClippingContext inWorldTextClipping() {
		InWorldTextClippingContext _localctx = new InWorldTextClippingContext(Context, State);
		EnterRule(_localctx, 958, RULE_inWorldTextClipping);
		try {
			State = 3437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__438:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3435; clipAgainstSurfaces();
				}
				break;
			case T__439:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3436; doNotClip();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClipAgainstSurfacesContext : ParserRuleContext {
		public ClipAgainstSurfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clipAgainstSurfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterClipAgainstSurfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitClipAgainstSurfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClipAgainstSurfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClipAgainstSurfacesContext clipAgainstSurfaces() {
		ClipAgainstSurfacesContext _localctx = new ClipAgainstSurfacesContext(Context, State);
		EnterRule(_localctx, 960, RULE_clipAgainstSurfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3439; Match(T__438);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoNotClipContext : ParserRuleContext {
		public DoNotClipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doNotClip; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDoNotClip(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDoNotClip(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoNotClip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoNotClipContext doNotClip() {
		DoNotClipContext _localctx = new DoNotClipContext(Context, State);
		EnterRule(_localctx, 962, RULE_doNotClip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3441; Match(T__439);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InWorldTextReevaluationContext : ParserRuleContext {
		public VisibleToPositionAndStringContext visibleToPositionAndString() {
			return GetRuleContext<VisibleToPositionAndStringContext>(0);
		}
		public VisibleToAndStringContext visibleToAndString() {
			return GetRuleContext<VisibleToAndStringContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public InWorldTextReevaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inWorldTextReevaluation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterInWorldTextReevaluation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitInWorldTextReevaluation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInWorldTextReevaluation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InWorldTextReevaluationContext inWorldTextReevaluation() {
		InWorldTextReevaluationContext _localctx = new InWorldTextReevaluationContext(Context, State);
		EnterRule(_localctx, 964, RULE_inWorldTextReevaluation);
		try {
			State = 3446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__440:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3443; visibleToPositionAndString();
				}
				break;
			case T__387:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3444; visibleToAndString();
				}
				break;
			case T__265:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3445; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibleToPositionAndStringContext : ParserRuleContext {
		public VisibleToPositionAndStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibleToPositionAndString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVisibleToPositionAndString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVisibleToPositionAndString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibleToPositionAndString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibleToPositionAndStringContext visibleToPositionAndString() {
		VisibleToPositionAndStringContext _localctx = new VisibleToPositionAndStringContext(Context, State);
		EnterRule(_localctx, 966, RULE_visibleToPositionAndString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3448; Match(T__440);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCompartorOperatorContext : ParserRuleContext {
		public BinaryCompartorOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCompartorOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBinaryCompartorOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBinaryCompartorOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompartorOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCompartorOperatorContext binaryCompartorOperator() {
		BinaryCompartorOperatorContext _localctx = new BinaryCompartorOperatorContext(Context, State);
		EnterRule(_localctx, 968, RULE_binaryCompartorOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3450;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (T__441 - 442)) | (1L << (T__442 - 442)) | (1L << (T__443 - 442)) | (1L << (T__444 - 442)) | (1L << (T__445 - 442)) | (1L << (T__446 - 442)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1CE', '\xD7F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x4', '\x1BD', '\t', '\x1BD', 
		'\x4', '\x1BE', '\t', '\x1BE', '\x4', '\x1BF', '\t', '\x1BF', '\x4', '\x1C0', 
		'\t', '\x1C0', '\x4', '\x1C1', '\t', '\x1C1', '\x4', '\x1C2', '\t', '\x1C2', 
		'\x4', '\x1C3', '\t', '\x1C3', '\x4', '\x1C4', '\t', '\x1C4', '\x4', '\x1C5', 
		'\t', '\x1C5', '\x4', '\x1C6', '\t', '\x1C6', '\x4', '\x1C7', '\t', '\x1C7', 
		'\x4', '\x1C8', '\t', '\x1C8', '\x4', '\x1C9', '\t', '\x1C9', '\x4', '\x1CA', 
		'\t', '\x1CA', '\x4', '\x1CB', '\t', '\x1CB', '\x4', '\x1CC', '\t', '\x1CC', 
		'\x4', '\x1CD', '\t', '\x1CD', '\x4', '\x1CE', '\t', '\x1CE', '\x4', '\x1CF', 
		'\t', '\x1CF', '\x4', '\x1D0', '\t', '\x1D0', '\x4', '\x1D1', '\t', '\x1D1', 
		'\x4', '\x1D2', '\t', '\x1D2', '\x4', '\x1D3', '\t', '\x1D3', '\x4', '\x1D4', 
		'\t', '\x1D4', '\x4', '\x1D5', '\t', '\x1D5', '\x4', '\x1D6', '\t', '\x1D6', 
		'\x4', '\x1D7', '\t', '\x1D7', '\x4', '\x1D8', '\t', '\x1D8', '\x4', '\x1D9', 
		'\t', '\x1D9', '\x4', '\x1DA', '\t', '\x1DA', '\x4', '\x1DB', '\t', '\x1DB', 
		'\x4', '\x1DC', '\t', '\x1DC', '\x4', '\x1DD', '\t', '\x1DD', '\x4', '\x1DE', 
		'\t', '\x1DE', '\x4', '\x1DF', '\t', '\x1DF', '\x4', '\x1E0', '\t', '\x1E0', 
		'\x4', '\x1E1', '\t', '\x1E1', '\x4', '\x1E2', '\t', '\x1E2', '\x4', '\x1E3', 
		'\t', '\x1E3', '\x4', '\x1E4', '\t', '\x1E4', '\x4', '\x1E5', '\t', '\x1E5', 
		'\x4', '\x1E6', '\t', '\x1E6', '\x3', '\x2', '\a', '\x2', '\x3CE', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x3D1', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x3DC', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x3DF', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x3EF', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x41A', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x41D', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x42B', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x42E', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x48D', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		'<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 
		'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 
		'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x797', 
		'\n', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', 
		'\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', 
		'\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'r', 
		'\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 't', '\x3', 't', '\x3', 't', 
		'\x3', 't', '\x3', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', 
		'\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'x', 
		'\x3', 'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', 
		'\x3', 'y', '\x3', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', 
		'\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '}', 
		'\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x3', '}', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x3', 
		'\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', 
		'\x83', '\x3', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x90', '\x3', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x3', 
		'\x93', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', 
		'\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA2', '\x3', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', 
		'\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', 
		'\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAB', '\x3', 
		'\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', 
		'\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', 
		'\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x3', 
		'\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB7', '\x3', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', 
		'\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCF', '\x3', 
		'\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD7', '\x3', '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', 
		'\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', 
		'\xE4', '\x3', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE9', '\x3', 
		'\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEB', '\x3', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xED', '\x3', '\xED', '\x3', 
		'\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', 
		'\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', 
		'\xEF', '\x3', '\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', 
		'\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', 
		'\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', 
		'\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', 
		'\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF5', '\x3', '\xF5', '\x3', 
		'\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', 
		'\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', 
		'\xF7', '\x3', '\xF7', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', 
		'\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x3', '\xFF', '\x3', '\x100', '\x3', '\x100', '\x3', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', 
		'\x101', '\x3', '\x101', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x105', '\x3', 
		'\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x106', 
		'\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', 
		'\x106', '\x3', '\x106', '\x3', '\x107', '\x3', '\x107', '\x3', '\x107', 
		'\x3', '\x107', '\x3', '\x107', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', 
		'\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', 
		'\x109', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', 
		'\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10B', '\x3', '\x10B', 
		'\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', 
		'\x3', '\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', 
		'\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', 
		'\x3', '\x111', '\x3', '\x111', '\x3', '\x112', '\x3', '\x112', '\x3', 
		'\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', 
		'\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x114', '\x3', '\x114', 
		'\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x115', '\x3', 
		'\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', 
		'\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', 
		'\x3', '\x117', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x3', '\x118', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x3', '\x119', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x5', 
		'\x11C', '\xB34', '\n', '\x11C', '\x3', '\x11D', '\x3', '\x11D', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x5', '\x120', '\xB5A', '\n', '\x120', 
		'\x3', '\x121', '\x3', '\x121', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x123', '\x3', '\x123', '\x3', '\x124', '\x3', '\x124', '\x3', '\x125', 
		'\x3', '\x125', '\x3', '\x126', '\x3', '\x126', '\x3', '\x127', '\x3', 
		'\x127', '\x3', '\x128', '\x3', '\x128', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12B', '\x3', '\x12B', '\x3', 
		'\x12C', '\x3', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12E', 
		'\x3', '\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x130', '\x3', 
		'\x130', '\x3', '\x131', '\x3', '\x131', '\x3', '\x132', '\x3', '\x132', 
		'\x3', '\x133', '\x3', '\x133', '\x3', '\x134', '\x3', '\x134', '\x3', 
		'\x135', '\x3', '\x135', '\x3', '\x136', '\x3', '\x136', '\x3', '\x137', 
		'\x3', '\x137', '\x3', '\x138', '\x3', '\x138', '\x3', '\x139', '\x3', 
		'\x139', '\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13B', '\x3', '\x13B', 
		'\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\xBA2', '\n', 
		'\x13F', '\x3', '\x140', '\x3', '\x140', '\x3', '\x141', '\x3', '\x141', 
		'\x3', '\x142', '\x3', '\x142', '\x3', '\x143', '\x3', '\x143', '\x3', 
		'\x144', '\x3', '\x144', '\x3', '\x145', '\x3', '\x145', '\x3', '\x146', 
		'\x3', '\x146', '\x3', '\x147', '\x3', '\x147', '\x3', '\x148', '\x3', 
		'\x148', '\x3', '\x149', '\x3', '\x149', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x5', '\x14A', '\xBC0', '\n', '\x14A', '\x3', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14D', 
		'\x3', '\x14D', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x150', '\x3', '\x150', '\x3', '\x151', '\x3', '\x151', 
		'\x3', '\x152', '\x3', '\x152', '\x3', '\x153', '\x3', '\x153', '\x3', 
		'\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', 
		'\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', 
		'\x153', '\x3', '\x153', '\x3', '\x153', '\x5', '\x153', '\xBE0', '\n', 
		'\x153', '\x3', '\x154', '\x3', '\x154', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x156', '\x3', '\x156', '\x3', '\x157', '\x3', '\x157', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x159', '\x3', '\x159', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15C', '\x3', 
		'\x15C', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x160', '\x3', '\x160', '\x3', 
		'\x161', '\x3', '\x161', '\x3', '\x162', '\x3', '\x162', '\x3', '\x162', 
		'\x5', '\x162', '\xC01', '\n', '\x162', '\x3', '\x163', '\x3', '\x163', 
		'\x3', '\x164', '\x3', '\x164', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x166', '\x3', '\x166', '\x5', '\x166', '\xC0B', '\n', '\x166', '\x3', 
		'\x167', '\x3', '\x167', '\x3', '\x168', '\x3', '\x168', '\x3', '\x169', 
		'\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x5', '\x169', '\xC15', 
		'\n', '\x169', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16D', '\x3', '\x16D', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x5', '\x16E', '\xC22', 
		'\n', '\x16E', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x171', '\x3', '\x171', '\x3', '\x172', '\x3', '\x172', 
		'\x5', '\x172', '\xC2C', '\n', '\x172', '\x3', '\x173', '\x3', '\x173', 
		'\x3', '\x174', '\x3', '\x174', '\x3', '\x175', '\x3', '\x175', '\x5', 
		'\x175', '\xC34', '\n', '\x175', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x177', '\x3', '\x177', '\x3', '\x178', '\x3', '\x178', '\x5', '\x178', 
		'\xC3C', '\n', '\x178', '\x3', '\x179', '\x3', '\x179', '\x3', '\x17A', 
		'\x3', '\x17A', '\x5', '\x17A', '\xC42', '\n', '\x17A', '\x3', '\x17B', 
		'\x3', '\x17B', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', 
		'\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', 
		'\x3', '\x17D', '\x5', '\x17D', '\xC58', '\n', '\x17D', '\x3', '\x17E', 
		'\x3', '\x17E', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x180', '\x3', 
		'\x180', '\x3', '\x181', '\x3', '\x181', '\x3', '\x182', '\x3', '\x182', 
		'\x3', '\x183', '\x3', '\x183', '\x3', '\x184', '\x3', '\x184', '\x3', 
		'\x185', '\x3', '\x185', '\x3', '\x186', '\x3', '\x186', '\x3', '\x187', 
		'\x3', '\x187', '\x3', '\x188', '\x3', '\x188', '\x3', '\x189', '\x3', 
		'\x189', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18B', '\x3', '\x18B', 
		'\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18D', '\x3', '\x18D', '\x3', 
		'\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', 
		'\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x5', '\x18E', '\xC82', 
		'\n', '\x18E', '\x3', '\x18F', '\x3', '\x18F', '\x3', '\x190', '\x3', 
		'\x190', '\x3', '\x191', '\x3', '\x191', '\x3', '\x192', '\x3', '\x192', 
		'\x3', '\x193', '\x3', '\x193', '\x3', '\x194', '\x3', '\x194', '\x3', 
		'\x195', '\x3', '\x195', '\x3', '\x196', '\x3', '\x196', '\x3', '\x197', 
		'\x3', '\x197', '\x3', '\x197', '\x3', '\x197', '\x5', '\x197', '\xC98', 
		'\n', '\x197', '\x3', '\x198', '\x3', '\x198', '\x3', '\x199', '\x3', 
		'\x199', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x5', '\x19B', '\xCA3', '\n', '\x19B', '\x3', '\x19C', 
		'\x3', '\x19C', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19E', '\x3', 
		'\x19E', '\x3', '\x19F', '\x3', '\x19F', '\x5', '\x19F', '\xCAD', '\n', 
		'\x19F', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A1', '\x3', '\x1A1', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x5', '\x1A2', '\xCD7', '\n', '\x1A2', '\x3', '\x1A3', '\x3', '\x1A3', 
		'\x3', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A5', '\x3', '\x1A5', '\x3', 
		'\x1A6', '\x3', '\x1A6', '\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A8', 
		'\x3', '\x1A8', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1AA', '\x3', 
		'\x1AA', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', 
		'\x1AF', '\x3', '\x1AF', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B1', 
		'\x3', '\x1B1', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B3', '\x3', 
		'\x1B3', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B5', '\x3', '\x1B5', 
		'\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', 
		'\x1B8', '\x3', '\x1B8', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1BA', 
		'\x3', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', '\x1BC', '\x3', 
		'\x1BC', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BE', '\x3', '\x1BE', 
		'\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C3', 
		'\x3', '\x1C3', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C5', '\x3', 
		'\x1C5', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C7', '\x3', '\x1C7', 
		'\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', 
		'\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', 
		'\x5', '\x1C7', '\xD2C', '\n', '\x1C7', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1CA', '\x3', '\x1CA', '\x3', 
		'\x1CB', '\x3', '\x1CB', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CD', 
		'\x3', '\x1CD', '\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CF', '\x3', 
		'\x1CF', '\x3', '\x1D0', '\x3', '\x1D0', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D3', '\x3', '\x1D3', '\x3', 
		'\x1D3', '\x3', '\x1D3', '\x3', '\x1D3', '\x3', '\x1D3', '\x3', '\x1D3', 
		'\x3', '\x1D3', '\x3', '\x1D3', '\x3', '\x1D3', '\x5', '\x1D3', '\xD4E', 
		'\n', '\x1D3', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D5', '\x3', 
		'\x1D5', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DC', 
		'\x3', '\x1DC', '\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DE', '\x3', 
		'\x1DE', '\x3', '\x1DE', '\x3', '\x1DE', '\x5', '\x1DE', '\xD68', '\n', 
		'\x1DE', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E1', '\x3', '\x1E1', '\x5', '\x1E1', '\xD70', '\n', '\x1E1', 
		'\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E3', '\x3', '\x1E3', '\x3', 
		'\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x5', '\x1E4', '\xD79', '\n', 
		'\x1E4', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E6', '\x3', '\x1E6', 
		'\x3', '\x1E6', '\x2', '\x2', '\x1E7', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', 
		'\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', 
		'\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', 
		'\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', 
		'\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', 
		'\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', 
		'\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', 
		'\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', 
		'\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', 
		'\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', 
		'\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', 
		'\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', 
		'\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', 
		'\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', '\x26E', '\x270', 
		'\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', '\x27E', '\x280', 
		'\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', '\x28E', '\x290', 
		'\x292', '\x294', '\x296', '\x298', '\x29A', '\x29C', '\x29E', '\x2A0', 
		'\x2A2', '\x2A4', '\x2A6', '\x2A8', '\x2AA', '\x2AC', '\x2AE', '\x2B0', 
		'\x2B2', '\x2B4', '\x2B6', '\x2B8', '\x2BA', '\x2BC', '\x2BE', '\x2C0', 
		'\x2C2', '\x2C4', '\x2C6', '\x2C8', '\x2CA', '\x2CC', '\x2CE', '\x2D0', 
		'\x2D2', '\x2D4', '\x2D6', '\x2D8', '\x2DA', '\x2DC', '\x2DE', '\x2E0', 
		'\x2E2', '\x2E4', '\x2E6', '\x2E8', '\x2EA', '\x2EC', '\x2EE', '\x2F0', 
		'\x2F2', '\x2F4', '\x2F6', '\x2F8', '\x2FA', '\x2FC', '\x2FE', '\x300', 
		'\x302', '\x304', '\x306', '\x308', '\x30A', '\x30C', '\x30E', '\x310', 
		'\x312', '\x314', '\x316', '\x318', '\x31A', '\x31C', '\x31E', '\x320', 
		'\x322', '\x324', '\x326', '\x328', '\x32A', '\x32C', '\x32E', '\x330', 
		'\x332', '\x334', '\x336', '\x338', '\x33A', '\x33C', '\x33E', '\x340', 
		'\x342', '\x344', '\x346', '\x348', '\x34A', '\x34C', '\x34E', '\x350', 
		'\x352', '\x354', '\x356', '\x358', '\x35A', '\x35C', '\x35E', '\x360', 
		'\x362', '\x364', '\x366', '\x368', '\x36A', '\x36C', '\x36E', '\x370', 
		'\x372', '\x374', '\x376', '\x378', '\x37A', '\x37C', '\x37E', '\x380', 
		'\x382', '\x384', '\x386', '\x388', '\x38A', '\x38C', '\x38E', '\x390', 
		'\x392', '\x394', '\x396', '\x398', '\x39A', '\x39C', '\x39E', '\x3A0', 
		'\x3A2', '\x3A4', '\x3A6', '\x3A8', '\x3AA', '\x3AC', '\x3AE', '\x3B0', 
		'\x3B2', '\x3B4', '\x3B6', '\x3B8', '\x3BA', '\x3BC', '\x3BE', '\x3C0', 
		'\x3C2', '\x3C4', '\x3C6', '\x3C8', '\x3CA', '\x2', '\x5', '\x4', '\x2', 
		'\x1C2', '\x1C4', '\x1C8', '\x1C8', '\x4', '\x2', '\x1C6', '\x1C6', '\x1C9', 
		'\x1CC', '\x3', '\x2', '\x1BC', '\x1C1', '\x2', '\xD4D', '\x2', '\x3CF', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x3D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\b', '\x3EE', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\f', '\x3F2', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x3F8', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\x12', '\x404', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x16', '\x410', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x416', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x420', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x425', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x48C', '\x3', '\x2', '\x2', '\x2', ' ', '\x48E', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x495', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x497', '\x3', '\x2', '\x2', '\x2', '&', '\x49C', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x49E', '\x3', '\x2', '\x2', '\x2', '*', '\x4A0', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x4A7', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x4B4', '\x3', '\x2', '\x2', '\x2', '\x30', '\x4BB', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x34', '\x4D1', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x4DE', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x4EB', '\x3', '\x2', '\x2', '\x2', ':', '\x4F2', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x4F9', '\x3', '\x2', '\x2', '\x2', '>', '\x508', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x51F', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x44', '\x53D', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x546', '\x3', '\x2', '\x2', '\x2', 'H', '\x548', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x54D', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x552', '\x3', '\x2', '\x2', '\x2', 'N', '\x557', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x559', '\x3', '\x2', '\x2', '\x2', 'R', '\x55B', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x55D', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x55F', '\x3', '\x2', '\x2', '\x2', 'X', '\x564', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x569', '\x3', '\x2', '\x2', '\x2', '\\', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x573', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x575', '\x3', '\x2', '\x2', '\x2', '\x62', '\x577', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x579', '\x3', '\x2', '\x2', '\x2', '\x66', '\x57E', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x580', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x585', '\x3', '\x2', '\x2', '\x2', 'l', '\x58A', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x591', '\x3', '\x2', '\x2', '\x2', 'p', '\x593', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x595', '\x3', '\x2', '\x2', '\x2', 
		't', '\x597', '\x3', '\x2', '\x2', '\x2', 'v', '\x59C', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x59E', '\x3', '\x2', '\x2', '\x2', 'z', '\x5A3', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x5A8', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x5AA', '\x3', '\x2', '\x2', '\x2', '\x80', '\x5B3', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x84', '\x5BC', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x5C1', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x5C5', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x5CE', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x5D9', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x5E4', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\x94', '\x5F8', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x5FA', '\x3', '\x2', '\x2', '\x2', '\x98', '\x607', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x60E', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x615', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x61A', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x61F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x62B', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x632', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x639', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x640', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x649', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x652', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x659', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x660', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x667', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x66C', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x673', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x67A', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x683', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x68A', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x691', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x69A', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x6A5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x6AC', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x6BA', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x6C1', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x6D1', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x6DF', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x796', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x798', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x7A1', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x7AD', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x7B2', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x7B9', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x7C3', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\x7C8', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x7D2', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x7DB', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\x7E2', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\x7E9', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x7F0', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x7FB', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x7FD', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x804', '\x3', '\x2', '\x2', '\x2', '\x102', '\x80D', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x812', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x817', '\x3', '\x2', '\x2', '\x2', '\x108', '\x819', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x823', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x828', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x82F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x831', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x838', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x83F', '\x3', '\x2', '\x2', '\x2', '\x118', '\x846', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x84D', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x854', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x856', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x858', '\x3', '\x2', '\x2', '\x2', '\x122', '\x85D', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x85F', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x861', '\x3', '\x2', '\x2', '\x2', '\x128', '\x866', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x86B', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x872', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x879', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x87E', '\x3', '\x2', '\x2', '\x2', '\x132', '\x883', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x885', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x88A', '\x3', '\x2', '\x2', '\x2', '\x138', '\x891', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x896', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x89B', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x8A0', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x8A5', '\x3', '\x2', '\x2', '\x2', '\x142', '\x8AA', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x8AF', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x8B6', '\x3', '\x2', '\x2', '\x2', '\x148', '\x8BB', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x8C0', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x8C7', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x8CC', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x8CE', '\x3', '\x2', '\x2', '\x2', '\x152', '\x8D0', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x8D7', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x8DE', '\x3', '\x2', '\x2', '\x2', '\x158', '\x8E3', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x8E8', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x8ED', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x8EF', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x162', '\x8F6', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x8FB', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x900', '\x3', '\x2', '\x2', '\x2', '\x168', '\x905', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x90A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x90F', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x911', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x918', '\x3', '\x2', '\x2', '\x2', '\x172', '\x91D', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x926', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x928', '\x3', '\x2', '\x2', '\x2', '\x178', '\x92D', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x936', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x938', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x93D', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x942', '\x3', '\x2', '\x2', '\x2', '\x182', '\x947', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x94C', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x951', '\x3', '\x2', '\x2', '\x2', '\x188', '\x956', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x95B', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x960', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x965', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x192', '\x973', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x978', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x97D', '\x3', '\x2', '\x2', '\x2', '\x198', '\x982', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x984', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x986', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x988', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x98A', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x98C', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x991', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x993', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x995', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x99E', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x9A0', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x9A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\x9A9', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x9AE', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\x9BC', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x9C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x9C8', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x9CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x9D2', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x9D7', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x9DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x9E1', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x9E6', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x9ED', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x9F2', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x9F7', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x9FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x9FE', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\xA03', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\xA08', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\xA0F', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\xA11', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\xA13', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\xA18', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\xA1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\xA26', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\xA2D', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\xA36', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\xA3D', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\xA48', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\xA4A', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\xA4F', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\xA56', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\xA5D', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\xA64', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\xA69', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\xA6E', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\xA7B', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\xA88', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\xA95', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE', '\xA9C', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\xA9E', '\x3', '\x2', '\x2', '\x2', '\x202', '\xAA5', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\xAAA', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\xAAF', '\x3', '\x2', '\x2', '\x2', '\x208', '\xAB4', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\xAB9', '\x3', '\x2', '\x2', '\x2', '\x20C', '\xAC0', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\xAC5', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\xACC', '\x3', '\x2', '\x2', '\x2', '\x212', '\xAD1', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\xADC', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\xAE3', '\x3', '\x2', '\x2', '\x2', '\x218', '\xAE8', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\xAED', '\x3', '\x2', '\x2', '\x2', '\x21C', '\xAF2', 
		'\x3', '\x2', '\x2', '\x2', '\x21E', '\xAF4', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\xAF9', '\x3', '\x2', '\x2', '\x2', '\x222', '\xAFB', '\x3', 
		'\x2', '\x2', '\x2', '\x224', '\xB02', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\xB09', '\x3', '\x2', '\x2', '\x2', '\x228', '\xB0E', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\xB13', '\x3', '\x2', '\x2', '\x2', '\x22C', '\xB15', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\xB1E', '\x3', '\x2', '\x2', '\x2', 
		'\x230', '\xB23', '\x3', '\x2', '\x2', '\x2', '\x232', '\xB28', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\xB2D', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\xB33', '\x3', '\x2', '\x2', '\x2', '\x238', '\xB35', '\x3', '\x2', '\x2', 
		'\x2', '\x23A', '\xB37', '\x3', '\x2', '\x2', '\x2', '\x23C', '\xB39', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\xB59', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\xB5B', '\x3', '\x2', '\x2', '\x2', '\x242', '\xB5D', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\xB5F', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\xB61', '\x3', '\x2', '\x2', '\x2', '\x248', '\xB63', '\x3', '\x2', '\x2', 
		'\x2', '\x24A', '\xB65', '\x3', '\x2', '\x2', '\x2', '\x24C', '\xB67', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\xB69', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\xB6B', '\x3', '\x2', '\x2', '\x2', '\x252', '\xB6D', '\x3', 
		'\x2', '\x2', '\x2', '\x254', '\xB6F', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\xB71', '\x3', '\x2', '\x2', '\x2', '\x258', '\xB73', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\xB75', '\x3', '\x2', '\x2', '\x2', '\x25C', '\xB77', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\xB79', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\xB7B', '\x3', '\x2', '\x2', '\x2', '\x262', '\xB7D', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\xB7F', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\xB81', '\x3', '\x2', '\x2', '\x2', '\x268', '\xB83', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\xB85', '\x3', '\x2', '\x2', '\x2', '\x26C', '\xB87', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\xB89', '\x3', '\x2', '\x2', '\x2', 
		'\x270', '\xB8B', '\x3', '\x2', '\x2', '\x2', '\x272', '\xB8D', '\x3', 
		'\x2', '\x2', '\x2', '\x274', '\xB8F', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\xB91', '\x3', '\x2', '\x2', '\x2', '\x278', '\xB93', '\x3', '\x2', '\x2', 
		'\x2', '\x27A', '\xB95', '\x3', '\x2', '\x2', '\x2', '\x27C', '\xBA1', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\xBA3', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\xBA5', '\x3', '\x2', '\x2', '\x2', '\x282', '\xBA7', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\xBA9', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\xBAB', '\x3', '\x2', '\x2', '\x2', '\x288', '\xBAD', '\x3', '\x2', '\x2', 
		'\x2', '\x28A', '\xBAF', '\x3', '\x2', '\x2', '\x2', '\x28C', '\xBB1', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\xBB3', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\xBB5', '\x3', '\x2', '\x2', '\x2', '\x292', '\xBBF', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\xBC1', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\xBC3', '\x3', '\x2', '\x2', '\x2', '\x298', '\xBC5', '\x3', '\x2', '\x2', 
		'\x2', '\x29A', '\xBC7', '\x3', '\x2', '\x2', '\x2', '\x29C', '\xBC9', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\xBCB', '\x3', '\x2', '\x2', '\x2', 
		'\x2A0', '\xBCD', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\xBCF', '\x3', 
		'\x2', '\x2', '\x2', '\x2A4', '\xBDF', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\xBE1', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\xBE3', '\x3', '\x2', '\x2', 
		'\x2', '\x2AA', '\xBE5', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\xBE7', 
		'\x3', '\x2', '\x2', '\x2', '\x2AE', '\xBE9', '\x3', '\x2', '\x2', '\x2', 
		'\x2B0', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\xBED', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', '\xBEF', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\xBF1', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\xBF3', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\xBF5', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\xBF7', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE', '\xBF9', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\xBFB', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\xC00', '\x3', 
		'\x2', '\x2', '\x2', '\x2C4', '\xC02', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\xC04', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\xC06', '\x3', '\x2', '\x2', 
		'\x2', '\x2CA', '\xC0A', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\xC0C', 
		'\x3', '\x2', '\x2', '\x2', '\x2CE', '\xC0E', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\xC14', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\xC16', '\x3', 
		'\x2', '\x2', '\x2', '\x2D4', '\xC18', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\xC1A', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\xC1C', '\x3', '\x2', '\x2', 
		'\x2', '\x2DA', '\xC21', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\xC23', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\xC25', '\x3', '\x2', '\x2', '\x2', 
		'\x2E0', '\xC27', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\xC2B', '\x3', 
		'\x2', '\x2', '\x2', '\x2E4', '\xC2D', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\xC2F', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\xC33', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\xC35', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\xC37', 
		'\x3', '\x2', '\x2', '\x2', '\x2EE', '\xC3B', '\x3', '\x2', '\x2', '\x2', 
		'\x2F0', '\xC3D', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\xC41', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\xC43', '\x3', '\x2', '\x2', '\x2', '\x2F6', 
		'\xC45', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\xC57', '\x3', '\x2', '\x2', 
		'\x2', '\x2FA', '\xC59', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\xC5B', 
		'\x3', '\x2', '\x2', '\x2', '\x2FE', '\xC5D', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\xC5F', '\x3', '\x2', '\x2', '\x2', '\x302', '\xC61', '\x3', 
		'\x2', '\x2', '\x2', '\x304', '\xC63', '\x3', '\x2', '\x2', '\x2', '\x306', 
		'\xC65', '\x3', '\x2', '\x2', '\x2', '\x308', '\xC67', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\xC69', '\x3', '\x2', '\x2', '\x2', '\x30C', '\xC6B', 
		'\x3', '\x2', '\x2', '\x2', '\x30E', '\xC6D', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\xC6F', '\x3', '\x2', '\x2', '\x2', '\x312', '\xC71', '\x3', 
		'\x2', '\x2', '\x2', '\x314', '\xC73', '\x3', '\x2', '\x2', '\x2', '\x316', 
		'\xC75', '\x3', '\x2', '\x2', '\x2', '\x318', '\xC77', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', '\xC81', '\x3', '\x2', '\x2', '\x2', '\x31C', '\xC83', 
		'\x3', '\x2', '\x2', '\x2', '\x31E', '\xC85', '\x3', '\x2', '\x2', '\x2', 
		'\x320', '\xC87', '\x3', '\x2', '\x2', '\x2', '\x322', '\xC89', '\x3', 
		'\x2', '\x2', '\x2', '\x324', '\xC8B', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\xC8D', '\x3', '\x2', '\x2', '\x2', '\x328', '\xC8F', '\x3', '\x2', '\x2', 
		'\x2', '\x32A', '\xC91', '\x3', '\x2', '\x2', '\x2', '\x32C', '\xC97', 
		'\x3', '\x2', '\x2', '\x2', '\x32E', '\xC99', '\x3', '\x2', '\x2', '\x2', 
		'\x330', '\xC9B', '\x3', '\x2', '\x2', '\x2', '\x332', '\xC9D', '\x3', 
		'\x2', '\x2', '\x2', '\x334', '\xCA2', '\x3', '\x2', '\x2', '\x2', '\x336', 
		'\xCA4', '\x3', '\x2', '\x2', '\x2', '\x338', '\xCA6', '\x3', '\x2', '\x2', 
		'\x2', '\x33A', '\xCA8', '\x3', '\x2', '\x2', '\x2', '\x33C', '\xCAC', 
		'\x3', '\x2', '\x2', '\x2', '\x33E', '\xCAE', '\x3', '\x2', '\x2', '\x2', 
		'\x340', '\xCB0', '\x3', '\x2', '\x2', '\x2', '\x342', '\xCD6', '\x3', 
		'\x2', '\x2', '\x2', '\x344', '\xCD8', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\xCDA', '\x3', '\x2', '\x2', '\x2', '\x348', '\xCDC', '\x3', '\x2', '\x2', 
		'\x2', '\x34A', '\xCDE', '\x3', '\x2', '\x2', '\x2', '\x34C', '\xCE0', 
		'\x3', '\x2', '\x2', '\x2', '\x34E', '\xCE2', '\x3', '\x2', '\x2', '\x2', 
		'\x350', '\xCE4', '\x3', '\x2', '\x2', '\x2', '\x352', '\xCE6', '\x3', 
		'\x2', '\x2', '\x2', '\x354', '\xCE8', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\xCEA', '\x3', '\x2', '\x2', '\x2', '\x358', '\xCEC', '\x3', '\x2', '\x2', 
		'\x2', '\x35A', '\xCEE', '\x3', '\x2', '\x2', '\x2', '\x35C', '\xCF0', 
		'\x3', '\x2', '\x2', '\x2', '\x35E', '\xCF2', '\x3', '\x2', '\x2', '\x2', 
		'\x360', '\xCF4', '\x3', '\x2', '\x2', '\x2', '\x362', '\xCF6', '\x3', 
		'\x2', '\x2', '\x2', '\x364', '\xCF8', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\xCFA', '\x3', '\x2', '\x2', '\x2', '\x368', '\xCFC', '\x3', '\x2', '\x2', 
		'\x2', '\x36A', '\xCFE', '\x3', '\x2', '\x2', '\x2', '\x36C', '\xD00', 
		'\x3', '\x2', '\x2', '\x2', '\x36E', '\xD02', '\x3', '\x2', '\x2', '\x2', 
		'\x370', '\xD04', '\x3', '\x2', '\x2', '\x2', '\x372', '\xD06', '\x3', 
		'\x2', '\x2', '\x2', '\x374', '\xD08', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\xD0A', '\x3', '\x2', '\x2', '\x2', '\x378', '\xD0C', '\x3', '\x2', '\x2', 
		'\x2', '\x37A', '\xD0E', '\x3', '\x2', '\x2', '\x2', '\x37C', '\xD10', 
		'\x3', '\x2', '\x2', '\x2', '\x37E', '\xD12', '\x3', '\x2', '\x2', '\x2', 
		'\x380', '\xD14', '\x3', '\x2', '\x2', '\x2', '\x382', '\xD16', '\x3', 
		'\x2', '\x2', '\x2', '\x384', '\xD18', '\x3', '\x2', '\x2', '\x2', '\x386', 
		'\xD1A', '\x3', '\x2', '\x2', '\x2', '\x388', '\xD1C', '\x3', '\x2', '\x2', 
		'\x2', '\x38A', '\xD1E', '\x3', '\x2', '\x2', '\x2', '\x38C', '\xD2B', 
		'\x3', '\x2', '\x2', '\x2', '\x38E', '\xD2D', '\x3', '\x2', '\x2', '\x2', 
		'\x390', '\xD2F', '\x3', '\x2', '\x2', '\x2', '\x392', '\xD31', '\x3', 
		'\x2', '\x2', '\x2', '\x394', '\xD33', '\x3', '\x2', '\x2', '\x2', '\x396', 
		'\xD35', '\x3', '\x2', '\x2', '\x2', '\x398', '\xD37', '\x3', '\x2', '\x2', 
		'\x2', '\x39A', '\xD39', '\x3', '\x2', '\x2', '\x2', '\x39C', '\xD3B', 
		'\x3', '\x2', '\x2', '\x2', '\x39E', '\xD3D', '\x3', '\x2', '\x2', '\x2', 
		'\x3A0', '\xD3F', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\xD41', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\xD4D', '\x3', '\x2', '\x2', '\x2', '\x3A6', 
		'\xD4F', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\xD51', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', '\xD53', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\xD55', 
		'\x3', '\x2', '\x2', '\x2', '\x3AE', '\xD57', '\x3', '\x2', '\x2', '\x2', 
		'\x3B0', '\xD59', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\xD5B', '\x3', 
		'\x2', '\x2', '\x2', '\x3B4', '\xD5D', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\xD5F', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\xD61', '\x3', '\x2', '\x2', 
		'\x2', '\x3BA', '\xD67', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\xD69', 
		'\x3', '\x2', '\x2', '\x2', '\x3BE', '\xD6B', '\x3', '\x2', '\x2', '\x2', 
		'\x3C0', '\xD6F', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\xD71', '\x3', 
		'\x2', '\x2', '\x2', '\x3C4', '\xD73', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\xD78', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\xD7A', '\x3', '\x2', '\x2', 
		'\x2', '\x3CA', '\xD7C', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CE', 
		'\x5', '\x4', '\x3', '\x2', '\x3CD', '\x3CC', '\x3', '\x2', '\x2', '\x2', 
		'\x3CE', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3CD', '\x3', 
		'\x2', '\x2', '\x2', '\x3CF', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D0', 
		'\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3CF', '\x3', '\x2', '\x2', 
		'\x2', '\x3D2', '\x3D3', '\a', '\x2', '\x2', '\x3', '\x3D3', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\a', '\x3', '\x2', '\x2', '\x3D5', 
		'\x3D6', '\a', '\x4', '\x2', '\x2', '\x3D6', '\x3D7', '\a', '\x1C9', '\x2', 
		'\x2', '\x3D7', '\x3D8', '\a', '\x5', '\x2', '\x2', '\x3D8', '\x3D9', 
		'\a', '\x6', '\x2', '\x2', '\x3D9', '\x3DB', '\x5', '\x6', '\x4', '\x2', 
		'\x3DA', '\x3DC', '\x5', '\x18', '\r', '\x2', '\x3DB', '\x3DA', '\x3', 
		'\x2', '\x2', '\x2', '\x3DB', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DC', 
		'\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3DD', '\x3DF', '\x5', '\x1C', 
		'\xF', '\x2', '\x3DE', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3DF', 
		'\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\x3', '\x2', '\x2', '\x2', 
		'\x3E0', '\x3E1', '\a', '\a', '\x2', '\x2', '\x3E1', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x3E2', '\x3E3', '\a', '\b', '\x2', '\x2', '\x3E3', '\x3E4', 
		'\a', '\x6', '\x2', '\x2', '\x3E4', '\x3E5', '\x5', '\b', '\x5', '\x2', 
		'\x3E5', '\x3E6', '\a', '\a', '\x2', '\x2', '\x3E6', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x3E7', '\x3EF', '\x5', '\n', '\x6', '\x2', '\x3E8', '\x3EF', 
		'\x5', '\f', '\a', '\x2', '\x3E9', '\x3EF', '\x5', '\xE', '\b', '\x2', 
		'\x3EA', '\x3EF', '\x5', '\x10', '\t', '\x2', '\x3EB', '\x3EF', '\x5', 
		'\x12', '\n', '\x2', '\x3EC', '\x3EF', '\x5', '\x14', '\v', '\x2', '\x3ED', 
		'\x3EF', '\x5', '\x16', '\f', '\x2', '\x3EE', '\x3E7', '\x3', '\x2', '\x2', 
		'\x2', '\x3EE', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3E9', 
		'\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EA', '\x3', '\x2', '\x2', '\x2', 
		'\x3EE', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EC', '\x3', 
		'\x2', '\x2', '\x2', '\x3EE', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3EF', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F1', '\a', '\t', '\x2', 
		'\x2', '\x3F1', '\v', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\a', 
		'\n', '\x2', '\x2', '\x3F3', '\x3F4', '\x5', '\x234', '\x11B', '\x2', 
		'\x3F4', '\x3F5', '\a', '\v', '\x2', '\x2', '\x3F5', '\x3F6', '\x5', '\x236', 
		'\x11C', '\x2', '\x3F6', '\x3F7', '\a', '\v', '\x2', '\x2', '\x3F7', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F9', '\a', '\f', '\x2', '\x2', 
		'\x3F9', '\x3FA', '\x5', '\x234', '\x11B', '\x2', '\x3FA', '\x3FB', '\a', 
		'\v', '\x2', '\x2', '\x3FB', '\x3FC', '\x5', '\x236', '\x11C', '\x2', 
		'\x3FC', '\x3FD', '\a', '\v', '\x2', '\x2', '\x3FD', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x3FE', '\x3FF', '\a', '\r', '\x2', '\x2', '\x3FF', '\x400', 
		'\x5', '\x234', '\x11B', '\x2', '\x400', '\x401', '\a', '\v', '\x2', '\x2', 
		'\x401', '\x402', '\x5', '\x236', '\x11C', '\x2', '\x402', '\x403', '\a', 
		'\v', '\x2', '\x2', '\x403', '\x11', '\x3', '\x2', '\x2', '\x2', '\x404', 
		'\x405', '\a', '\xE', '\x2', '\x2', '\x405', '\x406', '\x5', '\x234', 
		'\x11B', '\x2', '\x406', '\x407', '\a', '\v', '\x2', '\x2', '\x407', '\x408', 
		'\x5', '\x236', '\x11C', '\x2', '\x408', '\x409', '\a', '\v', '\x2', '\x2', 
		'\x409', '\x13', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40B', '\a', '\xF', 
		'\x2', '\x2', '\x40B', '\x40C', '\x5', '\x234', '\x11B', '\x2', '\x40C', 
		'\x40D', '\a', '\v', '\x2', '\x2', '\x40D', '\x40E', '\x5', '\x236', '\x11C', 
		'\x2', '\x40E', '\x40F', '\a', '\v', '\x2', '\x2', '\x40F', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x410', '\x411', '\a', '\x10', '\x2', '\x2', '\x411', 
		'\x412', '\x5', '\x234', '\x11B', '\x2', '\x412', '\x413', '\a', '\v', 
		'\x2', '\x2', '\x413', '\x414', '\x5', '\x236', '\x11C', '\x2', '\x414', 
		'\x415', '\a', '\v', '\x2', '\x2', '\x415', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x416', '\x417', '\a', '\x11', '\x2', '\x2', '\x417', '\x41B', 
		'\a', '\x6', '\x2', '\x2', '\x418', '\x41A', '\x5', '\x1A', '\xE', '\x2', 
		'\x419', '\x418', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41D', '\x3', 
		'\x2', '\x2', '\x2', '\x41B', '\x419', '\x3', '\x2', '\x2', '\x2', '\x41B', 
		'\x41C', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x41E', '\x3', '\x2', '\x2', 
		'\x2', '\x41D', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x41E', '\x41F', 
		'\a', '\a', '\x2', '\x2', '\x41F', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x420', '\x421', '\x5', '\xD6', 'l', '\x2', '\x421', '\x422', '\x5', 
		'\x3CA', '\x1E6', '\x2', '\x422', '\x423', '\x5', '\xD6', 'l', '\x2', 
		'\x423', '\x424', '\a', '\v', '\x2', '\x2', '\x424', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x425', '\x426', '\a', '\x12', '\x2', '\x2', '\x426', '\x42C', 
		'\a', '\x6', '\x2', '\x2', '\x427', '\x428', '\x5', '\x1E', '\x10', '\x2', 
		'\x428', '\x429', '\a', '\v', '\x2', '\x2', '\x429', '\x42B', '\x3', '\x2', 
		'\x2', '\x2', '\x42A', '\x427', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42E', 
		'\x3', '\x2', '\x2', '\x2', '\x42C', '\x42A', '\x3', '\x2', '\x2', '\x2', 
		'\x42C', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x42D', '\x42F', '\x3', 
		'\x2', '\x2', '\x2', '\x42E', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42F', 
		'\x430', '\a', '\a', '\x2', '\x2', '\x430', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x431', '\x48D', '\x5', ' ', '\x11', '\x2', '\x432', '\x48D', 
		'\x5', '\"', '\x12', '\x2', '\x433', '\x48D', '\x5', '$', '\x13', '\x2', 
		'\x434', '\x48D', '\x5', '&', '\x14', '\x2', '\x435', '\x48D', '\x5', 
		'(', '\x15', '\x2', '\x436', '\x48D', '\x5', '*', '\x16', '\x2', '\x437', 
		'\x48D', '\x5', ',', '\x17', '\x2', '\x438', '\x48D', '\x5', '.', '\x18', 
		'\x2', '\x439', '\x48D', '\x5', '\x30', '\x19', '\x2', '\x43A', '\x48D', 
		'\x5', '\x32', '\x1A', '\x2', '\x43B', '\x48D', '\x5', '\x34', '\x1B', 
		'\x2', '\x43C', '\x48D', '\x5', '\x36', '\x1C', '\x2', '\x43D', '\x48D', 
		'\x5', '\x38', '\x1D', '\x2', '\x43E', '\x48D', '\x5', ':', '\x1E', '\x2', 
		'\x43F', '\x48D', '\x5', '<', '\x1F', '\x2', '\x440', '\x48D', '\x5', 
		'>', ' ', '\x2', '\x441', '\x48D', '\x5', '@', '!', '\x2', '\x442', '\x48D', 
		'\x5', '\x42', '\"', '\x2', '\x443', '\x48D', '\x5', '\x44', '#', '\x2', 
		'\x444', '\x48D', '\x5', '\x46', '$', '\x2', '\x445', '\x48D', '\x5', 
		'H', '%', '\x2', '\x446', '\x48D', '\x5', 'J', '&', '\x2', '\x447', '\x48D', 
		'\x5', 'L', '\'', '\x2', '\x448', '\x48D', '\x5', 'N', '(', '\x2', '\x449', 
		'\x48D', '\x5', 'P', ')', '\x2', '\x44A', '\x48D', '\x5', 'R', '*', '\x2', 
		'\x44B', '\x48D', '\x5', 'T', '+', '\x2', '\x44C', '\x48D', '\x5', 'V', 
		',', '\x2', '\x44D', '\x48D', '\x5', 'X', '-', '\x2', '\x44E', '\x48D', 
		'\x5', 'Z', '.', '\x2', '\x44F', '\x48D', '\x5', '\\', '/', '\x2', '\x450', 
		'\x48D', '\x5', '^', '\x30', '\x2', '\x451', '\x48D', '\x5', '`', '\x31', 
		'\x2', '\x452', '\x48D', '\x5', '\x62', '\x32', '\x2', '\x453', '\x48D', 
		'\x5', '\x64', '\x33', '\x2', '\x454', '\x48D', '\x5', '\x66', '\x34', 
		'\x2', '\x455', '\x48D', '\x5', 'h', '\x35', '\x2', '\x456', '\x48D', 
		'\x5', 'j', '\x36', '\x2', '\x457', '\x48D', '\x5', 'l', '\x37', '\x2', 
		'\x458', '\x48D', '\x5', 'n', '\x38', '\x2', '\x459', '\x48D', '\x5', 
		'p', '\x39', '\x2', '\x45A', '\x48D', '\x5', 'r', ':', '\x2', '\x45B', 
		'\x48D', '\x5', 't', ';', '\x2', '\x45C', '\x48D', '\x5', 'v', '<', '\x2', 
		'\x45D', '\x48D', '\x5', 'x', '=', '\x2', '\x45E', '\x48D', '\x5', 'z', 
		'>', '\x2', '\x45F', '\x48D', '\x5', '|', '?', '\x2', '\x460', '\x48D', 
		'\x5', '~', '@', '\x2', '\x461', '\x48D', '\x5', '\x80', '\x41', '\x2', 
		'\x462', '\x48D', '\x5', '\x82', '\x42', '\x2', '\x463', '\x48D', '\x5', 
		'\x84', '\x43', '\x2', '\x464', '\x48D', '\x5', '\x86', '\x44', '\x2', 
		'\x465', '\x48D', '\x5', '\x88', '\x45', '\x2', '\x466', '\x48D', '\x5', 
		'\x8A', '\x46', '\x2', '\x467', '\x48D', '\x5', '\x8C', 'G', '\x2', '\x468', 
		'\x48D', '\x5', '\x8E', 'H', '\x2', '\x469', '\x48D', '\x5', '\x90', 'I', 
		'\x2', '\x46A', '\x48D', '\x5', '\x92', 'J', '\x2', '\x46B', '\x48D', 
		'\x5', '\x94', 'K', '\x2', '\x46C', '\x48D', '\x5', '\x96', 'L', '\x2', 
		'\x46D', '\x48D', '\x5', '\x98', 'M', '\x2', '\x46E', '\x48D', '\x5', 
		'\x9A', 'N', '\x2', '\x46F', '\x48D', '\x5', '\x9C', 'O', '\x2', '\x470', 
		'\x48D', '\x5', '\x9E', 'P', '\x2', '\x471', '\x48D', '\x5', '\xA0', 'Q', 
		'\x2', '\x472', '\x48D', '\x5', '\xA2', 'R', '\x2', '\x473', '\x48D', 
		'\x5', '\xA4', 'S', '\x2', '\x474', '\x48D', '\x5', '\xA6', 'T', '\x2', 
		'\x475', '\x48D', '\x5', '\xA8', 'U', '\x2', '\x476', '\x48D', '\x5', 
		'\xAA', 'V', '\x2', '\x477', '\x48D', '\x5', '\xAC', 'W', '\x2', '\x478', 
		'\x48D', '\x5', '\xAE', 'X', '\x2', '\x479', '\x48D', '\x5', '\xB0', 'Y', 
		'\x2', '\x47A', '\x48D', '\x5', '\xB2', 'Z', '\x2', '\x47B', '\x48D', 
		'\x5', '\xB4', '[', '\x2', '\x47C', '\x48D', '\x5', '\xB6', '\\', '\x2', 
		'\x47D', '\x48D', '\x5', '\xB8', ']', '\x2', '\x47E', '\x48D', '\x5', 
		'\xBA', '^', '\x2', '\x47F', '\x48D', '\x5', '\xBC', '_', '\x2', '\x480', 
		'\x48D', '\x5', '\xBE', '`', '\x2', '\x481', '\x48D', '\x5', '\xC0', '\x61', 
		'\x2', '\x482', '\x48D', '\x5', '\xC2', '\x62', '\x2', '\x483', '\x48D', 
		'\x5', '\xC4', '\x63', '\x2', '\x484', '\x48D', '\x5', '\xC6', '\x64', 
		'\x2', '\x485', '\x48D', '\x5', '\xC8', '\x65', '\x2', '\x486', '\x48D', 
		'\x5', '\xCA', '\x66', '\x2', '\x487', '\x48D', '\x5', '\xCC', 'g', '\x2', 
		'\x488', '\x48D', '\x5', '\xCE', 'h', '\x2', '\x489', '\x48D', '\x5', 
		'\xD0', 'i', '\x2', '\x48A', '\x48D', '\x5', '\xD2', 'j', '\x2', '\x48B', 
		'\x48D', '\x5', '\xD4', 'k', '\x2', '\x48C', '\x431', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x432', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x433', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x434', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x435', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x436', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x437', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x438', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x439', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x43B', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x43C', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x43E', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x440', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x441', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x442', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x444', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x445', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x446', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x447', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x448', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x449', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x44B', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x44C', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x44E', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x450', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x451', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x452', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x453', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x454', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x455', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x456', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x457', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x458', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x459', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x45A', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x45B', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x45C', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x45E', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x460', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x461', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x462', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x463', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x464', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x465', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x466', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x467', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x468', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x469', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x46B', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x46C', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x46E', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x470', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x471', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x472', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x473', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x474', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x475', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x476', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x477', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x478', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x479', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x47A', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x47B', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x47C', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x47E', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x480', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x481', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x482', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x483', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x484', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x485', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x486', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x487', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x488', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x489', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x48B', 
		'\x3', '\x2', '\x2', '\x2', '\x48D', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x48E', '\x48F', '\a', '\x13', '\x2', '\x2', '\x48F', '\x490', '\a', 
		'\x4', '\x2', '\x2', '\x490', '\x491', '\x5', '\x23A', '\x11E', '\x2', 
		'\x491', '\x492', '\a', '\x14', '\x2', '\x2', '\x492', '\x493', '\x5', 
		'\xD6', 'l', '\x2', '\x493', '\x494', '\a', '\x5', '\x2', '\x2', '\x494', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x495', '\x496', '\a', '\x15', '\x2', 
		'\x2', '\x496', '#', '\x3', '\x2', '\x2', '\x2', '\x497', '\x498', '\a', 
		'\x16', '\x2', '\x2', '\x498', '\x499', '\a', '\x4', '\x2', '\x2', '\x499', 
		'\x49A', '\x5', '\xD6', 'l', '\x2', '\x49A', '\x49B', '\a', '\x5', '\x2', 
		'\x2', '\x49B', '%', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x49D', '\a', 
		'\x17', '\x2', '\x2', '\x49D', '\'', '\x3', '\x2', '\x2', '\x2', '\x49E', 
		'\x49F', '\a', '\x18', '\x2', '\x2', '\x49F', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x4A0', '\x4A1', '\a', '\x19', '\x2', '\x2', '\x4A1', '\x4A2', 
		'\a', '\x4', '\x2', '\x2', '\x4A2', '\x4A3', '\x5', '\xD6', 'l', '\x2', 
		'\x4A3', '\x4A4', '\a', '\x14', '\x2', '\x2', '\x4A4', '\x4A5', '\x5', 
		'\x292', '\x14A', '\x2', '\x4A5', '\x4A6', '\a', '\x5', '\x2', '\x2', 
		'\x4A6', '+', '\x3', '\x2', '\x2', '\x2', '\x4A7', '\x4A8', '\a', '\x1A', 
		'\x2', '\x2', '\x4A8', '\x4A9', '\a', '\x4', '\x2', '\x2', '\x4A9', '\x4AA', 
		'\x5', '\xD6', 'l', '\x2', '\x4AA', '\x4AB', '\a', '\x14', '\x2', '\x2', 
		'\x4AB', '\x4AC', '\x5', '\xD6', 'l', '\x2', '\x4AC', '\x4AD', '\a', '\x14', 
		'\x2', '\x2', '\x4AD', '\x4AE', '\x5', '\xD6', 'l', '\x2', '\x4AE', '\x4AF', 
		'\a', '\x14', '\x2', '\x2', '\x4AF', '\x4B0', '\x5', '\x2E8', '\x175', 
		'\x2', '\x4B0', '\x4B1', '\a', '\x14', '\x2', '\x2', '\x4B1', '\x4B2', 
		'\x5', '\x2E2', '\x172', '\x2', '\x4B2', '\x4B3', '\a', '\x5', '\x2', 
		'\x2', '\x4B3', '-', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B5', '\a', 
		'\x1B', '\x2', '\x2', '\x4B5', '\x4B6', '\a', '\x4', '\x2', '\x2', '\x4B6', 
		'\x4B7', '\x5', '\xD6', 'l', '\x2', '\x4B7', '\x4B8', '\a', '\x14', '\x2', 
		'\x2', '\x4B8', '\x4B9', '\x5', '\xD6', 'l', '\x2', '\x4B9', '\x4BA', 
		'\a', '\x5', '\x2', '\x2', '\x4BA', '/', '\x3', '\x2', '\x2', '\x2', '\x4BB', 
		'\x4BC', '\a', '\x1C', '\x2', '\x2', '\x4BC', '\x4BD', '\a', '\x4', '\x2', 
		'\x2', '\x4BD', '\x4BE', '\x5', '\x23A', '\x11E', '\x2', '\x4BE', '\x4BF', 
		'\a', '\x14', '\x2', '\x2', '\x4BF', '\x4C0', '\x5', '\xD6', 'l', '\x2', 
		'\x4C0', '\x4C1', '\a', '\x14', '\x2', '\x2', '\x4C1', '\x4C2', '\x5', 
		'\xD6', 'l', '\x2', '\x4C2', '\x4C3', '\a', '\x14', '\x2', '\x2', '\x4C3', 
		'\x4C4', '\x5', '\x2EE', '\x178', '\x2', '\x4C4', '\x4C5', '\a', '\x5', 
		'\x2', '\x2', '\x4C5', '\x31', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4C7', 
		'\a', '\x1D', '\x2', '\x2', '\x4C7', '\x4C8', '\a', '\x4', '\x2', '\x2', 
		'\x4C8', '\x4C9', '\x5', '\x23A', '\x11E', '\x2', '\x4C9', '\x4CA', '\a', 
		'\x14', '\x2', '\x2', '\x4CA', '\x4CB', '\x5', '\xD6', 'l', '\x2', '\x4CB', 
		'\x4CC', '\a', '\x14', '\x2', '\x2', '\x4CC', '\x4CD', '\x5', '\xD6', 
		'l', '\x2', '\x4CD', '\x4CE', '\a', '\x14', '\x2', '\x2', '\x4CE', '\x4CF', 
		'\x5', '\x2F2', '\x17A', '\x2', '\x4CF', '\x4D0', '\a', '\x5', '\x2', 
		'\x2', '\x4D0', '\x33', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D2', 
		'\a', '\x1E', '\x2', '\x2', '\x4D2', '\x4D3', '\a', '\x4', '\x2', '\x2', 
		'\x4D3', '\x4D4', '\x5', '\xD6', 'l', '\x2', '\x4D4', '\x4D5', '\a', '\x14', 
		'\x2', '\x2', '\x4D5', '\x4D6', '\x5', '\x23C', '\x11F', '\x2', '\x4D6', 
		'\x4D7', '\a', '\x14', '\x2', '\x2', '\x4D7', '\x4D8', '\x5', '\xD6', 
		'l', '\x2', '\x4D8', '\x4D9', '\a', '\x14', '\x2', '\x2', '\x4D9', '\x4DA', 
		'\x5', '\xD6', 'l', '\x2', '\x4DA', '\x4DB', '\a', '\x14', '\x2', '\x2', 
		'\x4DB', '\x4DC', '\x5', '\x2EE', '\x178', '\x2', '\x4DC', '\x4DD', '\a', 
		'\x5', '\x2', '\x2', '\x4DD', '\x35', '\x3', '\x2', '\x2', '\x2', '\x4DE', 
		'\x4DF', '\a', '\x1F', '\x2', '\x2', '\x4DF', '\x4E0', '\a', '\x4', '\x2', 
		'\x2', '\x4E0', '\x4E1', '\x5', '\xD6', 'l', '\x2', '\x4E1', '\x4E2', 
		'\a', '\x14', '\x2', '\x2', '\x4E2', '\x4E3', '\x5', '\x23C', '\x11F', 
		'\x2', '\x4E3', '\x4E4', '\a', '\x14', '\x2', '\x2', '\x4E4', '\x4E5', 
		'\x5', '\xD6', 'l', '\x2', '\x4E5', '\x4E6', '\a', '\x14', '\x2', '\x2', 
		'\x4E6', '\x4E7', '\x5', '\xD6', 'l', '\x2', '\x4E7', '\x4E8', '\a', '\x14', 
		'\x2', '\x2', '\x4E8', '\x4E9', '\x5', '\x2F2', '\x17A', '\x2', '\x4E9', 
		'\x4EA', '\a', '\x5', '\x2', '\x2', '\x4EA', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x4EB', '\x4EC', '\a', ' ', '\x2', '\x2', '\x4EC', '\x4ED', '\a', 
		'\x4', '\x2', '\x2', '\x4ED', '\x4EE', '\x5', '\xD6', 'l', '\x2', '\x4EE', 
		'\x4EF', '\a', '\x14', '\x2', '\x2', '\x4EF', '\x4F0', '\x5', '\x27C', 
		'\x13F', '\x2', '\x4F0', '\x4F1', '\a', '\x5', '\x2', '\x2', '\x4F1', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\a', '!', '\x2', 
		'\x2', '\x4F3', '\x4F4', '\a', '\x4', '\x2', '\x2', '\x4F4', '\x4F5', 
		'\x5', '\xD6', 'l', '\x2', '\x4F5', '\x4F6', '\a', '\x14', '\x2', '\x2', 
		'\x4F6', '\x4F7', '\x5', '\x2A4', '\x153', '\x2', '\x4F7', '\x4F8', '\a', 
		'\x5', '\x2', '\x2', '\x4F8', ';', '\x3', '\x2', '\x2', '\x2', '\x4F9', 
		'\x4FA', '\a', '\"', '\x2', '\x2', '\x4FA', '\x4FB', '\a', '\x4', '\x2', 
		'\x2', '\x4FB', '\x4FC', '\x5', '\xD6', 'l', '\x2', '\x4FC', '\x4FD', 
		'\a', '\x14', '\x2', '\x2', '\x4FD', '\x4FE', '\x5', '\x2F8', '\x17D', 
		'\x2', '\x4FE', '\x4FF', '\a', '\x14', '\x2', '\x2', '\x4FF', '\x500', 
		'\x5', '\x31A', '\x18E', '\x2', '\x500', '\x501', '\a', '\x14', '\x2', 
		'\x2', '\x501', '\x502', '\x5', '\xD6', 'l', '\x2', '\x502', '\x503', 
		'\a', '\x14', '\x2', '\x2', '\x503', '\x504', '\x5', '\xD6', 'l', '\x2', 
		'\x504', '\x505', '\a', '\x14', '\x2', '\x2', '\x505', '\x506', '\x5', 
		'\x32C', '\x197', '\x2', '\x506', '\x507', '\a', '\x5', '\x2', '\x2', 
		'\x507', '=', '\x3', '\x2', '\x2', '\x2', '\x508', '\x509', '\a', '#', 
		'\x2', '\x2', '\x509', '\x50A', '\a', '\x4', '\x2', '\x2', '\x50A', '\x50B', 
		'\x5', '\xD6', 'l', '\x2', '\x50B', '\x50C', '\a', '\x14', '\x2', '\x2', 
		'\x50C', '\x50D', '\x5', '\xD6', 'l', '\x2', '\x50D', '\x50E', '\a', '\x14', 
		'\x2', '\x2', '\x50E', '\x50F', '\x5', '\xD6', 'l', '\x2', '\x50F', '\x510', 
		'\a', '\x14', '\x2', '\x2', '\x510', '\x511', '\x5', '\xD6', 'l', '\x2', 
		'\x511', '\x512', '\a', '\x14', '\x2', '\x2', '\x512', '\x513', '\x5', 
		'\x334', '\x19B', '\x2', '\x513', '\x514', '\a', '\x14', '\x2', '\x2', 
		'\x514', '\x515', '\x5', '\xD6', 'l', '\x2', '\x515', '\x516', '\a', '\x14', 
		'\x2', '\x2', '\x516', '\x517', '\x5', '\x31A', '\x18E', '\x2', '\x517', 
		'\x518', '\a', '\x14', '\x2', '\x2', '\x518', '\x519', '\x5', '\x31A', 
		'\x18E', '\x2', '\x519', '\x51A', '\a', '\x14', '\x2', '\x2', '\x51A', 
		'\x51B', '\x5', '\x31A', '\x18E', '\x2', '\x51B', '\x51C', '\a', '\x14', 
		'\x2', '\x2', '\x51C', '\x51D', '\x5', '\x33C', '\x19F', '\x2', '\x51D', 
		'\x51E', '\a', '\x5', '\x2', '\x2', '\x51E', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x51F', '\x520', '\a', '$', '\x2', '\x2', '\x520', '\x521', '\a', 
		'\x4', '\x2', '\x2', '\x521', '\x522', '\x5', '\xD6', 'l', '\x2', '\x522', 
		'\x523', '\a', '\x14', '\x2', '\x2', '\x523', '\x524', '\x5', '\xD6', 
		'l', '\x2', '\x524', '\x525', '\a', '\x14', '\x2', '\x2', '\x525', '\x526', 
		'\x5', '\x342', '\x1A2', '\x2', '\x526', '\x527', '\a', '\x14', '\x2', 
		'\x2', '\x527', '\x528', '\x5', '\x3BA', '\x1DE', '\x2', '\x528', '\x529', 
		'\a', '\x14', '\x2', '\x2', '\x529', '\x52A', '\x5', '\x31A', '\x18E', 
		'\x2', '\x52A', '\x52B', '\a', '\x14', '\x2', '\x2', '\x52B', '\x52C', 
		'\x5', '\xD6', 'l', '\x2', '\x52C', '\x52D', '\a', '\x5', '\x2', '\x2', 
		'\x52D', '\x41', '\x3', '\x2', '\x2', '\x2', '\x52E', '\x52F', '\a', '%', 
		'\x2', '\x2', '\x52F', '\x530', '\a', '\x4', '\x2', '\x2', '\x530', '\x531', 
		'\x5', '\xD6', 'l', '\x2', '\x531', '\x532', '\a', '\x14', '\x2', '\x2', 
		'\x532', '\x533', '\x5', '\xD6', 'l', '\x2', '\x533', '\x534', '\a', '\x14', 
		'\x2', '\x2', '\x534', '\x535', '\x5', '\xD6', 'l', '\x2', '\x535', '\x536', 
		'\a', '\x14', '\x2', '\x2', '\x536', '\x537', '\x5', '\xD6', 'l', '\x2', 
		'\x537', '\x538', '\a', '\x14', '\x2', '\x2', '\x538', '\x539', '\x5', 
		'\x3C0', '\x1E1', '\x2', '\x539', '\x53A', '\a', '\x14', '\x2', '\x2', 
		'\x53A', '\x53B', '\x5', '\x3C6', '\x1E4', '\x2', '\x53B', '\x53C', '\a', 
		'\x5', '\x2', '\x2', '\x53C', '\x43', '\x3', '\x2', '\x2', '\x2', '\x53D', 
		'\x53E', '\a', '&', '\x2', '\x2', '\x53E', '\x53F', '\a', '\x4', '\x2', 
		'\x2', '\x53F', '\x540', '\x5', '\xD6', 'l', '\x2', '\x540', '\x541', 
		'\a', '\x14', '\x2', '\x2', '\x541', '\x542', '\x5', '\xD6', 'l', '\x2', 
		'\x542', '\x543', '\a', '\x14', '\x2', '\x2', '\x543', '\x544', '\x5', 
		'\xD6', 'l', '\x2', '\x544', '\x545', '\a', '\x5', '\x2', '\x2', '\x545', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\a', '\'', '\x2', 
		'\x2', '\x547', 'G', '\x3', '\x2', '\x2', '\x2', '\x548', '\x549', '\a', 
		'(', '\x2', '\x2', '\x549', '\x54A', '\a', '\x4', '\x2', '\x2', '\x54A', 
		'\x54B', '\x5', '\xD6', 'l', '\x2', '\x54B', '\x54C', '\a', '\x5', '\x2', 
		'\x2', '\x54C', 'I', '\x3', '\x2', '\x2', '\x2', '\x54D', '\x54E', '\a', 
		')', '\x2', '\x2', '\x54E', '\x54F', '\a', '\x4', '\x2', '\x2', '\x54F', 
		'\x550', '\x5', '\xD6', 'l', '\x2', '\x550', '\x551', '\a', '\x5', '\x2', 
		'\x2', '\x551', 'K', '\x3', '\x2', '\x2', '\x2', '\x552', '\x553', '\a', 
		'*', '\x2', '\x2', '\x553', '\x554', '\a', '\x4', '\x2', '\x2', '\x554', 
		'\x555', '\x5', '\xD6', 'l', '\x2', '\x555', '\x556', '\a', '\x5', '\x2', 
		'\x2', '\x556', 'M', '\x3', '\x2', '\x2', '\x2', '\x557', '\x558', '\a', 
		'+', '\x2', '\x2', '\x558', 'O', '\x3', '\x2', '\x2', '\x2', '\x559', 
		'\x55A', '\a', ',', '\x2', '\x2', '\x55A', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x55B', '\x55C', '\a', '-', '\x2', '\x2', '\x55C', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x55D', '\x55E', '\a', '.', '\x2', '\x2', '\x55E', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', '\a', '/', '\x2', '\x2', 
		'\x560', '\x561', '\a', '\x4', '\x2', '\x2', '\x561', '\x562', '\x5', 
		'\xD6', 'l', '\x2', '\x562', '\x563', '\a', '\x5', '\x2', '\x2', '\x563', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x564', '\x565', '\a', '\x30', '\x2', 
		'\x2', '\x565', '\x566', '\a', '\x4', '\x2', '\x2', '\x566', '\x567', 
		'\x5', '\xD6', 'l', '\x2', '\x567', '\x568', '\a', '\x5', '\x2', '\x2', 
		'\x568', 'Y', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', '\a', '\x31', 
		'\x2', '\x2', '\x56A', '\x56B', '\a', '\x4', '\x2', '\x2', '\x56B', '\x56C', 
		'\x5', '\xD6', 'l', '\x2', '\x56C', '\x56D', '\a', '\x5', '\x2', '\x2', 
		'\x56D', '[', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x56F', '\a', '\x32', 
		'\x2', '\x2', '\x56F', '\x570', '\a', '\x4', '\x2', '\x2', '\x570', '\x571', 
		'\x5', '\xD6', 'l', '\x2', '\x571', '\x572', '\a', '\x5', '\x2', '\x2', 
		'\x572', ']', '\x3', '\x2', '\x2', '\x2', '\x573', '\x574', '\a', '\x33', 
		'\x2', '\x2', '\x574', '_', '\x3', '\x2', '\x2', '\x2', '\x575', '\x576', 
		'\a', '\x34', '\x2', '\x2', '\x576', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x577', '\x578', '\a', '\x35', '\x2', '\x2', '\x578', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x579', '\x57A', '\a', '\x36', '\x2', '\x2', '\x57A', 
		'\x57B', '\a', '\x4', '\x2', '\x2', '\x57B', '\x57C', '\x5', '\xD6', 'l', 
		'\x2', '\x57C', '\x57D', '\a', '\x5', '\x2', '\x2', '\x57D', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x57E', '\x57F', '\a', '\x37', '\x2', '\x2', '\x57F', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x580', '\x581', '\a', '\x38', '\x2', 
		'\x2', '\x581', '\x582', '\a', '\x4', '\x2', '\x2', '\x582', '\x583', 
		'\x5', '\xD6', 'l', '\x2', '\x583', '\x584', '\a', '\x5', '\x2', '\x2', 
		'\x584', 'i', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', '\a', '\x39', 
		'\x2', '\x2', '\x586', '\x587', '\a', '\x4', '\x2', '\x2', '\x587', '\x588', 
		'\x5', '\xD6', 'l', '\x2', '\x588', '\x589', '\a', '\x5', '\x2', '\x2', 
		'\x589', 'k', '\x3', '\x2', '\x2', '\x2', '\x58A', '\x58B', '\a', ':', 
		'\x2', '\x2', '\x58B', '\x58C', '\a', '\x4', '\x2', '\x2', '\x58C', '\x58D', 
		'\x5', '\xD6', 'l', '\x2', '\x58D', '\x58E', '\a', '\x14', '\x2', '\x2', 
		'\x58E', '\x58F', '\x5', '\x292', '\x14A', '\x2', '\x58F', '\x590', '\a', 
		'\x5', '\x2', '\x2', '\x590', 'm', '\x3', '\x2', '\x2', '\x2', '\x591', 
		'\x592', '\a', ';', '\x2', '\x2', '\x592', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x593', '\x594', '\a', '<', '\x2', '\x2', '\x594', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x595', '\x596', '\a', '=', '\x2', '\x2', '\x596', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x597', '\x598', '\a', '>', '\x2', '\x2', 
		'\x598', '\x599', '\a', '\x4', '\x2', '\x2', '\x599', '\x59A', '\x5', 
		'\xD6', 'l', '\x2', '\x59A', '\x59B', '\a', '\x5', '\x2', '\x2', '\x59B', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x59C', '\x59D', '\a', '?', '\x2', '\x2', 
		'\x59D', 'w', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x59F', '\a', '@', 
		'\x2', '\x2', '\x59F', '\x5A0', '\a', '\x4', '\x2', '\x2', '\x5A0', '\x5A1', 
		'\x5', '\xD6', 'l', '\x2', '\x5A1', '\x5A2', '\a', '\x5', '\x2', '\x2', 
		'\x5A2', 'y', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A4', '\a', '\x41', 
		'\x2', '\x2', '\x5A4', '\x5A5', '\a', '\x4', '\x2', '\x2', '\x5A5', '\x5A6', 
		'\x5', '\xD6', 'l', '\x2', '\x5A6', '\x5A7', '\a', '\x5', '\x2', '\x2', 
		'\x5A7', '{', '\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5A9', '\a', '\x42', 
		'\x2', '\x2', '\x5A9', '}', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AB', 
		'\a', '\x43', '\x2', '\x2', '\x5AB', '\x5AC', '\a', '\x4', '\x2', '\x2', 
		'\x5AC', '\x5AD', '\x5', '\xD6', 'l', '\x2', '\x5AD', '\x5AE', '\a', '\x14', 
		'\x2', '\x2', '\x5AE', '\x5AF', '\x5', '\xD6', 'l', '\x2', '\x5AF', '\x5B0', 
		'\a', '\x14', '\x2', '\x2', '\x5B0', '\x5B1', '\x5', '\xD6', 'l', '\x2', 
		'\x5B1', '\x5B2', '\a', '\x5', '\x2', '\x2', '\x5B2', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x5B3', '\x5B4', '\a', '\x44', '\x2', '\x2', '\x5B4', '\x5B5', 
		'\a', '\x4', '\x2', '\x2', '\x5B5', '\x5B6', '\x5', '\xD6', 'l', '\x2', 
		'\x5B6', '\x5B7', '\a', '\x14', '\x2', '\x2', '\x5B7', '\x5B8', '\x5', 
		'\xD6', 'l', '\x2', '\x5B8', '\x5B9', '\a', '\x5', '\x2', '\x2', '\x5B9', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5BB', '\a', '\x45', '\x2', 
		'\x2', '\x5BB', '\x83', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BD', 
		'\a', '\x46', '\x2', '\x2', '\x5BD', '\x5BE', '\a', '\x4', '\x2', '\x2', 
		'\x5BE', '\x5BF', '\x5', '\xD6', 'l', '\x2', '\x5BF', '\x5C0', '\a', '\x5', 
		'\x2', '\x2', '\x5C0', '\x85', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C2', 
		'\a', 'G', '\x2', '\x2', '\x5C2', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x5C3', '\x5C4', '\a', 'H', '\x2', '\x2', '\x5C4', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x5C5', '\x5C6', '\a', 'I', '\x2', '\x2', '\x5C6', '\x5C7', 
		'\a', '\x4', '\x2', '\x2', '\x5C7', '\x5C8', '\x5', '\x23A', '\x11E', 
		'\x2', '\x5C8', '\x5C9', '\a', '\x14', '\x2', '\x2', '\x5C9', '\x5CA', 
		'\x5', '\x38C', '\x1C7', '\x2', '\x5CA', '\x5CB', '\a', '\x14', '\x2', 
		'\x2', '\x5CB', '\x5CC', '\x5', '\xD6', 'l', '\x2', '\x5CC', '\x5CD', 
		'\a', '\x5', '\x2', '\x2', '\x5CD', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x5CE', '\x5CF', '\a', 'J', '\x2', '\x2', '\x5CF', '\x5D0', '\a', '\x4', 
		'\x2', '\x2', '\x5D0', '\x5D1', '\x5', '\x23A', '\x11E', '\x2', '\x5D1', 
		'\x5D2', '\a', '\x14', '\x2', '\x2', '\x5D2', '\x5D3', '\x5', '\xD6', 
		'l', '\x2', '\x5D3', '\x5D4', '\a', '\x14', '\x2', '\x2', '\x5D4', '\x5D5', 
		'\x5', '\x38C', '\x1C7', '\x2', '\x5D5', '\x5D6', '\a', '\x14', '\x2', 
		'\x2', '\x5D6', '\x5D7', '\x5', '\xD6', 'l', '\x2', '\x5D7', '\x5D8', 
		'\a', '\x5', '\x2', '\x2', '\x5D8', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x5D9', '\x5DA', '\a', 'K', '\x2', '\x2', '\x5DA', '\x5DB', '\a', '\x4', 
		'\x2', '\x2', '\x5DB', '\x5DC', '\x5', '\xD6', 'l', '\x2', '\x5DC', '\x5DD', 
		'\a', '\x14', '\x2', '\x2', '\x5DD', '\x5DE', '\x5', '\x23C', '\x11F', 
		'\x2', '\x5DE', '\x5DF', '\a', '\x14', '\x2', '\x2', '\x5DF', '\x5E0', 
		'\x5', '\x38C', '\x1C7', '\x2', '\x5E0', '\x5E1', '\a', '\x14', '\x2', 
		'\x2', '\x5E1', '\x5E2', '\x5', '\xD6', 'l', '\x2', '\x5E2', '\x5E3', 
		'\a', '\x5', '\x2', '\x2', '\x5E3', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x5E4', '\x5E5', '\a', 'L', '\x2', '\x2', '\x5E5', '\x5E6', '\a', '\x4', 
		'\x2', '\x2', '\x5E6', '\x5E7', '\x5', '\xD6', 'l', '\x2', '\x5E7', '\x5E8', 
		'\a', '\x14', '\x2', '\x2', '\x5E8', '\x5E9', '\x5', '\x23C', '\x11F', 
		'\x2', '\x5E9', '\x5EA', '\a', '\x14', '\x2', '\x2', '\x5EA', '\x5EB', 
		'\x5', '\xD6', 'l', '\x2', '\x5EB', '\x5EC', '\a', '\x14', '\x2', '\x2', 
		'\x5EC', '\x5ED', '\x5', '\x38C', '\x1C7', '\x2', '\x5ED', '\x5EE', '\a', 
		'\x14', '\x2', '\x2', '\x5EE', '\x5EF', '\x5', '\xD6', 'l', '\x2', '\x5EF', 
		'\x5F0', '\a', '\x5', '\x2', '\x2', '\x5F0', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x5F1', '\x5F2', '\a', 'M', '\x2', '\x2', '\x5F2', '\x5F3', '\a', 
		'\x4', '\x2', '\x2', '\x5F3', '\x5F4', '\x5', '\xD6', 'l', '\x2', '\x5F4', 
		'\x5F5', '\a', '\x14', '\x2', '\x2', '\x5F5', '\x5F6', '\x5', '\xD6', 
		'l', '\x2', '\x5F6', '\x5F7', '\a', '\x5', '\x2', '\x2', '\x5F7', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5F9', '\a', 'N', '\x2', '\x2', 
		'\x5F9', '\x95', '\x3', '\x2', '\x2', '\x2', '\x5FA', '\x5FB', '\a', 'O', 
		'\x2', '\x2', '\x5FB', '\x5FC', '\a', '\x4', '\x2', '\x2', '\x5FC', '\x5FD', 
		'\x5', '\xD6', 'l', '\x2', '\x5FD', '\x5FE', '\a', '\x14', '\x2', '\x2', 
		'\x5FE', '\x5FF', '\x5', '\x3A4', '\x1D3', '\x2', '\x5FF', '\x600', '\a', 
		'\x14', '\x2', '\x2', '\x600', '\x601', '\x5', '\x31A', '\x18E', '\x2', 
		'\x601', '\x602', '\a', '\x14', '\x2', '\x2', '\x602', '\x603', '\x5', 
		'\xD6', 'l', '\x2', '\x603', '\x604', '\a', '\x14', '\x2', '\x2', '\x604', 
		'\x605', '\x5', '\xD6', 'l', '\x2', '\x605', '\x606', '\a', '\x5', '\x2', 
		'\x2', '\x606', '\x97', '\x3', '\x2', '\x2', '\x2', '\x607', '\x608', 
		'\a', 'P', '\x2', '\x2', '\x608', '\x609', '\a', '\x4', '\x2', '\x2', 
		'\x609', '\x60A', '\x5', '\xD6', 'l', '\x2', '\x60A', '\x60B', '\a', '\x14', 
		'\x2', '\x2', '\x60B', '\x60C', '\x5', '\xD6', 'l', '\x2', '\x60C', '\x60D', 
		'\a', '\x5', '\x2', '\x2', '\x60D', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x60E', '\x60F', '\a', 'Q', '\x2', '\x2', '\x60F', '\x610', '\a', '\x4', 
		'\x2', '\x2', '\x610', '\x611', '\x5', '\xD6', 'l', '\x2', '\x611', '\x612', 
		'\a', '\x14', '\x2', '\x2', '\x612', '\x613', '\x5', '\x292', '\x14A', 
		'\x2', '\x613', '\x614', '\a', '\x5', '\x2', '\x2', '\x614', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x615', '\x616', '\a', 'R', '\x2', '\x2', '\x616', 
		'\x617', '\a', '\x4', '\x2', '\x2', '\x617', '\x618', '\x5', '\xD6', 'l', 
		'\x2', '\x618', '\x619', '\a', '\x5', '\x2', '\x2', '\x619', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x61A', '\x61B', '\a', 'S', '\x2', '\x2', '\x61B', 
		'\x61C', '\a', '\x4', '\x2', '\x2', '\x61C', '\x61D', '\x5', '\xD6', 'l', 
		'\x2', '\x61D', '\x61E', '\a', '\x5', '\x2', '\x2', '\x61E', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x61F', '\x620', '\a', 'T', '\x2', '\x2', '\x620', 
		'\x621', '\a', '\x4', '\x2', '\x2', '\x621', '\x622', '\x5', '\xD6', 'l', 
		'\x2', '\x622', '\x623', '\a', '\x5', '\x2', '\x2', '\x623', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x624', '\x625', '\a', 'U', '\x2', '\x2', '\x625', 
		'\x626', '\a', '\x4', '\x2', '\x2', '\x626', '\x627', '\x5', '\xD6', 'l', 
		'\x2', '\x627', '\x628', '\a', '\x14', '\x2', '\x2', '\x628', '\x629', 
		'\x5', '\xD6', 'l', '\x2', '\x629', '\x62A', '\a', '\x5', '\x2', '\x2', 
		'\x62A', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x62C', '\a', 'V', 
		'\x2', '\x2', '\x62C', '\x62D', '\a', '\x4', '\x2', '\x2', '\x62D', '\x62E', 
		'\x5', '\xD6', 'l', '\x2', '\x62E', '\x62F', '\a', '\x14', '\x2', '\x2', 
		'\x62F', '\x630', '\x5', '\xD6', 'l', '\x2', '\x630', '\x631', '\a', '\x5', 
		'\x2', '\x2', '\x631', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x632', '\x633', 
		'\a', 'W', '\x2', '\x2', '\x633', '\x634', '\a', '\x4', '\x2', '\x2', 
		'\x634', '\x635', '\x5', '\xD6', 'l', '\x2', '\x635', '\x636', '\a', '\x14', 
		'\x2', '\x2', '\x636', '\x637', '\x5', '\xD6', 'l', '\x2', '\x637', '\x638', 
		'\a', '\x5', '\x2', '\x2', '\x638', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x639', '\x63A', '\a', 'X', '\x2', '\x2', '\x63A', '\x63B', '\a', '\x4', 
		'\x2', '\x2', '\x63B', '\x63C', '\x5', '\xD6', 'l', '\x2', '\x63C', '\x63D', 
		'\a', '\x14', '\x2', '\x2', '\x63D', '\x63E', '\x5', '\xD6', 'l', '\x2', 
		'\x63E', '\x63F', '\a', '\x5', '\x2', '\x2', '\x63F', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\x640', '\x641', '\a', 'Y', '\x2', '\x2', '\x641', '\x642', 
		'\a', '\x4', '\x2', '\x2', '\x642', '\x643', '\x5', '\xD6', 'l', '\x2', 
		'\x643', '\x644', '\a', '\x14', '\x2', '\x2', '\x644', '\x645', '\x5', 
		'\xD6', 'l', '\x2', '\x645', '\x646', '\a', '\x14', '\x2', '\x2', '\x646', 
		'\x647', '\x5', '\x2E8', '\x175', '\x2', '\x647', '\x648', '\a', '\x5', 
		'\x2', '\x2', '\x648', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x649', '\x64A', 
		'\a', 'Z', '\x2', '\x2', '\x64A', '\x64B', '\a', '\x4', '\x2', '\x2', 
		'\x64B', '\x64C', '\x5', '\x23A', '\x11E', '\x2', '\x64C', '\x64D', '\a', 
		'\x14', '\x2', '\x2', '\x64D', '\x64E', '\x5', '\xD6', 'l', '\x2', '\x64E', 
		'\x64F', '\a', '\x14', '\x2', '\x2', '\x64F', '\x650', '\x5', '\xD6', 
		'l', '\x2', '\x650', '\x651', '\a', '\x5', '\x2', '\x2', '\x651', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\x652', '\x653', '\a', '[', '\x2', '\x2', 
		'\x653', '\x654', '\a', '\x4', '\x2', '\x2', '\x654', '\x655', '\x5', 
		'\xD6', 'l', '\x2', '\x655', '\x656', '\a', '\x14', '\x2', '\x2', '\x656', 
		'\x657', '\x5', '\xD6', 'l', '\x2', '\x657', '\x658', '\a', '\x5', '\x2', 
		'\x2', '\x658', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65A', 
		'\a', '\\', '\x2', '\x2', '\x65A', '\x65B', '\a', '\x4', '\x2', '\x2', 
		'\x65B', '\x65C', '\x5', '\xD6', 'l', '\x2', '\x65C', '\x65D', '\a', '\x14', 
		'\x2', '\x2', '\x65D', '\x65E', '\x5', '\xD6', 'l', '\x2', '\x65E', '\x65F', 
		'\a', '\x5', '\x2', '\x2', '\x65F', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x660', '\x661', '\a', ']', '\x2', '\x2', '\x661', '\x662', '\a', '\x4', 
		'\x2', '\x2', '\x662', '\x663', '\x5', '\xD6', 'l', '\x2', '\x663', '\x664', 
		'\a', '\x14', '\x2', '\x2', '\x664', '\x665', '\x5', '\xD6', 'l', '\x2', 
		'\x665', '\x666', '\a', '\x5', '\x2', '\x2', '\x666', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\x667', '\x668', '\a', '^', '\x2', '\x2', '\x668', '\x669', 
		'\a', '\x4', '\x2', '\x2', '\x669', '\x66A', '\x5', '\xD6', 'l', '\x2', 
		'\x66A', '\x66B', '\a', '\x5', '\x2', '\x2', '\x66B', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\x66C', '\x66D', '\a', '_', '\x2', '\x2', '\x66D', '\x66E', 
		'\a', '\x4', '\x2', '\x2', '\x66E', '\x66F', '\x5', '\xD6', 'l', '\x2', 
		'\x66F', '\x670', '\a', '\x14', '\x2', '\x2', '\x670', '\x671', '\x5', 
		'\xD6', 'l', '\x2', '\x671', '\x672', '\a', '\x5', '\x2', '\x2', '\x672', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\x673', '\x674', '\a', '`', '\x2', 
		'\x2', '\x674', '\x675', '\a', '\x4', '\x2', '\x2', '\x675', '\x676', 
		'\x5', '\xD6', 'l', '\x2', '\x676', '\x677', '\a', '\x14', '\x2', '\x2', 
		'\x677', '\x678', '\x5', '\xD6', 'l', '\x2', '\x678', '\x679', '\a', '\x5', 
		'\x2', '\x2', '\x679', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x67A', '\x67B', 
		'\a', '\x61', '\x2', '\x2', '\x67B', '\x67C', '\a', '\x4', '\x2', '\x2', 
		'\x67C', '\x67D', '\x5', '\xD6', 'l', '\x2', '\x67D', '\x67E', '\a', '\x14', 
		'\x2', '\x2', '\x67E', '\x67F', '\x5', '\xD6', 'l', '\x2', '\x67F', '\x680', 
		'\a', '\x14', '\x2', '\x2', '\x680', '\x681', '\x5', '\x33C', '\x19F', 
		'\x2', '\x681', '\x682', '\a', '\x5', '\x2', '\x2', '\x682', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\x683', '\x684', '\a', '\x62', '\x2', '\x2', '\x684', 
		'\x685', '\a', '\x4', '\x2', '\x2', '\x685', '\x686', '\x5', '\xD6', 'l', 
		'\x2', '\x686', '\x687', '\a', '\x14', '\x2', '\x2', '\x687', '\x688', 
		'\x5', '\xD6', 'l', '\x2', '\x688', '\x689', '\a', '\x5', '\x2', '\x2', 
		'\x689', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x68A', '\x68B', '\a', '\x63', 
		'\x2', '\x2', '\x68B', '\x68C', '\a', '\x4', '\x2', '\x2', '\x68C', '\x68D', 
		'\x5', '\xD6', 'l', '\x2', '\x68D', '\x68E', '\a', '\x14', '\x2', '\x2', 
		'\x68E', '\x68F', '\x5', '\xD6', 'l', '\x2', '\x68F', '\x690', '\a', '\x5', 
		'\x2', '\x2', '\x690', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x691', '\x692', 
		'\a', '\x64', '\x2', '\x2', '\x692', '\x693', '\a', '\x4', '\x2', '\x2', 
		'\x693', '\x694', '\x5', '\xD6', 'l', '\x2', '\x694', '\x695', '\a', '\x14', 
		'\x2', '\x2', '\x695', '\x696', '\x5', '\x23C', '\x11F', '\x2', '\x696', 
		'\x697', '\a', '\x14', '\x2', '\x2', '\x697', '\x698', '\x5', '\xD6', 
		'l', '\x2', '\x698', '\x699', '\a', '\x5', '\x2', '\x2', '\x699', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x69A', '\x69B', '\a', '\x65', '\x2', '\x2', 
		'\x69B', '\x69C', '\a', '\x4', '\x2', '\x2', '\x69C', '\x69D', '\x5', 
		'\xD6', 'l', '\x2', '\x69D', '\x69E', '\a', '\x14', '\x2', '\x2', '\x69E', 
		'\x69F', '\x5', '\x23C', '\x11F', '\x2', '\x69F', '\x6A0', '\a', '\x14', 
		'\x2', '\x2', '\x6A0', '\x6A1', '\x5', '\xD6', 'l', '\x2', '\x6A1', '\x6A2', 
		'\a', '\x14', '\x2', '\x2', '\x6A2', '\x6A3', '\x5', '\xD6', 'l', '\x2', 
		'\x6A3', '\x6A4', '\a', '\x5', '\x2', '\x2', '\x6A4', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\x6A5', '\x6A6', '\a', '\x66', '\x2', '\x2', '\x6A6', '\x6A7', 
		'\a', '\x4', '\x2', '\x2', '\x6A7', '\x6A8', '\x5', '\xD6', 'l', '\x2', 
		'\x6A8', '\x6A9', '\a', '\x14', '\x2', '\x2', '\x6A9', '\x6AA', '\x5', 
		'\xD6', 'l', '\x2', '\x6AA', '\x6AB', '\a', '\x5', '\x2', '\x2', '\x6AB', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6AD', '\a', 'g', '\x2', 
		'\x2', '\x6AD', '\x6AE', '\a', '\x4', '\x2', '\x2', '\x6AE', '\x6AF', 
		'\x5', '\xD6', 'l', '\x2', '\x6AF', '\x6B0', '\a', '\x14', '\x2', '\x2', 
		'\x6B0', '\x6B1', '\x5', '\xD6', 'l', '\x2', '\x6B1', '\x6B2', '\a', '\x5', 
		'\x2', '\x2', '\x6B2', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', 
		'\a', 'h', '\x2', '\x2', '\x6B4', '\x6B5', '\a', '\x4', '\x2', '\x2', 
		'\x6B5', '\x6B6', '\x5', '\xD6', 'l', '\x2', '\x6B6', '\x6B7', '\a', '\x14', 
		'\x2', '\x2', '\x6B7', '\x6B8', '\x5', '\xD6', 'l', '\x2', '\x6B8', '\x6B9', 
		'\a', '\x5', '\x2', '\x2', '\x6B9', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x6BA', '\x6BB', '\a', 'i', '\x2', '\x2', '\x6BB', '\x6BC', '\a', '\x4', 
		'\x2', '\x2', '\x6BC', '\x6BD', '\x5', '\xD6', 'l', '\x2', '\x6BD', '\x6BE', 
		'\a', '\x14', '\x2', '\x2', '\x6BE', '\x6BF', '\x5', '\xD6', 'l', '\x2', 
		'\x6BF', '\x6C0', '\a', '\x5', '\x2', '\x2', '\x6C0', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\x6C1', '\x6C2', '\a', 'j', '\x2', '\x2', '\x6C2', '\x6C3', 
		'\a', '\x4', '\x2', '\x2', '\x6C3', '\x6C4', '\x5', '\xD6', 'l', '\x2', 
		'\x6C4', '\x6C5', '\a', '\x5', '\x2', '\x2', '\x6C5', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\x6C6', '\x6C7', '\a', 'k', '\x2', '\x2', '\x6C7', '\x6C8', 
		'\a', '\x4', '\x2', '\x2', '\x6C8', '\x6C9', '\x5', '\xD6', 'l', '\x2', 
		'\x6C9', '\x6CA', '\a', '\x14', '\x2', '\x2', '\x6CA', '\x6CB', '\x5', 
		'\xD6', 'l', '\x2', '\x6CB', '\x6CC', '\a', '\x14', '\x2', '\x2', '\x6CC', 
		'\x6CD', '\x5', '\x27C', '\x13F', '\x2', '\x6CD', '\x6CE', '\a', '\x14', 
		'\x2', '\x2', '\x6CE', '\x6CF', '\x5', '\xD6', 'l', '\x2', '\x6CF', '\x6D0', 
		'\a', '\x5', '\x2', '\x2', '\x6D0', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x6D1', '\x6D2', '\a', 'l', '\x2', '\x2', '\x6D2', '\x6D3', '\a', '\x4', 
		'\x2', '\x2', '\x6D3', '\x6D4', '\x5', '\xD6', 'l', '\x2', '\x6D4', '\x6D5', 
		'\a', '\x14', '\x2', '\x2', '\x6D5', '\x6D6', '\x5', '\xD6', 'l', '\x2', 
		'\x6D6', '\x6D7', '\a', '\x5', '\x2', '\x2', '\x6D7', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\x6D8', '\x6D9', '\a', 'm', '\x2', '\x2', '\x6D9', '\x6DA', 
		'\a', '\x4', '\x2', '\x2', '\x6DA', '\x6DB', '\x5', '\xD6', 'l', '\x2', 
		'\x6DB', '\x6DC', '\a', '\x14', '\x2', '\x2', '\x6DC', '\x6DD', '\x5', 
		'\xD6', 'l', '\x2', '\x6DD', '\x6DE', '\a', '\x5', '\x2', '\x2', '\x6DE', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E0', '\a', 'n', '\x2', 
		'\x2', '\x6E0', '\x6E1', '\a', '\x4', '\x2', '\x2', '\x6E1', '\x6E2', 
		'\x5', '\xD6', 'l', '\x2', '\x6E2', '\x6E3', '\a', '\x14', '\x2', '\x2', 
		'\x6E3', '\x6E4', '\x5', '\xD6', 'l', '\x2', '\x6E4', '\x6E5', '\a', '\x5', 
		'\x2', '\x2', '\x6E5', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x797', 
		'\x5', '\x238', '\x11D', '\x2', '\x6E7', '\x797', '\x5', '\x234', '\x11B', 
		'\x2', '\x6E8', '\x797', '\x5', '\xD8', 'm', '\x2', '\x6E9', '\x797', 
		'\x5', '\xDA', 'n', '\x2', '\x6EA', '\x797', '\x5', '\xDC', 'o', '\x2', 
		'\x6EB', '\x797', '\x5', '\xDE', 'p', '\x2', '\x6EC', '\x797', '\x5', 
		'\xE0', 'q', '\x2', '\x6ED', '\x797', '\x5', '\xE2', 'r', '\x2', '\x6EE', 
		'\x797', '\x5', '\xE4', 's', '\x2', '\x6EF', '\x797', '\x5', '\xE6', 't', 
		'\x2', '\x6F0', '\x797', '\x5', '\xE8', 'u', '\x2', '\x6F1', '\x797', 
		'\x5', '\xEA', 'v', '\x2', '\x6F2', '\x797', '\x5', '\xEC', 'w', '\x2', 
		'\x6F3', '\x797', '\x5', '\xEE', 'x', '\x2', '\x6F4', '\x797', '\x5', 
		'\xF0', 'y', '\x2', '\x6F5', '\x797', '\x5', '\xF2', 'z', '\x2', '\x6F6', 
		'\x797', '\x5', '\xF4', '{', '\x2', '\x6F7', '\x797', '\x5', '\xF6', '|', 
		'\x2', '\x6F8', '\x797', '\x5', '\xF8', '}', '\x2', '\x6F9', '\x797', 
		'\x5', '\xFA', '~', '\x2', '\x6FA', '\x797', '\x5', '\xFC', '\x7F', '\x2', 
		'\x6FB', '\x797', '\x5', '\xFE', '\x80', '\x2', '\x6FC', '\x797', '\x5', 
		'\x100', '\x81', '\x2', '\x6FD', '\x797', '\x5', '\x102', '\x82', '\x2', 
		'\x6FE', '\x797', '\x5', '\x104', '\x83', '\x2', '\x6FF', '\x797', '\x5', 
		'\x106', '\x84', '\x2', '\x700', '\x797', '\x5', '\x108', '\x85', '\x2', 
		'\x701', '\x797', '\x5', '\x10A', '\x86', '\x2', '\x702', '\x797', '\x5', 
		'\x10C', '\x87', '\x2', '\x703', '\x797', '\x5', '\x10E', '\x88', '\x2', 
		'\x704', '\x797', '\x5', '\x110', '\x89', '\x2', '\x705', '\x797', '\x5', 
		'\x112', '\x8A', '\x2', '\x706', '\x797', '\x5', '\x114', '\x8B', '\x2', 
		'\x707', '\x797', '\x5', '\x116', '\x8C', '\x2', '\x708', '\x797', '\x5', 
		'\x118', '\x8D', '\x2', '\x709', '\x797', '\x5', '\x11A', '\x8E', '\x2', 
		'\x70A', '\x797', '\x5', '\x11C', '\x8F', '\x2', '\x70B', '\x797', '\x5', 
		'\x11E', '\x90', '\x2', '\x70C', '\x797', '\x5', '\x120', '\x91', '\x2', 
		'\x70D', '\x797', '\x5', '\x122', '\x92', '\x2', '\x70E', '\x797', '\x5', 
		'\x124', '\x93', '\x2', '\x70F', '\x797', '\x5', '\x126', '\x94', '\x2', 
		'\x710', '\x797', '\x5', '\x128', '\x95', '\x2', '\x711', '\x797', '\x5', 
		'\x12A', '\x96', '\x2', '\x712', '\x797', '\x5', '\x12C', '\x97', '\x2', 
		'\x713', '\x797', '\x5', '\x12E', '\x98', '\x2', '\x714', '\x797', '\x5', 
		'\x130', '\x99', '\x2', '\x715', '\x797', '\x5', '\x132', '\x9A', '\x2', 
		'\x716', '\x797', '\x5', '\x134', '\x9B', '\x2', '\x717', '\x797', '\x5', 
		'\x136', '\x9C', '\x2', '\x718', '\x797', '\x5', '\x138', '\x9D', '\x2', 
		'\x719', '\x797', '\x5', '\x13A', '\x9E', '\x2', '\x71A', '\x797', '\x5', 
		'\x13C', '\x9F', '\x2', '\x71B', '\x797', '\x5', '\x13E', '\xA0', '\x2', 
		'\x71C', '\x797', '\x5', '\x140', '\xA1', '\x2', '\x71D', '\x797', '\x5', 
		'\x142', '\xA2', '\x2', '\x71E', '\x797', '\x5', '\x144', '\xA3', '\x2', 
		'\x71F', '\x797', '\x5', '\x146', '\xA4', '\x2', '\x720', '\x797', '\x5', 
		'\x148', '\xA5', '\x2', '\x721', '\x797', '\x5', '\x14A', '\xA6', '\x2', 
		'\x722', '\x797', '\x5', '\x14C', '\xA7', '\x2', '\x723', '\x797', '\x5', 
		'\x14E', '\xA8', '\x2', '\x724', '\x797', '\x5', '\x150', '\xA9', '\x2', 
		'\x725', '\x797', '\x5', '\x152', '\xAA', '\x2', '\x726', '\x797', '\x5', 
		'\x154', '\xAB', '\x2', '\x727', '\x797', '\x5', '\x156', '\xAC', '\x2', 
		'\x728', '\x797', '\x5', '\x158', '\xAD', '\x2', '\x729', '\x797', '\x5', 
		'\x15A', '\xAE', '\x2', '\x72A', '\x797', '\x5', '\x15C', '\xAF', '\x2', 
		'\x72B', '\x797', '\x5', '\x15E', '\xB0', '\x2', '\x72C', '\x797', '\x5', 
		'\x160', '\xB1', '\x2', '\x72D', '\x797', '\x5', '\x162', '\xB2', '\x2', 
		'\x72E', '\x797', '\x5', '\x164', '\xB3', '\x2', '\x72F', '\x797', '\x5', 
		'\x166', '\xB4', '\x2', '\x730', '\x797', '\x5', '\x168', '\xB5', '\x2', 
		'\x731', '\x797', '\x5', '\x16A', '\xB6', '\x2', '\x732', '\x797', '\x5', 
		'\x16C', '\xB7', '\x2', '\x733', '\x797', '\x5', '\x16E', '\xB8', '\x2', 
		'\x734', '\x797', '\x5', '\x170', '\xB9', '\x2', '\x735', '\x797', '\x5', 
		'\x172', '\xBA', '\x2', '\x736', '\x797', '\x5', '\x174', '\xBB', '\x2', 
		'\x737', '\x797', '\x5', '\x176', '\xBC', '\x2', '\x738', '\x797', '\x5', 
		'\x178', '\xBD', '\x2', '\x739', '\x797', '\x5', '\x17A', '\xBE', '\x2', 
		'\x73A', '\x797', '\x5', '\x17C', '\xBF', '\x2', '\x73B', '\x797', '\x5', 
		'\x17E', '\xC0', '\x2', '\x73C', '\x797', '\x5', '\x180', '\xC1', '\x2', 
		'\x73D', '\x797', '\x5', '\x182', '\xC2', '\x2', '\x73E', '\x797', '\x5', 
		'\x184', '\xC3', '\x2', '\x73F', '\x797', '\x5', '\x186', '\xC4', '\x2', 
		'\x740', '\x797', '\x5', '\x188', '\xC5', '\x2', '\x741', '\x797', '\x5', 
		'\x18A', '\xC6', '\x2', '\x742', '\x797', '\x5', '\x18C', '\xC7', '\x2', 
		'\x743', '\x797', '\x5', '\x18E', '\xC8', '\x2', '\x744', '\x797', '\x5', 
		'\x190', '\xC9', '\x2', '\x745', '\x797', '\x5', '\x192', '\xCA', '\x2', 
		'\x746', '\x797', '\x5', '\x194', '\xCB', '\x2', '\x747', '\x797', '\x5', 
		'\x196', '\xCC', '\x2', '\x748', '\x797', '\x5', '\x198', '\xCD', '\x2', 
		'\x749', '\x797', '\x5', '\x19A', '\xCE', '\x2', '\x74A', '\x797', '\x5', 
		'\x19C', '\xCF', '\x2', '\x74B', '\x797', '\x5', '\x19E', '\xD0', '\x2', 
		'\x74C', '\x797', '\x5', '\x1A0', '\xD1', '\x2', '\x74D', '\x797', '\x5', 
		'\x1A2', '\xD2', '\x2', '\x74E', '\x797', '\x5', '\x1A4', '\xD3', '\x2', 
		'\x74F', '\x797', '\x5', '\x1A6', '\xD4', '\x2', '\x750', '\x797', '\x5', 
		'\x1A8', '\xD5', '\x2', '\x751', '\x797', '\x5', '\x1AA', '\xD6', '\x2', 
		'\x752', '\x797', '\x5', '\x1AC', '\xD7', '\x2', '\x753', '\x797', '\x5', 
		'\x1AE', '\xD8', '\x2', '\x754', '\x797', '\x5', '\x1B0', '\xD9', '\x2', 
		'\x755', '\x797', '\x5', '\x1B2', '\xDA', '\x2', '\x756', '\x797', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x757', '\x797', '\x5', '\x1B6', '\xDC', '\x2', 
		'\x758', '\x797', '\x5', '\x1B8', '\xDD', '\x2', '\x759', '\x797', '\x5', 
		'\x1BA', '\xDE', '\x2', '\x75A', '\x797', '\x5', '\x1BC', '\xDF', '\x2', 
		'\x75B', '\x797', '\x5', '\x1BE', '\xE0', '\x2', '\x75C', '\x797', '\x5', 
		'\x1C0', '\xE1', '\x2', '\x75D', '\x797', '\x5', '\x1C2', '\xE2', '\x2', 
		'\x75E', '\x797', '\x5', '\x1C4', '\xE3', '\x2', '\x75F', '\x797', '\x5', 
		'\x1C6', '\xE4', '\x2', '\x760', '\x797', '\x5', '\x1C8', '\xE5', '\x2', 
		'\x761', '\x797', '\x5', '\x1CA', '\xE6', '\x2', '\x762', '\x797', '\x5', 
		'\x1CC', '\xE7', '\x2', '\x763', '\x797', '\x5', '\x1CE', '\xE8', '\x2', 
		'\x764', '\x797', '\x5', '\x1D0', '\xE9', '\x2', '\x765', '\x797', '\x5', 
		'\x1D2', '\xEA', '\x2', '\x766', '\x797', '\x5', '\x1D4', '\xEB', '\x2', 
		'\x767', '\x797', '\x5', '\x1D6', '\xEC', '\x2', '\x768', '\x797', '\x5', 
		'\x1D8', '\xED', '\x2', '\x769', '\x797', '\x5', '\x1DA', '\xEE', '\x2', 
		'\x76A', '\x797', '\x5', '\x1DC', '\xEF', '\x2', '\x76B', '\x797', '\x5', 
		'\x1DE', '\xF0', '\x2', '\x76C', '\x797', '\x5', '\x1E0', '\xF1', '\x2', 
		'\x76D', '\x797', '\x5', '\x1E2', '\xF2', '\x2', '\x76E', '\x797', '\x5', 
		'\x1E4', '\xF3', '\x2', '\x76F', '\x797', '\x5', '\x1E6', '\xF4', '\x2', 
		'\x770', '\x797', '\x5', '\x1E8', '\xF5', '\x2', '\x771', '\x797', '\x5', 
		'\x1EA', '\xF6', '\x2', '\x772', '\x797', '\x5', '\x1EC', '\xF7', '\x2', 
		'\x773', '\x797', '\x5', '\x1EE', '\xF8', '\x2', '\x774', '\x797', '\x5', 
		'\x1F0', '\xF9', '\x2', '\x775', '\x797', '\x5', '\x1F2', '\xFA', '\x2', 
		'\x776', '\x797', '\x5', '\x1F4', '\xFB', '\x2', '\x777', '\x797', '\x5', 
		'\x1F6', '\xFC', '\x2', '\x778', '\x797', '\x5', '\x1F8', '\xFD', '\x2', 
		'\x779', '\x797', '\x5', '\x1FA', '\xFE', '\x2', '\x77A', '\x797', '\x5', 
		'\x1FC', '\xFF', '\x2', '\x77B', '\x797', '\x5', '\x1FE', '\x100', '\x2', 
		'\x77C', '\x797', '\x5', '\x200', '\x101', '\x2', '\x77D', '\x797', '\x5', 
		'\x202', '\x102', '\x2', '\x77E', '\x797', '\x5', '\x204', '\x103', '\x2', 
		'\x77F', '\x797', '\x5', '\x206', '\x104', '\x2', '\x780', '\x797', '\x5', 
		'\x208', '\x105', '\x2', '\x781', '\x797', '\x5', '\x20A', '\x106', '\x2', 
		'\x782', '\x797', '\x5', '\x20C', '\x107', '\x2', '\x783', '\x797', '\x5', 
		'\x20E', '\x108', '\x2', '\x784', '\x797', '\x5', '\x210', '\x109', '\x2', 
		'\x785', '\x797', '\x5', '\x212', '\x10A', '\x2', '\x786', '\x797', '\x5', 
		'\x214', '\x10B', '\x2', '\x787', '\x797', '\x5', '\x216', '\x10C', '\x2', 
		'\x788', '\x797', '\x5', '\x218', '\x10D', '\x2', '\x789', '\x797', '\x5', 
		'\x21A', '\x10E', '\x2', '\x78A', '\x797', '\x5', '\x21C', '\x10F', '\x2', 
		'\x78B', '\x797', '\x5', '\x21E', '\x110', '\x2', '\x78C', '\x797', '\x5', 
		'\x220', '\x111', '\x2', '\x78D', '\x797', '\x5', '\x222', '\x112', '\x2', 
		'\x78E', '\x797', '\x5', '\x224', '\x113', '\x2', '\x78F', '\x797', '\x5', 
		'\x226', '\x114', '\x2', '\x790', '\x797', '\x5', '\x228', '\x115', '\x2', 
		'\x791', '\x797', '\x5', '\x22A', '\x116', '\x2', '\x792', '\x797', '\x5', 
		'\x22C', '\x117', '\x2', '\x793', '\x797', '\x5', '\x22E', '\x118', '\x2', 
		'\x794', '\x797', '\x5', '\x230', '\x119', '\x2', '\x795', '\x797', '\x5', 
		'\x232', '\x11A', '\x2', '\x796', '\x6E6', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6E8', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x6E9', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x6EA', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6EB', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6ED', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x6EE', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x6EF', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6F0', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x6F2', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6F3', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6F5', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x6F6', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6F8', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x6FA', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6FB', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x796', '\x6FD', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x6FE', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x6FF', '\x3', '\x2', '\x2', '\x2', '\x796', '\x700', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x701', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x702', '\x3', '\x2', '\x2', '\x2', '\x796', '\x703', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x704', '\x3', '\x2', '\x2', '\x2', '\x796', '\x705', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x706', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x707', '\x3', '\x2', '\x2', '\x2', '\x796', '\x708', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x709', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x70A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x70B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x70C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x70D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x70E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x710', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x711', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x712', '\x3', '\x2', '\x2', '\x2', '\x796', '\x713', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x714', '\x3', '\x2', '\x2', '\x2', '\x796', '\x715', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x716', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x717', '\x3', '\x2', '\x2', '\x2', '\x796', '\x718', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x719', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x71A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x71B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x71C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x71D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x71E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x720', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x721', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x722', '\x3', '\x2', '\x2', '\x2', '\x796', '\x723', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x724', '\x3', '\x2', '\x2', '\x2', '\x796', '\x725', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x726', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x727', '\x3', '\x2', '\x2', '\x2', '\x796', '\x728', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x729', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x72A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x72B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x72C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x72D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x72E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x72F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x730', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x731', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x732', '\x3', '\x2', '\x2', '\x2', '\x796', '\x733', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x734', '\x3', '\x2', '\x2', '\x2', '\x796', '\x735', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x736', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x737', '\x3', '\x2', '\x2', '\x2', '\x796', '\x738', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x739', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x73A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x73B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x73D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x73E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x73F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x740', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x741', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x742', '\x3', '\x2', '\x2', '\x2', '\x796', '\x743', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x744', '\x3', '\x2', '\x2', '\x2', '\x796', '\x745', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x746', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x747', '\x3', '\x2', '\x2', '\x2', '\x796', '\x748', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x749', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x74A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x74B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x74C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x74D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x74E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x74F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x750', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x751', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x752', '\x3', '\x2', '\x2', '\x2', '\x796', '\x753', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x754', '\x3', '\x2', '\x2', '\x2', '\x796', '\x755', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x756', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x757', '\x3', '\x2', '\x2', '\x2', '\x796', '\x758', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x759', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x75A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x75B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x75D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x75E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x75F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x760', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x761', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x762', '\x3', '\x2', '\x2', '\x2', '\x796', '\x763', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x764', '\x3', '\x2', '\x2', '\x2', '\x796', '\x765', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x766', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x767', '\x3', '\x2', '\x2', '\x2', '\x796', '\x768', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x769', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x76A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x76B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x76C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x76D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x76E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x76F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x770', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x771', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x772', '\x3', '\x2', '\x2', '\x2', '\x796', '\x773', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x774', '\x3', '\x2', '\x2', '\x2', '\x796', '\x775', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x776', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x777', '\x3', '\x2', '\x2', '\x2', '\x796', '\x778', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x779', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x77A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x77B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x77C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x77D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x77E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x77F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x780', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x781', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x782', '\x3', '\x2', '\x2', '\x2', '\x796', '\x783', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x784', '\x3', '\x2', '\x2', '\x2', '\x796', '\x785', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x786', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x787', '\x3', '\x2', '\x2', '\x2', '\x796', '\x788', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x789', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x78A', '\x3', '\x2', '\x2', '\x2', '\x796', '\x78B', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x78C', '\x3', '\x2', '\x2', '\x2', '\x796', '\x78D', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x78E', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x78F', '\x3', '\x2', '\x2', '\x2', '\x796', '\x790', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x791', '\x3', '\x2', '\x2', '\x2', '\x796', 
		'\x792', '\x3', '\x2', '\x2', '\x2', '\x796', '\x793', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x794', '\x3', '\x2', '\x2', '\x2', '\x796', '\x795', 
		'\x3', '\x2', '\x2', '\x2', '\x797', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\x798', '\x799', '\a', 'o', '\x2', '\x2', '\x799', '\x79A', '\a', '\x4', 
		'\x2', '\x2', '\x79A', '\x79B', '\x5', '\xD6', 'l', '\x2', '\x79B', '\x79C', 
		'\a', '\x14', '\x2', '\x2', '\x79C', '\x79D', '\x5', '\xD6', 'l', '\x2', 
		'\x79D', '\x79E', '\a', '\x14', '\x2', '\x2', '\x79E', '\x79F', '\x5', 
		'\xD6', 'l', '\x2', '\x79F', '\x7A0', '\a', '\x5', '\x2', '\x2', '\x7A0', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x7A2', '\a', 'p', '\x2', 
		'\x2', '\x7A2', '\x7A3', '\a', '\x4', '\x2', '\x2', '\x7A3', '\x7A4', 
		'\x5', '\xD6', 'l', '\x2', '\x7A4', '\x7A5', '\a', '\x14', '\x2', '\x2', 
		'\x7A5', '\x7A6', '\x5', '\xD6', 'l', '\x2', '\x7A6', '\x7A7', '\a', '\x5', 
		'\x2', '\x2', '\x7A7', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x7A8', '\x7A9', 
		'\a', 'q', '\x2', '\x2', '\x7A9', '\x7AA', '\a', '\x4', '\x2', '\x2', 
		'\x7AA', '\x7AB', '\x5', '\xD6', 'l', '\x2', '\x7AB', '\x7AC', '\a', '\x5', 
		'\x2', '\x2', '\x7AC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7AE', 
		'\a', 'r', '\x2', '\x2', '\x7AE', '\x7AF', '\a', '\x4', '\x2', '\x2', 
		'\x7AF', '\x7B0', '\x5', '\xD6', 'l', '\x2', '\x7B0', '\x7B1', '\a', '\x5', 
		'\x2', '\x2', '\x7B1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x7B2', '\x7B3', 
		'\a', 's', '\x2', '\x2', '\x7B3', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\x7B4', '\x7B5', '\a', 't', '\x2', '\x2', '\x7B5', '\x7B6', '\a', '\x4', 
		'\x2', '\x2', '\x7B6', '\x7B7', '\x5', '\xD6', 'l', '\x2', '\x7B7', '\x7B8', 
		'\a', '\x5', '\x2', '\x2', '\x7B8', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\x7B9', '\x7BA', '\a', 'u', '\x2', '\x2', '\x7BA', '\x7BB', '\a', '\x4', 
		'\x2', '\x2', '\x7BB', '\x7BC', '\x5', '\xD6', 'l', '\x2', '\x7BC', '\x7BD', 
		'\a', '\x5', '\x2', '\x2', '\x7BD', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\x7BE', '\x7BF', '\a', 'v', '\x2', '\x2', '\x7BF', '\x7C0', '\a', '\x4', 
		'\x2', '\x2', '\x7C0', '\x7C1', '\x5', '\xD6', 'l', '\x2', '\x7C1', '\x7C2', 
		'\a', '\x5', '\x2', '\x2', '\x7C2', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\x7C3', '\x7C4', '\a', 'w', '\x2', '\x2', '\x7C4', '\x7C5', '\a', '\x4', 
		'\x2', '\x2', '\x7C5', '\x7C6', '\x5', '\xD6', 'l', '\x2', '\x7C6', '\x7C7', 
		'\a', '\x5', '\x2', '\x2', '\x7C7', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x7C8', '\x7C9', '\a', 'x', '\x2', '\x2', '\x7C9', '\x7CA', '\a', '\x4', 
		'\x2', '\x2', '\x7CA', '\x7CB', '\x5', '\xD6', 'l', '\x2', '\x7CB', '\x7CC', 
		'\a', '\x5', '\x2', '\x2', '\x7CC', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\x7CD', '\x7CE', '\a', 'y', '\x2', '\x2', '\x7CE', '\x7CF', '\a', '\x4', 
		'\x2', '\x2', '\x7CF', '\x7D0', '\x5', '\xD6', 'l', '\x2', '\x7D0', '\x7D1', 
		'\a', '\x5', '\x2', '\x2', '\x7D1', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\x7D2', '\x7D3', '\a', 'z', '\x2', '\x2', '\x7D3', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\x7D4', '\x7D5', '\a', '{', '\x2', '\x2', '\x7D5', '\x7D6', 
		'\a', '\x4', '\x2', '\x2', '\x7D6', '\x7D7', '\x5', '\xD6', 'l', '\x2', 
		'\x7D7', '\x7D8', '\a', '\x14', '\x2', '\x2', '\x7D8', '\x7D9', '\x5', 
		'\xD6', 'l', '\x2', '\x7D9', '\x7DA', '\a', '\x5', '\x2', '\x2', '\x7DA', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x7DC', '\a', '|', '\x2', 
		'\x2', '\x7DC', '\x7DD', '\a', '\x4', '\x2', '\x2', '\x7DD', '\x7DE', 
		'\x5', '\xD6', 'l', '\x2', '\x7DE', '\x7DF', '\a', '\x14', '\x2', '\x2', 
		'\x7DF', '\x7E0', '\x5', '\xD6', 'l', '\x2', '\x7E0', '\x7E1', '\a', '\x5', 
		'\x2', '\x2', '\x7E1', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E3', 
		'\a', '}', '\x2', '\x2', '\x7E3', '\x7E4', '\a', '\x4', '\x2', '\x2', 
		'\x7E4', '\x7E5', '\x5', '\xD6', 'l', '\x2', '\x7E5', '\x7E6', '\a', '\x14', 
		'\x2', '\x2', '\x7E6', '\x7E7', '\x5', '\xD6', 'l', '\x2', '\x7E7', '\x7E8', 
		'\a', '\x5', '\x2', '\x2', '\x7E8', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x7E9', '\x7EA', '\a', '~', '\x2', '\x2', '\x7EA', '\x7EB', '\a', '\x4', 
		'\x2', '\x2', '\x7EB', '\x7EC', '\x5', '\xD6', 'l', '\x2', '\x7EC', '\x7ED', 
		'\a', '\x14', '\x2', '\x2', '\x7ED', '\x7EE', '\x5', '\xD6', 'l', '\x2', 
		'\x7EE', '\x7EF', '\a', '\x5', '\x2', '\x2', '\x7EF', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\x7F0', '\x7F1', '\a', '\x7F', '\x2', '\x2', '\x7F1', '\x7F2', 
		'\a', '\x4', '\x2', '\x2', '\x7F2', '\x7F3', '\x5', '\xD6', 'l', '\x2', 
		'\x7F3', '\x7F4', '\a', '\x14', '\x2', '\x2', '\x7F4', '\x7F5', '\x5', 
		'\xD6', 'l', '\x2', '\x7F5', '\x7F6', '\a', '\x14', '\x2', '\x2', '\x7F6', 
		'\x7F7', '\x5', '\xD6', 'l', '\x2', '\x7F7', '\x7F8', '\a', '\x5', '\x2', 
		'\x2', '\x7F8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x7F9', '\x7FA', 
		'\a', '\x80', '\x2', '\x2', '\x7FA', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\x7FB', '\x7FC', '\a', '\x81', '\x2', '\x2', '\x7FC', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\x7FD', '\x7FE', '\a', '\x82', '\x2', '\x2', '\x7FE', 
		'\x7FF', '\a', '\x4', '\x2', '\x2', '\x7FF', '\x800', '\x5', '\xD6', 'l', 
		'\x2', '\x800', '\x801', '\a', '\x14', '\x2', '\x2', '\x801', '\x802', 
		'\x5', '\xD6', 'l', '\x2', '\x802', '\x803', '\a', '\x5', '\x2', '\x2', 
		'\x803', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x804', '\x805', '\a', '\x83', 
		'\x2', '\x2', '\x805', '\x806', '\a', '\x4', '\x2', '\x2', '\x806', '\x807', 
		'\x5', '\xD6', 'l', '\x2', '\x807', '\x808', '\a', '\x14', '\x2', '\x2', 
		'\x808', '\x809', '\x5', '\x3CA', '\x1E6', '\x2', '\x809', '\x80A', '\a', 
		'\x14', '\x2', '\x2', '\x80A', '\x80B', '\x5', '\xD6', 'l', '\x2', '\x80B', 
		'\x80C', '\a', '\x5', '\x2', '\x2', '\x80C', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x80D', '\x80E', '\a', '\x84', '\x2', '\x2', '\x80E', '\x80F', 
		'\a', '\x4', '\x2', '\x2', '\x80F', '\x810', '\x5', '\xD6', 'l', '\x2', 
		'\x810', '\x811', '\a', '\x5', '\x2', '\x2', '\x811', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x812', '\x813', '\a', '\x85', '\x2', '\x2', '\x813', 
		'\x814', '\a', '\x4', '\x2', '\x2', '\x814', '\x815', '\x5', '\x23A', 
		'\x11E', '\x2', '\x815', '\x816', '\a', '\x5', '\x2', '\x2', '\x816', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x817', '\x818', '\a', '\x86', '\x2', 
		'\x2', '\x818', '\x107', '\x3', '\x2', '\x2', '\x2', '\x819', '\x81A', 
		'\a', '\x87', '\x2', '\x2', '\x81A', '\x81B', '\a', '\x4', '\x2', '\x2', 
		'\x81B', '\x81C', '\x5', '\xD6', 'l', '\x2', '\x81C', '\x81D', '\a', '\x5', 
		'\x2', '\x2', '\x81D', '\x109', '\x3', '\x2', '\x2', '\x2', '\x81E', '\x81F', 
		'\a', '\x88', '\x2', '\x2', '\x81F', '\x820', '\a', '\x4', '\x2', '\x2', 
		'\x820', '\x821', '\x5', '\xD6', 'l', '\x2', '\x821', '\x822', '\a', '\x5', 
		'\x2', '\x2', '\x822', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x823', '\x824', 
		'\a', '\x89', '\x2', '\x2', '\x824', '\x825', '\a', '\x4', '\x2', '\x2', 
		'\x825', '\x826', '\x5', '\xD6', 'l', '\x2', '\x826', '\x827', '\a', '\x5', 
		'\x2', '\x2', '\x827', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x828', '\x829', 
		'\a', '\x8A', '\x2', '\x2', '\x829', '\x82A', '\a', '\x4', '\x2', '\x2', 
		'\x82A', '\x82B', '\x5', '\xD6', 'l', '\x2', '\x82B', '\x82C', '\a', '\x14', 
		'\x2', '\x2', '\x82C', '\x82D', '\x5', '\xD6', 'l', '\x2', '\x82D', '\x82E', 
		'\a', '\x5', '\x2', '\x2', '\x82E', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x82F', '\x830', '\a', '\x8B', '\x2', '\x2', '\x830', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x831', '\x832', '\a', '\x8C', '\x2', '\x2', '\x832', 
		'\x833', '\a', '\x4', '\x2', '\x2', '\x833', '\x834', '\x5', '\xD6', 'l', 
		'\x2', '\x834', '\x835', '\a', '\x14', '\x2', '\x2', '\x835', '\x836', 
		'\x5', '\xD6', 'l', '\x2', '\x836', '\x837', '\a', '\x5', '\x2', '\x2', 
		'\x837', '\x113', '\x3', '\x2', '\x2', '\x2', '\x838', '\x839', '\a', 
		'\x8D', '\x2', '\x2', '\x839', '\x83A', '\a', '\x4', '\x2', '\x2', '\x83A', 
		'\x83B', '\x5', '\xD6', 'l', '\x2', '\x83B', '\x83C', '\a', '\x14', '\x2', 
		'\x2', '\x83C', '\x83D', '\x5', '\xD6', 'l', '\x2', '\x83D', '\x83E', 
		'\a', '\x5', '\x2', '\x2', '\x83E', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x83F', '\x840', '\a', '\x8E', '\x2', '\x2', '\x840', '\x841', '\a', 
		'\x4', '\x2', '\x2', '\x841', '\x842', '\x5', '\xD6', 'l', '\x2', '\x842', 
		'\x843', '\a', '\x14', '\x2', '\x2', '\x843', '\x844', '\x5', '\xD6', 
		'l', '\x2', '\x844', '\x845', '\a', '\x5', '\x2', '\x2', '\x845', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x846', '\x847', '\a', '\x8F', '\x2', '\x2', 
		'\x847', '\x848', '\a', '\x4', '\x2', '\x2', '\x848', '\x849', '\x5', 
		'\xD6', 'l', '\x2', '\x849', '\x84A', '\a', '\x14', '\x2', '\x2', '\x84A', 
		'\x84B', '\x5', '\xD6', 'l', '\x2', '\x84B', '\x84C', '\a', '\x5', '\x2', 
		'\x2', '\x84C', '\x119', '\x3', '\x2', '\x2', '\x2', '\x84D', '\x84E', 
		'\a', '\x90', '\x2', '\x2', '\x84E', '\x84F', '\a', '\x4', '\x2', '\x2', 
		'\x84F', '\x850', '\x5', '\xD6', 'l', '\x2', '\x850', '\x851', '\a', '\x14', 
		'\x2', '\x2', '\x851', '\x852', '\x5', '\xD6', 'l', '\x2', '\x852', '\x853', 
		'\a', '\x5', '\x2', '\x2', '\x853', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x854', '\x855', '\a', '\x91', '\x2', '\x2', '\x855', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x856', '\x857', '\a', '\x92', '\x2', '\x2', '\x857', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x858', '\x859', '\a', '\x93', '\x2', 
		'\x2', '\x859', '\x85A', '\a', '\x4', '\x2', '\x2', '\x85A', '\x85B', 
		'\x5', '\xD6', 'l', '\x2', '\x85B', '\x85C', '\a', '\x5', '\x2', '\x2', 
		'\x85C', '\x121', '\x3', '\x2', '\x2', '\x2', '\x85D', '\x85E', '\a', 
		'\x94', '\x2', '\x2', '\x85E', '\x123', '\x3', '\x2', '\x2', '\x2', '\x85F', 
		'\x860', '\a', '\x95', '\x2', '\x2', '\x860', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x861', '\x862', '\a', '\x96', '\x2', '\x2', '\x862', '\x863', 
		'\a', '\x4', '\x2', '\x2', '\x863', '\x864', '\x5', '\xD6', 'l', '\x2', 
		'\x864', '\x865', '\a', '\x5', '\x2', '\x2', '\x865', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x866', '\x867', '\a', '\x97', '\x2', '\x2', '\x867', 
		'\x868', '\a', '\x4', '\x2', '\x2', '\x868', '\x869', '\x5', '\xD6', 'l', 
		'\x2', '\x869', '\x86A', '\a', '\x5', '\x2', '\x2', '\x86A', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x86B', '\x86C', '\a', '\x98', '\x2', '\x2', 
		'\x86C', '\x86D', '\a', '\x4', '\x2', '\x2', '\x86D', '\x86E', '\x5', 
		'\xD6', 'l', '\x2', '\x86E', '\x86F', '\a', '\x14', '\x2', '\x2', '\x86F', 
		'\x870', '\x5', '\xD6', 'l', '\x2', '\x870', '\x871', '\a', '\x5', '\x2', 
		'\x2', '\x871', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x872', '\x873', 
		'\a', '\x99', '\x2', '\x2', '\x873', '\x874', '\a', '\x4', '\x2', '\x2', 
		'\x874', '\x875', '\x5', '\xD6', 'l', '\x2', '\x875', '\x876', '\a', '\x14', 
		'\x2', '\x2', '\x876', '\x877', '\x5', '\xD6', 'l', '\x2', '\x877', '\x878', 
		'\a', '\x5', '\x2', '\x2', '\x878', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x879', '\x87A', '\a', '\x9A', '\x2', '\x2', '\x87A', '\x87B', '\a', 
		'\x4', '\x2', '\x2', '\x87B', '\x87C', '\x5', '\xD6', 'l', '\x2', '\x87C', 
		'\x87D', '\a', '\x5', '\x2', '\x2', '\x87D', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x87E', '\x87F', '\a', '\x9B', '\x2', '\x2', '\x87F', '\x880', 
		'\a', '\x4', '\x2', '\x2', '\x880', '\x881', '\x5', '\xD6', 'l', '\x2', 
		'\x881', '\x882', '\a', '\x5', '\x2', '\x2', '\x882', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x883', '\x884', '\a', '\x9C', '\x2', '\x2', '\x884', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x885', '\x886', '\a', '\x9D', '\x2', 
		'\x2', '\x886', '\x887', '\a', '\x4', '\x2', '\x2', '\x887', '\x888', 
		'\x5', '\xD6', 'l', '\x2', '\x888', '\x889', '\a', '\x5', '\x2', '\x2', 
		'\x889', '\x135', '\x3', '\x2', '\x2', '\x2', '\x88A', '\x88B', '\a', 
		'\x9E', '\x2', '\x2', '\x88B', '\x88C', '\a', '\x4', '\x2', '\x2', '\x88C', 
		'\x88D', '\x5', '\xD6', 'l', '\x2', '\x88D', '\x88E', '\a', '\x14', '\x2', 
		'\x2', '\x88E', '\x88F', '\x5', '\x27C', '\x13F', '\x2', '\x88F', '\x890', 
		'\a', '\x5', '\x2', '\x2', '\x890', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x891', '\x892', '\a', '\x9F', '\x2', '\x2', '\x892', '\x893', '\a', 
		'\x4', '\x2', '\x2', '\x893', '\x894', '\x5', '\xD6', 'l', '\x2', '\x894', 
		'\x895', '\a', '\x5', '\x2', '\x2', '\x895', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x896', '\x897', '\a', '\xA0', '\x2', '\x2', '\x897', '\x898', 
		'\a', '\x4', '\x2', '\x2', '\x898', '\x899', '\x5', '\xD6', 'l', '\x2', 
		'\x899', '\x89A', '\a', '\x5', '\x2', '\x2', '\x89A', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x89B', '\x89C', '\a', '\xA1', '\x2', '\x2', '\x89C', 
		'\x89D', '\a', '\x4', '\x2', '\x2', '\x89D', '\x89E', '\x5', '\x23E', 
		'\x120', '\x2', '\x89E', '\x89F', '\a', '\x5', '\x2', '\x2', '\x89F', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A1', '\a', '\xA2', '\x2', 
		'\x2', '\x8A1', '\x8A2', '\a', '\x4', '\x2', '\x2', '\x8A2', '\x8A3', 
		'\x5', '\xD6', 'l', '\x2', '\x8A3', '\x8A4', '\a', '\x5', '\x2', '\x2', 
		'\x8A4', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x8A5', '\x8A6', '\a', 
		'\xA3', '\x2', '\x2', '\x8A6', '\x8A7', '\a', '\x4', '\x2', '\x2', '\x8A7', 
		'\x8A8', '\x5', '\xD6', 'l', '\x2', '\x8A8', '\x8A9', '\a', '\x5', '\x2', 
		'\x2', '\x8A9', '\x141', '\x3', '\x2', '\x2', '\x2', '\x8AA', '\x8AB', 
		'\a', '\xA4', '\x2', '\x2', '\x8AB', '\x8AC', '\a', '\x4', '\x2', '\x2', 
		'\x8AC', '\x8AD', '\x5', '\xD6', 'l', '\x2', '\x8AD', '\x8AE', '\a', '\x5', 
		'\x2', '\x2', '\x8AE', '\x143', '\x3', '\x2', '\x2', '\x2', '\x8AF', '\x8B0', 
		'\a', '\xA5', '\x2', '\x2', '\x8B0', '\x8B1', '\a', '\x4', '\x2', '\x2', 
		'\x8B1', '\x8B2', '\x5', '\xD6', 'l', '\x2', '\x8B2', '\x8B3', '\a', '\x14', 
		'\x2', '\x2', '\x8B3', '\x8B4', '\x5', '\xD6', 'l', '\x2', '\x8B4', '\x8B5', 
		'\a', '\x5', '\x2', '\x2', '\x8B5', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x8B6', '\x8B7', '\a', '\xA6', '\x2', '\x2', '\x8B7', '\x8B8', '\a', 
		'\x4', '\x2', '\x2', '\x8B8', '\x8B9', '\x5', '\xD6', 'l', '\x2', '\x8B9', 
		'\x8BA', '\a', '\x5', '\x2', '\x2', '\x8BA', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x8BB', '\x8BC', '\a', '\xA7', '\x2', '\x2', '\x8BC', '\x8BD', 
		'\a', '\x4', '\x2', '\x2', '\x8BD', '\x8BE', '\x5', '\xD6', 'l', '\x2', 
		'\x8BE', '\x8BF', '\a', '\x5', '\x2', '\x2', '\x8BF', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x8C0', '\x8C1', '\a', '\xA8', '\x2', '\x2', '\x8C1', 
		'\x8C2', '\a', '\x4', '\x2', '\x2', '\x8C2', '\x8C3', '\x5', '\xD6', 'l', 
		'\x2', '\x8C3', '\x8C4', '\a', '\x14', '\x2', '\x2', '\x8C4', '\x8C5', 
		'\x5', '\xD6', 'l', '\x2', '\x8C5', '\x8C6', '\a', '\x5', '\x2', '\x2', 
		'\x8C6', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x8C7', '\x8C8', '\a', 
		'\xA9', '\x2', '\x2', '\x8C8', '\x8C9', '\a', '\x4', '\x2', '\x2', '\x8C9', 
		'\x8CA', '\x5', '\xD6', 'l', '\x2', '\x8CA', '\x8CB', '\a', '\x5', '\x2', 
		'\x2', '\x8CB', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x8CC', '\x8CD', 
		'\a', '\xAA', '\x2', '\x2', '\x8CD', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x8CE', '\x8CF', '\a', '\xAB', '\x2', '\x2', '\x8CF', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x8D0', '\x8D1', '\a', '\xAC', '\x2', '\x2', '\x8D1', 
		'\x8D2', '\a', '\x4', '\x2', '\x2', '\x8D2', '\x8D3', '\x5', '\xD6', 'l', 
		'\x2', '\x8D3', '\x8D4', '\a', '\x14', '\x2', '\x2', '\x8D4', '\x8D5', 
		'\x5', '\x292', '\x14A', '\x2', '\x8D5', '\x8D6', '\a', '\x5', '\x2', 
		'\x2', '\x8D6', '\x153', '\x3', '\x2', '\x2', '\x2', '\x8D7', '\x8D8', 
		'\a', '\xAD', '\x2', '\x2', '\x8D8', '\x8D9', '\a', '\x4', '\x2', '\x2', 
		'\x8D9', '\x8DA', '\x5', '\xD6', 'l', '\x2', '\x8DA', '\x8DB', '\a', '\x14', 
		'\x2', '\x2', '\x8DB', '\x8DC', '\x5', '\x2A4', '\x153', '\x2', '\x8DC', 
		'\x8DD', '\a', '\x5', '\x2', '\x2', '\x8DD', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x8DE', '\x8DF', '\a', '\xAE', '\x2', '\x2', '\x8DF', '\x8E0', 
		'\a', '\x4', '\x2', '\x2', '\x8E0', '\x8E1', '\x5', '\xD6', 'l', '\x2', 
		'\x8E1', '\x8E2', '\a', '\x5', '\x2', '\x2', '\x8E2', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x8E3', '\x8E4', '\a', '\xAF', '\x2', '\x2', '\x8E4', 
		'\x8E5', '\a', '\x4', '\x2', '\x2', '\x8E5', '\x8E6', '\x5', '\xD6', 'l', 
		'\x2', '\x8E6', '\x8E7', '\a', '\x5', '\x2', '\x2', '\x8E7', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x8E8', '\x8E9', '\a', '\xB0', '\x2', '\x2', 
		'\x8E9', '\x8EA', '\a', '\x4', '\x2', '\x2', '\x8EA', '\x8EB', '\x5', 
		'\xD6', 'l', '\x2', '\x8EB', '\x8EC', '\a', '\x5', '\x2', '\x2', '\x8EC', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x8ED', '\x8EE', '\a', '\xB1', '\x2', 
		'\x2', '\x8EE', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x8EF', '\x8F0', 
		'\a', '\xB2', '\x2', '\x2', '\x8F0', '\x8F1', '\a', '\x4', '\x2', '\x2', 
		'\x8F1', '\x8F2', '\x5', '\xD6', 'l', '\x2', '\x8F2', '\x8F3', '\a', '\x5', 
		'\x2', '\x2', '\x8F3', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x8F4', '\x8F5', 
		'\a', '\xB3', '\x2', '\x2', '\x8F5', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x8F6', '\x8F7', '\a', '\xB4', '\x2', '\x2', '\x8F7', '\x8F8', '\a', 
		'\x4', '\x2', '\x2', '\x8F8', '\x8F9', '\x5', '\xD6', 'l', '\x2', '\x8F9', 
		'\x8FA', '\a', '\x5', '\x2', '\x2', '\x8FA', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x8FB', '\x8FC', '\a', '\xB5', '\x2', '\x2', '\x8FC', '\x8FD', 
		'\a', '\x4', '\x2', '\x2', '\x8FD', '\x8FE', '\x5', '\xD6', 'l', '\x2', 
		'\x8FE', '\x8FF', '\a', '\x5', '\x2', '\x2', '\x8FF', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x900', '\x901', '\a', '\xB6', '\x2', '\x2', '\x901', 
		'\x902', '\a', '\x4', '\x2', '\x2', '\x902', '\x903', '\x5', '\xD6', 'l', 
		'\x2', '\x903', '\x904', '\a', '\x5', '\x2', '\x2', '\x904', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x905', '\x906', '\a', '\xB7', '\x2', '\x2', 
		'\x906', '\x907', '\a', '\x4', '\x2', '\x2', '\x907', '\x908', '\x5', 
		'\xD6', 'l', '\x2', '\x908', '\x909', '\a', '\x5', '\x2', '\x2', '\x909', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x90A', '\x90B', '\a', '\xB8', '\x2', 
		'\x2', '\x90B', '\x90C', '\a', '\x4', '\x2', '\x2', '\x90C', '\x90D', 
		'\x5', '\xD6', 'l', '\x2', '\x90D', '\x90E', '\a', '\x5', '\x2', '\x2', 
		'\x90E', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x90F', '\x910', '\a', 
		'\xB9', '\x2', '\x2', '\x910', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x911', 
		'\x912', '\a', '\xBA', '\x2', '\x2', '\x912', '\x913', '\a', '\x4', '\x2', 
		'\x2', '\x913', '\x914', '\x5', '\xD6', 'l', '\x2', '\x914', '\x915', 
		'\a', '\x14', '\x2', '\x2', '\x915', '\x916', '\x5', '\xD6', 'l', '\x2', 
		'\x916', '\x917', '\a', '\x5', '\x2', '\x2', '\x917', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x918', '\x919', '\a', '\xBB', '\x2', '\x2', '\x919', 
		'\x91A', '\a', '\x4', '\x2', '\x2', '\x91A', '\x91B', '\x5', '\xD6', 'l', 
		'\x2', '\x91B', '\x91C', '\a', '\x5', '\x2', '\x2', '\x91C', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x91D', '\x91E', '\a', '\xBC', '\x2', '\x2', 
		'\x91E', '\x91F', '\a', '\x4', '\x2', '\x2', '\x91F', '\x920', '\x5', 
		'\xD6', 'l', '\x2', '\x920', '\x921', '\a', '\x14', '\x2', '\x2', '\x921', 
		'\x922', '\x5', '\xD6', 'l', '\x2', '\x922', '\x923', '\a', '\x14', '\x2', 
		'\x2', '\x923', '\x924', '\x5', '\x2C2', '\x162', '\x2', '\x924', '\x925', 
		'\a', '\x5', '\x2', '\x2', '\x925', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x926', '\x927', '\a', '\xBD', '\x2', '\x2', '\x927', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x928', '\x929', '\a', '\xBE', '\x2', '\x2', '\x929', 
		'\x92A', '\a', '\x4', '\x2', '\x2', '\x92A', '\x92B', '\x5', '\xD6', 'l', 
		'\x2', '\x92B', '\x92C', '\a', '\x5', '\x2', '\x2', '\x92C', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x92D', '\x92E', '\a', '\xBF', '\x2', '\x2', 
		'\x92E', '\x92F', '\a', '\x4', '\x2', '\x2', '\x92F', '\x930', '\x5', 
		'\xD6', 'l', '\x2', '\x930', '\x931', '\a', '\x14', '\x2', '\x2', '\x931', 
		'\x932', '\x5', '\xD6', 'l', '\x2', '\x932', '\x933', '\a', '\x14', '\x2', 
		'\x2', '\x933', '\x934', '\x5', '\xD6', 'l', '\x2', '\x934', '\x935', 
		'\a', '\x5', '\x2', '\x2', '\x935', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x936', '\x937', '\a', '\xC0', '\x2', '\x2', '\x937', '\x17B', '\x3', 
		'\x2', '\x2', '\x2', '\x938', '\x939', '\a', '\xC1', '\x2', '\x2', '\x939', 
		'\x93A', '\a', '\x4', '\x2', '\x2', '\x93A', '\x93B', '\x5', '\xD6', 'l', 
		'\x2', '\x93B', '\x93C', '\a', '\x5', '\x2', '\x2', '\x93C', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x93D', '\x93E', '\a', '\xC2', '\x2', '\x2', 
		'\x93E', '\x93F', '\a', '\x4', '\x2', '\x2', '\x93F', '\x940', '\x5', 
		'\xD6', 'l', '\x2', '\x940', '\x941', '\a', '\x5', '\x2', '\x2', '\x941', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x942', '\x943', '\a', '\xC3', '\x2', 
		'\x2', '\x943', '\x944', '\a', '\x4', '\x2', '\x2', '\x944', '\x945', 
		'\x5', '\xD6', 'l', '\x2', '\x945', '\x946', '\a', '\x5', '\x2', '\x2', 
		'\x946', '\x181', '\x3', '\x2', '\x2', '\x2', '\x947', '\x948', '\a', 
		'\xC4', '\x2', '\x2', '\x948', '\x949', '\a', '\x4', '\x2', '\x2', '\x949', 
		'\x94A', '\x5', '\xD6', 'l', '\x2', '\x94A', '\x94B', '\a', '\x5', '\x2', 
		'\x2', '\x94B', '\x183', '\x3', '\x2', '\x2', '\x2', '\x94C', '\x94D', 
		'\a', '\xC5', '\x2', '\x2', '\x94D', '\x94E', '\a', '\x4', '\x2', '\x2', 
		'\x94E', '\x94F', '\x5', '\xD6', 'l', '\x2', '\x94F', '\x950', '\a', '\x5', 
		'\x2', '\x2', '\x950', '\x185', '\x3', '\x2', '\x2', '\x2', '\x951', '\x952', 
		'\a', '\xC6', '\x2', '\x2', '\x952', '\x953', '\a', '\x4', '\x2', '\x2', 
		'\x953', '\x954', '\x5', '\xD6', 'l', '\x2', '\x954', '\x955', '\a', '\x5', 
		'\x2', '\x2', '\x955', '\x187', '\x3', '\x2', '\x2', '\x2', '\x956', '\x957', 
		'\a', '\xC7', '\x2', '\x2', '\x957', '\x958', '\a', '\x4', '\x2', '\x2', 
		'\x958', '\x959', '\x5', '\xD6', 'l', '\x2', '\x959', '\x95A', '\a', '\x5', 
		'\x2', '\x2', '\x95A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x95B', '\x95C', 
		'\a', '\xC8', '\x2', '\x2', '\x95C', '\x95D', '\a', '\x4', '\x2', '\x2', 
		'\x95D', '\x95E', '\x5', '\xD6', 'l', '\x2', '\x95E', '\x95F', '\a', '\x5', 
		'\x2', '\x2', '\x95F', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x960', '\x961', 
		'\a', '\xC9', '\x2', '\x2', '\x961', '\x962', '\a', '\x4', '\x2', '\x2', 
		'\x962', '\x963', '\x5', '\xD6', 'l', '\x2', '\x963', '\x964', '\a', '\x5', 
		'\x2', '\x2', '\x964', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x965', '\x966', 
		'\a', '\xCA', '\x2', '\x2', '\x966', '\x967', '\a', '\x4', '\x2', '\x2', 
		'\x967', '\x968', '\x5', '\xD6', 'l', '\x2', '\x968', '\x969', '\a', '\x14', 
		'\x2', '\x2', '\x969', '\x96A', '\x5', '\xD6', 'l', '\x2', '\x96A', '\x96B', 
		'\a', '\x5', '\x2', '\x2', '\x96B', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x96C', '\x96D', '\a', '\xCB', '\x2', '\x2', '\x96D', '\x96E', '\a', 
		'\x4', '\x2', '\x2', '\x96E', '\x96F', '\x5', '\xD6', 'l', '\x2', '\x96F', 
		'\x970', '\a', '\x14', '\x2', '\x2', '\x970', '\x971', '\x5', '\xD6', 
		'l', '\x2', '\x971', '\x972', '\a', '\x5', '\x2', '\x2', '\x972', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x973', '\x974', '\a', '\xCC', '\x2', '\x2', 
		'\x974', '\x975', '\a', '\x4', '\x2', '\x2', '\x975', '\x976', '\x5', 
		'\xD6', 'l', '\x2', '\x976', '\x977', '\a', '\x5', '\x2', '\x2', '\x977', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x978', '\x979', '\a', '\xCD', '\x2', 
		'\x2', '\x979', '\x97A', '\a', '\x4', '\x2', '\x2', '\x97A', '\x97B', 
		'\x5', '\xD6', 'l', '\x2', '\x97B', '\x97C', '\a', '\x5', '\x2', '\x2', 
		'\x97C', '\x195', '\x3', '\x2', '\x2', '\x2', '\x97D', '\x97E', '\a', 
		'\xCE', '\x2', '\x2', '\x97E', '\x97F', '\a', '\x4', '\x2', '\x2', '\x97F', 
		'\x980', '\x5', '\xD6', 'l', '\x2', '\x980', '\x981', '\a', '\x5', '\x2', 
		'\x2', '\x981', '\x197', '\x3', '\x2', '\x2', '\x2', '\x982', '\x983', 
		'\a', '\xCF', '\x2', '\x2', '\x983', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x984', '\x985', '\a', '\xD0', '\x2', '\x2', '\x985', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x986', '\x987', '\a', '\xD1', '\x2', '\x2', '\x987', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x988', '\x989', '\a', '\xD2', '\x2', 
		'\x2', '\x989', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x98A', '\x98B', 
		'\a', '\xD3', '\x2', '\x2', '\x98B', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x98C', '\x98D', '\a', '\xD4', '\x2', '\x2', '\x98D', '\x98E', '\a', 
		'\x4', '\x2', '\x2', '\x98E', '\x98F', '\x5', '\xD6', 'l', '\x2', '\x98F', 
		'\x990', '\a', '\x5', '\x2', '\x2', '\x990', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\x991', '\x992', '\a', '\xD5', '\x2', '\x2', '\x992', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x993', '\x994', '\a', '\xD6', '\x2', '\x2', 
		'\x994', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x995', '\x996', '\a', 
		'\xD7', '\x2', '\x2', '\x996', '\x997', '\a', '\x4', '\x2', '\x2', '\x997', 
		'\x998', '\x5', '\xD6', 'l', '\x2', '\x998', '\x999', '\a', '\x14', '\x2', 
		'\x2', '\x999', '\x99A', '\x5', '\xD6', 'l', '\x2', '\x99A', '\x99B', 
		'\a', '\x14', '\x2', '\x2', '\x99B', '\x99C', '\x5', '\x2CA', '\x166', 
		'\x2', '\x99C', '\x99D', '\a', '\x5', '\x2', '\x2', '\x99D', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x99E', '\x99F', '\a', '\xD8', '\x2', '\x2', 
		'\x99F', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x9A0', '\x9A1', '\a', 
		'\xD9', '\x2', '\x2', '\x9A1', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x9A2', 
		'\x9A3', '\a', '\xDA', '\x2', '\x2', '\x9A3', '\x9A4', '\a', '\x4', '\x2', 
		'\x2', '\x9A4', '\x9A5', '\x5', '\xD6', 'l', '\x2', '\x9A5', '\x9A6', 
		'\a', '\x14', '\x2', '\x2', '\x9A6', '\x9A7', '\x5', '\xD6', 'l', '\x2', 
		'\x9A7', '\x9A8', '\a', '\x5', '\x2', '\x2', '\x9A8', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x9A9', '\x9AA', '\a', '\xDB', '\x2', '\x2', '\x9AA', 
		'\x9AB', '\a', '\x4', '\x2', '\x2', '\x9AB', '\x9AC', '\x5', '\xD6', 'l', 
		'\x2', '\x9AC', '\x9AD', '\a', '\x5', '\x2', '\x2', '\x9AD', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x9AE', '\x9AF', '\a', '\xDC', '\x2', '\x2', 
		'\x9AF', '\x9B0', '\a', '\x4', '\x2', '\x2', '\x9B0', '\x9B1', '\x5', 
		'\xD6', 'l', '\x2', '\x9B1', '\x9B2', '\a', '\x14', '\x2', '\x2', '\x9B2', 
		'\x9B3', '\x5', '\xD6', 'l', '\x2', '\x9B3', '\x9B4', '\a', '\x5', '\x2', 
		'\x2', '\x9B4', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9B6', 
		'\a', '\xDD', '\x2', '\x2', '\x9B6', '\x9B7', '\a', '\x4', '\x2', '\x2', 
		'\x9B7', '\x9B8', '\x5', '\xD6', 'l', '\x2', '\x9B8', '\x9B9', '\a', '\x14', 
		'\x2', '\x2', '\x9B9', '\x9BA', '\x5', '\xD6', 'l', '\x2', '\x9BA', '\x9BB', 
		'\a', '\x5', '\x2', '\x2', '\x9BB', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x9BC', '\x9BD', '\a', '\xDE', '\x2', '\x2', '\x9BD', '\x9BE', '\a', 
		'\x4', '\x2', '\x2', '\x9BE', '\x9BF', '\x5', '\xD6', 'l', '\x2', '\x9BF', 
		'\x9C0', '\a', '\x14', '\x2', '\x2', '\x9C0', '\x9C1', '\x5', '\xD6', 
		'l', '\x2', '\x9C1', '\x9C2', '\a', '\x5', '\x2', '\x2', '\x9C2', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\a', '\xDF', '\x2', '\x2', 
		'\x9C4', '\x9C5', '\a', '\x4', '\x2', '\x2', '\x9C5', '\x9C6', '\x5', 
		'\xD6', 'l', '\x2', '\x9C6', '\x9C7', '\a', '\x5', '\x2', '\x2', '\x9C7', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x9C8', '\x9C9', '\a', '\xE0', '\x2', 
		'\x2', '\x9C9', '\x9CA', '\a', '\x4', '\x2', '\x2', '\x9CA', '\x9CB', 
		'\x5', '\xD6', 'l', '\x2', '\x9CB', '\x9CC', '\a', '\x5', '\x2', '\x2', 
		'\x9CC', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x9CD', '\x9CE', '\a', 
		'\xE1', '\x2', '\x2', '\x9CE', '\x9CF', '\a', '\x4', '\x2', '\x2', '\x9CF', 
		'\x9D0', '\x5', '\xD6', 'l', '\x2', '\x9D0', '\x9D1', '\a', '\x5', '\x2', 
		'\x2', '\x9D1', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x9D2', '\x9D3', 
		'\a', '\xE2', '\x2', '\x2', '\x9D3', '\x9D4', '\a', '\x4', '\x2', '\x2', 
		'\x9D4', '\x9D5', '\x5', '\xD6', 'l', '\x2', '\x9D5', '\x9D6', '\a', '\x5', 
		'\x2', '\x2', '\x9D6', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x9D7', '\x9D8', 
		'\a', '\xE3', '\x2', '\x2', '\x9D8', '\x9D9', '\a', '\x4', '\x2', '\x2', 
		'\x9D9', '\x9DA', '\x5', '\xD6', 'l', '\x2', '\x9DA', '\x9DB', '\a', '\x5', 
		'\x2', '\x2', '\x9DB', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x9DC', '\x9DD', 
		'\a', '\xE4', '\x2', '\x2', '\x9DD', '\x9DE', '\a', '\x4', '\x2', '\x2', 
		'\x9DE', '\x9DF', '\x5', '\xD6', 'l', '\x2', '\x9DF', '\x9E0', '\a', '\x5', 
		'\x2', '\x2', '\x9E0', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x9E1', '\x9E2', 
		'\a', '\xE5', '\x2', '\x2', '\x9E2', '\x9E3', '\a', '\x4', '\x2', '\x2', 
		'\x9E3', '\x9E4', '\x5', '\xD6', 'l', '\x2', '\x9E4', '\x9E5', '\a', '\x5', 
		'\x2', '\x2', '\x9E5', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x9E6', '\x9E7', 
		'\a', '\xE6', '\x2', '\x2', '\x9E7', '\x9E8', '\a', '\x4', '\x2', '\x2', 
		'\x9E8', '\x9E9', '\x5', '\xD6', 'l', '\x2', '\x9E9', '\x9EA', '\a', '\x14', 
		'\x2', '\x2', '\x9EA', '\x9EB', '\x5', '\xD6', 'l', '\x2', '\x9EB', '\x9EC', 
		'\a', '\x5', '\x2', '\x2', '\x9EC', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\x9ED', '\x9EE', '\a', '\xE7', '\x2', '\x2', '\x9EE', '\x9EF', '\a', 
		'\x4', '\x2', '\x2', '\x9EF', '\x9F0', '\x5', '\xD6', 'l', '\x2', '\x9F0', 
		'\x9F1', '\a', '\x5', '\x2', '\x2', '\x9F1', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x9F2', '\x9F3', '\a', '\xE8', '\x2', '\x2', '\x9F3', '\x9F4', 
		'\a', '\x4', '\x2', '\x2', '\x9F4', '\x9F5', '\x5', '\xD6', 'l', '\x2', 
		'\x9F5', '\x9F6', '\a', '\x5', '\x2', '\x2', '\x9F6', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x9F7', '\x9F8', '\a', '\xE9', '\x2', '\x2', '\x9F8', 
		'\x9F9', '\a', '\x4', '\x2', '\x2', '\x9F9', '\x9FA', '\x5', '\xD6', 'l', 
		'\x2', '\x9FA', '\x9FB', '\a', '\x5', '\x2', '\x2', '\x9FB', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9FD', '\a', '\xEA', '\x2', '\x2', 
		'\x9FD', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x9FE', '\x9FF', '\a', 
		'\xEB', '\x2', '\x2', '\x9FF', '\xA00', '\a', '\x4', '\x2', '\x2', '\xA00', 
		'\xA01', '\x5', '\xD6', 'l', '\x2', '\xA01', '\xA02', '\a', '\x5', '\x2', 
		'\x2', '\xA02', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\xA03', '\xA04', 
		'\a', '\xEC', '\x2', '\x2', '\xA04', '\xA05', '\a', '\x4', '\x2', '\x2', 
		'\xA05', '\xA06', '\x5', '\xD6', 'l', '\x2', '\xA06', '\xA07', '\a', '\x5', 
		'\x2', '\x2', '\xA07', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\xA08', '\xA09', 
		'\a', '\xED', '\x2', '\x2', '\xA09', '\xA0A', '\a', '\x4', '\x2', '\x2', 
		'\xA0A', '\xA0B', '\x5', '\xD6', 'l', '\x2', '\xA0B', '\xA0C', '\a', '\x14', 
		'\x2', '\x2', '\xA0C', '\xA0D', '\x5', '\xD6', 'l', '\x2', '\xA0D', '\xA0E', 
		'\a', '\x5', '\x2', '\x2', '\xA0E', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\xA0F', '\xA10', '\a', '\xEE', '\x2', '\x2', '\xA10', '\x1D7', '\x3', 
		'\x2', '\x2', '\x2', '\xA11', '\xA12', '\a', '\xEF', '\x2', '\x2', '\xA12', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\xA13', '\xA14', '\a', '\xF0', '\x2', 
		'\x2', '\xA14', '\xA15', '\a', '\x4', '\x2', '\x2', '\xA15', '\xA16', 
		'\x5', '\xD6', 'l', '\x2', '\xA16', '\xA17', '\a', '\x5', '\x2', '\x2', 
		'\xA17', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\xA18', '\xA19', '\a', 
		'\xF1', '\x2', '\x2', '\xA19', '\xA1A', '\a', '\x4', '\x2', '\x2', '\xA1A', 
		'\xA1B', '\x5', '\xD6', 'l', '\x2', '\xA1B', '\xA1C', '\a', '\x14', '\x2', 
		'\x2', '\xA1C', '\xA1D', '\x5', '\xD6', 'l', '\x2', '\xA1D', '\xA1E', 
		'\a', '\x5', '\x2', '\x2', '\xA1E', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\xA1F', '\xA20', '\a', '\xF2', '\x2', '\x2', '\xA20', '\xA21', '\a', 
		'\x4', '\x2', '\x2', '\xA21', '\xA22', '\x5', '\xD6', 'l', '\x2', '\xA22', 
		'\xA23', '\a', '\x14', '\x2', '\x2', '\xA23', '\xA24', '\x5', '\x23C', 
		'\x11F', '\x2', '\xA24', '\xA25', '\a', '\x5', '\x2', '\x2', '\xA25', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\xA26', '\xA27', '\a', '\xF3', '\x2', 
		'\x2', '\xA27', '\xA28', '\a', '\x4', '\x2', '\x2', '\xA28', '\xA29', 
		'\x5', '\xD6', 'l', '\x2', '\xA29', '\xA2A', '\a', '\x14', '\x2', '\x2', 
		'\xA2A', '\xA2B', '\x5', '\xD6', 'l', '\x2', '\xA2B', '\xA2C', '\a', '\x5', 
		'\x2', '\x2', '\xA2C', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\xA2D', '\xA2E', 
		'\a', '\xF4', '\x2', '\x2', '\xA2E', '\xA2F', '\a', '\x4', '\x2', '\x2', 
		'\xA2F', '\xA30', '\x5', '\xD6', 'l', '\x2', '\xA30', '\xA31', '\a', '\x14', 
		'\x2', '\x2', '\xA31', '\xA32', '\x5', '\xD6', 'l', '\x2', '\xA32', '\xA33', 
		'\a', '\x14', '\x2', '\x2', '\xA33', '\xA34', '\x5', '\xD6', 'l', '\x2', 
		'\xA34', '\xA35', '\a', '\x5', '\x2', '\x2', '\xA35', '\x1E3', '\x3', 
		'\x2', '\x2', '\x2', '\xA36', '\xA37', '\a', '\xF5', '\x2', '\x2', '\xA37', 
		'\xA38', '\a', '\x4', '\x2', '\x2', '\xA38', '\xA39', '\x5', '\xD6', 'l', 
		'\x2', '\xA39', '\xA3A', '\a', '\x14', '\x2', '\x2', '\xA3A', '\xA3B', 
		'\x5', '\xD6', 'l', '\x2', '\xA3B', '\xA3C', '\a', '\x5', '\x2', '\x2', 
		'\xA3C', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\xA3D', '\xA3E', '\a', 
		'\xF6', '\x2', '\x2', '\xA3E', '\xA3F', '\a', '\x4', '\x2', '\x2', '\xA3F', 
		'\xA40', '\x5', '\xD6', 'l', '\x2', '\xA40', '\xA41', '\a', '\x14', '\x2', 
		'\x2', '\xA41', '\xA42', '\x5', '\xD6', 'l', '\x2', '\xA42', '\xA43', 
		'\a', '\x14', '\x2', '\x2', '\xA43', '\xA44', '\x5', '\xD6', 'l', '\x2', 
		'\xA44', '\xA45', '\a', '\x14', '\x2', '\x2', '\xA45', '\xA46', '\x5', 
		'\x2D0', '\x169', '\x2', '\xA46', '\xA47', '\a', '\x5', '\x2', '\x2', 
		'\xA47', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\xA48', '\xA49', '\a', 
		'\xF7', '\x2', '\x2', '\xA49', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\xA4A', 
		'\xA4B', '\a', '\xF8', '\x2', '\x2', '\xA4B', '\xA4C', '\a', '\x4', '\x2', 
		'\x2', '\xA4C', '\xA4D', '\x5', '\xD6', 'l', '\x2', '\xA4D', '\xA4E', 
		'\a', '\x5', '\x2', '\x2', '\xA4E', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\xA4F', '\xA50', '\a', '\xF9', '\x2', '\x2', '\xA50', '\xA51', '\a', 
		'\x4', '\x2', '\x2', '\xA51', '\xA52', '\x5', '\xD6', 'l', '\x2', '\xA52', 
		'\xA53', '\a', '\x14', '\x2', '\x2', '\xA53', '\xA54', '\x5', '\xD6', 
		'l', '\x2', '\xA54', '\xA55', '\a', '\x5', '\x2', '\x2', '\xA55', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\xA56', '\xA57', '\a', '\xFA', '\x2', '\x2', 
		'\xA57', '\xA58', '\a', '\x4', '\x2', '\x2', '\xA58', '\xA59', '\x5', 
		'\xD6', 'l', '\x2', '\xA59', '\xA5A', '\a', '\x14', '\x2', '\x2', '\xA5A', 
		'\xA5B', '\x5', '\xD6', 'l', '\x2', '\xA5B', '\xA5C', '\a', '\x5', '\x2', 
		'\x2', '\xA5C', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\xA5D', '\xA5E', 
		'\a', '\xFB', '\x2', '\x2', '\xA5E', '\xA5F', '\a', '\x4', '\x2', '\x2', 
		'\xA5F', '\xA60', '\x5', '\xD6', 'l', '\x2', '\xA60', '\xA61', '\a', '\x14', 
		'\x2', '\x2', '\xA61', '\xA62', '\x5', '\xD6', 'l', '\x2', '\xA62', '\xA63', 
		'\a', '\x5', '\x2', '\x2', '\xA63', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\xA64', '\xA65', '\a', '\xFC', '\x2', '\x2', '\xA65', '\xA66', '\a', 
		'\x4', '\x2', '\x2', '\xA66', '\xA67', '\x5', '\xD6', 'l', '\x2', '\xA67', 
		'\xA68', '\a', '\x5', '\x2', '\x2', '\xA68', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\xA69', '\xA6A', '\a', '\xFD', '\x2', '\x2', '\xA6A', '\xA6B', 
		'\a', '\x4', '\x2', '\x2', '\xA6B', '\xA6C', '\x5', '\xD6', 'l', '\x2', 
		'\xA6C', '\xA6D', '\a', '\x5', '\x2', '\x2', '\xA6D', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\xA6E', '\xA6F', '\a', '\xFE', '\x2', '\x2', '\xA6F', 
		'\xA70', '\a', '\x4', '\x2', '\x2', '\xA70', '\xA71', '\x5', '\xD6', 'l', 
		'\x2', '\xA71', '\xA72', '\a', '\x14', '\x2', '\x2', '\xA72', '\xA73', 
		'\x5', '\xD6', 'l', '\x2', '\xA73', '\xA74', '\a', '\x14', '\x2', '\x2', 
		'\xA74', '\xA75', '\x5', '\xD6', 'l', '\x2', '\xA75', '\xA76', '\a', '\x14', 
		'\x2', '\x2', '\xA76', '\xA77', '\x5', '\xD6', 'l', '\x2', '\xA77', '\xA78', 
		'\a', '\x14', '\x2', '\x2', '\xA78', '\xA79', '\x5', '\xD6', 'l', '\x2', 
		'\xA79', '\xA7A', '\a', '\x5', '\x2', '\x2', '\xA7A', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7B', '\xA7C', '\a', '\xFF', '\x2', '\x2', '\xA7C', 
		'\xA7D', '\a', '\x4', '\x2', '\x2', '\xA7D', '\xA7E', '\x5', '\xD6', 'l', 
		'\x2', '\xA7E', '\xA7F', '\a', '\x14', '\x2', '\x2', '\xA7F', '\xA80', 
		'\x5', '\xD6', 'l', '\x2', '\xA80', '\xA81', '\a', '\x14', '\x2', '\x2', 
		'\xA81', '\xA82', '\x5', '\xD6', 'l', '\x2', '\xA82', '\xA83', '\a', '\x14', 
		'\x2', '\x2', '\xA83', '\xA84', '\x5', '\xD6', 'l', '\x2', '\xA84', '\xA85', 
		'\a', '\x14', '\x2', '\x2', '\xA85', '\xA86', '\x5', '\xD6', 'l', '\x2', 
		'\xA86', '\xA87', '\a', '\x5', '\x2', '\x2', '\xA87', '\x1F9', '\x3', 
		'\x2', '\x2', '\x2', '\xA88', '\xA89', '\a', '\x100', '\x2', '\x2', '\xA89', 
		'\xA8A', '\a', '\x4', '\x2', '\x2', '\xA8A', '\xA8B', '\x5', '\xD6', 'l', 
		'\x2', '\xA8B', '\xA8C', '\a', '\x14', '\x2', '\x2', '\xA8C', '\xA8D', 
		'\x5', '\xD6', 'l', '\x2', '\xA8D', '\xA8E', '\a', '\x14', '\x2', '\x2', 
		'\xA8E', '\xA8F', '\x5', '\xD6', 'l', '\x2', '\xA8F', '\xA90', '\a', '\x14', 
		'\x2', '\x2', '\xA90', '\xA91', '\x5', '\xD6', 'l', '\x2', '\xA91', '\xA92', 
		'\a', '\x14', '\x2', '\x2', '\xA92', '\xA93', '\x5', '\xD6', 'l', '\x2', 
		'\xA93', '\xA94', '\a', '\x5', '\x2', '\x2', '\xA94', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\xA95', '\xA96', '\a', '\x101', '\x2', '\x2', '\xA96', 
		'\xA97', '\a', '\x4', '\x2', '\x2', '\xA97', '\xA98', '\x5', '\xD6', 'l', 
		'\x2', '\xA98', '\xA99', '\a', '\x14', '\x2', '\x2', '\xA99', '\xA9A', 
		'\x5', '\xD6', 'l', '\x2', '\xA9A', '\xA9B', '\a', '\x5', '\x2', '\x2', 
		'\xA9B', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\xA9C', '\xA9D', '\a', 
		'\x102', '\x2', '\x2', '\xA9D', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\xA9E', 
		'\xA9F', '\a', '\x103', '\x2', '\x2', '\xA9F', '\xAA0', '\a', '\x4', '\x2', 
		'\x2', '\xAA0', '\xAA1', '\x5', '\xD6', 'l', '\x2', '\xAA1', '\xAA2', 
		'\a', '\x14', '\x2', '\x2', '\xAA2', '\xAA3', '\x5', '\x2DA', '\x16E', 
		'\x2', '\xAA3', '\xAA4', '\a', '\x5', '\x2', '\x2', '\xAA4', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\xAA5', '\xAA6', '\a', '\x104', '\x2', '\x2', 
		'\xAA6', '\xAA7', '\a', '\x4', '\x2', '\x2', '\xAA7', '\xAA8', '\x5', 
		'\xD6', 'l', '\x2', '\xAA8', '\xAA9', '\a', '\x5', '\x2', '\x2', '\xAA9', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\xAAA', '\xAAB', '\a', '\x105', 
		'\x2', '\x2', '\xAAB', '\xAAC', '\a', '\x4', '\x2', '\x2', '\xAAC', '\xAAD', 
		'\x5', '\xD6', 'l', '\x2', '\xAAD', '\xAAE', '\a', '\x5', '\x2', '\x2', 
		'\xAAE', '\x205', '\x3', '\x2', '\x2', '\x2', '\xAAF', '\xAB0', '\a', 
		'\x106', '\x2', '\x2', '\xAB0', '\xAB1', '\a', '\x4', '\x2', '\x2', '\xAB1', 
		'\xAB2', '\x5', '\xD6', 'l', '\x2', '\xAB2', '\xAB3', '\a', '\x5', '\x2', 
		'\x2', '\xAB3', '\x207', '\x3', '\x2', '\x2', '\x2', '\xAB4', '\xAB5', 
		'\a', '\x107', '\x2', '\x2', '\xAB5', '\xAB6', '\a', '\x4', '\x2', '\x2', 
		'\xAB6', '\xAB7', '\x5', '\xD6', 'l', '\x2', '\xAB7', '\xAB8', '\a', '\x5', 
		'\x2', '\x2', '\xAB8', '\x209', '\x3', '\x2', '\x2', '\x2', '\xAB9', '\xABA', 
		'\a', '\x108', '\x2', '\x2', '\xABA', '\xABB', '\a', '\x4', '\x2', '\x2', 
		'\xABB', '\xABC', '\x5', '\xD6', 'l', '\x2', '\xABC', '\xABD', '\a', '\x14', 
		'\x2', '\x2', '\xABD', '\xABE', '\x5', '\xD6', 'l', '\x2', '\xABE', '\xABF', 
		'\a', '\x5', '\x2', '\x2', '\xABF', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'\xAC0', '\xAC1', '\a', '\x109', '\x2', '\x2', '\xAC1', '\xAC2', '\a', 
		'\x4', '\x2', '\x2', '\xAC2', '\xAC3', '\x5', '\xD6', 'l', '\x2', '\xAC3', 
		'\xAC4', '\a', '\x5', '\x2', '\x2', '\xAC4', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\xAC5', '\xAC6', '\a', '\x10A', '\x2', '\x2', '\xAC6', '\xAC7', 
		'\a', '\x4', '\x2', '\x2', '\xAC7', '\xAC8', '\x5', '\xD6', 'l', '\x2', 
		'\xAC8', '\xAC9', '\a', '\x14', '\x2', '\x2', '\xAC9', '\xACA', '\x5', 
		'\xD6', 'l', '\x2', '\xACA', '\xACB', '\a', '\x5', '\x2', '\x2', '\xACB', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\xACC', '\xACD', '\a', '\x10B', 
		'\x2', '\x2', '\xACD', '\xACE', '\a', '\x4', '\x2', '\x2', '\xACE', '\xACF', 
		'\x5', '\xD6', 'l', '\x2', '\xACF', '\xAD0', '\a', '\x5', '\x2', '\x2', 
		'\xAD0', '\x211', '\x3', '\x2', '\x2', '\x2', '\xAD1', '\xAD2', '\a', 
		'\x10C', '\x2', '\x2', '\xAD2', '\xAD3', '\a', '\x4', '\x2', '\x2', '\xAD3', 
		'\xAD4', '\x5', '\xD6', 'l', '\x2', '\xAD4', '\xAD5', '\a', '\x14', '\x2', 
		'\x2', '\xAD5', '\xAD6', '\x5', '\xD6', 'l', '\x2', '\xAD6', '\xAD7', 
		'\a', '\x14', '\x2', '\x2', '\xAD7', '\xAD8', '\x5', '\xD6', 'l', '\x2', 
		'\xAD8', '\xAD9', '\a', '\x14', '\x2', '\x2', '\xAD9', '\xADA', '\x5', 
		'\xD6', 'l', '\x2', '\xADA', '\xADB', '\a', '\x5', '\x2', '\x2', '\xADB', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\xADC', '\xADD', '\a', '\x10D', 
		'\x2', '\x2', '\xADD', '\xADE', '\a', '\x4', '\x2', '\x2', '\xADE', '\xADF', 
		'\x5', '\xD6', 'l', '\x2', '\xADF', '\xAE0', '\a', '\x14', '\x2', '\x2', 
		'\xAE0', '\xAE1', '\x5', '\xD6', 'l', '\x2', '\xAE1', '\xAE2', '\a', '\x5', 
		'\x2', '\x2', '\xAE2', '\x215', '\x3', '\x2', '\x2', '\x2', '\xAE3', '\xAE4', 
		'\a', '\x10E', '\x2', '\x2', '\xAE4', '\xAE5', '\a', '\x4', '\x2', '\x2', 
		'\xAE5', '\xAE6', '\x5', '\xD6', 'l', '\x2', '\xAE6', '\xAE7', '\a', '\x5', 
		'\x2', '\x2', '\xAE7', '\x217', '\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAE9', 
		'\a', '\x10F', '\x2', '\x2', '\xAE9', '\xAEA', '\a', '\x4', '\x2', '\x2', 
		'\xAEA', '\xAEB', '\x5', '\xD6', 'l', '\x2', '\xAEB', '\xAEC', '\a', '\x5', 
		'\x2', '\x2', '\xAEC', '\x219', '\x3', '\x2', '\x2', '\x2', '\xAED', '\xAEE', 
		'\a', '\x110', '\x2', '\x2', '\xAEE', '\xAEF', '\a', '\x4', '\x2', '\x2', 
		'\xAEF', '\xAF0', '\x5', '\xD6', 'l', '\x2', '\xAF0', '\xAF1', '\a', '\x5', 
		'\x2', '\x2', '\xAF1', '\x21B', '\x3', '\x2', '\x2', '\x2', '\xAF2', '\xAF3', 
		'\a', '\x111', '\x2', '\x2', '\xAF3', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\xAF4', '\xAF5', '\a', '\x112', '\x2', '\x2', '\xAF5', '\xAF6', '\a', 
		'\x4', '\x2', '\x2', '\xAF6', '\xAF7', '\x5', '\xD6', 'l', '\x2', '\xAF7', 
		'\xAF8', '\a', '\x5', '\x2', '\x2', '\xAF8', '\x21F', '\x3', '\x2', '\x2', 
		'\x2', '\xAF9', '\xAFA', '\a', '\x113', '\x2', '\x2', '\xAFA', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\xAFB', '\xAFC', '\a', '\x114', '\x2', '\x2', 
		'\xAFC', '\xAFD', '\a', '\x4', '\x2', '\x2', '\xAFD', '\xAFE', '\x5', 
		'\xD6', 'l', '\x2', '\xAFE', '\xAFF', '\a', '\x14', '\x2', '\x2', '\xAFF', 
		'\xB00', '\x5', '\xD6', 'l', '\x2', '\xB00', '\xB01', '\a', '\x5', '\x2', 
		'\x2', '\xB01', '\x223', '\x3', '\x2', '\x2', '\x2', '\xB02', '\xB03', 
		'\a', '\x115', '\x2', '\x2', '\xB03', '\xB04', '\a', '\x4', '\x2', '\x2', 
		'\xB04', '\xB05', '\x5', '\xD6', 'l', '\x2', '\xB05', '\xB06', '\a', '\x14', 
		'\x2', '\x2', '\xB06', '\xB07', '\x5', '\xD6', 'l', '\x2', '\xB07', '\xB08', 
		'\a', '\x5', '\x2', '\x2', '\xB08', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\xB09', '\xB0A', '\a', '\x116', '\x2', '\x2', '\xB0A', '\xB0B', '\a', 
		'\x4', '\x2', '\x2', '\xB0B', '\xB0C', '\x5', '\xD6', 'l', '\x2', '\xB0C', 
		'\xB0D', '\a', '\x5', '\x2', '\x2', '\xB0D', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\xB0E', '\xB0F', '\a', '\x117', '\x2', '\x2', '\xB0F', '\xB10', 
		'\a', '\x4', '\x2', '\x2', '\xB10', '\xB11', '\x5', '\xD6', 'l', '\x2', 
		'\xB11', '\xB12', '\a', '\x5', '\x2', '\x2', '\xB12', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\xB13', '\xB14', '\a', '\x118', '\x2', '\x2', '\xB14', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\xB15', '\xB16', '\a', '\x119', 
		'\x2', '\x2', '\xB16', '\xB17', '\a', '\x4', '\x2', '\x2', '\xB17', '\xB18', 
		'\x5', '\xD6', 'l', '\x2', '\xB18', '\xB19', '\a', '\x14', '\x2', '\x2', 
		'\xB19', '\xB1A', '\x5', '\xD6', 'l', '\x2', '\xB1A', '\xB1B', '\a', '\x14', 
		'\x2', '\x2', '\xB1B', '\xB1C', '\x5', '\x2CA', '\x166', '\x2', '\xB1C', 
		'\xB1D', '\a', '\x5', '\x2', '\x2', '\xB1D', '\x22D', '\x3', '\x2', '\x2', 
		'\x2', '\xB1E', '\xB1F', '\a', '\x11A', '\x2', '\x2', '\xB1F', '\xB20', 
		'\a', '\x4', '\x2', '\x2', '\xB20', '\xB21', '\x5', '\xD6', 'l', '\x2', 
		'\xB21', '\xB22', '\a', '\x5', '\x2', '\x2', '\xB22', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\xB23', '\xB24', '\a', '\x11B', '\x2', '\x2', '\xB24', 
		'\xB25', '\a', '\x4', '\x2', '\x2', '\xB25', '\xB26', '\x5', '\xD6', 'l', 
		'\x2', '\xB26', '\xB27', '\a', '\x5', '\x2', '\x2', '\xB27', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\xB28', '\xB29', '\a', '\x11C', '\x2', '\x2', 
		'\xB29', '\xB2A', '\a', '\x4', '\x2', '\x2', '\xB2A', '\xB2B', '\x5', 
		'\xD6', 'l', '\x2', '\xB2B', '\xB2C', '\a', '\x5', '\x2', '\x2', '\xB2C', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\xB2D', '\xB2E', '\t', '\x2', '\x2', 
		'\x2', '\xB2E', '\x235', '\x3', '\x2', '\x2', '\x2', '\xB2F', '\xB34', 
		'\a', '\x1C8', '\x2', '\x2', '\xB30', '\xB31', '\a', '\x1C7', '\x2', '\x2', 
		'\xB31', '\xB34', '\a', '\x1C6', '\x2', '\x2', '\xB32', '\xB34', '\x5', 
		'\x23E', '\x120', '\x2', '\xB33', '\xB2F', '\x3', '\x2', '\x2', '\x2', 
		'\xB33', '\xB30', '\x3', '\x2', '\x2', '\x2', '\xB33', '\xB32', '\x3', 
		'\x2', '\x2', '\x2', '\xB34', '\x237', '\x3', '\x2', '\x2', '\x2', '\xB35', 
		'\xB36', '\t', '\x3', '\x2', '\x2', '\xB36', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\xB37', '\xB38', '\a', '\x1C5', '\x2', '\x2', '\xB38', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\xB39', '\xB3A', '\a', '\x1C5', '\x2', '\x2', 
		'\xB3A', '\x23D', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB5A', '\x5', 
		'\x240', '\x121', '\x2', '\xB3C', '\xB5A', '\x5', '\x242', '\x122', '\x2', 
		'\xB3D', '\xB5A', '\x5', '\x244', '\x123', '\x2', '\xB3E', '\xB5A', '\x5', 
		'\x246', '\x124', '\x2', '\xB3F', '\xB5A', '\x5', '\x248', '\x125', '\x2', 
		'\xB40', '\xB5A', '\x5', '\x24A', '\x126', '\x2', '\xB41', '\xB5A', '\x5', 
		'\x24C', '\x127', '\x2', '\xB42', '\xB5A', '\x5', '\x24E', '\x128', '\x2', 
		'\xB43', '\xB5A', '\x5', '\x250', '\x129', '\x2', '\xB44', '\xB5A', '\x5', 
		'\x252', '\x12A', '\x2', '\xB45', '\xB5A', '\x5', '\x254', '\x12B', '\x2', 
		'\xB46', '\xB5A', '\x5', '\x256', '\x12C', '\x2', '\xB47', '\xB5A', '\x5', 
		'\x258', '\x12D', '\x2', '\xB48', '\xB5A', '\x5', '\x25A', '\x12E', '\x2', 
		'\xB49', '\xB5A', '\x5', '\x25C', '\x12F', '\x2', '\xB4A', '\xB5A', '\x5', 
		'\x25E', '\x130', '\x2', '\xB4B', '\xB5A', '\x5', '\x260', '\x131', '\x2', 
		'\xB4C', '\xB5A', '\x5', '\x262', '\x132', '\x2', '\xB4D', '\xB5A', '\x5', 
		'\x264', '\x133', '\x2', '\xB4E', '\xB5A', '\x5', '\x266', '\x134', '\x2', 
		'\xB4F', '\xB5A', '\x5', '\x268', '\x135', '\x2', '\xB50', '\xB5A', '\x5', 
		'\x26A', '\x136', '\x2', '\xB51', '\xB5A', '\x5', '\x26C', '\x137', '\x2', 
		'\xB52', '\xB5A', '\x5', '\x26E', '\x138', '\x2', '\xB53', '\xB5A', '\x5', 
		'\x270', '\x139', '\x2', '\xB54', '\xB5A', '\x5', '\x272', '\x13A', '\x2', 
		'\xB55', '\xB5A', '\x5', '\x274', '\x13B', '\x2', '\xB56', '\xB5A', '\x5', 
		'\x276', '\x13C', '\x2', '\xB57', '\xB5A', '\x5', '\x278', '\x13D', '\x2', 
		'\xB58', '\xB5A', '\x5', '\x27A', '\x13E', '\x2', '\xB59', '\xB3B', '\x3', 
		'\x2', '\x2', '\x2', '\xB59', '\xB3C', '\x3', '\x2', '\x2', '\x2', '\xB59', 
		'\xB3D', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB3E', '\x3', '\x2', '\x2', 
		'\x2', '\xB59', '\xB3F', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB40', 
		'\x3', '\x2', '\x2', '\x2', '\xB59', '\xB41', '\x3', '\x2', '\x2', '\x2', 
		'\xB59', '\xB42', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB43', '\x3', 
		'\x2', '\x2', '\x2', '\xB59', '\xB44', '\x3', '\x2', '\x2', '\x2', '\xB59', 
		'\xB45', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB46', '\x3', '\x2', '\x2', 
		'\x2', '\xB59', '\xB47', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB48', 
		'\x3', '\x2', '\x2', '\x2', '\xB59', '\xB49', '\x3', '\x2', '\x2', '\x2', 
		'\xB59', '\xB4A', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB4B', '\x3', 
		'\x2', '\x2', '\x2', '\xB59', '\xB4C', '\x3', '\x2', '\x2', '\x2', '\xB59', 
		'\xB4D', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB4E', '\x3', '\x2', '\x2', 
		'\x2', '\xB59', '\xB4F', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB50', 
		'\x3', '\x2', '\x2', '\x2', '\xB59', '\xB51', '\x3', '\x2', '\x2', '\x2', 
		'\xB59', '\xB52', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB53', '\x3', 
		'\x2', '\x2', '\x2', '\xB59', '\xB54', '\x3', '\x2', '\x2', '\x2', '\xB59', 
		'\xB55', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB56', '\x3', '\x2', '\x2', 
		'\x2', '\xB59', '\xB57', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB58', 
		'\x3', '\x2', '\x2', '\x2', '\xB5A', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\xB5B', '\xB5C', '\a', '\x11D', '\x2', '\x2', '\xB5C', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\xB5D', '\xB5E', '\a', '\x11E', '\x2', '\x2', '\xB5E', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\xB5F', '\xB60', '\a', '\x11F', 
		'\x2', '\x2', '\xB60', '\x245', '\x3', '\x2', '\x2', '\x2', '\xB61', '\xB62', 
		'\a', '\x120', '\x2', '\x2', '\xB62', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'\xB63', '\xB64', '\a', '\x121', '\x2', '\x2', '\xB64', '\x249', '\x3', 
		'\x2', '\x2', '\x2', '\xB65', '\xB66', '\a', '\x122', '\x2', '\x2', '\xB66', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\xB67', '\xB68', '\a', '\x123', 
		'\x2', '\x2', '\xB68', '\x24D', '\x3', '\x2', '\x2', '\x2', '\xB69', '\xB6A', 
		'\a', '\x124', '\x2', '\x2', '\xB6A', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'\xB6B', '\xB6C', '\a', '\x125', '\x2', '\x2', '\xB6C', '\x251', '\x3', 
		'\x2', '\x2', '\x2', '\xB6D', '\xB6E', '\a', '\x126', '\x2', '\x2', '\xB6E', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\xB6F', '\xB70', '\a', '\x127', 
		'\x2', '\x2', '\xB70', '\x255', '\x3', '\x2', '\x2', '\x2', '\xB71', '\xB72', 
		'\a', '\x128', '\x2', '\x2', '\xB72', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\xB73', '\xB74', '\a', '\x129', '\x2', '\x2', '\xB74', '\x259', '\x3', 
		'\x2', '\x2', '\x2', '\xB75', '\xB76', '\a', '\x12A', '\x2', '\x2', '\xB76', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\xB77', '\xB78', '\a', '\x12B', 
		'\x2', '\x2', '\xB78', '\x25D', '\x3', '\x2', '\x2', '\x2', '\xB79', '\xB7A', 
		'\a', '\x12C', '\x2', '\x2', '\xB7A', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\xB7B', '\xB7C', '\a', '\x12D', '\x2', '\x2', '\xB7C', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\xB7D', '\xB7E', '\a', '\x12E', '\x2', '\x2', '\xB7E', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\xB7F', '\xB80', '\a', '\x12F', 
		'\x2', '\x2', '\xB80', '\x265', '\x3', '\x2', '\x2', '\x2', '\xB81', '\xB82', 
		'\a', '\x130', '\x2', '\x2', '\xB82', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'\xB83', '\xB84', '\a', '\x131', '\x2', '\x2', '\xB84', '\x269', '\x3', 
		'\x2', '\x2', '\x2', '\xB85', '\xB86', '\a', '\x132', '\x2', '\x2', '\xB86', 
		'\x26B', '\x3', '\x2', '\x2', '\x2', '\xB87', '\xB88', '\a', '\x133', 
		'\x2', '\x2', '\xB88', '\x26D', '\x3', '\x2', '\x2', '\x2', '\xB89', '\xB8A', 
		'\a', '\x134', '\x2', '\x2', '\xB8A', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\xB8B', '\xB8C', '\a', '\x135', '\x2', '\x2', '\xB8C', '\x271', '\x3', 
		'\x2', '\x2', '\x2', '\xB8D', '\xB8E', '\a', '\x136', '\x2', '\x2', '\xB8E', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB90', '\a', '\x137', 
		'\x2', '\x2', '\xB90', '\x275', '\x3', '\x2', '\x2', '\x2', '\xB91', '\xB92', 
		'\a', '\x138', '\x2', '\x2', '\xB92', '\x277', '\x3', '\x2', '\x2', '\x2', 
		'\xB93', '\xB94', '\a', '\x139', '\x2', '\x2', '\xB94', '\x279', '\x3', 
		'\x2', '\x2', '\x2', '\xB95', '\xB96', '\a', '\x13A', '\x2', '\x2', '\xB96', 
		'\x27B', '\x3', '\x2', '\x2', '\x2', '\xB97', '\xBA2', '\x5', '\x27E', 
		'\x140', '\x2', '\xB98', '\xBA2', '\x5', '\x280', '\x141', '\x2', '\xB99', 
		'\xBA2', '\x5', '\x282', '\x142', '\x2', '\xB9A', '\xBA2', '\x5', '\x284', 
		'\x143', '\x2', '\xB9B', '\xBA2', '\x5', '\x286', '\x144', '\x2', '\xB9C', 
		'\xBA2', '\x5', '\x288', '\x145', '\x2', '\xB9D', '\xBA2', '\x5', '\x28A', 
		'\x146', '\x2', '\xB9E', '\xBA2', '\x5', '\x28C', '\x147', '\x2', '\xB9F', 
		'\xBA2', '\x5', '\x28E', '\x148', '\x2', '\xBA0', '\xBA2', '\x5', '\x290', 
		'\x149', '\x2', '\xBA1', '\xB97', '\x3', '\x2', '\x2', '\x2', '\xBA1', 
		'\xB98', '\x3', '\x2', '\x2', '\x2', '\xBA1', '\xB99', '\x3', '\x2', '\x2', 
		'\x2', '\xBA1', '\xB9A', '\x3', '\x2', '\x2', '\x2', '\xBA1', '\xB9B', 
		'\x3', '\x2', '\x2', '\x2', '\xBA1', '\xB9C', '\x3', '\x2', '\x2', '\x2', 
		'\xBA1', '\xB9D', '\x3', '\x2', '\x2', '\x2', '\xBA1', '\xB9E', '\x3', 
		'\x2', '\x2', '\x2', '\xBA1', '\xB9F', '\x3', '\x2', '\x2', '\x2', '\xBA1', 
		'\xBA0', '\x3', '\x2', '\x2', '\x2', '\xBA2', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\xBA3', '\xBA4', '\a', '\x13B', '\x2', '\x2', '\xBA4', '\x27F', 
		'\x3', '\x2', '\x2', '\x2', '\xBA5', '\xBA6', '\a', '\x13C', '\x2', '\x2', 
		'\xBA6', '\x281', '\x3', '\x2', '\x2', '\x2', '\xBA7', '\xBA8', '\a', 
		'\x13D', '\x2', '\x2', '\xBA8', '\x283', '\x3', '\x2', '\x2', '\x2', '\xBA9', 
		'\xBAA', '\a', '\x13E', '\x2', '\x2', '\xBAA', '\x285', '\x3', '\x2', 
		'\x2', '\x2', '\xBAB', '\xBAC', '\a', '\x13F', '\x2', '\x2', '\xBAC', 
		'\x287', '\x3', '\x2', '\x2', '\x2', '\xBAD', '\xBAE', '\a', '\x140', 
		'\x2', '\x2', '\xBAE', '\x289', '\x3', '\x2', '\x2', '\x2', '\xBAF', '\xBB0', 
		'\a', '\x141', '\x2', '\x2', '\xBB0', '\x28B', '\x3', '\x2', '\x2', '\x2', 
		'\xBB1', '\xBB2', '\a', '\x142', '\x2', '\x2', '\xBB2', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\xBB3', '\xBB4', '\a', '\x143', '\x2', '\x2', '\xBB4', 
		'\x28F', '\x3', '\x2', '\x2', '\x2', '\xBB5', '\xBB6', '\a', '\x144', 
		'\x2', '\x2', '\xBB6', '\x291', '\x3', '\x2', '\x2', '\x2', '\xBB7', '\xBC0', 
		'\x5', '\x294', '\x14B', '\x2', '\xBB8', '\xBC0', '\x5', '\x296', '\x14C', 
		'\x2', '\xBB9', '\xBC0', '\x5', '\x298', '\x14D', '\x2', '\xBBA', '\xBC0', 
		'\x5', '\x29A', '\x14E', '\x2', '\xBBB', '\xBC0', '\x5', '\x29C', '\x14F', 
		'\x2', '\xBBC', '\xBC0', '\x5', '\x29E', '\x150', '\x2', '\xBBD', '\xBC0', 
		'\x5', '\x2A0', '\x151', '\x2', '\xBBE', '\xBC0', '\x5', '\x2A2', '\x152', 
		'\x2', '\xBBF', '\xBB7', '\x3', '\x2', '\x2', '\x2', '\xBBF', '\xBB8', 
		'\x3', '\x2', '\x2', '\x2', '\xBBF', '\xBB9', '\x3', '\x2', '\x2', '\x2', 
		'\xBBF', '\xBBA', '\x3', '\x2', '\x2', '\x2', '\xBBF', '\xBBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBBF', '\xBBC', '\x3', '\x2', '\x2', '\x2', '\xBBF', 
		'\xBBD', '\x3', '\x2', '\x2', '\x2', '\xBBF', '\xBBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBC0', '\x293', '\x3', '\x2', '\x2', '\x2', '\xBC1', '\xBC2', 
		'\a', '\x145', '\x2', '\x2', '\xBC2', '\x295', '\x3', '\x2', '\x2', '\x2', 
		'\xBC3', '\xBC4', '\a', '\x146', '\x2', '\x2', '\xBC4', '\x297', '\x3', 
		'\x2', '\x2', '\x2', '\xBC5', '\xBC6', '\a', '\x147', '\x2', '\x2', '\xBC6', 
		'\x299', '\x3', '\x2', '\x2', '\x2', '\xBC7', '\xBC8', '\a', '\x148', 
		'\x2', '\x2', '\xBC8', '\x29B', '\x3', '\x2', '\x2', '\x2', '\xBC9', '\xBCA', 
		'\a', '\x149', '\x2', '\x2', '\xBCA', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\xBCB', '\xBCC', '\a', '\x14A', '\x2', '\x2', '\xBCC', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\xBCD', '\xBCE', '\a', '\x14B', '\x2', '\x2', '\xBCE', 
		'\x2A1', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBD0', '\a', '\x14C', 
		'\x2', '\x2', '\xBD0', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\xBD1', '\xBE0', 
		'\x5', '\x2A6', '\x154', '\x2', '\xBD2', '\xBE0', '\x5', '\x2A8', '\x155', 
		'\x2', '\xBD3', '\xBE0', '\x5', '\x2AA', '\x156', '\x2', '\xBD4', '\xBE0', 
		'\x5', '\x2AC', '\x157', '\x2', '\xBD5', '\xBE0', '\x5', '\x2AE', '\x158', 
		'\x2', '\xBD6', '\xBE0', '\x5', '\x2B0', '\x159', '\x2', '\xBD7', '\xBE0', 
		'\x5', '\x2B2', '\x15A', '\x2', '\xBD8', '\xBE0', '\x5', '\x2B4', '\x15B', 
		'\x2', '\xBD9', '\xBE0', '\x5', '\x2B6', '\x15C', '\x2', '\xBDA', '\xBE0', 
		'\x5', '\x2B8', '\x15D', '\x2', '\xBDB', '\xBE0', '\x5', '\x2BA', '\x15E', 
		'\x2', '\xBDC', '\xBE0', '\x5', '\x2BC', '\x15F', '\x2', '\xBDD', '\xBE0', 
		'\x5', '\x2BE', '\x160', '\x2', '\xBDE', '\xBE0', '\x5', '\x2C0', '\x161', 
		'\x2', '\xBDF', '\xBD1', '\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBD2', 
		'\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBD3', '\x3', '\x2', '\x2', '\x2', 
		'\xBDF', '\xBD4', '\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBD5', '\x3', 
		'\x2', '\x2', '\x2', '\xBDF', '\xBD6', '\x3', '\x2', '\x2', '\x2', '\xBDF', 
		'\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBD8', '\x3', '\x2', '\x2', 
		'\x2', '\xBDF', '\xBD9', '\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBDA', 
		'\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBDB', '\x3', '\x2', '\x2', '\x2', 
		'\xBDF', '\xBDC', '\x3', '\x2', '\x2', '\x2', '\xBDF', '\xBDD', '\x3', 
		'\x2', '\x2', '\x2', '\xBDF', '\xBDE', '\x3', '\x2', '\x2', '\x2', '\xBE0', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\xBE1', '\xBE2', '\a', '\x14D', 
		'\x2', '\x2', '\xBE2', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\xBE3', '\xBE4', 
		'\a', '\x14E', '\x2', '\x2', '\xBE4', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'\xBE5', '\xBE6', '\a', '\x14F', '\x2', '\x2', '\xBE6', '\x2AB', '\x3', 
		'\x2', '\x2', '\x2', '\xBE7', '\xBE8', '\a', '\x150', '\x2', '\x2', '\xBE8', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\xBE9', '\xBEA', '\a', '\x151', 
		'\x2', '\x2', '\xBEA', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBEC', 
		'\a', '\x152', '\x2', '\x2', '\xBEC', '\x2B1', '\x3', '\x2', '\x2', '\x2', 
		'\xBED', '\xBEE', '\a', '\x153', '\x2', '\x2', '\xBEE', '\x2B3', '\x3', 
		'\x2', '\x2', '\x2', '\xBEF', '\xBF0', '\a', '\x154', '\x2', '\x2', '\xBF0', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\xBF1', '\xBF2', '\a', '\x155', 
		'\x2', '\x2', '\xBF2', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\xBF3', '\xBF4', 
		'\a', '\x156', '\x2', '\x2', '\xBF4', '\x2B9', '\x3', '\x2', '\x2', '\x2', 
		'\xBF5', '\xBF6', '\a', '\x157', '\x2', '\x2', '\xBF6', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\xBF7', '\xBF8', '\a', '\x158', '\x2', '\x2', '\xBF8', 
		'\x2BD', '\x3', '\x2', '\x2', '\x2', '\xBF9', '\xBFA', '\a', '\x159', 
		'\x2', '\x2', '\xBFA', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\xBFB', '\xBFC', 
		'\a', '\x15A', '\x2', '\x2', '\xBFC', '\x2C1', '\x3', '\x2', '\x2', '\x2', 
		'\xBFD', '\xC01', '\x5', '\x2C4', '\x163', '\x2', '\xBFE', '\xC01', '\x5', 
		'\x2C6', '\x164', '\x2', '\xBFF', '\xC01', '\x5', '\x2C8', '\x165', '\x2', 
		'\xC00', '\xBFD', '\x3', '\x2', '\x2', '\x2', '\xC00', '\xBFE', '\x3', 
		'\x2', '\x2', '\x2', '\xC00', '\xBFF', '\x3', '\x2', '\x2', '\x2', '\xC01', 
		'\x2C3', '\x3', '\x2', '\x2', '\x2', '\xC02', '\xC03', '\a', '\x15B', 
		'\x2', '\x2', '\xC03', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\xC04', '\xC05', 
		'\a', '\x15C', '\x2', '\x2', '\xC05', '\x2C7', '\x3', '\x2', '\x2', '\x2', 
		'\xC06', '\xC07', '\a', '\x15D', '\x2', '\x2', '\xC07', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\xC08', '\xC0B', '\x5', '\x2CC', '\x167', '\x2', 
		'\xC09', '\xC0B', '\x5', '\x2CE', '\x168', '\x2', '\xC0A', '\xC08', '\x3', 
		'\x2', '\x2', '\x2', '\xC0A', '\xC09', '\x3', '\x2', '\x2', '\x2', '\xC0B', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC0D', '\a', '\x15E', 
		'\x2', '\x2', '\xC0D', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0F', 
		'\a', '\x15F', '\x2', '\x2', '\xC0F', '\x2CF', '\x3', '\x2', '\x2', '\x2', 
		'\xC10', '\xC15', '\x5', '\x2D2', '\x16A', '\x2', '\xC11', '\xC15', '\x5', 
		'\x2D4', '\x16B', '\x2', '\xC12', '\xC15', '\x5', '\x2D6', '\x16C', '\x2', 
		'\xC13', '\xC15', '\x5', '\x2D8', '\x16D', '\x2', '\xC14', '\xC10', '\x3', 
		'\x2', '\x2', '\x2', '\xC14', '\xC11', '\x3', '\x2', '\x2', '\x2', '\xC14', 
		'\xC12', '\x3', '\x2', '\x2', '\x2', '\xC14', '\xC13', '\x3', '\x2', '\x2', 
		'\x2', '\xC15', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\xC16', '\xC17', 
		'\a', '\x160', '\x2', '\x2', '\xC17', '\x2D3', '\x3', '\x2', '\x2', '\x2', 
		'\xC18', '\xC19', '\a', '\x161', '\x2', '\x2', '\xC19', '\x2D5', '\x3', 
		'\x2', '\x2', '\x2', '\xC1A', '\xC1B', '\a', '\x162', '\x2', '\x2', '\xC1B', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\xC1C', '\xC1D', '\a', '\x163', 
		'\x2', '\x2', '\xC1D', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\xC1E', '\xC22', 
		'\x5', '\x2DC', '\x16F', '\x2', '\xC1F', '\xC22', '\x5', '\x2DE', '\x170', 
		'\x2', '\xC20', '\xC22', '\x5', '\x2E0', '\x171', '\x2', '\xC21', '\xC1E', 
		'\x3', '\x2', '\x2', '\x2', '\xC21', '\xC1F', '\x3', '\x2', '\x2', '\x2', 
		'\xC21', '\xC20', '\x3', '\x2', '\x2', '\x2', '\xC22', '\x2DB', '\x3', 
		'\x2', '\x2', '\x2', '\xC23', '\xC24', '\a', '\x113', '\x2', '\x2', '\xC24', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\xC25', '\xC26', '\a', '\x91', '\x2', 
		'\x2', '\xC26', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\xC27', '\xC28', 
		'\a', '\x164', '\x2', '\x2', '\xC28', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\xC29', '\xC2C', '\x5', '\x2E4', '\x173', '\x2', '\xC2A', '\xC2C', '\x5', 
		'\x2E6', '\x174', '\x2', '\xC2B', '\xC29', '\x3', '\x2', '\x2', '\x2', 
		'\xC2B', '\xC2A', '\x3', '\x2', '\x2', '\x2', '\xC2C', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\xC2D', '\xC2E', '\a', '\x165', '\x2', '\x2', '\xC2E', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\xC2F', '\xC30', '\a', '\x166', 
		'\x2', '\x2', '\xC30', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\xC31', '\xC34', 
		'\x5', '\x2EA', '\x176', '\x2', '\xC32', '\xC34', '\x5', '\x2EC', '\x177', 
		'\x2', '\xC33', '\xC31', '\x3', '\x2', '\x2', '\x2', '\xC33', '\xC32', 
		'\x3', '\x2', '\x2', '\x2', '\xC34', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\xC35', '\xC36', '\a', '\x167', '\x2', '\x2', '\xC36', '\x2EB', '\x3', 
		'\x2', '\x2', '\x2', '\xC37', '\xC38', '\a', '\x168', '\x2', '\x2', '\xC38', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\xC39', '\xC3C', '\x5', '\x2F0', 
		'\x179', '\x2', '\xC3A', '\xC3C', '\x5', '\x2F6', '\x17C', '\x2', '\xC3B', 
		'\xC39', '\x3', '\x2', '\x2', '\x2', '\xC3B', '\xC3A', '\x3', '\x2', '\x2', 
		'\x2', '\xC3C', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC3E', 
		'\a', '\x169', '\x2', '\x2', '\xC3E', '\x2F1', '\x3', '\x2', '\x2', '\x2', 
		'\xC3F', '\xC42', '\x5', '\x2F4', '\x17B', '\x2', '\xC40', '\xC42', '\x5', 
		'\x2F6', '\x17C', '\x2', '\xC41', '\xC3F', '\x3', '\x2', '\x2', '\x2', 
		'\xC41', '\xC40', '\x3', '\x2', '\x2', '\x2', '\xC42', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\xC43', '\xC44', '\a', '\x16A', '\x2', '\x2', '\xC44', 
		'\x2F5', '\x3', '\x2', '\x2', '\x2', '\xC45', '\xC46', '\a', '\x16B', 
		'\x2', '\x2', '\xC46', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\xC47', '\xC58', 
		'\x5', '\x2FA', '\x17E', '\x2', '\xC48', '\xC58', '\x5', '\x2FC', '\x17F', 
		'\x2', '\xC49', '\xC58', '\x5', '\x2FE', '\x180', '\x2', '\xC4A', '\xC58', 
		'\x5', '\x300', '\x181', '\x2', '\xC4B', '\xC58', '\x5', '\x302', '\x182', 
		'\x2', '\xC4C', '\xC58', '\x5', '\x304', '\x183', '\x2', '\xC4D', '\xC58', 
		'\x5', '\x306', '\x184', '\x2', '\xC4E', '\xC58', '\x5', '\x308', '\x185', 
		'\x2', '\xC4F', '\xC58', '\x5', '\x30A', '\x186', '\x2', '\xC50', '\xC58', 
		'\x5', '\x30C', '\x187', '\x2', '\xC51', '\xC58', '\x5', '\x30E', '\x188', 
		'\x2', '\xC52', '\xC58', '\x5', '\x310', '\x189', '\x2', '\xC53', '\xC58', 
		'\x5', '\x312', '\x18A', '\x2', '\xC54', '\xC58', '\x5', '\x314', '\x18B', 
		'\x2', '\xC55', '\xC58', '\x5', '\x316', '\x18C', '\x2', '\xC56', '\xC58', 
		'\x5', '\x318', '\x18D', '\x2', '\xC57', '\xC47', '\x3', '\x2', '\x2', 
		'\x2', '\xC57', '\xC48', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC49', 
		'\x3', '\x2', '\x2', '\x2', '\xC57', '\xC4A', '\x3', '\x2', '\x2', '\x2', 
		'\xC57', '\xC4B', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC4C', '\x3', 
		'\x2', '\x2', '\x2', '\xC57', '\xC4D', '\x3', '\x2', '\x2', '\x2', '\xC57', 
		'\xC4E', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC4F', '\x3', '\x2', '\x2', 
		'\x2', '\xC57', '\xC50', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC51', 
		'\x3', '\x2', '\x2', '\x2', '\xC57', '\xC52', '\x3', '\x2', '\x2', '\x2', 
		'\xC57', '\xC53', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC54', '\x3', 
		'\x2', '\x2', '\x2', '\xC57', '\xC55', '\x3', '\x2', '\x2', '\x2', '\xC57', 
		'\xC56', '\x3', '\x2', '\x2', '\x2', '\xC58', '\x2F9', '\x3', '\x2', '\x2', 
		'\x2', '\xC59', '\xC5A', '\a', '\x16C', '\x2', '\x2', '\xC5A', '\x2FB', 
		'\x3', '\x2', '\x2', '\x2', '\xC5B', '\xC5C', '\a', '\x16D', '\x2', '\x2', 
		'\xC5C', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\xC5D', '\xC5E', '\a', 
		'\x16E', '\x2', '\x2', '\xC5E', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\xC5F', 
		'\xC60', '\a', '\x16F', '\x2', '\x2', '\xC60', '\x301', '\x3', '\x2', 
		'\x2', '\x2', '\xC61', '\xC62', '\a', '\x170', '\x2', '\x2', '\xC62', 
		'\x303', '\x3', '\x2', '\x2', '\x2', '\xC63', '\xC64', '\a', '\x171', 
		'\x2', '\x2', '\xC64', '\x305', '\x3', '\x2', '\x2', '\x2', '\xC65', '\xC66', 
		'\a', '\x172', '\x2', '\x2', '\xC66', '\x307', '\x3', '\x2', '\x2', '\x2', 
		'\xC67', '\xC68', '\a', '\x173', '\x2', '\x2', '\xC68', '\x309', '\x3', 
		'\x2', '\x2', '\x2', '\xC69', '\xC6A', '\a', '\x174', '\x2', '\x2', '\xC6A', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\xC6B', '\xC6C', '\a', '\x175', 
		'\x2', '\x2', '\xC6C', '\x30D', '\x3', '\x2', '\x2', '\x2', '\xC6D', '\xC6E', 
		'\a', '\x176', '\x2', '\x2', '\xC6E', '\x30F', '\x3', '\x2', '\x2', '\x2', 
		'\xC6F', '\xC70', '\a', '\x177', '\x2', '\x2', '\xC70', '\x311', '\x3', 
		'\x2', '\x2', '\x2', '\xC71', '\xC72', '\a', '\x178', '\x2', '\x2', '\xC72', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\xC73', '\xC74', '\a', '\x179', 
		'\x2', '\x2', '\xC74', '\x315', '\x3', '\x2', '\x2', '\x2', '\xC75', '\xC76', 
		'\a', '\x17A', '\x2', '\x2', '\xC76', '\x317', '\x3', '\x2', '\x2', '\x2', 
		'\xC77', '\xC78', '\a', '\x17B', '\x2', '\x2', '\xC78', '\x319', '\x3', 
		'\x2', '\x2', '\x2', '\xC79', '\xC82', '\x5', '\x31C', '\x18F', '\x2', 
		'\xC7A', '\xC82', '\x5', '\x31E', '\x190', '\x2', '\xC7B', '\xC82', '\x5', 
		'\x320', '\x191', '\x2', '\xC7C', '\xC82', '\x5', '\x322', '\x192', '\x2', 
		'\xC7D', '\xC82', '\x5', '\x324', '\x193', '\x2', '\xC7E', '\xC82', '\x5', 
		'\x326', '\x194', '\x2', '\xC7F', '\xC82', '\x5', '\x328', '\x195', '\x2', 
		'\xC80', '\xC82', '\x5', '\x32A', '\x196', '\x2', '\xC81', '\xC79', '\x3', 
		'\x2', '\x2', '\x2', '\xC81', '\xC7A', '\x3', '\x2', '\x2', '\x2', '\xC81', 
		'\xC7B', '\x3', '\x2', '\x2', '\x2', '\xC81', '\xC7C', '\x3', '\x2', '\x2', 
		'\x2', '\xC81', '\xC7D', '\x3', '\x2', '\x2', '\x2', '\xC81', '\xC7E', 
		'\x3', '\x2', '\x2', '\x2', '\xC81', '\xC7F', '\x3', '\x2', '\x2', '\x2', 
		'\xC81', '\xC80', '\x3', '\x2', '\x2', '\x2', '\xC82', '\x31B', '\x3', 
		'\x2', '\x2', '\x2', '\xC83', '\xC84', '\a', '\x17C', '\x2', '\x2', '\xC84', 
		'\x31D', '\x3', '\x2', '\x2', '\x2', '\xC85', '\xC86', '\a', '\x17D', 
		'\x2', '\x2', '\xC86', '\x31F', '\x3', '\x2', '\x2', '\x2', '\xC87', '\xC88', 
		'\a', '\x17E', '\x2', '\x2', '\xC88', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'\xC89', '\xC8A', '\a', '\x17F', '\x2', '\x2', '\xC8A', '\x323', '\x3', 
		'\x2', '\x2', '\x2', '\xC8B', '\xC8C', '\a', '\x180', '\x2', '\x2', '\xC8C', 
		'\x325', '\x3', '\x2', '\x2', '\x2', '\xC8D', '\xC8E', '\a', '\x181', 
		'\x2', '\x2', '\xC8E', '\x327', '\x3', '\x2', '\x2', '\x2', '\xC8F', '\xC90', 
		'\a', '\x1C3', '\x2', '\x2', '\xC90', '\x329', '\x3', '\x2', '\x2', '\x2', 
		'\xC91', '\xC92', '\a', '\x1C4', '\x2', '\x2', '\xC92', '\x32B', '\x3', 
		'\x2', '\x2', '\x2', '\xC93', '\xC98', '\x5', '\x32E', '\x198', '\x2', 
		'\xC94', '\xC98', '\x5', '\x330', '\x199', '\x2', '\xC95', '\xC98', '\x5', 
		'\x332', '\x19A', '\x2', '\xC96', '\xC98', '\x5', '\x2F6', '\x17C', '\x2', 
		'\xC97', '\xC93', '\x3', '\x2', '\x2', '\x2', '\xC97', '\xC94', '\x3', 
		'\x2', '\x2', '\x2', '\xC97', '\xC95', '\x3', '\x2', '\x2', '\x2', '\xC97', 
		'\xC96', '\x3', '\x2', '\x2', '\x2', '\xC98', '\x32D', '\x3', '\x2', '\x2', 
		'\x2', '\xC99', '\xC9A', '\a', '\x182', '\x2', '\x2', '\xC9A', '\x32F', 
		'\x3', '\x2', '\x2', '\x2', '\xC9B', '\xC9C', '\a', '\x183', '\x2', '\x2', 
		'\xC9C', '\x331', '\x3', '\x2', '\x2', '\x2', '\xC9D', '\xC9E', '\a', 
		'\x184', '\x2', '\x2', '\xC9E', '\x333', '\x3', '\x2', '\x2', '\x2', '\xC9F', 
		'\xCA3', '\x5', '\x336', '\x19C', '\x2', '\xCA0', '\xCA3', '\x5', '\x338', 
		'\x19D', '\x2', '\xCA1', '\xCA3', '\x5', '\x33A', '\x19E', '\x2', '\xCA2', 
		'\xC9F', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xCA0', '\x3', '\x2', '\x2', 
		'\x2', '\xCA2', '\xCA1', '\x3', '\x2', '\x2', '\x2', '\xCA3', '\x335', 
		'\x3', '\x2', '\x2', '\x2', '\xCA4', '\xCA5', '\a', '\xD6', '\x2', '\x2', 
		'\xCA5', '\x337', '\x3', '\x2', '\x2', '\x2', '\xCA6', '\xCA7', '\a', 
		'\x185', '\x2', '\x2', '\xCA7', '\x339', '\x3', '\x2', '\x2', '\x2', '\xCA8', 
		'\xCA9', '\a', '\x102', '\x2', '\x2', '\xCA9', '\x33B', '\x3', '\x2', 
		'\x2', '\x2', '\xCAA', '\xCAD', '\x5', '\x33E', '\x1A0', '\x2', '\xCAB', 
		'\xCAD', '\x5', '\x340', '\x1A1', '\x2', '\xCAC', '\xCAA', '\x3', '\x2', 
		'\x2', '\x2', '\xCAC', '\xCAB', '\x3', '\x2', '\x2', '\x2', '\xCAD', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\xCAE', '\xCAF', '\a', '\x186', '\x2', '\x2', 
		'\xCAF', '\x33F', '\x3', '\x2', '\x2', '\x2', '\xCB0', '\xCB1', '\a', 
		'\x10C', '\x2', '\x2', '\xCB1', '\x341', '\x3', '\x2', '\x2', '\x2', '\xCB2', 
		'\xCD7', '\x5', '\x344', '\x1A3', '\x2', '\xCB3', '\xCD7', '\x5', '\x346', 
		'\x1A4', '\x2', '\xCB4', '\xCD7', '\x5', '\x348', '\x1A5', '\x2', '\xCB5', 
		'\xCD7', '\x5', '\x34A', '\x1A6', '\x2', '\xCB6', '\xCD7', '\x5', '\x34C', 
		'\x1A7', '\x2', '\xCB7', '\xCD7', '\x5', '\x34E', '\x1A8', '\x2', '\xCB8', 
		'\xCD7', '\x5', '\x350', '\x1A9', '\x2', '\xCB9', '\xCD7', '\x5', '\x352', 
		'\x1AA', '\x2', '\xCBA', '\xCD7', '\x5', '\x354', '\x1AB', '\x2', '\xCBB', 
		'\xCD7', '\x5', '\x356', '\x1AC', '\x2', '\xCBC', '\xCD7', '\x5', '\x358', 
		'\x1AD', '\x2', '\xCBD', '\xCD7', '\x5', '\x35A', '\x1AE', '\x2', '\xCBE', 
		'\xCD7', '\x5', '\x35C', '\x1AF', '\x2', '\xCBF', '\xCD7', '\x5', '\x35E', 
		'\x1B0', '\x2', '\xCC0', '\xCD7', '\x5', '\x360', '\x1B1', '\x2', '\xCC1', 
		'\xCD7', '\x5', '\x362', '\x1B2', '\x2', '\xCC2', '\xCD7', '\x5', '\x364', 
		'\x1B3', '\x2', '\xCC3', '\xCD7', '\x5', '\x366', '\x1B4', '\x2', '\xCC4', 
		'\xCD7', '\x5', '\x368', '\x1B5', '\x2', '\xCC5', '\xCD7', '\x5', '\x36A', 
		'\x1B6', '\x2', '\xCC6', '\xCD7', '\x5', '\x36C', '\x1B7', '\x2', '\xCC7', 
		'\xCD7', '\x5', '\x36E', '\x1B8', '\x2', '\xCC8', '\xCD7', '\x5', '\x370', 
		'\x1B9', '\x2', '\xCC9', '\xCD7', '\x5', '\x372', '\x1BA', '\x2', '\xCCA', 
		'\xCD7', '\x5', '\x374', '\x1BB', '\x2', '\xCCB', '\xCD7', '\x5', '\x376', 
		'\x1BC', '\x2', '\xCCC', '\xCD7', '\x5', '\x378', '\x1BD', '\x2', '\xCCD', 
		'\xCD7', '\x5', '\x37A', '\x1BE', '\x2', '\xCCE', '\xCD7', '\x5', '\x37C', 
		'\x1BF', '\x2', '\xCCF', '\xCD7', '\x5', '\x37E', '\x1C0', '\x2', '\xCD0', 
		'\xCD7', '\x5', '\x380', '\x1C1', '\x2', '\xCD1', '\xCD7', '\x5', '\x382', 
		'\x1C2', '\x2', '\xCD2', '\xCD7', '\x5', '\x384', '\x1C3', '\x2', '\xCD3', 
		'\xCD7', '\x5', '\x386', '\x1C4', '\x2', '\xCD4', '\xCD7', '\x5', '\x388', 
		'\x1C5', '\x2', '\xCD5', '\xCD7', '\x5', '\x38A', '\x1C6', '\x2', '\xCD6', 
		'\xCB2', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCB3', '\x3', '\x2', '\x2', 
		'\x2', '\xCD6', '\xCB4', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCB5', 
		'\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCB6', '\x3', '\x2', '\x2', '\x2', 
		'\xCD6', '\xCB7', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCB8', '\x3', 
		'\x2', '\x2', '\x2', '\xCD6', '\xCB9', '\x3', '\x2', '\x2', '\x2', '\xCD6', 
		'\xCBA', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCBB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD6', '\xCBC', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCBD', 
		'\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCBE', '\x3', '\x2', '\x2', '\x2', 
		'\xCD6', '\xCBF', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCC0', '\x3', 
		'\x2', '\x2', '\x2', '\xCD6', '\xCC1', '\x3', '\x2', '\x2', '\x2', '\xCD6', 
		'\xCC2', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCC3', '\x3', '\x2', '\x2', 
		'\x2', '\xCD6', '\xCC4', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCC5', 
		'\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCC6', '\x3', '\x2', '\x2', '\x2', 
		'\xCD6', '\xCC7', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCD6', '\xCC9', '\x3', '\x2', '\x2', '\x2', '\xCD6', 
		'\xCCA', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD6', '\xCCC', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCCE', '\x3', '\x2', '\x2', '\x2', 
		'\xCD6', '\xCCF', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCD0', '\x3', 
		'\x2', '\x2', '\x2', '\xCD6', '\xCD1', '\x3', '\x2', '\x2', '\x2', '\xCD6', 
		'\xCD2', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCD3', '\x3', '\x2', '\x2', 
		'\x2', '\xCD6', '\xCD4', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCD5', 
		'\x3', '\x2', '\x2', '\x2', '\xCD7', '\x343', '\x3', '\x2', '\x2', '\x2', 
		'\xCD8', '\xCD9', '\a', '\x187', '\x2', '\x2', '\xCD9', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\xCDA', '\xCDB', '\a', '\x188', '\x2', '\x2', '\xCDB', 
		'\x347', '\x3', '\x2', '\x2', '\x2', '\xCDC', '\xCDD', '\a', '\x189', 
		'\x2', '\x2', '\xCDD', '\x349', '\x3', '\x2', '\x2', '\x2', '\xCDE', '\xCDF', 
		'\a', '\x18A', '\x2', '\x2', '\xCDF', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\xCE0', '\xCE1', '\a', '\x18B', '\x2', '\x2', '\xCE1', '\x34D', '\x3', 
		'\x2', '\x2', '\x2', '\xCE2', '\xCE3', '\a', '\x18C', '\x2', '\x2', '\xCE3', 
		'\x34F', '\x3', '\x2', '\x2', '\x2', '\xCE4', '\xCE5', '\a', '\x18D', 
		'\x2', '\x2', '\xCE5', '\x351', '\x3', '\x2', '\x2', '\x2', '\xCE6', '\xCE7', 
		'\a', '\x18E', '\x2', '\x2', '\xCE7', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\xCE8', '\xCE9', '\a', '\x18F', '\x2', '\x2', '\xCE9', '\x355', '\x3', 
		'\x2', '\x2', '\x2', '\xCEA', '\xCEB', '\a', '\x190', '\x2', '\x2', '\xCEB', 
		'\x357', '\x3', '\x2', '\x2', '\x2', '\xCEC', '\xCED', '\a', '\x191', 
		'\x2', '\x2', '\xCED', '\x359', '\x3', '\x2', '\x2', '\x2', '\xCEE', '\xCEF', 
		'\a', '\x192', '\x2', '\x2', '\xCEF', '\x35B', '\x3', '\x2', '\x2', '\x2', 
		'\xCF0', '\xCF1', '\a', '\x193', '\x2', '\x2', '\xCF1', '\x35D', '\x3', 
		'\x2', '\x2', '\x2', '\xCF2', '\xCF3', '\a', '\x194', '\x2', '\x2', '\xCF3', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\xCF4', '\xCF5', '\a', '\x195', 
		'\x2', '\x2', '\xCF5', '\x361', '\x3', '\x2', '\x2', '\x2', '\xCF6', '\xCF7', 
		'\a', '\x196', '\x2', '\x2', '\xCF7', '\x363', '\x3', '\x2', '\x2', '\x2', 
		'\xCF8', '\xCF9', '\a', '\x197', '\x2', '\x2', '\xCF9', '\x365', '\x3', 
		'\x2', '\x2', '\x2', '\xCFA', '\xCFB', '\a', '\x198', '\x2', '\x2', '\xCFB', 
		'\x367', '\x3', '\x2', '\x2', '\x2', '\xCFC', '\xCFD', '\a', '\x199', 
		'\x2', '\x2', '\xCFD', '\x369', '\x3', '\x2', '\x2', '\x2', '\xCFE', '\xCFF', 
		'\a', '\x19A', '\x2', '\x2', '\xCFF', '\x36B', '\x3', '\x2', '\x2', '\x2', 
		'\xD00', '\xD01', '\a', '\x19B', '\x2', '\x2', '\xD01', '\x36D', '\x3', 
		'\x2', '\x2', '\x2', '\xD02', '\xD03', '\a', '\x19C', '\x2', '\x2', '\xD03', 
		'\x36F', '\x3', '\x2', '\x2', '\x2', '\xD04', '\xD05', '\a', '\x19D', 
		'\x2', '\x2', '\xD05', '\x371', '\x3', '\x2', '\x2', '\x2', '\xD06', '\xD07', 
		'\a', '\x19E', '\x2', '\x2', '\xD07', '\x373', '\x3', '\x2', '\x2', '\x2', 
		'\xD08', '\xD09', '\a', '\x19F', '\x2', '\x2', '\xD09', '\x375', '\x3', 
		'\x2', '\x2', '\x2', '\xD0A', '\xD0B', '\a', '\x1A0', '\x2', '\x2', '\xD0B', 
		'\x377', '\x3', '\x2', '\x2', '\x2', '\xD0C', '\xD0D', '\a', '\x1A1', 
		'\x2', '\x2', '\xD0D', '\x379', '\x3', '\x2', '\x2', '\x2', '\xD0E', '\xD0F', 
		'\a', '\x1A2', '\x2', '\x2', '\xD0F', '\x37B', '\x3', '\x2', '\x2', '\x2', 
		'\xD10', '\xD11', '\a', '\x1A3', '\x2', '\x2', '\xD11', '\x37D', '\x3', 
		'\x2', '\x2', '\x2', '\xD12', '\xD13', '\a', '\x1A4', '\x2', '\x2', '\xD13', 
		'\x37F', '\x3', '\x2', '\x2', '\x2', '\xD14', '\xD15', '\a', '\x1A5', 
		'\x2', '\x2', '\xD15', '\x381', '\x3', '\x2', '\x2', '\x2', '\xD16', '\xD17', 
		'\a', '\x1A6', '\x2', '\x2', '\xD17', '\x383', '\x3', '\x2', '\x2', '\x2', 
		'\xD18', '\xD19', '\a', '\x1A7', '\x2', '\x2', '\xD19', '\x385', '\x3', 
		'\x2', '\x2', '\x2', '\xD1A', '\xD1B', '\a', '\x1A8', '\x2', '\x2', '\xD1B', 
		'\x387', '\x3', '\x2', '\x2', '\x2', '\xD1C', '\xD1D', '\a', '\x1A9', 
		'\x2', '\x2', '\xD1D', '\x389', '\x3', '\x2', '\x2', '\x2', '\xD1E', '\xD1F', 
		'\a', '\x1AA', '\x2', '\x2', '\xD1F', '\x38B', '\x3', '\x2', '\x2', '\x2', 
		'\xD20', '\xD2C', '\x5', '\x38E', '\x1C8', '\x2', '\xD21', '\xD2C', '\x5', 
		'\x390', '\x1C9', '\x2', '\xD22', '\xD2C', '\x5', '\x392', '\x1CA', '\x2', 
		'\xD23', '\xD2C', '\x5', '\x394', '\x1CB', '\x2', '\xD24', '\xD2C', '\x5', 
		'\x396', '\x1CC', '\x2', '\xD25', '\xD2C', '\x5', '\x398', '\x1CD', '\x2', 
		'\xD26', '\xD2C', '\x5', '\x39A', '\x1CE', '\x2', '\xD27', '\xD2C', '\x5', 
		'\x39C', '\x1CF', '\x2', '\xD28', '\xD2C', '\x5', '\x39E', '\x1D0', '\x2', 
		'\xD29', '\xD2C', '\x5', '\x3A0', '\x1D1', '\x2', '\xD2A', '\xD2C', '\x5', 
		'\x3A2', '\x1D2', '\x2', '\xD2B', '\xD20', '\x3', '\x2', '\x2', '\x2', 
		'\xD2B', '\xD21', '\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD22', '\x3', 
		'\x2', '\x2', '\x2', '\xD2B', '\xD23', '\x3', '\x2', '\x2', '\x2', '\xD2B', 
		'\xD24', '\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD25', '\x3', '\x2', '\x2', 
		'\x2', '\xD2B', '\xD26', '\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD27', 
		'\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD28', '\x3', '\x2', '\x2', '\x2', 
		'\xD2B', '\xD29', '\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD2A', '\x3', 
		'\x2', '\x2', '\x2', '\xD2C', '\x38D', '\x3', '\x2', '\x2', '\x2', '\xD2D', 
		'\xD2E', '\a', 'p', '\x2', '\x2', '\xD2E', '\x38F', '\x3', '\x2', '\x2', 
		'\x2', '\xD2F', '\xD30', '\a', '\x10D', '\x2', '\x2', '\xD30', '\x391', 
		'\x3', '\x2', '\x2', '\x2', '\xD31', '\xD32', '\a', '\xDE', '\x2', '\x2', 
		'\xD32', '\x393', '\x3', '\x2', '\x2', '\x2', '\xD33', '\xD34', '\a', 
		'\x8F', '\x2', '\x2', '\xD34', '\x395', '\x3', '\x2', '\x2', '\x2', '\xD35', 
		'\xD36', '\a', '\xDD', '\x2', '\x2', '\xD36', '\x397', '\x3', '\x2', '\x2', 
		'\x2', '\xD37', '\xD38', '\a', '\xF9', '\x2', '\x2', '\xD38', '\x399', 
		'\x3', '\x2', '\x2', '\x2', '\xD39', '\xD3A', '\a', '\xDC', '\x2', '\x2', 
		'\xD3A', '\x39B', '\x3', '\x2', '\x2', '\x2', '\xD3B', '\xD3C', '\a', 
		'\xDA', '\x2', '\x2', '\xD3C', '\x39D', '\x3', '\x2', '\x2', '\x2', '\xD3D', 
		'\xD3E', '\a', '}', '\x2', '\x2', '\xD3E', '\x39F', '\x3', '\x2', '\x2', 
		'\x2', '\xD3F', '\xD40', '\a', '\x1AB', '\x2', '\x2', '\xD40', '\x3A1', 
		'\x3', '\x2', '\x2', '\x2', '\xD41', '\xD42', '\a', '\x1AC', '\x2', '\x2', 
		'\xD42', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\xD43', '\xD4E', '\x5', 
		'\x3A6', '\x1D4', '\x2', '\xD44', '\xD4E', '\x5', '\x3A8', '\x1D5', '\x2', 
		'\xD45', '\xD4E', '\x5', '\x3AA', '\x1D6', '\x2', '\xD46', '\xD4E', '\x5', 
		'\x3AC', '\x1D7', '\x2', '\xD47', '\xD4E', '\x5', '\x3AE', '\x1D8', '\x2', 
		'\xD48', '\xD4E', '\x5', '\x3B0', '\x1D9', '\x2', '\xD49', '\xD4E', '\x5', 
		'\x3B2', '\x1DA', '\x2', '\xD4A', '\xD4E', '\x5', '\x3B4', '\x1DB', '\x2', 
		'\xD4B', '\xD4E', '\x5', '\x3B6', '\x1DC', '\x2', '\xD4C', '\xD4E', '\x5', 
		'\x3B8', '\x1DD', '\x2', '\xD4D', '\xD43', '\x3', '\x2', '\x2', '\x2', 
		'\xD4D', '\xD44', '\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD45', '\x3', 
		'\x2', '\x2', '\x2', '\xD4D', '\xD46', '\x3', '\x2', '\x2', '\x2', '\xD4D', 
		'\xD47', '\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD48', '\x3', '\x2', '\x2', 
		'\x2', '\xD4D', '\xD49', '\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD4A', 
		'\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD4B', '\x3', '\x2', '\x2', '\x2', 
		'\xD4D', '\xD4C', '\x3', '\x2', '\x2', '\x2', '\xD4E', '\x3A5', '\x3', 
		'\x2', '\x2', '\x2', '\xD4F', '\xD50', '\a', '\x1AD', '\x2', '\x2', '\xD50', 
		'\x3A7', '\x3', '\x2', '\x2', '\x2', '\xD51', '\xD52', '\a', '\x1AE', 
		'\x2', '\x2', '\xD52', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\xD53', '\xD54', 
		'\a', '\x1AF', '\x2', '\x2', '\xD54', '\x3AB', '\x3', '\x2', '\x2', '\x2', 
		'\xD55', '\xD56', '\a', '\x1B0', '\x2', '\x2', '\xD56', '\x3AD', '\x3', 
		'\x2', '\x2', '\x2', '\xD57', '\xD58', '\a', '\x1B1', '\x2', '\x2', '\xD58', 
		'\x3AF', '\x3', '\x2', '\x2', '\x2', '\xD59', '\xD5A', '\a', '\x1B2', 
		'\x2', '\x2', '\xD5A', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\xD5B', '\xD5C', 
		'\a', '\x1B3', '\x2', '\x2', '\xD5C', '\x3B3', '\x3', '\x2', '\x2', '\x2', 
		'\xD5D', '\xD5E', '\a', '\x1B4', '\x2', '\x2', '\xD5E', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\xD5F', '\xD60', '\a', '\x1B5', '\x2', '\x2', '\xD60', 
		'\x3B7', '\x3', '\x2', '\x2', '\x2', '\xD61', '\xD62', '\a', '\x1B6', 
		'\x2', '\x2', '\xD62', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\xD63', '\xD68', 
		'\x5', '\x3BC', '\x1DF', '\x2', '\xD64', '\xD68', '\x5', '\x3BE', '\x1E0', 
		'\x2', '\xD65', '\xD68', '\x5', '\x332', '\x19A', '\x2', '\xD66', '\xD68', 
		'\x5', '\x2F6', '\x17C', '\x2', '\xD67', '\xD63', '\x3', '\x2', '\x2', 
		'\x2', '\xD67', '\xD64', '\x3', '\x2', '\x2', '\x2', '\xD67', '\xD65', 
		'\x3', '\x2', '\x2', '\x2', '\xD67', '\xD66', '\x3', '\x2', '\x2', '\x2', 
		'\xD68', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\xD69', '\xD6A', '\a', 
		'\x1B7', '\x2', '\x2', '\xD6A', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\xD6B', 
		'\xD6C', '\a', '\x1B8', '\x2', '\x2', '\xD6C', '\x3BF', '\x3', '\x2', 
		'\x2', '\x2', '\xD6D', '\xD70', '\x5', '\x3C2', '\x1E2', '\x2', '\xD6E', 
		'\xD70', '\x5', '\x3C4', '\x1E3', '\x2', '\xD6F', '\xD6D', '\x3', '\x2', 
		'\x2', '\x2', '\xD6F', '\xD6E', '\x3', '\x2', '\x2', '\x2', '\xD70', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\xD71', '\xD72', '\a', '\x1B9', '\x2', '\x2', 
		'\xD72', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\xD73', '\xD74', '\a', 
		'\x1BA', '\x2', '\x2', '\xD74', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\xD75', 
		'\xD79', '\x5', '\x3C8', '\x1E5', '\x2', '\xD76', '\xD79', '\x5', '\x33E', 
		'\x1A0', '\x2', '\xD77', '\xD79', '\x5', '\x340', '\x1A1', '\x2', '\xD78', 
		'\xD75', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD76', '\x3', '\x2', '\x2', 
		'\x2', '\xD78', '\xD77', '\x3', '\x2', '\x2', '\x2', '\xD79', '\x3C7', 
		'\x3', '\x2', '\x2', '\x2', '\xD7A', '\xD7B', '\a', '\x1BB', '\x2', '\x2', 
		'\xD7B', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\xD7C', '\xD7D', '\t', 
		'\x4', '\x2', '\x2', '\xD7D', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x3CF', '\x3DB', '\x3DE', '\x3EE', '\x41B', '\x42C', '\x48C', '\x796', 
		'\xB33', '\xB59', '\xBA1', '\xBBF', '\xBDF', '\xC00', '\xC0A', '\xC14', 
		'\xC21', '\xC2B', '\xC33', '\xC3B', '\xC41', '\xC57', '\xC81', '\xC97', 
		'\xCA2', '\xCAC', '\xCD6', '\xD2B', '\xD4D', '\xD67', '\xD6F', '\xD78',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
