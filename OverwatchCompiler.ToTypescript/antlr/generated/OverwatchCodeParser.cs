//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Git\overwatch-typescript-compiler\OverwatchCompiler.ToTypescript\antlr\OverwatchCode.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class OverwatchCodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, T__156=157, T__157=158, T__158=159, T__159=160, T__160=161, 
		T__161=162, T__162=163, T__163=164, T__164=165, T__165=166, T__166=167, 
		T__167=168, T__168=169, T__169=170, T__170=171, T__171=172, T__172=173, 
		T__173=174, T__174=175, T__175=176, T__176=177, T__177=178, T__178=179, 
		T__179=180, T__180=181, T__181=182, T__182=183, T__183=184, T__184=185, 
		T__185=186, T__186=187, T__187=188, T__188=189, T__189=190, T__190=191, 
		T__191=192, T__192=193, T__193=194, T__194=195, T__195=196, T__196=197, 
		T__197=198, T__198=199, T__199=200, T__200=201, T__201=202, T__202=203, 
		T__203=204, T__204=205, T__205=206, T__206=207, T__207=208, T__208=209, 
		T__209=210, T__210=211, T__211=212, T__212=213, T__213=214, T__214=215, 
		T__215=216, T__216=217, T__217=218, T__218=219, T__219=220, T__220=221, 
		T__221=222, T__222=223, T__223=224, T__224=225, T__225=226, T__226=227, 
		T__227=228, T__228=229, T__229=230, T__230=231, T__231=232, T__232=233, 
		T__233=234, T__234=235, T__235=236, T__236=237, T__237=238, T__238=239, 
		T__239=240, T__240=241, T__241=242, T__242=243, T__243=244, T__244=245, 
		T__245=246, T__246=247, T__247=248, T__248=249, T__249=250, T__250=251, 
		T__251=252, T__252=253, T__253=254, T__254=255, T__255=256, T__256=257, 
		T__257=258, T__258=259, T__259=260, T__260=261, T__261=262, T__262=263, 
		T__263=264, T__264=265, T__265=266, T__266=267, T__267=268, T__268=269, 
		T__269=270, ALL_TEAMS=271, LETTER=272, INTEGER=273, SLOT=274, TEAM=275, 
		ALL=276, STRING=277, FLOAT=278, NULL=279, BOOLEAN=280, WS=281, ERROR_CHAR=282;
	public const int
		RULE_root = 0, RULE_rule = 1, RULE_eventBlock = 2, RULE_eventType = 3, 
		RULE_ongoingGlobalEventType = 4, RULE_ongoingEachPlayerEventType = 5, 
		RULE_playerEarnedEliminationEventType = 6, RULE_playerDealtFinalBlowEventType = 7, 
		RULE_playerDealtDamageEventType = 8, RULE_playerTookDamageEventType = 9, 
		RULE_playerDiedEventType = 10, RULE_conditionBlock = 11, RULE_condition = 12, 
		RULE_actionBlock = 13, RULE_action = 14, RULE_setGlobalVariableAction = 15, 
		RULE_expression = 16, RULE_vectorExpression = 17, RULE_addExpression = 18, 
		RULE_absoluteValueExpression = 19, RULE_allDeadPlayersExpression = 20, 
		RULE_allHeroesExpression = 21, RULE_allLivingPlayersExpression = 22, RULE_allPlayersExpression = 23, 
		RULE_allPlayersNotOnObjectiveExpression = 24, RULE_allPlayersOnObjectiveExpression = 25, 
		RULE_allowedHeroesExpression = 26, RULE_altitudeOfExpression = 27, RULE_eventPlayerExpression = 28, 
		RULE_andExpression = 29, RULE_angleDifferenceExpression = 30, RULE_appendToArrayExpression = 31, 
		RULE_arrayContainsExpression = 32, RULE_arraySliceExpression = 33, RULE_attackerExpression = 34, 
		RULE_backwardExpression = 35, RULE_closestPlayerToExpression = 36, RULE_compareExpression = 37, 
		RULE_controlModeScoringPercentageExpression = 38, RULE_globalVariableExpression = 39, 
		RULE_controlModeScoringTeamExpression = 40, RULE_cosineFromDegreesExpression = 41, 
		RULE_cosineFromRadiansExpression = 42, RULE_countOfExpression = 43, RULE_crossProductExpression = 44, 
		RULE_currentArrayElementExpression = 45, RULE_directionFromAnglesExpression = 46, 
		RULE_directionTowardsExpression = 47, RULE_distanceBetweenExpression = 48, 
		RULE_divideExpression = 49, RULE_dotProductExpression = 50, RULE_downExpression = 51, 
		RULE_emptyArrayExpression = 52, RULE_entityExistsExpression = 53, RULE_eventDamageExpression = 54, 
		RULE_eventWasCriticalHitExpression = 55, RULE_eyePositionExpression = 56, 
		RULE_facingDirectionOfExpression = 57, RULE_farthestPlayerFromExpression = 58, 
		RULE_filteredArrayExpression = 59, RULE_firstOfExpression = 60, RULE_flagPositionExpression = 61, 
		RULE_forwardExpression = 62, RULE_hasSpawnedExpression = 63, RULE_hasStatusExpression = 64, 
		RULE_healthExpression = 65, RULE_healthPercentExpression = 66, RULE_heroExpression = 67, 
		RULE_heroIconStringExpression = 68, RULE_heroOfExpression = 69, RULE_horizontalAngleFromDirectionExpression = 70, 
		RULE_horizontalAngleTowardsExpression = 71, RULE_horizontalFacingAngleOfExpression = 72, 
		RULE_horizontalSpeedOfExpression = 73, RULE_indexOfArrayValueExpression = 74, 
		RULE_isAliveExpression = 75, RULE_isAssemblingHeroesExpression = 76, RULE_isBetweenRoundsExpression = 77, 
		RULE_isButtonHeldExpression = 78, RULE_isCommunicatingExpression = 79, 
		RULE_isCommunicatingAnyExpression = 80, RULE_isCommunicatingAnyEmoteExpression = 81, 
		RULE_isCommunicatingAnyVoicelineExpression = 82, RULE_isControlModePointLockedExpression = 83, 
		RULE_isCrouchingExpression = 84, RULE_isCTFModeInSuddenDeathExpression = 85, 
		RULE_isDeadExpression = 86, RULE_isFiringPrimaryExpression = 87, RULE_isFiringSecondaryExpression = 88, 
		RULE_isFlagAtBaseExpression = 89, RULE_isFlagBeingCarriedExpression = 90, 
		RULE_isGameInProgressExpression = 91, RULE_isHeroBeingPlayedExpression = 92, 
		RULE_isInAirExpression = 93, RULE_isInLineofSightExpression = 94, RULE_isInSetupExpression = 95, 
		RULE_isInSpawnRoomExpression = 96, RULE_isInViewAngleExpression = 97, 
		RULE_isMatchCompleteExpression = 98, RULE_isMovingExpression = 99, RULE_isObjectiveCompleteExpression = 100, 
		RULE_isOnGroundExpression = 101, RULE_isOnObjectiveExpression = 102, RULE_isOnWallExpression = 103, 
		RULE_isPortraitOnFireExpression = 104, RULE_isStandingExpression = 105, 
		RULE_isTeamOnDefenseExpression = 106, RULE_isTeamOnOffenseExpression = 107, 
		RULE_isTrueForAllExpression = 108, RULE_isTrueForAnyExpression = 109, 
		RULE_isUsingAbility1Expression = 110, RULE_isUsingAbility2Expression = 111, 
		RULE_isUsingUltimateExpression = 112, RULE_isWaitingForPlayersExpression = 113, 
		RULE_lastCreatedEntityExpression = 114, RULE_lastDamageModificationIDExpression = 115, 
		RULE_lastDamageOverTimeIDExpression = 116, RULE_lastHealOverTimeIDExpression = 117, 
		RULE_lastOfExpression = 118, RULE_lastTextIDExpression = 119, RULE_leftExpression = 120, 
		RULE_localVectorOfExpression = 121, RULE_matchRoundExpression = 122, RULE_matchTimeExpression = 123, 
		RULE_maxExpression = 124, RULE_maxHealthExpression = 125, RULE_minExpression = 126, 
		RULE_moduloExpression = 127, RULE_multiplyExpression = 128, RULE_nearestWalkablePositionExpression = 129, 
		RULE_normalizeExpression = 130, RULE_notExpression = 131, RULE_numberOfDeadPlayersExpression = 132, 
		RULE_numberOfDeathsExpression = 133, RULE_numberOfEliminationsExpression = 134, 
		RULE_numberOfFinalBlowsExpression = 135, RULE_numberOfHeroesExpression = 136, 
		RULE_numberOfLivingPlayersExpression = 137, RULE_numberOfPlayersExpression = 138, 
		RULE_numberOfPlayersOnObjectiveExpression = 139, RULE_objectiveIndexExpression = 140, 
		RULE_objectivePositionExpression = 141, RULE_oppositeTeamOfExpression = 142, 
		RULE_orExpression = 143, RULE_payloadPositionExpression = 144, RULE_payloadProgressPercentageExpression = 145, 
		RULE_playerCarryingFlagExpression = 146, RULE_playerClosestToReticleExpression = 147, 
		RULE_playerVariableExpression = 148, RULE_playersInSlotExpression = 149, 
		RULE_playersInViewAngleExpression = 150, RULE_playersOnHeroExpression = 151, 
		RULE_playersWithinRadiusExpression = 152, RULE_pointCapturePercentageExpression = 153, 
		RULE_positionOfExpression = 154, RULE_raiseToPowerExpression = 155, RULE_randomIntegerExpression = 156, 
		RULE_randomRealExpression = 157, RULE_randomValueInArrayExpression = 158, 
		RULE_randomizedArrayExpression = 159, RULE_rayCastHitNormalExpression = 160, 
		RULE_rayCastHitPlayerExpression = 161, RULE_rayCastHitPositionExpression = 162, 
		RULE_removeFromArrayExpression = 163, RULE_rightExpression = 164, RULE_roundToIntegerExpression = 165, 
		RULE_scoreOfExpression = 166, RULE_sineFromDegreesExpression = 167, RULE_sineFromRadiansExpression = 168, 
		RULE_slotOfExpression = 169, RULE_sortedArrayExpression = 170, RULE_speedOfExpression = 171, 
		RULE_speedOfInDirectionExpression = 172, RULE_squareRootExpression = 173, 
		RULE_stringExpression = 174, RULE_subtractExpression = 175, RULE_teamOfExpression = 176, 
		RULE_teamScoreExpression = 177, RULE_throttleOfExpression = 178, RULE_totalTimeElapsedExpression = 179, 
		RULE_ultimateChargePercentExpression = 180, RULE_upExpression = 181, RULE_valueInArrayExpression = 182, 
		RULE_vectorTowardsExpression = 183, RULE_verticalFacingAngleOfExpression = 184, 
		RULE_verticalSpeedOfExpression = 185, RULE_victimExpression = 186, RULE_worldVectorOfExpression = 187, 
		RULE_xComponentOfExpression = 188, RULE_yComponentOfExpression = 189, 
		RULE_zComponentOfExpression = 190, RULE_team = 191, RULE_playerConstant = 192, 
		RULE_literal = 193, RULE_globalVariable = 194, RULE_playerVariable = 195, 
		RULE_heroType = 196, RULE_reaper = 197, RULE_tracer = 198, RULE_mercy = 199, 
		RULE_hanzo = 200, RULE_torbjorn = 201, RULE_reinhardt = 202, RULE_pharah = 203, 
		RULE_winston = 204, RULE_widowmaker = 205, RULE_bastion = 206, RULE_symmetra = 207, 
		RULE_zenyatta = 208, RULE_genji = 209, RULE_roadhog = 210, RULE_mcCree = 211, 
		RULE_junkrat = 212, RULE_zarya = 213, RULE_soldier76 = 214, RULE_lucio = 215, 
		RULE_dva = 216, RULE_mei = 217, RULE_sombra = 218, RULE_doomfist = 219, 
		RULE_ana = 220, RULE_orisa = 221, RULE_brigitte = 222, RULE_moira = 223, 
		RULE_wreckingBall = 224, RULE_ashe = 225, RULE_baptiste = 226, RULE_status = 227, 
		RULE_hacked = 228, RULE_burning = 229, RULE_knockedDown = 230, RULE_asleep = 231, 
		RULE_frozen = 232, RULE_unkillable = 233, RULE_invincible = 234, RULE_phasedOut = 235, 
		RULE_rooted = 236, RULE_stunned = 237, RULE_button = 238, RULE_primaryFire = 239, 
		RULE_secondaryFire = 240, RULE_ability1 = 241, RULE_ability2 = 242, RULE_ultimate = 243, 
		RULE_interact = 244, RULE_jump = 245, RULE_crouch = 246, RULE_communicationType = 247, 
		RULE_voiceLineUp = 248, RULE_voiceLineLeft = 249, RULE_voiceLineRight = 250, 
		RULE_voiceLineDown = 251, RULE_emoteUp = 252, RULE_emoteLeft = 253, RULE_emoteRight = 254, 
		RULE_emoteDown = 255, RULE_ultimateStatus = 256, RULE_hello = 257, RULE_needHealing = 258, 
		RULE_groupUp = 259, RULE_thanks = 260, RULE_acknowledge = 261, RULE_barrierBlockType = 262, 
		RULE_barriersDoNotBlockLOS = 263, RULE_enemyBarriersBlockLOS = 264, RULE_allBarriersBlockLOS = 265, 
		RULE_vectorTransformationType = 266, RULE_rotation = 267, RULE_rotationAndTranslation = 268, 
		RULE_lineOfSightCheckType = 269, RULE_off = 270, RULE_surfaces = 271, 
		RULE_surfacesAndEnemyBarriers = 272, RULE_surfacesAndAllBarriers = 273, 
		RULE_roundingDirection = 274, RULE_up = 275, RULE_down = 276, RULE_toNearest = 277, 
		RULE_binaryCompartorOperator = 278;
	public static readonly string[] ruleNames = {
		"root", "rule", "eventBlock", "eventType", "ongoingGlobalEventType", "ongoingEachPlayerEventType", 
		"playerEarnedEliminationEventType", "playerDealtFinalBlowEventType", "playerDealtDamageEventType", 
		"playerTookDamageEventType", "playerDiedEventType", "conditionBlock", 
		"condition", "actionBlock", "action", "setGlobalVariableAction", "expression", 
		"vectorExpression", "addExpression", "absoluteValueExpression", "allDeadPlayersExpression", 
		"allHeroesExpression", "allLivingPlayersExpression", "allPlayersExpression", 
		"allPlayersNotOnObjectiveExpression", "allPlayersOnObjectiveExpression", 
		"allowedHeroesExpression", "altitudeOfExpression", "eventPlayerExpression", 
		"andExpression", "angleDifferenceExpression", "appendToArrayExpression", 
		"arrayContainsExpression", "arraySliceExpression", "attackerExpression", 
		"backwardExpression", "closestPlayerToExpression", "compareExpression", 
		"controlModeScoringPercentageExpression", "globalVariableExpression", 
		"controlModeScoringTeamExpression", "cosineFromDegreesExpression", "cosineFromRadiansExpression", 
		"countOfExpression", "crossProductExpression", "currentArrayElementExpression", 
		"directionFromAnglesExpression", "directionTowardsExpression", "distanceBetweenExpression", 
		"divideExpression", "dotProductExpression", "downExpression", "emptyArrayExpression", 
		"entityExistsExpression", "eventDamageExpression", "eventWasCriticalHitExpression", 
		"eyePositionExpression", "facingDirectionOfExpression", "farthestPlayerFromExpression", 
		"filteredArrayExpression", "firstOfExpression", "flagPositionExpression", 
		"forwardExpression", "hasSpawnedExpression", "hasStatusExpression", "healthExpression", 
		"healthPercentExpression", "heroExpression", "heroIconStringExpression", 
		"heroOfExpression", "horizontalAngleFromDirectionExpression", "horizontalAngleTowardsExpression", 
		"horizontalFacingAngleOfExpression", "horizontalSpeedOfExpression", "indexOfArrayValueExpression", 
		"isAliveExpression", "isAssemblingHeroesExpression", "isBetweenRoundsExpression", 
		"isButtonHeldExpression", "isCommunicatingExpression", "isCommunicatingAnyExpression", 
		"isCommunicatingAnyEmoteExpression", "isCommunicatingAnyVoicelineExpression", 
		"isControlModePointLockedExpression", "isCrouchingExpression", "isCTFModeInSuddenDeathExpression", 
		"isDeadExpression", "isFiringPrimaryExpression", "isFiringSecondaryExpression", 
		"isFlagAtBaseExpression", "isFlagBeingCarriedExpression", "isGameInProgressExpression", 
		"isHeroBeingPlayedExpression", "isInAirExpression", "isInLineofSightExpression", 
		"isInSetupExpression", "isInSpawnRoomExpression", "isInViewAngleExpression", 
		"isMatchCompleteExpression", "isMovingExpression", "isObjectiveCompleteExpression", 
		"isOnGroundExpression", "isOnObjectiveExpression", "isOnWallExpression", 
		"isPortraitOnFireExpression", "isStandingExpression", "isTeamOnDefenseExpression", 
		"isTeamOnOffenseExpression", "isTrueForAllExpression", "isTrueForAnyExpression", 
		"isUsingAbility1Expression", "isUsingAbility2Expression", "isUsingUltimateExpression", 
		"isWaitingForPlayersExpression", "lastCreatedEntityExpression", "lastDamageModificationIDExpression", 
		"lastDamageOverTimeIDExpression", "lastHealOverTimeIDExpression", "lastOfExpression", 
		"lastTextIDExpression", "leftExpression", "localVectorOfExpression", "matchRoundExpression", 
		"matchTimeExpression", "maxExpression", "maxHealthExpression", "minExpression", 
		"moduloExpression", "multiplyExpression", "nearestWalkablePositionExpression", 
		"normalizeExpression", "notExpression", "numberOfDeadPlayersExpression", 
		"numberOfDeathsExpression", "numberOfEliminationsExpression", "numberOfFinalBlowsExpression", 
		"numberOfHeroesExpression", "numberOfLivingPlayersExpression", "numberOfPlayersExpression", 
		"numberOfPlayersOnObjectiveExpression", "objectiveIndexExpression", "objectivePositionExpression", 
		"oppositeTeamOfExpression", "orExpression", "payloadPositionExpression", 
		"payloadProgressPercentageExpression", "playerCarryingFlagExpression", 
		"playerClosestToReticleExpression", "playerVariableExpression", "playersInSlotExpression", 
		"playersInViewAngleExpression", "playersOnHeroExpression", "playersWithinRadiusExpression", 
		"pointCapturePercentageExpression", "positionOfExpression", "raiseToPowerExpression", 
		"randomIntegerExpression", "randomRealExpression", "randomValueInArrayExpression", 
		"randomizedArrayExpression", "rayCastHitNormalExpression", "rayCastHitPlayerExpression", 
		"rayCastHitPositionExpression", "removeFromArrayExpression", "rightExpression", 
		"roundToIntegerExpression", "scoreOfExpression", "sineFromDegreesExpression", 
		"sineFromRadiansExpression", "slotOfExpression", "sortedArrayExpression", 
		"speedOfExpression", "speedOfInDirectionExpression", "squareRootExpression", 
		"stringExpression", "subtractExpression", "teamOfExpression", "teamScoreExpression", 
		"throttleOfExpression", "totalTimeElapsedExpression", "ultimateChargePercentExpression", 
		"upExpression", "valueInArrayExpression", "vectorTowardsExpression", "verticalFacingAngleOfExpression", 
		"verticalSpeedOfExpression", "victimExpression", "worldVectorOfExpression", 
		"xComponentOfExpression", "yComponentOfExpression", "zComponentOfExpression", 
		"team", "playerConstant", "literal", "globalVariable", "playerVariable", 
		"heroType", "reaper", "tracer", "mercy", "hanzo", "torbjorn", "reinhardt", 
		"pharah", "winston", "widowmaker", "bastion", "symmetra", "zenyatta", 
		"genji", "roadhog", "mcCree", "junkrat", "zarya", "soldier76", "lucio", 
		"dva", "mei", "sombra", "doomfist", "ana", "orisa", "brigitte", "moira", 
		"wreckingBall", "ashe", "baptiste", "status", "hacked", "burning", "knockedDown", 
		"asleep", "frozen", "unkillable", "invincible", "phasedOut", "rooted", 
		"stunned", "button", "primaryFire", "secondaryFire", "ability1", "ability2", 
		"ultimate", "interact", "jump", "crouch", "communicationType", "voiceLineUp", 
		"voiceLineLeft", "voiceLineRight", "voiceLineDown", "emoteUp", "emoteLeft", 
		"emoteRight", "emoteDown", "ultimateStatus", "hello", "needHealing", "groupUp", 
		"thanks", "acknowledge", "barrierBlockType", "barriersDoNotBlockLOS", 
		"enemyBarriersBlockLOS", "allBarriersBlockLOS", "vectorTransformationType", 
		"rotation", "rotationAndTranslation", "lineOfSightCheckType", "off", "surfaces", 
		"surfacesAndEnemyBarriers", "surfacesAndAllBarriers", "roundingDirection", 
		"up", "down", "toNearest", "binaryCompartorOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'rule'", "'('", "')'", "'{'", "'}'", "'event'", "'Ongoing - Global;'", 
		"'Ongoing - Each Player;'", "';'", "'Player earned elimination;'", "'Player dealt final blow;'", 
		"'Player dealt damage;'", "'Player took damage;'", "'Player Died;'", "'conditions'", 
		"'actions'", "'Set Global Variable'", "','", "'Vector'", "'Add'", "'Absolute Value'", 
		"'All Dead Players'", "'All Heroes'", "'All Living Players'", "'All Players'", 
		"'All Players Not On Objective'", "'All Players On Objective'", "'Allowed Heroes'", 
		"'Altitude Of'", "'Event Player'", "'And'", "'Angle Difference'", "'Append To Array'", 
		"'Array Contains'", "'Array Slice'", "'Attacker'", "'Backward'", "'Closest Player To'", 
		"'Compare'", "'Control Mode Scoring Percentage'", "'Global Variable'", 
		"'Control Mode Scoring Team'", "'Cosine From Degrees'", "'Cosine From Radians'", 
		"'Count Of'", "'Cross Product'", "'Current Array Element'", "'Direction From Angles'", 
		"'Direction Towards'", "'Distance Between'", "'Divide'", "'Dot Product'", 
		"'Down'", "'Empty Array'", "'Entity Exists'", "'Event Damage'", "'Event Was Critical Hit'", 
		"'Eye Position'", "'Facing Direction Of'", "'Farthest Player From'", "'Filtered Array'", 
		"'First Of'", "'Flag Position'", "'Forward'", "'Has Spawned'", "'Has Status'", 
		"'Health'", "'Health Percent'", "'Hero'", "'Hero Icon String'", "'Hero Of'", 
		"'Horizontal Angle From Direction'", "'Horizontal Angle Towards'", "'Horizontal Facing Angle Of'", 
		"'Horizontal Speed Of'", "'Index Of Array Value'", "'Is Alive'", "'Is Assembling Heroes'", 
		"'Is Between Rounds'", "'Is Button Held'", "'Is Communicating'", "'Is Communicating Any'", 
		"'Is Communicating Any Emote'", "'Is Communicating Any Voice line'", "'Is Control Mode Point Locked'", 
		"'Is Crouching'", "'Is CTF Mode In Sudden Death'", "'Is Dead'", "'Is Firing Primary'", 
		"'Is Firing Secondary'", "'Is Flag At Base'", "'Is Flag Being Carried'", 
		"'Is Game In Progress'", "'Is Hero Being Played'", "'Is In Air'", "'Is In Line of Sight'", 
		"'Is In Setup'", "'Is In Spawn Room'", "'Is In View Angle'", "'Is Match Complete'", 
		"'Is Moving'", "'Is Objective Complete'", "'Is On Ground'", "'Is On Objective'", 
		"'Is On Wall'", "'Is Portrait On Fire'", "'Is Standing'", "'Is Team On Defense'", 
		"'Is Team On Offense'", "'Is True For All'", "'Is True For Any'", "'Is Using Ability 1'", 
		"'Is Using Ability 2'", "'Is Using Ultimate'", "'Is Waiting For Players'", 
		"'Last Created Entity'", "'Last Damage Modification ID'", "'Last Damage Over Time ID'", 
		"'Last Heal Over Time ID'", "'Last Of'", "'Last Text ID'", "'Left'", "'Local Vector Of'", 
		"'Match Round'", "'Match Time'", "'Max'", "'Max Health'", "'Min'", "'Modulo'", 
		"'Multiply'", "'Nearest Walkable Position'", "'Normalize'", "'Not'", "'Number of Dead Players'", 
		"'Number of Deaths'", "'Number of Eliminations'", "'Number of Final Blows'", 
		"'Number of Heroes'", "'Number of Living Players'", "'Number of Players'", 
		"'Number of Players On Objective'", "'Objective Index'", "'Objective Position'", 
		"'Opposite Team Of'", "'Or'", "'Payload Position'", "'Payload Progress Percentage'", 
		"'Player Carrying Flag'", "'Player Closest To Reticle'", "'Player Variable'", 
		"'Players In Slot'", "'Players in View Angle'", "'Players On Hero'", "'Players Within Radius'", 
		"'Point Capture Percentage'", "'Position Of'", "'Raise To Power'", "'Random Integer'", 
		"'Random Real'", "'Random Value In Array'", "'Randomized Array'", "'Ray Cast Hit Normal'", 
		"'Ray Cast Hit Player'", "'Ray Cast Hit Position'", "'Remove From Array'", 
		"'Right'", "'Round To Integer'", "'Score Of'", "'Sine From Degrees'", 
		"'Sine From Radians'", "'Slot Of'", "'Sorted Array'", "'Speed Of'", "'Speed Of In Direction'", 
		"'Square Root'", "'String'", "'Subtract'", "'Team Of'", "'Team Score'", 
		"'Throttle Of'", "'Total Time Elapsed'", "'Ultimate Charge Percent'", 
		"'Up'", "'Value In Array'", "'Vector Towards'", "'Vertical Facing Angle Of'", 
		"'Vertical Speed Of'", "'Victim'", "'World Vector Of'", "'X Component Of'", 
		"'Y Component Of'", "'Z Component Of'", "'Reaper'", "'Tracer'", "'Mercy'", 
		"'Hanzo'", "'Torbj\u00F6rn'", "'Reinhardt'", "'Pharah'", "'Winston'", 
		"'Widowmaker'", "'Bastion'", "'Symmetra'", "'Zenyatta'", "'Genji'", "'Roadhog'", 
		"'McCree'", "'Junkrat'", "'Zarya'", "'Soldier: 76'", "'L\u00FAcio'", "'D.Va'", 
		"'Mei'", "'Sombra'", "'Doomfist'", "'Ana'", "'Orisa'", "'Brigitte'", "'Moira'", 
		"'Wrecking Ball'", "'Ashe'", "'Baptiste'", "'Hacked'", "'Burning'", "'Knocked Down'", 
		"'Asleep'", "'Frozen'", "'Unkillable'", "'Invincible'", "'Phased Out'", 
		"'Rooted'", "'Stunned'", "'Primary Fire'", "'Secondary Fire'", "'Ability 1'", 
		"'Ability 2'", "'Ultimate'", "'Interact'", "'Jump'", "'Crouch'", "'Voice Line Up'", 
		"'Voice Line Left'", "'Voice Line Right'", "'Voice Line Down'", "'Emote Up'", 
		"'Emote Left'", "'Emote Right'", "'Emote Down'", "'Ultimate Status'", 
		"'Hello'", "'Need Healing'", "'Group Up'", "'Thanks'", "'Acknowledge'", 
		"'Barriers Do Not Block LOS'", "'Enemy Barriers Block LOS'", "'All Barriers Block LOS'", 
		"'Rotation'", "'Rotation And Translation'", "'Off'", "'Surfaces'", "'Surfaces And Enemy Barriers'", 
		"'Surfaces And All Barriers'", "'To Nearest'", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'All Teams'", null, null, "'Slot'", "'Team'", 
		"'All'", null, null, "'Null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "ALL_TEAMS", "LETTER", "INTEGER", 
		"SLOT", "TEAM", "ALL", "STRING", "FLOAT", "NULL", "BOOLEAN", "WS", "ERROR_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OverwatchCode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OverwatchCodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OverwatchCodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OverwatchCodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(OverwatchCodeParser.Eof, 0); }
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 558; rule();
				}
				}
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 564; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(OverwatchCodeParser.STRING, 0); }
		public EventBlockContext eventBlock() {
			return GetRuleContext<EventBlockContext>(0);
		}
		public ConditionBlockContext conditionBlock() {
			return GetRuleContext<ConditionBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; Match(T__0);
			State = 567; Match(T__1);
			State = 568; Match(STRING);
			State = 569; Match(T__2);
			State = 570; Match(T__3);
			State = 571; eventBlock();
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 572; conditionBlock();
				}
			}

			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 575; actionBlock();
				}
			}

			State = 578; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventBlockContext : ParserRuleContext {
		public EventTypeContext eventType() {
			return GetRuleContext<EventTypeContext>(0);
		}
		public EventBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventBlockContext eventBlock() {
		EventBlockContext _localctx = new EventBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_eventBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; Match(T__5);
			State = 581; Match(T__3);
			State = 582; eventType();
			State = 583; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventTypeContext : ParserRuleContext {
		public OngoingGlobalEventTypeContext ongoingGlobalEventType() {
			return GetRuleContext<OngoingGlobalEventTypeContext>(0);
		}
		public OngoingEachPlayerEventTypeContext ongoingEachPlayerEventType() {
			return GetRuleContext<OngoingEachPlayerEventTypeContext>(0);
		}
		public PlayerEarnedEliminationEventTypeContext playerEarnedEliminationEventType() {
			return GetRuleContext<PlayerEarnedEliminationEventTypeContext>(0);
		}
		public PlayerDealtFinalBlowEventTypeContext playerDealtFinalBlowEventType() {
			return GetRuleContext<PlayerDealtFinalBlowEventTypeContext>(0);
		}
		public PlayerDealtDamageEventTypeContext playerDealtDamageEventType() {
			return GetRuleContext<PlayerDealtDamageEventTypeContext>(0);
		}
		public PlayerTookDamageEventTypeContext playerTookDamageEventType() {
			return GetRuleContext<PlayerTookDamageEventTypeContext>(0);
		}
		public PlayerDiedEventTypeContext playerDiedEventType() {
			return GetRuleContext<PlayerDiedEventTypeContext>(0);
		}
		public EventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventTypeContext eventType() {
		EventTypeContext _localctx = new EventTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_eventType);
		try {
			State = 592;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; ongoingGlobalEventType();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586; ongoingEachPlayerEventType();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587; playerEarnedEliminationEventType();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 588; playerDealtFinalBlowEventType();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 589; playerDealtDamageEventType();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 6);
				{
				State = 590; playerTookDamageEventType();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 7);
				{
				State = 591; playerDiedEventType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngoingGlobalEventTypeContext : ParserRuleContext {
		public OngoingGlobalEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongoingGlobalEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOngoingGlobalEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOngoingGlobalEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngoingGlobalEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngoingGlobalEventTypeContext ongoingGlobalEventType() {
		OngoingGlobalEventTypeContext _localctx = new OngoingGlobalEventTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_ongoingGlobalEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngoingEachPlayerEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public OngoingEachPlayerEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongoingEachPlayerEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOngoingEachPlayerEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOngoingEachPlayerEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngoingEachPlayerEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngoingEachPlayerEventTypeContext ongoingEachPlayerEventType() {
		OngoingEachPlayerEventTypeContext _localctx = new OngoingEachPlayerEventTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_ongoingEachPlayerEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(T__7);
			State = 597; team();
			State = 598; Match(T__8);
			State = 599; playerConstant();
			State = 600; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerEarnedEliminationEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerEarnedEliminationEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerEarnedEliminationEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerEarnedEliminationEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerEarnedEliminationEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerEarnedEliminationEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerEarnedEliminationEventTypeContext playerEarnedEliminationEventType() {
		PlayerEarnedEliminationEventTypeContext _localctx = new PlayerEarnedEliminationEventTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_playerEarnedEliminationEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; Match(T__9);
			State = 603; team();
			State = 604; Match(T__8);
			State = 605; playerConstant();
			State = 606; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerDealtFinalBlowEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerDealtFinalBlowEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerDealtFinalBlowEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerDealtFinalBlowEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerDealtFinalBlowEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerDealtFinalBlowEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerDealtFinalBlowEventTypeContext playerDealtFinalBlowEventType() {
		PlayerDealtFinalBlowEventTypeContext _localctx = new PlayerDealtFinalBlowEventTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_playerDealtFinalBlowEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(T__10);
			State = 609; team();
			State = 610; Match(T__8);
			State = 611; playerConstant();
			State = 612; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerDealtDamageEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerDealtDamageEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerDealtDamageEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerDealtDamageEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerDealtDamageEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerDealtDamageEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerDealtDamageEventTypeContext playerDealtDamageEventType() {
		PlayerDealtDamageEventTypeContext _localctx = new PlayerDealtDamageEventTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_playerDealtDamageEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(T__11);
			State = 615; team();
			State = 616; Match(T__8);
			State = 617; playerConstant();
			State = 618; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerTookDamageEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerTookDamageEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerTookDamageEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerTookDamageEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerTookDamageEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerTookDamageEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerTookDamageEventTypeContext playerTookDamageEventType() {
		PlayerTookDamageEventTypeContext _localctx = new PlayerTookDamageEventTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_playerTookDamageEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; Match(T__12);
			State = 621; team();
			State = 622; Match(T__8);
			State = 623; playerConstant();
			State = 624; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerDiedEventTypeContext : ParserRuleContext {
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public PlayerConstantContext playerConstant() {
			return GetRuleContext<PlayerConstantContext>(0);
		}
		public PlayerDiedEventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerDiedEventType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerDiedEventType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerDiedEventType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerDiedEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerDiedEventTypeContext playerDiedEventType() {
		PlayerDiedEventTypeContext _localctx = new PlayerDiedEventTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_playerDiedEventType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; Match(T__13);
			State = 627; team();
			State = 628; Match(T__8);
			State = 629; playerConstant();
			State = 630; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBlockContext : ParserRuleContext {
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterConditionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitConditionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBlockContext conditionBlock() {
		ConditionBlockContext _localctx = new ConditionBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_conditionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(T__14);
			State = 633; Match(T__3);
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (T__18 - 19)) | (1L << (T__19 - 19)) | (1L << (T__20 - 19)) | (1L << (T__21 - 19)) | (1L << (T__22 - 19)) | (1L << (T__23 - 19)) | (1L << (T__24 - 19)) | (1L << (T__25 - 19)) | (1L << (T__26 - 19)) | (1L << (T__27 - 19)) | (1L << (T__28 - 19)) | (1L << (T__29 - 19)) | (1L << (T__30 - 19)) | (1L << (T__31 - 19)) | (1L << (T__32 - 19)) | (1L << (T__33 - 19)) | (1L << (T__34 - 19)) | (1L << (T__35 - 19)) | (1L << (T__36 - 19)) | (1L << (T__37 - 19)) | (1L << (T__38 - 19)) | (1L << (T__39 - 19)) | (1L << (T__40 - 19)) | (1L << (T__41 - 19)) | (1L << (T__42 - 19)) | (1L << (T__43 - 19)) | (1L << (T__44 - 19)) | (1L << (T__45 - 19)) | (1L << (T__46 - 19)) | (1L << (T__47 - 19)) | (1L << (T__48 - 19)) | (1L << (T__49 - 19)) | (1L << (T__50 - 19)) | (1L << (T__51 - 19)) | (1L << (T__52 - 19)) | (1L << (T__53 - 19)) | (1L << (T__54 - 19)) | (1L << (T__55 - 19)) | (1L << (T__56 - 19)) | (1L << (T__57 - 19)) | (1L << (T__58 - 19)) | (1L << (T__59 - 19)) | (1L << (T__60 - 19)) | (1L << (T__61 - 19)) | (1L << (T__62 - 19)) | (1L << (T__63 - 19)) | (1L << (T__64 - 19)) | (1L << (T__65 - 19)) | (1L << (T__66 - 19)) | (1L << (T__67 - 19)) | (1L << (T__68 - 19)) | (1L << (T__69 - 19)) | (1L << (T__70 - 19)) | (1L << (T__71 - 19)) | (1L << (T__72 - 19)) | (1L << (T__73 - 19)) | (1L << (T__74 - 19)) | (1L << (T__75 - 19)) | (1L << (T__76 - 19)) | (1L << (T__77 - 19)) | (1L << (T__78 - 19)) | (1L << (T__79 - 19)) | (1L << (T__80 - 19)) | (1L << (T__81 - 19)))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (T__82 - 83)) | (1L << (T__83 - 83)) | (1L << (T__84 - 83)) | (1L << (T__85 - 83)) | (1L << (T__86 - 83)) | (1L << (T__87 - 83)) | (1L << (T__88 - 83)) | (1L << (T__89 - 83)) | (1L << (T__90 - 83)) | (1L << (T__91 - 83)) | (1L << (T__92 - 83)) | (1L << (T__93 - 83)) | (1L << (T__94 - 83)) | (1L << (T__95 - 83)) | (1L << (T__96 - 83)) | (1L << (T__97 - 83)) | (1L << (T__98 - 83)) | (1L << (T__99 - 83)) | (1L << (T__100 - 83)) | (1L << (T__101 - 83)) | (1L << (T__102 - 83)) | (1L << (T__103 - 83)) | (1L << (T__104 - 83)) | (1L << (T__105 - 83)) | (1L << (T__106 - 83)) | (1L << (T__107 - 83)) | (1L << (T__108 - 83)) | (1L << (T__109 - 83)) | (1L << (T__110 - 83)) | (1L << (T__111 - 83)) | (1L << (T__112 - 83)) | (1L << (T__113 - 83)) | (1L << (T__114 - 83)) | (1L << (T__115 - 83)) | (1L << (T__116 - 83)) | (1L << (T__117 - 83)) | (1L << (T__118 - 83)) | (1L << (T__119 - 83)) | (1L << (T__120 - 83)) | (1L << (T__121 - 83)) | (1L << (T__122 - 83)) | (1L << (T__123 - 83)) | (1L << (T__124 - 83)) | (1L << (T__125 - 83)) | (1L << (T__126 - 83)) | (1L << (T__127 - 83)) | (1L << (T__128 - 83)) | (1L << (T__129 - 83)) | (1L << (T__130 - 83)) | (1L << (T__131 - 83)) | (1L << (T__132 - 83)) | (1L << (T__133 - 83)) | (1L << (T__134 - 83)) | (1L << (T__135 - 83)) | (1L << (T__136 - 83)) | (1L << (T__137 - 83)) | (1L << (T__138 - 83)) | (1L << (T__139 - 83)) | (1L << (T__140 - 83)) | (1L << (T__141 - 83)) | (1L << (T__142 - 83)) | (1L << (T__143 - 83)) | (1L << (T__144 - 83)) | (1L << (T__145 - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (T__146 - 147)) | (1L << (T__147 - 147)) | (1L << (T__148 - 147)) | (1L << (T__149 - 147)) | (1L << (T__150 - 147)) | (1L << (T__151 - 147)) | (1L << (T__152 - 147)) | (1L << (T__153 - 147)) | (1L << (T__154 - 147)) | (1L << (T__155 - 147)) | (1L << (T__156 - 147)) | (1L << (T__157 - 147)) | (1L << (T__158 - 147)) | (1L << (T__159 - 147)) | (1L << (T__160 - 147)) | (1L << (T__161 - 147)) | (1L << (T__162 - 147)) | (1L << (T__163 - 147)) | (1L << (T__164 - 147)) | (1L << (T__165 - 147)) | (1L << (T__166 - 147)) | (1L << (T__167 - 147)) | (1L << (T__168 - 147)) | (1L << (T__169 - 147)) | (1L << (T__170 - 147)) | (1L << (T__171 - 147)) | (1L << (T__172 - 147)) | (1L << (T__173 - 147)) | (1L << (T__174 - 147)) | (1L << (T__175 - 147)) | (1L << (T__176 - 147)) | (1L << (T__177 - 147)) | (1L << (T__178 - 147)) | (1L << (T__179 - 147)) | (1L << (T__180 - 147)) | (1L << (T__181 - 147)) | (1L << (T__182 - 147)) | (1L << (T__183 - 147)) | (1L << (T__184 - 147)) | (1L << (T__185 - 147)) | (1L << (T__186 - 147)) | (1L << (T__187 - 147)) | (1L << (T__188 - 147)) | (1L << (T__189 - 147)) | (1L << (T__190 - 147)) | (1L << (T__191 - 147)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (ALL_TEAMS - 271)) | (1L << (INTEGER - 271)) | (1L << (TEAM - 271)) | (1L << (ALL - 271)) | (1L << (STRING - 271)) | (1L << (FLOAT - 271)) | (1L << (NULL - 271)) | (1L << (BOOLEAN - 271)))) != 0)) {
				{
				{
				State = 634; condition();
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 640; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryCompartorOperatorContext binaryCompartorOperator() {
			return GetRuleContext<BinaryCompartorOperatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642; expression();
			State = 643; binaryCompartorOperator();
			State = 644; expression();
			State = 645; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; Match(T__15);
			State = 648; Match(T__3);
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 649; action();
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 655; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public SetGlobalVariableActionContext setGlobalVariableAction() {
			return GetRuleContext<SetGlobalVariableActionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 28, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 657; setGlobalVariableAction();
			}
			State = 658; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetGlobalVariableActionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetGlobalVariableActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setGlobalVariableAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSetGlobalVariableAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSetGlobalVariableAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetGlobalVariableAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetGlobalVariableActionContext setGlobalVariableAction() {
		SetGlobalVariableActionContext _localctx = new SetGlobalVariableActionContext(Context, State);
		EnterRule(_localctx, 30, RULE_setGlobalVariableAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(T__16);
			State = 661; Match(T__1);
			State = 662; globalVariable();
			State = 663; Match(T__17);
			State = 664; expression();
			State = 665; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TeamContext team() {
			return GetRuleContext<TeamContext>(0);
		}
		public VectorExpressionContext vectorExpression() {
			return GetRuleContext<VectorExpressionContext>(0);
		}
		public AddExpressionContext addExpression() {
			return GetRuleContext<AddExpressionContext>(0);
		}
		public AbsoluteValueExpressionContext absoluteValueExpression() {
			return GetRuleContext<AbsoluteValueExpressionContext>(0);
		}
		public AllDeadPlayersExpressionContext allDeadPlayersExpression() {
			return GetRuleContext<AllDeadPlayersExpressionContext>(0);
		}
		public AllHeroesExpressionContext allHeroesExpression() {
			return GetRuleContext<AllHeroesExpressionContext>(0);
		}
		public AllLivingPlayersExpressionContext allLivingPlayersExpression() {
			return GetRuleContext<AllLivingPlayersExpressionContext>(0);
		}
		public AllPlayersExpressionContext allPlayersExpression() {
			return GetRuleContext<AllPlayersExpressionContext>(0);
		}
		public AllPlayersNotOnObjectiveExpressionContext allPlayersNotOnObjectiveExpression() {
			return GetRuleContext<AllPlayersNotOnObjectiveExpressionContext>(0);
		}
		public AllPlayersOnObjectiveExpressionContext allPlayersOnObjectiveExpression() {
			return GetRuleContext<AllPlayersOnObjectiveExpressionContext>(0);
		}
		public AllowedHeroesExpressionContext allowedHeroesExpression() {
			return GetRuleContext<AllowedHeroesExpressionContext>(0);
		}
		public AltitudeOfExpressionContext altitudeOfExpression() {
			return GetRuleContext<AltitudeOfExpressionContext>(0);
		}
		public EventPlayerExpressionContext eventPlayerExpression() {
			return GetRuleContext<EventPlayerExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AngleDifferenceExpressionContext angleDifferenceExpression() {
			return GetRuleContext<AngleDifferenceExpressionContext>(0);
		}
		public AppendToArrayExpressionContext appendToArrayExpression() {
			return GetRuleContext<AppendToArrayExpressionContext>(0);
		}
		public ArrayContainsExpressionContext arrayContainsExpression() {
			return GetRuleContext<ArrayContainsExpressionContext>(0);
		}
		public ArraySliceExpressionContext arraySliceExpression() {
			return GetRuleContext<ArraySliceExpressionContext>(0);
		}
		public AttackerExpressionContext attackerExpression() {
			return GetRuleContext<AttackerExpressionContext>(0);
		}
		public BackwardExpressionContext backwardExpression() {
			return GetRuleContext<BackwardExpressionContext>(0);
		}
		public ClosestPlayerToExpressionContext closestPlayerToExpression() {
			return GetRuleContext<ClosestPlayerToExpressionContext>(0);
		}
		public CompareExpressionContext compareExpression() {
			return GetRuleContext<CompareExpressionContext>(0);
		}
		public ControlModeScoringPercentageExpressionContext controlModeScoringPercentageExpression() {
			return GetRuleContext<ControlModeScoringPercentageExpressionContext>(0);
		}
		public GlobalVariableExpressionContext globalVariableExpression() {
			return GetRuleContext<GlobalVariableExpressionContext>(0);
		}
		public ControlModeScoringTeamExpressionContext controlModeScoringTeamExpression() {
			return GetRuleContext<ControlModeScoringTeamExpressionContext>(0);
		}
		public CosineFromDegreesExpressionContext cosineFromDegreesExpression() {
			return GetRuleContext<CosineFromDegreesExpressionContext>(0);
		}
		public CosineFromRadiansExpressionContext cosineFromRadiansExpression() {
			return GetRuleContext<CosineFromRadiansExpressionContext>(0);
		}
		public CountOfExpressionContext countOfExpression() {
			return GetRuleContext<CountOfExpressionContext>(0);
		}
		public CrossProductExpressionContext crossProductExpression() {
			return GetRuleContext<CrossProductExpressionContext>(0);
		}
		public CurrentArrayElementExpressionContext currentArrayElementExpression() {
			return GetRuleContext<CurrentArrayElementExpressionContext>(0);
		}
		public DirectionFromAnglesExpressionContext directionFromAnglesExpression() {
			return GetRuleContext<DirectionFromAnglesExpressionContext>(0);
		}
		public DirectionTowardsExpressionContext directionTowardsExpression() {
			return GetRuleContext<DirectionTowardsExpressionContext>(0);
		}
		public DistanceBetweenExpressionContext distanceBetweenExpression() {
			return GetRuleContext<DistanceBetweenExpressionContext>(0);
		}
		public DivideExpressionContext divideExpression() {
			return GetRuleContext<DivideExpressionContext>(0);
		}
		public DotProductExpressionContext dotProductExpression() {
			return GetRuleContext<DotProductExpressionContext>(0);
		}
		public DownExpressionContext downExpression() {
			return GetRuleContext<DownExpressionContext>(0);
		}
		public EmptyArrayExpressionContext emptyArrayExpression() {
			return GetRuleContext<EmptyArrayExpressionContext>(0);
		}
		public EntityExistsExpressionContext entityExistsExpression() {
			return GetRuleContext<EntityExistsExpressionContext>(0);
		}
		public EventDamageExpressionContext eventDamageExpression() {
			return GetRuleContext<EventDamageExpressionContext>(0);
		}
		public EventWasCriticalHitExpressionContext eventWasCriticalHitExpression() {
			return GetRuleContext<EventWasCriticalHitExpressionContext>(0);
		}
		public EyePositionExpressionContext eyePositionExpression() {
			return GetRuleContext<EyePositionExpressionContext>(0);
		}
		public FacingDirectionOfExpressionContext facingDirectionOfExpression() {
			return GetRuleContext<FacingDirectionOfExpressionContext>(0);
		}
		public FarthestPlayerFromExpressionContext farthestPlayerFromExpression() {
			return GetRuleContext<FarthestPlayerFromExpressionContext>(0);
		}
		public FilteredArrayExpressionContext filteredArrayExpression() {
			return GetRuleContext<FilteredArrayExpressionContext>(0);
		}
		public FirstOfExpressionContext firstOfExpression() {
			return GetRuleContext<FirstOfExpressionContext>(0);
		}
		public FlagPositionExpressionContext flagPositionExpression() {
			return GetRuleContext<FlagPositionExpressionContext>(0);
		}
		public ForwardExpressionContext forwardExpression() {
			return GetRuleContext<ForwardExpressionContext>(0);
		}
		public HasSpawnedExpressionContext hasSpawnedExpression() {
			return GetRuleContext<HasSpawnedExpressionContext>(0);
		}
		public HasStatusExpressionContext hasStatusExpression() {
			return GetRuleContext<HasStatusExpressionContext>(0);
		}
		public HealthExpressionContext healthExpression() {
			return GetRuleContext<HealthExpressionContext>(0);
		}
		public HealthPercentExpressionContext healthPercentExpression() {
			return GetRuleContext<HealthPercentExpressionContext>(0);
		}
		public HeroExpressionContext heroExpression() {
			return GetRuleContext<HeroExpressionContext>(0);
		}
		public HeroIconStringExpressionContext heroIconStringExpression() {
			return GetRuleContext<HeroIconStringExpressionContext>(0);
		}
		public HeroOfExpressionContext heroOfExpression() {
			return GetRuleContext<HeroOfExpressionContext>(0);
		}
		public HorizontalAngleFromDirectionExpressionContext horizontalAngleFromDirectionExpression() {
			return GetRuleContext<HorizontalAngleFromDirectionExpressionContext>(0);
		}
		public HorizontalAngleTowardsExpressionContext horizontalAngleTowardsExpression() {
			return GetRuleContext<HorizontalAngleTowardsExpressionContext>(0);
		}
		public HorizontalFacingAngleOfExpressionContext horizontalFacingAngleOfExpression() {
			return GetRuleContext<HorizontalFacingAngleOfExpressionContext>(0);
		}
		public HorizontalSpeedOfExpressionContext horizontalSpeedOfExpression() {
			return GetRuleContext<HorizontalSpeedOfExpressionContext>(0);
		}
		public IndexOfArrayValueExpressionContext indexOfArrayValueExpression() {
			return GetRuleContext<IndexOfArrayValueExpressionContext>(0);
		}
		public IsAliveExpressionContext isAliveExpression() {
			return GetRuleContext<IsAliveExpressionContext>(0);
		}
		public IsAssemblingHeroesExpressionContext isAssemblingHeroesExpression() {
			return GetRuleContext<IsAssemblingHeroesExpressionContext>(0);
		}
		public IsBetweenRoundsExpressionContext isBetweenRoundsExpression() {
			return GetRuleContext<IsBetweenRoundsExpressionContext>(0);
		}
		public IsButtonHeldExpressionContext isButtonHeldExpression() {
			return GetRuleContext<IsButtonHeldExpressionContext>(0);
		}
		public IsCommunicatingExpressionContext isCommunicatingExpression() {
			return GetRuleContext<IsCommunicatingExpressionContext>(0);
		}
		public IsCommunicatingAnyExpressionContext isCommunicatingAnyExpression() {
			return GetRuleContext<IsCommunicatingAnyExpressionContext>(0);
		}
		public IsCommunicatingAnyEmoteExpressionContext isCommunicatingAnyEmoteExpression() {
			return GetRuleContext<IsCommunicatingAnyEmoteExpressionContext>(0);
		}
		public IsCommunicatingAnyVoicelineExpressionContext isCommunicatingAnyVoicelineExpression() {
			return GetRuleContext<IsCommunicatingAnyVoicelineExpressionContext>(0);
		}
		public IsControlModePointLockedExpressionContext isControlModePointLockedExpression() {
			return GetRuleContext<IsControlModePointLockedExpressionContext>(0);
		}
		public IsCrouchingExpressionContext isCrouchingExpression() {
			return GetRuleContext<IsCrouchingExpressionContext>(0);
		}
		public IsCTFModeInSuddenDeathExpressionContext isCTFModeInSuddenDeathExpression() {
			return GetRuleContext<IsCTFModeInSuddenDeathExpressionContext>(0);
		}
		public IsDeadExpressionContext isDeadExpression() {
			return GetRuleContext<IsDeadExpressionContext>(0);
		}
		public IsFiringPrimaryExpressionContext isFiringPrimaryExpression() {
			return GetRuleContext<IsFiringPrimaryExpressionContext>(0);
		}
		public IsFiringSecondaryExpressionContext isFiringSecondaryExpression() {
			return GetRuleContext<IsFiringSecondaryExpressionContext>(0);
		}
		public IsFlagAtBaseExpressionContext isFlagAtBaseExpression() {
			return GetRuleContext<IsFlagAtBaseExpressionContext>(0);
		}
		public IsFlagBeingCarriedExpressionContext isFlagBeingCarriedExpression() {
			return GetRuleContext<IsFlagBeingCarriedExpressionContext>(0);
		}
		public IsGameInProgressExpressionContext isGameInProgressExpression() {
			return GetRuleContext<IsGameInProgressExpressionContext>(0);
		}
		public IsHeroBeingPlayedExpressionContext isHeroBeingPlayedExpression() {
			return GetRuleContext<IsHeroBeingPlayedExpressionContext>(0);
		}
		public IsInAirExpressionContext isInAirExpression() {
			return GetRuleContext<IsInAirExpressionContext>(0);
		}
		public IsInLineofSightExpressionContext isInLineofSightExpression() {
			return GetRuleContext<IsInLineofSightExpressionContext>(0);
		}
		public IsInSetupExpressionContext isInSetupExpression() {
			return GetRuleContext<IsInSetupExpressionContext>(0);
		}
		public IsInSpawnRoomExpressionContext isInSpawnRoomExpression() {
			return GetRuleContext<IsInSpawnRoomExpressionContext>(0);
		}
		public IsInViewAngleExpressionContext isInViewAngleExpression() {
			return GetRuleContext<IsInViewAngleExpressionContext>(0);
		}
		public IsMatchCompleteExpressionContext isMatchCompleteExpression() {
			return GetRuleContext<IsMatchCompleteExpressionContext>(0);
		}
		public IsMovingExpressionContext isMovingExpression() {
			return GetRuleContext<IsMovingExpressionContext>(0);
		}
		public IsObjectiveCompleteExpressionContext isObjectiveCompleteExpression() {
			return GetRuleContext<IsObjectiveCompleteExpressionContext>(0);
		}
		public IsOnGroundExpressionContext isOnGroundExpression() {
			return GetRuleContext<IsOnGroundExpressionContext>(0);
		}
		public IsOnObjectiveExpressionContext isOnObjectiveExpression() {
			return GetRuleContext<IsOnObjectiveExpressionContext>(0);
		}
		public IsOnWallExpressionContext isOnWallExpression() {
			return GetRuleContext<IsOnWallExpressionContext>(0);
		}
		public IsPortraitOnFireExpressionContext isPortraitOnFireExpression() {
			return GetRuleContext<IsPortraitOnFireExpressionContext>(0);
		}
		public IsStandingExpressionContext isStandingExpression() {
			return GetRuleContext<IsStandingExpressionContext>(0);
		}
		public IsTeamOnDefenseExpressionContext isTeamOnDefenseExpression() {
			return GetRuleContext<IsTeamOnDefenseExpressionContext>(0);
		}
		public IsTeamOnOffenseExpressionContext isTeamOnOffenseExpression() {
			return GetRuleContext<IsTeamOnOffenseExpressionContext>(0);
		}
		public IsTrueForAllExpressionContext isTrueForAllExpression() {
			return GetRuleContext<IsTrueForAllExpressionContext>(0);
		}
		public IsTrueForAnyExpressionContext isTrueForAnyExpression() {
			return GetRuleContext<IsTrueForAnyExpressionContext>(0);
		}
		public IsUsingAbility1ExpressionContext isUsingAbility1Expression() {
			return GetRuleContext<IsUsingAbility1ExpressionContext>(0);
		}
		public IsUsingAbility2ExpressionContext isUsingAbility2Expression() {
			return GetRuleContext<IsUsingAbility2ExpressionContext>(0);
		}
		public IsUsingUltimateExpressionContext isUsingUltimateExpression() {
			return GetRuleContext<IsUsingUltimateExpressionContext>(0);
		}
		public IsWaitingForPlayersExpressionContext isWaitingForPlayersExpression() {
			return GetRuleContext<IsWaitingForPlayersExpressionContext>(0);
		}
		public LastCreatedEntityExpressionContext lastCreatedEntityExpression() {
			return GetRuleContext<LastCreatedEntityExpressionContext>(0);
		}
		public LastDamageModificationIDExpressionContext lastDamageModificationIDExpression() {
			return GetRuleContext<LastDamageModificationIDExpressionContext>(0);
		}
		public LastDamageOverTimeIDExpressionContext lastDamageOverTimeIDExpression() {
			return GetRuleContext<LastDamageOverTimeIDExpressionContext>(0);
		}
		public LastHealOverTimeIDExpressionContext lastHealOverTimeIDExpression() {
			return GetRuleContext<LastHealOverTimeIDExpressionContext>(0);
		}
		public LastOfExpressionContext lastOfExpression() {
			return GetRuleContext<LastOfExpressionContext>(0);
		}
		public LastTextIDExpressionContext lastTextIDExpression() {
			return GetRuleContext<LastTextIDExpressionContext>(0);
		}
		public LeftExpressionContext leftExpression() {
			return GetRuleContext<LeftExpressionContext>(0);
		}
		public LocalVectorOfExpressionContext localVectorOfExpression() {
			return GetRuleContext<LocalVectorOfExpressionContext>(0);
		}
		public MatchRoundExpressionContext matchRoundExpression() {
			return GetRuleContext<MatchRoundExpressionContext>(0);
		}
		public MatchTimeExpressionContext matchTimeExpression() {
			return GetRuleContext<MatchTimeExpressionContext>(0);
		}
		public MaxExpressionContext maxExpression() {
			return GetRuleContext<MaxExpressionContext>(0);
		}
		public MaxHealthExpressionContext maxHealthExpression() {
			return GetRuleContext<MaxHealthExpressionContext>(0);
		}
		public MinExpressionContext minExpression() {
			return GetRuleContext<MinExpressionContext>(0);
		}
		public ModuloExpressionContext moduloExpression() {
			return GetRuleContext<ModuloExpressionContext>(0);
		}
		public MultiplyExpressionContext multiplyExpression() {
			return GetRuleContext<MultiplyExpressionContext>(0);
		}
		public NearestWalkablePositionExpressionContext nearestWalkablePositionExpression() {
			return GetRuleContext<NearestWalkablePositionExpressionContext>(0);
		}
		public NormalizeExpressionContext normalizeExpression() {
			return GetRuleContext<NormalizeExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public NumberOfDeadPlayersExpressionContext numberOfDeadPlayersExpression() {
			return GetRuleContext<NumberOfDeadPlayersExpressionContext>(0);
		}
		public NumberOfDeathsExpressionContext numberOfDeathsExpression() {
			return GetRuleContext<NumberOfDeathsExpressionContext>(0);
		}
		public NumberOfEliminationsExpressionContext numberOfEliminationsExpression() {
			return GetRuleContext<NumberOfEliminationsExpressionContext>(0);
		}
		public NumberOfFinalBlowsExpressionContext numberOfFinalBlowsExpression() {
			return GetRuleContext<NumberOfFinalBlowsExpressionContext>(0);
		}
		public NumberOfHeroesExpressionContext numberOfHeroesExpression() {
			return GetRuleContext<NumberOfHeroesExpressionContext>(0);
		}
		public NumberOfLivingPlayersExpressionContext numberOfLivingPlayersExpression() {
			return GetRuleContext<NumberOfLivingPlayersExpressionContext>(0);
		}
		public NumberOfPlayersExpressionContext numberOfPlayersExpression() {
			return GetRuleContext<NumberOfPlayersExpressionContext>(0);
		}
		public NumberOfPlayersOnObjectiveExpressionContext numberOfPlayersOnObjectiveExpression() {
			return GetRuleContext<NumberOfPlayersOnObjectiveExpressionContext>(0);
		}
		public ObjectiveIndexExpressionContext objectiveIndexExpression() {
			return GetRuleContext<ObjectiveIndexExpressionContext>(0);
		}
		public ObjectivePositionExpressionContext objectivePositionExpression() {
			return GetRuleContext<ObjectivePositionExpressionContext>(0);
		}
		public OppositeTeamOfExpressionContext oppositeTeamOfExpression() {
			return GetRuleContext<OppositeTeamOfExpressionContext>(0);
		}
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public PayloadPositionExpressionContext payloadPositionExpression() {
			return GetRuleContext<PayloadPositionExpressionContext>(0);
		}
		public PayloadProgressPercentageExpressionContext payloadProgressPercentageExpression() {
			return GetRuleContext<PayloadProgressPercentageExpressionContext>(0);
		}
		public PlayerCarryingFlagExpressionContext playerCarryingFlagExpression() {
			return GetRuleContext<PlayerCarryingFlagExpressionContext>(0);
		}
		public PlayerClosestToReticleExpressionContext playerClosestToReticleExpression() {
			return GetRuleContext<PlayerClosestToReticleExpressionContext>(0);
		}
		public PlayerVariableExpressionContext playerVariableExpression() {
			return GetRuleContext<PlayerVariableExpressionContext>(0);
		}
		public PlayersInSlotExpressionContext playersInSlotExpression() {
			return GetRuleContext<PlayersInSlotExpressionContext>(0);
		}
		public PlayersInViewAngleExpressionContext playersInViewAngleExpression() {
			return GetRuleContext<PlayersInViewAngleExpressionContext>(0);
		}
		public PlayersOnHeroExpressionContext playersOnHeroExpression() {
			return GetRuleContext<PlayersOnHeroExpressionContext>(0);
		}
		public PlayersWithinRadiusExpressionContext playersWithinRadiusExpression() {
			return GetRuleContext<PlayersWithinRadiusExpressionContext>(0);
		}
		public PointCapturePercentageExpressionContext pointCapturePercentageExpression() {
			return GetRuleContext<PointCapturePercentageExpressionContext>(0);
		}
		public PositionOfExpressionContext positionOfExpression() {
			return GetRuleContext<PositionOfExpressionContext>(0);
		}
		public RaiseToPowerExpressionContext raiseToPowerExpression() {
			return GetRuleContext<RaiseToPowerExpressionContext>(0);
		}
		public RandomIntegerExpressionContext randomIntegerExpression() {
			return GetRuleContext<RandomIntegerExpressionContext>(0);
		}
		public RandomRealExpressionContext randomRealExpression() {
			return GetRuleContext<RandomRealExpressionContext>(0);
		}
		public RandomValueInArrayExpressionContext randomValueInArrayExpression() {
			return GetRuleContext<RandomValueInArrayExpressionContext>(0);
		}
		public RandomizedArrayExpressionContext randomizedArrayExpression() {
			return GetRuleContext<RandomizedArrayExpressionContext>(0);
		}
		public RayCastHitNormalExpressionContext rayCastHitNormalExpression() {
			return GetRuleContext<RayCastHitNormalExpressionContext>(0);
		}
		public RayCastHitPlayerExpressionContext rayCastHitPlayerExpression() {
			return GetRuleContext<RayCastHitPlayerExpressionContext>(0);
		}
		public RayCastHitPositionExpressionContext rayCastHitPositionExpression() {
			return GetRuleContext<RayCastHitPositionExpressionContext>(0);
		}
		public RemoveFromArrayExpressionContext removeFromArrayExpression() {
			return GetRuleContext<RemoveFromArrayExpressionContext>(0);
		}
		public RightExpressionContext rightExpression() {
			return GetRuleContext<RightExpressionContext>(0);
		}
		public RoundToIntegerExpressionContext roundToIntegerExpression() {
			return GetRuleContext<RoundToIntegerExpressionContext>(0);
		}
		public ScoreOfExpressionContext scoreOfExpression() {
			return GetRuleContext<ScoreOfExpressionContext>(0);
		}
		public SineFromDegreesExpressionContext sineFromDegreesExpression() {
			return GetRuleContext<SineFromDegreesExpressionContext>(0);
		}
		public SineFromRadiansExpressionContext sineFromRadiansExpression() {
			return GetRuleContext<SineFromRadiansExpressionContext>(0);
		}
		public SlotOfExpressionContext slotOfExpression() {
			return GetRuleContext<SlotOfExpressionContext>(0);
		}
		public SortedArrayExpressionContext sortedArrayExpression() {
			return GetRuleContext<SortedArrayExpressionContext>(0);
		}
		public SpeedOfExpressionContext speedOfExpression() {
			return GetRuleContext<SpeedOfExpressionContext>(0);
		}
		public SpeedOfInDirectionExpressionContext speedOfInDirectionExpression() {
			return GetRuleContext<SpeedOfInDirectionExpressionContext>(0);
		}
		public SquareRootExpressionContext squareRootExpression() {
			return GetRuleContext<SquareRootExpressionContext>(0);
		}
		public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public SubtractExpressionContext subtractExpression() {
			return GetRuleContext<SubtractExpressionContext>(0);
		}
		public TeamOfExpressionContext teamOfExpression() {
			return GetRuleContext<TeamOfExpressionContext>(0);
		}
		public TeamScoreExpressionContext teamScoreExpression() {
			return GetRuleContext<TeamScoreExpressionContext>(0);
		}
		public ThrottleOfExpressionContext throttleOfExpression() {
			return GetRuleContext<ThrottleOfExpressionContext>(0);
		}
		public TotalTimeElapsedExpressionContext totalTimeElapsedExpression() {
			return GetRuleContext<TotalTimeElapsedExpressionContext>(0);
		}
		public UltimateChargePercentExpressionContext ultimateChargePercentExpression() {
			return GetRuleContext<UltimateChargePercentExpressionContext>(0);
		}
		public UpExpressionContext upExpression() {
			return GetRuleContext<UpExpressionContext>(0);
		}
		public ValueInArrayExpressionContext valueInArrayExpression() {
			return GetRuleContext<ValueInArrayExpressionContext>(0);
		}
		public VectorTowardsExpressionContext vectorTowardsExpression() {
			return GetRuleContext<VectorTowardsExpressionContext>(0);
		}
		public VerticalFacingAngleOfExpressionContext verticalFacingAngleOfExpression() {
			return GetRuleContext<VerticalFacingAngleOfExpressionContext>(0);
		}
		public VerticalSpeedOfExpressionContext verticalSpeedOfExpression() {
			return GetRuleContext<VerticalSpeedOfExpressionContext>(0);
		}
		public VictimExpressionContext victimExpression() {
			return GetRuleContext<VictimExpressionContext>(0);
		}
		public WorldVectorOfExpressionContext worldVectorOfExpression() {
			return GetRuleContext<WorldVectorOfExpressionContext>(0);
		}
		public XComponentOfExpressionContext xComponentOfExpression() {
			return GetRuleContext<XComponentOfExpressionContext>(0);
		}
		public YComponentOfExpressionContext yComponentOfExpression() {
			return GetRuleContext<YComponentOfExpressionContext>(0);
		}
		public ZComponentOfExpressionContext zComponentOfExpression() {
			return GetRuleContext<ZComponentOfExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_expression);
		try {
			State = 843;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case STRING:
			case FLOAT:
			case NULL:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 667; literal();
				}
				break;
			case ALL_TEAMS:
			case TEAM:
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668; team();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 669; vectorExpression();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 670; addExpression();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 5);
				{
				State = 671; absoluteValueExpression();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 6);
				{
				State = 672; allDeadPlayersExpression();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 7);
				{
				State = 673; allHeroesExpression();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 8);
				{
				State = 674; allLivingPlayersExpression();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 9);
				{
				State = 675; allPlayersExpression();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 10);
				{
				State = 676; allPlayersNotOnObjectiveExpression();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 11);
				{
				State = 677; allPlayersOnObjectiveExpression();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 12);
				{
				State = 678; allowedHeroesExpression();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 13);
				{
				State = 679; altitudeOfExpression();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 14);
				{
				State = 680; eventPlayerExpression();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 15);
				{
				State = 681; andExpression();
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 16);
				{
				State = 682; angleDifferenceExpression();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 17);
				{
				State = 683; appendToArrayExpression();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 18);
				{
				State = 684; arrayContainsExpression();
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 19);
				{
				State = 685; arraySliceExpression();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 20);
				{
				State = 686; attackerExpression();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 21);
				{
				State = 687; backwardExpression();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 22);
				{
				State = 688; closestPlayerToExpression();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 23);
				{
				State = 689; compareExpression();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 24);
				{
				State = 690; controlModeScoringPercentageExpression();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 25);
				{
				State = 691; globalVariableExpression();
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 26);
				{
				State = 692; controlModeScoringTeamExpression();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 27);
				{
				State = 693; cosineFromDegreesExpression();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 28);
				{
				State = 694; cosineFromRadiansExpression();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 29);
				{
				State = 695; countOfExpression();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 30);
				{
				State = 696; crossProductExpression();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 31);
				{
				State = 697; currentArrayElementExpression();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 32);
				{
				State = 698; directionFromAnglesExpression();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 33);
				{
				State = 699; directionTowardsExpression();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 34);
				{
				State = 700; distanceBetweenExpression();
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 35);
				{
				State = 701; divideExpression();
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 36);
				{
				State = 702; dotProductExpression();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 37);
				{
				State = 703; downExpression();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 38);
				{
				State = 704; emptyArrayExpression();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 39);
				{
				State = 705; entityExistsExpression();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 40);
				{
				State = 706; eventDamageExpression();
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 41);
				{
				State = 707; eventWasCriticalHitExpression();
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 42);
				{
				State = 708; eyePositionExpression();
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 43);
				{
				State = 709; facingDirectionOfExpression();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 44);
				{
				State = 710; farthestPlayerFromExpression();
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 45);
				{
				State = 711; filteredArrayExpression();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 46);
				{
				State = 712; firstOfExpression();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 47);
				{
				State = 713; flagPositionExpression();
				}
				break;
			case T__63:
				EnterOuterAlt(_localctx, 48);
				{
				State = 714; forwardExpression();
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 49);
				{
				State = 715; hasSpawnedExpression();
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 50);
				{
				State = 716; hasStatusExpression();
				}
				break;
			case T__66:
				EnterOuterAlt(_localctx, 51);
				{
				State = 717; healthExpression();
				}
				break;
			case T__67:
				EnterOuterAlt(_localctx, 52);
				{
				State = 718; healthPercentExpression();
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 53);
				{
				State = 719; heroExpression();
				}
				break;
			case T__69:
				EnterOuterAlt(_localctx, 54);
				{
				State = 720; heroIconStringExpression();
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 55);
				{
				State = 721; heroOfExpression();
				}
				break;
			case T__71:
				EnterOuterAlt(_localctx, 56);
				{
				State = 722; horizontalAngleFromDirectionExpression();
				}
				break;
			case T__72:
				EnterOuterAlt(_localctx, 57);
				{
				State = 723; horizontalAngleTowardsExpression();
				}
				break;
			case T__73:
				EnterOuterAlt(_localctx, 58);
				{
				State = 724; horizontalFacingAngleOfExpression();
				}
				break;
			case T__74:
				EnterOuterAlt(_localctx, 59);
				{
				State = 725; horizontalSpeedOfExpression();
				}
				break;
			case T__75:
				EnterOuterAlt(_localctx, 60);
				{
				State = 726; indexOfArrayValueExpression();
				}
				break;
			case T__76:
				EnterOuterAlt(_localctx, 61);
				{
				State = 727; isAliveExpression();
				}
				break;
			case T__77:
				EnterOuterAlt(_localctx, 62);
				{
				State = 728; isAssemblingHeroesExpression();
				}
				break;
			case T__78:
				EnterOuterAlt(_localctx, 63);
				{
				State = 729; isBetweenRoundsExpression();
				}
				break;
			case T__79:
				EnterOuterAlt(_localctx, 64);
				{
				State = 730; isButtonHeldExpression();
				}
				break;
			case T__80:
				EnterOuterAlt(_localctx, 65);
				{
				State = 731; isCommunicatingExpression();
				}
				break;
			case T__81:
				EnterOuterAlt(_localctx, 66);
				{
				State = 732; isCommunicatingAnyExpression();
				}
				break;
			case T__82:
				EnterOuterAlt(_localctx, 67);
				{
				State = 733; isCommunicatingAnyEmoteExpression();
				}
				break;
			case T__83:
				EnterOuterAlt(_localctx, 68);
				{
				State = 734; isCommunicatingAnyVoicelineExpression();
				}
				break;
			case T__84:
				EnterOuterAlt(_localctx, 69);
				{
				State = 735; isControlModePointLockedExpression();
				}
				break;
			case T__85:
				EnterOuterAlt(_localctx, 70);
				{
				State = 736; isCrouchingExpression();
				}
				break;
			case T__86:
				EnterOuterAlt(_localctx, 71);
				{
				State = 737; isCTFModeInSuddenDeathExpression();
				}
				break;
			case T__87:
				EnterOuterAlt(_localctx, 72);
				{
				State = 738; isDeadExpression();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 73);
				{
				State = 739; isFiringPrimaryExpression();
				}
				break;
			case T__89:
				EnterOuterAlt(_localctx, 74);
				{
				State = 740; isFiringSecondaryExpression();
				}
				break;
			case T__90:
				EnterOuterAlt(_localctx, 75);
				{
				State = 741; isFlagAtBaseExpression();
				}
				break;
			case T__91:
				EnterOuterAlt(_localctx, 76);
				{
				State = 742; isFlagBeingCarriedExpression();
				}
				break;
			case T__92:
				EnterOuterAlt(_localctx, 77);
				{
				State = 743; isGameInProgressExpression();
				}
				break;
			case T__93:
				EnterOuterAlt(_localctx, 78);
				{
				State = 744; isHeroBeingPlayedExpression();
				}
				break;
			case T__94:
				EnterOuterAlt(_localctx, 79);
				{
				State = 745; isInAirExpression();
				}
				break;
			case T__95:
				EnterOuterAlt(_localctx, 80);
				{
				State = 746; isInLineofSightExpression();
				}
				break;
			case T__96:
				EnterOuterAlt(_localctx, 81);
				{
				State = 747; isInSetupExpression();
				}
				break;
			case T__97:
				EnterOuterAlt(_localctx, 82);
				{
				State = 748; isInSpawnRoomExpression();
				}
				break;
			case T__98:
				EnterOuterAlt(_localctx, 83);
				{
				State = 749; isInViewAngleExpression();
				}
				break;
			case T__99:
				EnterOuterAlt(_localctx, 84);
				{
				State = 750; isMatchCompleteExpression();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 85);
				{
				State = 751; isMovingExpression();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 86);
				{
				State = 752; isObjectiveCompleteExpression();
				}
				break;
			case T__102:
				EnterOuterAlt(_localctx, 87);
				{
				State = 753; isOnGroundExpression();
				}
				break;
			case T__103:
				EnterOuterAlt(_localctx, 88);
				{
				State = 754; isOnObjectiveExpression();
				}
				break;
			case T__104:
				EnterOuterAlt(_localctx, 89);
				{
				State = 755; isOnWallExpression();
				}
				break;
			case T__105:
				EnterOuterAlt(_localctx, 90);
				{
				State = 756; isPortraitOnFireExpression();
				}
				break;
			case T__106:
				EnterOuterAlt(_localctx, 91);
				{
				State = 757; isStandingExpression();
				}
				break;
			case T__107:
				EnterOuterAlt(_localctx, 92);
				{
				State = 758; isTeamOnDefenseExpression();
				}
				break;
			case T__108:
				EnterOuterAlt(_localctx, 93);
				{
				State = 759; isTeamOnOffenseExpression();
				}
				break;
			case T__109:
				EnterOuterAlt(_localctx, 94);
				{
				State = 760; isTrueForAllExpression();
				}
				break;
			case T__110:
				EnterOuterAlt(_localctx, 95);
				{
				State = 761; isTrueForAnyExpression();
				}
				break;
			case T__111:
				EnterOuterAlt(_localctx, 96);
				{
				State = 762; isUsingAbility1Expression();
				}
				break;
			case T__112:
				EnterOuterAlt(_localctx, 97);
				{
				State = 763; isUsingAbility2Expression();
				}
				break;
			case T__113:
				EnterOuterAlt(_localctx, 98);
				{
				State = 764; isUsingUltimateExpression();
				}
				break;
			case T__114:
				EnterOuterAlt(_localctx, 99);
				{
				State = 765; isWaitingForPlayersExpression();
				}
				break;
			case T__115:
				EnterOuterAlt(_localctx, 100);
				{
				State = 766; lastCreatedEntityExpression();
				}
				break;
			case T__116:
				EnterOuterAlt(_localctx, 101);
				{
				State = 767; lastDamageModificationIDExpression();
				}
				break;
			case T__117:
				EnterOuterAlt(_localctx, 102);
				{
				State = 768; lastDamageOverTimeIDExpression();
				}
				break;
			case T__118:
				EnterOuterAlt(_localctx, 103);
				{
				State = 769; lastHealOverTimeIDExpression();
				}
				break;
			case T__119:
				EnterOuterAlt(_localctx, 104);
				{
				State = 770; lastOfExpression();
				}
				break;
			case T__120:
				EnterOuterAlt(_localctx, 105);
				{
				State = 771; lastTextIDExpression();
				}
				break;
			case T__121:
				EnterOuterAlt(_localctx, 106);
				{
				State = 772; leftExpression();
				}
				break;
			case T__122:
				EnterOuterAlt(_localctx, 107);
				{
				State = 773; localVectorOfExpression();
				}
				break;
			case T__123:
				EnterOuterAlt(_localctx, 108);
				{
				State = 774; matchRoundExpression();
				}
				break;
			case T__124:
				EnterOuterAlt(_localctx, 109);
				{
				State = 775; matchTimeExpression();
				}
				break;
			case T__125:
				EnterOuterAlt(_localctx, 110);
				{
				State = 776; maxExpression();
				}
				break;
			case T__126:
				EnterOuterAlt(_localctx, 111);
				{
				State = 777; maxHealthExpression();
				}
				break;
			case T__127:
				EnterOuterAlt(_localctx, 112);
				{
				State = 778; minExpression();
				}
				break;
			case T__128:
				EnterOuterAlt(_localctx, 113);
				{
				State = 779; moduloExpression();
				}
				break;
			case T__129:
				EnterOuterAlt(_localctx, 114);
				{
				State = 780; multiplyExpression();
				}
				break;
			case T__130:
				EnterOuterAlt(_localctx, 115);
				{
				State = 781; nearestWalkablePositionExpression();
				}
				break;
			case T__131:
				EnterOuterAlt(_localctx, 116);
				{
				State = 782; normalizeExpression();
				}
				break;
			case T__132:
				EnterOuterAlt(_localctx, 117);
				{
				State = 783; notExpression();
				}
				break;
			case T__133:
				EnterOuterAlt(_localctx, 118);
				{
				State = 784; numberOfDeadPlayersExpression();
				}
				break;
			case T__134:
				EnterOuterAlt(_localctx, 119);
				{
				State = 785; numberOfDeathsExpression();
				}
				break;
			case T__135:
				EnterOuterAlt(_localctx, 120);
				{
				State = 786; numberOfEliminationsExpression();
				}
				break;
			case T__136:
				EnterOuterAlt(_localctx, 121);
				{
				State = 787; numberOfFinalBlowsExpression();
				}
				break;
			case T__137:
				EnterOuterAlt(_localctx, 122);
				{
				State = 788; numberOfHeroesExpression();
				}
				break;
			case T__138:
				EnterOuterAlt(_localctx, 123);
				{
				State = 789; numberOfLivingPlayersExpression();
				}
				break;
			case T__139:
				EnterOuterAlt(_localctx, 124);
				{
				State = 790; numberOfPlayersExpression();
				}
				break;
			case T__140:
				EnterOuterAlt(_localctx, 125);
				{
				State = 791; numberOfPlayersOnObjectiveExpression();
				}
				break;
			case T__141:
				EnterOuterAlt(_localctx, 126);
				{
				State = 792; objectiveIndexExpression();
				}
				break;
			case T__142:
				EnterOuterAlt(_localctx, 127);
				{
				State = 793; objectivePositionExpression();
				}
				break;
			case T__143:
				EnterOuterAlt(_localctx, 128);
				{
				State = 794; oppositeTeamOfExpression();
				}
				break;
			case T__144:
				EnterOuterAlt(_localctx, 129);
				{
				State = 795; orExpression();
				}
				break;
			case T__145:
				EnterOuterAlt(_localctx, 130);
				{
				State = 796; payloadPositionExpression();
				}
				break;
			case T__146:
				EnterOuterAlt(_localctx, 131);
				{
				State = 797; payloadProgressPercentageExpression();
				}
				break;
			case T__147:
				EnterOuterAlt(_localctx, 132);
				{
				State = 798; playerCarryingFlagExpression();
				}
				break;
			case T__148:
				EnterOuterAlt(_localctx, 133);
				{
				State = 799; playerClosestToReticleExpression();
				}
				break;
			case T__149:
				EnterOuterAlt(_localctx, 134);
				{
				State = 800; playerVariableExpression();
				}
				break;
			case T__150:
				EnterOuterAlt(_localctx, 135);
				{
				State = 801; playersInSlotExpression();
				}
				break;
			case T__151:
				EnterOuterAlt(_localctx, 136);
				{
				State = 802; playersInViewAngleExpression();
				}
				break;
			case T__152:
				EnterOuterAlt(_localctx, 137);
				{
				State = 803; playersOnHeroExpression();
				}
				break;
			case T__153:
				EnterOuterAlt(_localctx, 138);
				{
				State = 804; playersWithinRadiusExpression();
				}
				break;
			case T__154:
				EnterOuterAlt(_localctx, 139);
				{
				State = 805; pointCapturePercentageExpression();
				}
				break;
			case T__155:
				EnterOuterAlt(_localctx, 140);
				{
				State = 806; positionOfExpression();
				}
				break;
			case T__156:
				EnterOuterAlt(_localctx, 141);
				{
				State = 807; raiseToPowerExpression();
				}
				break;
			case T__157:
				EnterOuterAlt(_localctx, 142);
				{
				State = 808; randomIntegerExpression();
				}
				break;
			case T__158:
				EnterOuterAlt(_localctx, 143);
				{
				State = 809; randomRealExpression();
				}
				break;
			case T__159:
				EnterOuterAlt(_localctx, 144);
				{
				State = 810; randomValueInArrayExpression();
				}
				break;
			case T__160:
				EnterOuterAlt(_localctx, 145);
				{
				State = 811; randomizedArrayExpression();
				}
				break;
			case T__161:
				EnterOuterAlt(_localctx, 146);
				{
				State = 812; rayCastHitNormalExpression();
				}
				break;
			case T__162:
				EnterOuterAlt(_localctx, 147);
				{
				State = 813; rayCastHitPlayerExpression();
				}
				break;
			case T__163:
				EnterOuterAlt(_localctx, 148);
				{
				State = 814; rayCastHitPositionExpression();
				}
				break;
			case T__164:
				EnterOuterAlt(_localctx, 149);
				{
				State = 815; removeFromArrayExpression();
				}
				break;
			case T__165:
				EnterOuterAlt(_localctx, 150);
				{
				State = 816; rightExpression();
				}
				break;
			case T__166:
				EnterOuterAlt(_localctx, 151);
				{
				State = 817; roundToIntegerExpression();
				}
				break;
			case T__167:
				EnterOuterAlt(_localctx, 152);
				{
				State = 818; scoreOfExpression();
				}
				break;
			case T__168:
				EnterOuterAlt(_localctx, 153);
				{
				State = 819; sineFromDegreesExpression();
				}
				break;
			case T__169:
				EnterOuterAlt(_localctx, 154);
				{
				State = 820; sineFromRadiansExpression();
				}
				break;
			case T__170:
				EnterOuterAlt(_localctx, 155);
				{
				State = 821; slotOfExpression();
				}
				break;
			case T__171:
				EnterOuterAlt(_localctx, 156);
				{
				State = 822; sortedArrayExpression();
				}
				break;
			case T__172:
				EnterOuterAlt(_localctx, 157);
				{
				State = 823; speedOfExpression();
				}
				break;
			case T__173:
				EnterOuterAlt(_localctx, 158);
				{
				State = 824; speedOfInDirectionExpression();
				}
				break;
			case T__174:
				EnterOuterAlt(_localctx, 159);
				{
				State = 825; squareRootExpression();
				}
				break;
			case T__175:
				EnterOuterAlt(_localctx, 160);
				{
				State = 826; stringExpression();
				}
				break;
			case T__176:
				EnterOuterAlt(_localctx, 161);
				{
				State = 827; subtractExpression();
				}
				break;
			case T__177:
				EnterOuterAlt(_localctx, 162);
				{
				State = 828; teamOfExpression();
				}
				break;
			case T__178:
				EnterOuterAlt(_localctx, 163);
				{
				State = 829; teamScoreExpression();
				}
				break;
			case T__179:
				EnterOuterAlt(_localctx, 164);
				{
				State = 830; throttleOfExpression();
				}
				break;
			case T__180:
				EnterOuterAlt(_localctx, 165);
				{
				State = 831; totalTimeElapsedExpression();
				}
				break;
			case T__181:
				EnterOuterAlt(_localctx, 166);
				{
				State = 832; ultimateChargePercentExpression();
				}
				break;
			case T__182:
				EnterOuterAlt(_localctx, 167);
				{
				State = 833; upExpression();
				}
				break;
			case T__183:
				EnterOuterAlt(_localctx, 168);
				{
				State = 834; valueInArrayExpression();
				}
				break;
			case T__184:
				EnterOuterAlt(_localctx, 169);
				{
				State = 835; vectorTowardsExpression();
				}
				break;
			case T__185:
				EnterOuterAlt(_localctx, 170);
				{
				State = 836; verticalFacingAngleOfExpression();
				}
				break;
			case T__186:
				EnterOuterAlt(_localctx, 171);
				{
				State = 837; verticalSpeedOfExpression();
				}
				break;
			case T__187:
				EnterOuterAlt(_localctx, 172);
				{
				State = 838; victimExpression();
				}
				break;
			case T__188:
				EnterOuterAlt(_localctx, 173);
				{
				State = 839; worldVectorOfExpression();
				}
				break;
			case T__189:
				EnterOuterAlt(_localctx, 174);
				{
				State = 840; xComponentOfExpression();
				}
				break;
			case T__190:
				EnterOuterAlt(_localctx, 175);
				{
				State = 841; yComponentOfExpression();
				}
				break;
			case T__191:
				EnterOuterAlt(_localctx, 176);
				{
				State = 842; zComponentOfExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVectorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorExpressionContext vectorExpression() {
		VectorExpressionContext _localctx = new VectorExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_vectorExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; Match(T__18);
			State = 846; Match(T__1);
			State = 847; expression();
			State = 848; Match(T__17);
			State = 849; expression();
			State = 850; Match(T__17);
			State = 851; expression();
			State = 852; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExpressionContext addExpression() {
		AddExpressionContext _localctx = new AddExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_addExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(T__19);
			State = 855; Match(T__1);
			State = 856; expression();
			State = 857; Match(T__17);
			State = 858; expression();
			State = 859; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsoluteValueExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AbsoluteValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absoluteValueExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbsoluteValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbsoluteValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsoluteValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsoluteValueExpressionContext absoluteValueExpression() {
		AbsoluteValueExpressionContext _localctx = new AbsoluteValueExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_absoluteValueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861; Match(T__20);
			State = 862; Match(T__1);
			State = 863; expression();
			State = 864; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllDeadPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllDeadPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allDeadPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllDeadPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllDeadPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllDeadPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllDeadPlayersExpressionContext allDeadPlayersExpression() {
		AllDeadPlayersExpressionContext _localctx = new AllDeadPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_allDeadPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866; Match(T__21);
			State = 867; Match(T__1);
			State = 868; expression();
			State = 869; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllHeroesExpressionContext : ParserRuleContext {
		public AllHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllHeroesExpressionContext allHeroesExpression() {
		AllHeroesExpressionContext _localctx = new AllHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_allHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllLivingPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllLivingPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allLivingPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllLivingPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllLivingPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllLivingPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllLivingPlayersExpressionContext allLivingPlayersExpression() {
		AllLivingPlayersExpressionContext _localctx = new AllLivingPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_allLivingPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873; Match(T__23);
			State = 874; Match(T__1);
			State = 875; expression();
			State = 876; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllPlayersExpressionContext allPlayersExpression() {
		AllPlayersExpressionContext _localctx = new AllPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_allPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878; Match(T__24);
			State = 879; Match(T__1);
			State = 880; expression();
			State = 881; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllPlayersNotOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllPlayersNotOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allPlayersNotOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllPlayersNotOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllPlayersNotOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllPlayersNotOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllPlayersNotOnObjectiveExpressionContext allPlayersNotOnObjectiveExpression() {
		AllPlayersNotOnObjectiveExpressionContext _localctx = new AllPlayersNotOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_allPlayersNotOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883; Match(T__25);
			State = 884; Match(T__1);
			State = 885; expression();
			State = 886; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllPlayersOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllPlayersOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allPlayersOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllPlayersOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllPlayersOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllPlayersOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllPlayersOnObjectiveExpressionContext allPlayersOnObjectiveExpression() {
		AllPlayersOnObjectiveExpressionContext _localctx = new AllPlayersOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_allPlayersOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888; Match(T__26);
			State = 889; Match(T__1);
			State = 890; expression();
			State = 891; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllowedHeroesExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllowedHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allowedHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllowedHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllowedHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllowedHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllowedHeroesExpressionContext allowedHeroesExpression() {
		AllowedHeroesExpressionContext _localctx = new AllowedHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_allowedHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893; Match(T__27);
			State = 894; Match(T__1);
			State = 895; expression();
			State = 896; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltitudeOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AltitudeOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altitudeOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAltitudeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAltitudeOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltitudeOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltitudeOfExpressionContext altitudeOfExpression() {
		AltitudeOfExpressionContext _localctx = new AltitudeOfExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_altitudeOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; Match(T__28);
			State = 899; Match(T__1);
			State = 900; expression();
			State = 901; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventPlayerExpressionContext : ParserRuleContext {
		public EventPlayerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventPlayerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventPlayerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventPlayerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventPlayerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventPlayerExpressionContext eventPlayerExpression() {
		EventPlayerExpressionContext _localctx = new EventPlayerExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_eventPlayerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_andExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905; Match(T__30);
			State = 906; Match(T__1);
			State = 907; expression();
			State = 908; Match(T__17);
			State = 909; expression();
			State = 910; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AngleDifferenceExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AngleDifferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_angleDifferenceExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAngleDifferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAngleDifferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAngleDifferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AngleDifferenceExpressionContext angleDifferenceExpression() {
		AngleDifferenceExpressionContext _localctx = new AngleDifferenceExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_angleDifferenceExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912; Match(T__31);
			State = 913; Match(T__1);
			State = 914; expression();
			State = 915; Match(T__17);
			State = 916; expression();
			State = 917; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppendToArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AppendToArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appendToArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAppendToArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAppendToArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppendToArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppendToArrayExpressionContext appendToArrayExpression() {
		AppendToArrayExpressionContext _localctx = new AppendToArrayExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_appendToArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919; Match(T__32);
			State = 920; Match(T__1);
			State = 921; expression();
			State = 922; Match(T__17);
			State = 923; expression();
			State = 924; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContainsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayContainsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayContainsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArrayContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArrayContainsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayContainsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContainsExpressionContext arrayContainsExpression() {
		ArrayContainsExpressionContext _localctx = new ArrayContainsExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_arrayContainsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; Match(T__33);
			State = 927; Match(T__1);
			State = 928; expression();
			State = 929; Match(T__17);
			State = 930; expression();
			State = 931; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySliceExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArraySliceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySliceExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterArraySliceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitArraySliceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySliceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySliceExpressionContext arraySliceExpression() {
		ArraySliceExpressionContext _localctx = new ArraySliceExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_arraySliceExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933; Match(T__34);
			State = 934; Match(T__1);
			State = 935; expression();
			State = 936; Match(T__17);
			State = 937; expression();
			State = 938; Match(T__17);
			State = 939; expression();
			State = 940; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttackerExpressionContext : ParserRuleContext {
		public AttackerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attackerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAttackerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAttackerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttackerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttackerExpressionContext attackerExpression() {
		AttackerExpressionContext _localctx = new AttackerExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_attackerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942; Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardExpressionContext : ParserRuleContext {
		public BackwardExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBackwardExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBackwardExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardExpressionContext backwardExpression() {
		BackwardExpressionContext _localctx = new BackwardExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_backwardExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosestPlayerToExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ClosestPlayerToExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closestPlayerToExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterClosestPlayerToExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitClosestPlayerToExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosestPlayerToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosestPlayerToExpressionContext closestPlayerToExpression() {
		ClosestPlayerToExpressionContext _localctx = new ClosestPlayerToExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_closestPlayerToExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; Match(T__37);
			State = 947; Match(T__1);
			State = 948; expression();
			State = 949; Match(T__17);
			State = 950; expression();
			State = 951; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryCompartorOperatorContext binaryCompartorOperator() {
			return GetRuleContext<BinaryCompartorOperatorContext>(0);
		}
		public CompareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExpressionContext compareExpression() {
		CompareExpressionContext _localctx = new CompareExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_compareExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953; Match(T__38);
			State = 954; Match(T__1);
			State = 955; expression();
			State = 956; Match(T__17);
			State = 957; binaryCompartorOperator();
			State = 958; Match(T__17);
			State = 959; expression();
			State = 960; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlModeScoringPercentageExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlModeScoringPercentageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlModeScoringPercentageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterControlModeScoringPercentageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitControlModeScoringPercentageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlModeScoringPercentageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlModeScoringPercentageExpressionContext controlModeScoringPercentageExpression() {
		ControlModeScoringPercentageExpressionContext _localctx = new ControlModeScoringPercentageExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_controlModeScoringPercentageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(T__39);
			State = 963; Match(T__1);
			State = 964; expression();
			State = 965; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableExpressionContext : ParserRuleContext {
		public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		public GlobalVariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGlobalVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGlobalVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableExpressionContext globalVariableExpression() {
		GlobalVariableExpressionContext _localctx = new GlobalVariableExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_globalVariableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967; Match(T__40);
			State = 968; Match(T__1);
			State = 969; globalVariable();
			State = 970; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlModeScoringTeamExpressionContext : ParserRuleContext {
		public ControlModeScoringTeamExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlModeScoringTeamExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterControlModeScoringTeamExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitControlModeScoringTeamExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlModeScoringTeamExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlModeScoringTeamExpressionContext controlModeScoringTeamExpression() {
		ControlModeScoringTeamExpressionContext _localctx = new ControlModeScoringTeamExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_controlModeScoringTeamExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972; Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosineFromDegreesExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CosineFromDegreesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosineFromDegreesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCosineFromDegreesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCosineFromDegreesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosineFromDegreesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CosineFromDegreesExpressionContext cosineFromDegreesExpression() {
		CosineFromDegreesExpressionContext _localctx = new CosineFromDegreesExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_cosineFromDegreesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; Match(T__42);
			State = 975; Match(T__1);
			State = 976; expression();
			State = 977; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosineFromRadiansExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CosineFromRadiansExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosineFromRadiansExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCosineFromRadiansExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCosineFromRadiansExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosineFromRadiansExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CosineFromRadiansExpressionContext cosineFromRadiansExpression() {
		CosineFromRadiansExpressionContext _localctx = new CosineFromRadiansExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_cosineFromRadiansExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; Match(T__43);
			State = 980; Match(T__1);
			State = 981; expression();
			State = 982; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CountOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCountOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCountOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountOfExpressionContext countOfExpression() {
		CountOfExpressionContext _localctx = new CountOfExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_countOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984; Match(T__44);
			State = 985; Match(T__1);
			State = 986; expression();
			State = 987; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrossProductExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CrossProductExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crossProductExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCrossProductExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCrossProductExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrossProductExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrossProductExpressionContext crossProductExpression() {
		CrossProductExpressionContext _localctx = new CrossProductExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_crossProductExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; Match(T__45);
			State = 990; Match(T__1);
			State = 991; expression();
			State = 992; Match(T__17);
			State = 993; expression();
			State = 994; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentArrayElementExpressionContext : ParserRuleContext {
		public CurrentArrayElementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentArrayElementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCurrentArrayElementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCurrentArrayElementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentArrayElementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentArrayElementExpressionContext currentArrayElementExpression() {
		CurrentArrayElementExpressionContext _localctx = new CurrentArrayElementExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_currentArrayElementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996; Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionFromAnglesExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DirectionFromAnglesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionFromAnglesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDirectionFromAnglesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDirectionFromAnglesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectionFromAnglesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionFromAnglesExpressionContext directionFromAnglesExpression() {
		DirectionFromAnglesExpressionContext _localctx = new DirectionFromAnglesExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_directionFromAnglesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998; Match(T__47);
			State = 999; Match(T__1);
			State = 1000; expression();
			State = 1001; Match(T__17);
			State = 1002; expression();
			State = 1003; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionTowardsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DirectionTowardsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionTowardsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDirectionTowardsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDirectionTowardsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectionTowardsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionTowardsExpressionContext directionTowardsExpression() {
		DirectionTowardsExpressionContext _localctx = new DirectionTowardsExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_directionTowardsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005; Match(T__48);
			State = 1006; Match(T__1);
			State = 1007; expression();
			State = 1008; Match(T__17);
			State = 1009; expression();
			State = 1010; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceBetweenExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DistanceBetweenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceBetweenExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDistanceBetweenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDistanceBetweenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceBetweenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceBetweenExpressionContext distanceBetweenExpression() {
		DistanceBetweenExpressionContext _localctx = new DistanceBetweenExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_distanceBetweenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012; Match(T__49);
			State = 1013; Match(T__1);
			State = 1014; expression();
			State = 1015; Match(T__17);
			State = 1016; expression();
			State = 1017; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divideExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivideExpressionContext divideExpression() {
		DivideExpressionContext _localctx = new DivideExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_divideExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019; Match(T__50);
			State = 1020; Match(T__1);
			State = 1021; expression();
			State = 1022; Match(T__17);
			State = 1023; expression();
			State = 1024; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotProductExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotProductExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotProductExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDotProductExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDotProductExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotProductExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotProductExpressionContext dotProductExpression() {
		DotProductExpressionContext _localctx = new DotProductExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_dotProductExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026; Match(T__51);
			State = 1027; Match(T__1);
			State = 1028; expression();
			State = 1029; Match(T__17);
			State = 1030; expression();
			State = 1031; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DownExpressionContext : ParserRuleContext {
		public DownExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_downExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDownExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDownExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDownExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DownExpressionContext downExpression() {
		DownExpressionContext _localctx = new DownExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_downExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033; Match(T__52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyArrayExpressionContext : ParserRuleContext {
		public EmptyArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmptyArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmptyArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyArrayExpressionContext emptyArrayExpression() {
		EmptyArrayExpressionContext _localctx = new EmptyArrayExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_emptyArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035; Match(T__53);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityExistsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EntityExistsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityExistsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEntityExistsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEntityExistsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityExistsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityExistsExpressionContext entityExistsExpression() {
		EntityExistsExpressionContext _localctx = new EntityExistsExpressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_entityExistsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037; Match(T__54);
			State = 1038; Match(T__1);
			State = 1039; expression();
			State = 1040; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDamageExpressionContext : ParserRuleContext {
		public EventDamageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDamageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventDamageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventDamageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDamageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDamageExpressionContext eventDamageExpression() {
		EventDamageExpressionContext _localctx = new EventDamageExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_eventDamageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042; Match(T__55);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventWasCriticalHitExpressionContext : ParserRuleContext {
		public EventWasCriticalHitExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventWasCriticalHitExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEventWasCriticalHitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEventWasCriticalHitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventWasCriticalHitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventWasCriticalHitExpressionContext eventWasCriticalHitExpression() {
		EventWasCriticalHitExpressionContext _localctx = new EventWasCriticalHitExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_eventWasCriticalHitExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044; Match(T__56);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EyePositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EyePositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eyePositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEyePositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEyePositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEyePositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EyePositionExpressionContext eyePositionExpression() {
		EyePositionExpressionContext _localctx = new EyePositionExpressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_eyePositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046; Match(T__57);
			State = 1047; Match(T__1);
			State = 1048; expression();
			State = 1049; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FacingDirectionOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FacingDirectionOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_facingDirectionOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFacingDirectionOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFacingDirectionOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFacingDirectionOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FacingDirectionOfExpressionContext facingDirectionOfExpression() {
		FacingDirectionOfExpressionContext _localctx = new FacingDirectionOfExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_facingDirectionOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051; Match(T__58);
			State = 1052; Match(T__1);
			State = 1053; expression();
			State = 1054; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FarthestPlayerFromExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FarthestPlayerFromExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_farthestPlayerFromExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFarthestPlayerFromExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFarthestPlayerFromExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFarthestPlayerFromExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FarthestPlayerFromExpressionContext farthestPlayerFromExpression() {
		FarthestPlayerFromExpressionContext _localctx = new FarthestPlayerFromExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_farthestPlayerFromExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056; Match(T__59);
			State = 1057; Match(T__1);
			State = 1058; expression();
			State = 1059; Match(T__17);
			State = 1060; expression();
			State = 1061; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilteredArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FilteredArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filteredArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFilteredArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFilteredArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilteredArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilteredArrayExpressionContext filteredArrayExpression() {
		FilteredArrayExpressionContext _localctx = new FilteredArrayExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_filteredArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063; Match(T__60);
			State = 1064; Match(T__1);
			State = 1065; expression();
			State = 1066; Match(T__17);
			State = 1067; expression();
			State = 1068; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FirstOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFirstOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFirstOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstOfExpressionContext firstOfExpression() {
		FirstOfExpressionContext _localctx = new FirstOfExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_firstOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070; Match(T__61);
			State = 1071; Match(T__1);
			State = 1072; expression();
			State = 1073; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagPositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FlagPositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flagPositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFlagPositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFlagPositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagPositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagPositionExpressionContext flagPositionExpression() {
		FlagPositionExpressionContext _localctx = new FlagPositionExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_flagPositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075; Match(T__62);
			State = 1076; Match(T__1);
			State = 1077; expression();
			State = 1078; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForwardExpressionContext : ParserRuleContext {
		public ForwardExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forwardExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterForwardExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitForwardExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForwardExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForwardExpressionContext forwardExpression() {
		ForwardExpressionContext _localctx = new ForwardExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_forwardExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080; Match(T__63);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HasSpawnedExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HasSpawnedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hasSpawnedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHasSpawnedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHasSpawnedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasSpawnedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HasSpawnedExpressionContext hasSpawnedExpression() {
		HasSpawnedExpressionContext _localctx = new HasSpawnedExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_hasSpawnedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082; Match(T__64);
			State = 1083; Match(T__1);
			State = 1084; expression();
			State = 1085; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HasStatusExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatusContext status() {
			return GetRuleContext<StatusContext>(0);
		}
		public HasStatusExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hasStatusExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHasStatusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHasStatusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasStatusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HasStatusExpressionContext hasStatusExpression() {
		HasStatusExpressionContext _localctx = new HasStatusExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_hasStatusExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087; Match(T__65);
			State = 1088; Match(T__1);
			State = 1089; expression();
			State = 1090; Match(T__17);
			State = 1091; status();
			State = 1092; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HealthExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHealthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHealthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthExpressionContext healthExpression() {
		HealthExpressionContext _localctx = new HealthExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_healthExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094; Match(T__66);
			State = 1095; Match(T__1);
			State = 1096; expression();
			State = 1097; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HealthPercentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HealthPercentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_healthPercentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHealthPercentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHealthPercentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHealthPercentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HealthPercentExpressionContext healthPercentExpression() {
		HealthPercentExpressionContext _localctx = new HealthPercentExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_healthPercentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099; Match(T__67);
			State = 1100; Match(T__1);
			State = 1101; expression();
			State = 1102; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroExpressionContext : ParserRuleContext {
		public HeroTypeContext heroType() {
			return GetRuleContext<HeroTypeContext>(0);
		}
		public HeroExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroExpressionContext heroExpression() {
		HeroExpressionContext _localctx = new HeroExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_heroExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104; Match(T__68);
			State = 1105; Match(T__1);
			State = 1106; heroType();
			State = 1107; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroIconStringExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HeroIconStringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroIconStringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroIconStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroIconStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroIconStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroIconStringExpressionContext heroIconStringExpression() {
		HeroIconStringExpressionContext _localctx = new HeroIconStringExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_heroIconStringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; Match(T__69);
			State = 1110; Match(T__1);
			State = 1111; expression();
			State = 1112; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HeroOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroOfExpressionContext heroOfExpression() {
		HeroOfExpressionContext _localctx = new HeroOfExpressionContext(Context, State);
		EnterRule(_localctx, 138, RULE_heroOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114; Match(T__70);
			State = 1115; Match(T__1);
			State = 1116; expression();
			State = 1117; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalAngleFromDirectionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HorizontalAngleFromDirectionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalAngleFromDirectionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalAngleFromDirectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalAngleFromDirectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalAngleFromDirectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalAngleFromDirectionExpressionContext horizontalAngleFromDirectionExpression() {
		HorizontalAngleFromDirectionExpressionContext _localctx = new HorizontalAngleFromDirectionExpressionContext(Context, State);
		EnterRule(_localctx, 140, RULE_horizontalAngleFromDirectionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119; Match(T__71);
			State = 1120; Match(T__1);
			State = 1121; expression();
			State = 1122; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalAngleTowardsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HorizontalAngleTowardsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalAngleTowardsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalAngleTowardsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalAngleTowardsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalAngleTowardsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalAngleTowardsExpressionContext horizontalAngleTowardsExpression() {
		HorizontalAngleTowardsExpressionContext _localctx = new HorizontalAngleTowardsExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_horizontalAngleTowardsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124; Match(T__72);
			State = 1125; Match(T__1);
			State = 1126; expression();
			State = 1127; Match(T__17);
			State = 1128; expression();
			State = 1129; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalFacingAngleOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HorizontalFacingAngleOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalFacingAngleOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalFacingAngleOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalFacingAngleOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalFacingAngleOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalFacingAngleOfExpressionContext horizontalFacingAngleOfExpression() {
		HorizontalFacingAngleOfExpressionContext _localctx = new HorizontalFacingAngleOfExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_horizontalFacingAngleOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131; Match(T__73);
			State = 1132; Match(T__1);
			State = 1133; expression();
			State = 1134; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalSpeedOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HorizontalSpeedOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalSpeedOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHorizontalSpeedOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHorizontalSpeedOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalSpeedOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalSpeedOfExpressionContext horizontalSpeedOfExpression() {
		HorizontalSpeedOfExpressionContext _localctx = new HorizontalSpeedOfExpressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_horizontalSpeedOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136; Match(T__74);
			State = 1137; Match(T__1);
			State = 1138; expression();
			State = 1139; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOfArrayValueExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexOfArrayValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOfArrayValueExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIndexOfArrayValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIndexOfArrayValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOfArrayValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOfArrayValueExpressionContext indexOfArrayValueExpression() {
		IndexOfArrayValueExpressionContext _localctx = new IndexOfArrayValueExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_indexOfArrayValueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141; Match(T__75);
			State = 1142; Match(T__1);
			State = 1143; expression();
			State = 1144; Match(T__17);
			State = 1145; expression();
			State = 1146; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsAliveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsAliveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isAliveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsAliveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsAliveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsAliveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsAliveExpressionContext isAliveExpression() {
		IsAliveExpressionContext _localctx = new IsAliveExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_isAliveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148; Match(T__76);
			State = 1149; Match(T__1);
			State = 1150; expression();
			State = 1151; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsAssemblingHeroesExpressionContext : ParserRuleContext {
		public IsAssemblingHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isAssemblingHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsAssemblingHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsAssemblingHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsAssemblingHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsAssemblingHeroesExpressionContext isAssemblingHeroesExpression() {
		IsAssemblingHeroesExpressionContext _localctx = new IsAssemblingHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_isAssemblingHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153; Match(T__77);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsBetweenRoundsExpressionContext : ParserRuleContext {
		public IsBetweenRoundsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isBetweenRoundsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsBetweenRoundsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsBetweenRoundsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsBetweenRoundsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsBetweenRoundsExpressionContext isBetweenRoundsExpression() {
		IsBetweenRoundsExpressionContext _localctx = new IsBetweenRoundsExpressionContext(Context, State);
		EnterRule(_localctx, 154, RULE_isBetweenRoundsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155; Match(T__78);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsButtonHeldExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ButtonContext button() {
			return GetRuleContext<ButtonContext>(0);
		}
		public IsButtonHeldExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isButtonHeldExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsButtonHeldExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsButtonHeldExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsButtonHeldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsButtonHeldExpressionContext isButtonHeldExpression() {
		IsButtonHeldExpressionContext _localctx = new IsButtonHeldExpressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_isButtonHeldExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157; Match(T__79);
			State = 1158; Match(T__1);
			State = 1159; expression();
			State = 1160; Match(T__17);
			State = 1161; button();
			State = 1162; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CommunicationTypeContext communicationType() {
			return GetRuleContext<CommunicationTypeContext>(0);
		}
		public IsCommunicatingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingExpressionContext isCommunicatingExpression() {
		IsCommunicatingExpressionContext _localctx = new IsCommunicatingExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_isCommunicatingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164; Match(T__80);
			State = 1165; Match(T__1);
			State = 1166; expression();
			State = 1167; Match(T__17);
			State = 1168; communicationType();
			State = 1169; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingAnyExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCommunicatingAnyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingAnyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingAnyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingAnyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingAnyExpressionContext isCommunicatingAnyExpression() {
		IsCommunicatingAnyExpressionContext _localctx = new IsCommunicatingAnyExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_isCommunicatingAnyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171; Match(T__81);
			State = 1172; Match(T__1);
			State = 1173; expression();
			State = 1174; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingAnyEmoteExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCommunicatingAnyEmoteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingAnyEmoteExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingAnyEmoteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingAnyEmoteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingAnyEmoteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingAnyEmoteExpressionContext isCommunicatingAnyEmoteExpression() {
		IsCommunicatingAnyEmoteExpressionContext _localctx = new IsCommunicatingAnyEmoteExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_isCommunicatingAnyEmoteExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176; Match(T__82);
			State = 1177; Match(T__1);
			State = 1178; expression();
			State = 1179; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCommunicatingAnyVoicelineExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCommunicatingAnyVoicelineExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCommunicatingAnyVoicelineExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCommunicatingAnyVoicelineExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCommunicatingAnyVoicelineExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCommunicatingAnyVoicelineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCommunicatingAnyVoicelineExpressionContext isCommunicatingAnyVoicelineExpression() {
		IsCommunicatingAnyVoicelineExpressionContext _localctx = new IsCommunicatingAnyVoicelineExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_isCommunicatingAnyVoicelineExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181; Match(T__83);
			State = 1182; Match(T__1);
			State = 1183; expression();
			State = 1184; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsControlModePointLockedExpressionContext : ParserRuleContext {
		public IsControlModePointLockedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isControlModePointLockedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsControlModePointLockedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsControlModePointLockedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsControlModePointLockedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsControlModePointLockedExpressionContext isControlModePointLockedExpression() {
		IsControlModePointLockedExpressionContext _localctx = new IsControlModePointLockedExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_isControlModePointLockedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1186; Match(T__84);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCrouchingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsCrouchingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCrouchingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCrouchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCrouchingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCrouchingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCrouchingExpressionContext isCrouchingExpression() {
		IsCrouchingExpressionContext _localctx = new IsCrouchingExpressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_isCrouchingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188; Match(T__85);
			State = 1189; Match(T__1);
			State = 1190; expression();
			State = 1191; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsCTFModeInSuddenDeathExpressionContext : ParserRuleContext {
		public IsCTFModeInSuddenDeathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCTFModeInSuddenDeathExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsCTFModeInSuddenDeathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsCTFModeInSuddenDeathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCTFModeInSuddenDeathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsCTFModeInSuddenDeathExpressionContext isCTFModeInSuddenDeathExpression() {
		IsCTFModeInSuddenDeathExpressionContext _localctx = new IsCTFModeInSuddenDeathExpressionContext(Context, State);
		EnterRule(_localctx, 170, RULE_isCTFModeInSuddenDeathExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193; Match(T__86);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsDeadExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsDeadExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isDeadExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsDeadExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsDeadExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsDeadExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsDeadExpressionContext isDeadExpression() {
		IsDeadExpressionContext _localctx = new IsDeadExpressionContext(Context, State);
		EnterRule(_localctx, 172, RULE_isDeadExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195; Match(T__87);
			State = 1196; Match(T__1);
			State = 1197; expression();
			State = 1198; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFiringPrimaryExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFiringPrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFiringPrimaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFiringPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFiringPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFiringPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFiringPrimaryExpressionContext isFiringPrimaryExpression() {
		IsFiringPrimaryExpressionContext _localctx = new IsFiringPrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 174, RULE_isFiringPrimaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200; Match(T__88);
			State = 1201; Match(T__1);
			State = 1202; expression();
			State = 1203; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFiringSecondaryExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFiringSecondaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFiringSecondaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFiringSecondaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFiringSecondaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFiringSecondaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFiringSecondaryExpressionContext isFiringSecondaryExpression() {
		IsFiringSecondaryExpressionContext _localctx = new IsFiringSecondaryExpressionContext(Context, State);
		EnterRule(_localctx, 176, RULE_isFiringSecondaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; Match(T__89);
			State = 1206; Match(T__1);
			State = 1207; expression();
			State = 1208; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFlagAtBaseExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFlagAtBaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFlagAtBaseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFlagAtBaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFlagAtBaseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFlagAtBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFlagAtBaseExpressionContext isFlagAtBaseExpression() {
		IsFlagAtBaseExpressionContext _localctx = new IsFlagAtBaseExpressionContext(Context, State);
		EnterRule(_localctx, 178, RULE_isFlagAtBaseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; Match(T__90);
			State = 1211; Match(T__1);
			State = 1212; expression();
			State = 1213; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsFlagBeingCarriedExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsFlagBeingCarriedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isFlagBeingCarriedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsFlagBeingCarriedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsFlagBeingCarriedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsFlagBeingCarriedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsFlagBeingCarriedExpressionContext isFlagBeingCarriedExpression() {
		IsFlagBeingCarriedExpressionContext _localctx = new IsFlagBeingCarriedExpressionContext(Context, State);
		EnterRule(_localctx, 180, RULE_isFlagBeingCarriedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215; Match(T__91);
			State = 1216; Match(T__1);
			State = 1217; expression();
			State = 1218; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsGameInProgressExpressionContext : ParserRuleContext {
		public IsGameInProgressExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isGameInProgressExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsGameInProgressExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsGameInProgressExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsGameInProgressExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsGameInProgressExpressionContext isGameInProgressExpression() {
		IsGameInProgressExpressionContext _localctx = new IsGameInProgressExpressionContext(Context, State);
		EnterRule(_localctx, 182, RULE_isGameInProgressExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220; Match(T__92);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsHeroBeingPlayedExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsHeroBeingPlayedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isHeroBeingPlayedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsHeroBeingPlayedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsHeroBeingPlayedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsHeroBeingPlayedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsHeroBeingPlayedExpressionContext isHeroBeingPlayedExpression() {
		IsHeroBeingPlayedExpressionContext _localctx = new IsHeroBeingPlayedExpressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_isHeroBeingPlayedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222; Match(T__93);
			State = 1223; Match(T__1);
			State = 1224; expression();
			State = 1225; Match(T__17);
			State = 1226; expression();
			State = 1227; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInAirExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsInAirExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInAirExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInAirExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInAirExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInAirExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInAirExpressionContext isInAirExpression() {
		IsInAirExpressionContext _localctx = new IsInAirExpressionContext(Context, State);
		EnterRule(_localctx, 186, RULE_isInAirExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1229; Match(T__94);
			State = 1230; Match(T__1);
			State = 1231; expression();
			State = 1232; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInLineofSightExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BarrierBlockTypeContext barrierBlockType() {
			return GetRuleContext<BarrierBlockTypeContext>(0);
		}
		public IsInLineofSightExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInLineofSightExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInLineofSightExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInLineofSightExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInLineofSightExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInLineofSightExpressionContext isInLineofSightExpression() {
		IsInLineofSightExpressionContext _localctx = new IsInLineofSightExpressionContext(Context, State);
		EnterRule(_localctx, 188, RULE_isInLineofSightExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234; Match(T__95);
			State = 1235; Match(T__1);
			State = 1236; expression();
			State = 1237; Match(T__17);
			State = 1238; expression();
			State = 1239; Match(T__17);
			State = 1240; barrierBlockType();
			State = 1241; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInSetupExpressionContext : ParserRuleContext {
		public IsInSetupExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInSetupExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInSetupExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInSetupExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInSetupExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInSetupExpressionContext isInSetupExpression() {
		IsInSetupExpressionContext _localctx = new IsInSetupExpressionContext(Context, State);
		EnterRule(_localctx, 190, RULE_isInSetupExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(T__96);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInSpawnRoomExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsInSpawnRoomExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInSpawnRoomExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInSpawnRoomExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInSpawnRoomExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInSpawnRoomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInSpawnRoomExpressionContext isInSpawnRoomExpression() {
		IsInSpawnRoomExpressionContext _localctx = new IsInSpawnRoomExpressionContext(Context, State);
		EnterRule(_localctx, 192, RULE_isInSpawnRoomExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245; Match(T__97);
			State = 1246; Match(T__1);
			State = 1247; expression();
			State = 1248; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsInViewAngleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsInViewAngleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isInViewAngleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsInViewAngleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsInViewAngleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsInViewAngleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsInViewAngleExpressionContext isInViewAngleExpression() {
		IsInViewAngleExpressionContext _localctx = new IsInViewAngleExpressionContext(Context, State);
		EnterRule(_localctx, 194, RULE_isInViewAngleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; Match(T__98);
			State = 1251; Match(T__1);
			State = 1252; expression();
			State = 1253; Match(T__17);
			State = 1254; expression();
			State = 1255; Match(T__17);
			State = 1256; expression();
			State = 1257; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsMatchCompleteExpressionContext : ParserRuleContext {
		public IsMatchCompleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isMatchCompleteExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsMatchCompleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsMatchCompleteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsMatchCompleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsMatchCompleteExpressionContext isMatchCompleteExpression() {
		IsMatchCompleteExpressionContext _localctx = new IsMatchCompleteExpressionContext(Context, State);
		EnterRule(_localctx, 196, RULE_isMatchCompleteExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1259; Match(T__99);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsMovingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsMovingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isMovingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsMovingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsMovingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsMovingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsMovingExpressionContext isMovingExpression() {
		IsMovingExpressionContext _localctx = new IsMovingExpressionContext(Context, State);
		EnterRule(_localctx, 198, RULE_isMovingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261; Match(T__100);
			State = 1262; Match(T__1);
			State = 1263; expression();
			State = 1264; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsObjectiveCompleteExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsObjectiveCompleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isObjectiveCompleteExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsObjectiveCompleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsObjectiveCompleteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsObjectiveCompleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsObjectiveCompleteExpressionContext isObjectiveCompleteExpression() {
		IsObjectiveCompleteExpressionContext _localctx = new IsObjectiveCompleteExpressionContext(Context, State);
		EnterRule(_localctx, 200, RULE_isObjectiveCompleteExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266; Match(T__101);
			State = 1267; Match(T__1);
			State = 1268; expression();
			State = 1269; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOnGroundExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOnGroundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOnGroundExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsOnGroundExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsOnGroundExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOnGroundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOnGroundExpressionContext isOnGroundExpression() {
		IsOnGroundExpressionContext _localctx = new IsOnGroundExpressionContext(Context, State);
		EnterRule(_localctx, 202, RULE_isOnGroundExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; Match(T__102);
			State = 1272; Match(T__1);
			State = 1273; expression();
			State = 1274; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOnObjectiveExpressionContext isOnObjectiveExpression() {
		IsOnObjectiveExpressionContext _localctx = new IsOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 204, RULE_isOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276; Match(T__103);
			State = 1277; Match(T__1);
			State = 1278; expression();
			State = 1279; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOnWallExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOnWallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOnWallExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsOnWallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsOnWallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOnWallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOnWallExpressionContext isOnWallExpression() {
		IsOnWallExpressionContext _localctx = new IsOnWallExpressionContext(Context, State);
		EnterRule(_localctx, 206, RULE_isOnWallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281; Match(T__104);
			State = 1282; Match(T__1);
			State = 1283; expression();
			State = 1284; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsPortraitOnFireExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsPortraitOnFireExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isPortraitOnFireExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsPortraitOnFireExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsPortraitOnFireExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPortraitOnFireExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsPortraitOnFireExpressionContext isPortraitOnFireExpression() {
		IsPortraitOnFireExpressionContext _localctx = new IsPortraitOnFireExpressionContext(Context, State);
		EnterRule(_localctx, 208, RULE_isPortraitOnFireExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286; Match(T__105);
			State = 1287; Match(T__1);
			State = 1288; expression();
			State = 1289; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsStandingExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsStandingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isStandingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsStandingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsStandingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsStandingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsStandingExpressionContext isStandingExpression() {
		IsStandingExpressionContext _localctx = new IsStandingExpressionContext(Context, State);
		EnterRule(_localctx, 210, RULE_isStandingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1291; Match(T__106);
			State = 1292; Match(T__1);
			State = 1293; expression();
			State = 1294; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTeamOnDefenseExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTeamOnDefenseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTeamOnDefenseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTeamOnDefenseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTeamOnDefenseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTeamOnDefenseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTeamOnDefenseExpressionContext isTeamOnDefenseExpression() {
		IsTeamOnDefenseExpressionContext _localctx = new IsTeamOnDefenseExpressionContext(Context, State);
		EnterRule(_localctx, 212, RULE_isTeamOnDefenseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1296; Match(T__107);
			State = 1297; Match(T__1);
			State = 1298; expression();
			State = 1299; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTeamOnOffenseExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTeamOnOffenseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTeamOnOffenseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTeamOnOffenseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTeamOnOffenseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTeamOnOffenseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTeamOnOffenseExpressionContext isTeamOnOffenseExpression() {
		IsTeamOnOffenseExpressionContext _localctx = new IsTeamOnOffenseExpressionContext(Context, State);
		EnterRule(_localctx, 214, RULE_isTeamOnOffenseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301; Match(T__108);
			State = 1302; Match(T__1);
			State = 1303; expression();
			State = 1304; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTrueForAllExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsTrueForAllExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTrueForAllExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTrueForAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTrueForAllExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTrueForAllExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTrueForAllExpressionContext isTrueForAllExpression() {
		IsTrueForAllExpressionContext _localctx = new IsTrueForAllExpressionContext(Context, State);
		EnterRule(_localctx, 216, RULE_isTrueForAllExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1306; Match(T__109);
			State = 1307; Match(T__1);
			State = 1308; expression();
			State = 1309; Match(T__17);
			State = 1310; expression();
			State = 1311; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTrueForAnyExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsTrueForAnyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTrueForAnyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsTrueForAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsTrueForAnyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTrueForAnyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTrueForAnyExpressionContext isTrueForAnyExpression() {
		IsTrueForAnyExpressionContext _localctx = new IsTrueForAnyExpressionContext(Context, State);
		EnterRule(_localctx, 218, RULE_isTrueForAnyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313; Match(T__110);
			State = 1314; Match(T__1);
			State = 1315; expression();
			State = 1316; Match(T__17);
			State = 1317; expression();
			State = 1318; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsUsingAbility1ExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsUsingAbility1ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isUsingAbility1Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsUsingAbility1Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsUsingAbility1Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsUsingAbility1Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsUsingAbility1ExpressionContext isUsingAbility1Expression() {
		IsUsingAbility1ExpressionContext _localctx = new IsUsingAbility1ExpressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_isUsingAbility1Expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320; Match(T__111);
			State = 1321; Match(T__1);
			State = 1322; expression();
			State = 1323; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsUsingAbility2ExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsUsingAbility2ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isUsingAbility2Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsUsingAbility2Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsUsingAbility2Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsUsingAbility2Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsUsingAbility2ExpressionContext isUsingAbility2Expression() {
		IsUsingAbility2ExpressionContext _localctx = new IsUsingAbility2ExpressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_isUsingAbility2Expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1325; Match(T__112);
			State = 1326; Match(T__1);
			State = 1327; expression();
			State = 1328; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsUsingUltimateExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsUsingUltimateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isUsingUltimateExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsUsingUltimateExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsUsingUltimateExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsUsingUltimateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsUsingUltimateExpressionContext isUsingUltimateExpression() {
		IsUsingUltimateExpressionContext _localctx = new IsUsingUltimateExpressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_isUsingUltimateExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330; Match(T__113);
			State = 1331; Match(T__1);
			State = 1332; expression();
			State = 1333; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsWaitingForPlayersExpressionContext : ParserRuleContext {
		public IsWaitingForPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isWaitingForPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterIsWaitingForPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitIsWaitingForPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsWaitingForPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsWaitingForPlayersExpressionContext isWaitingForPlayersExpression() {
		IsWaitingForPlayersExpressionContext _localctx = new IsWaitingForPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 226, RULE_isWaitingForPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335; Match(T__114);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastCreatedEntityExpressionContext : ParserRuleContext {
		public LastCreatedEntityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastCreatedEntityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastCreatedEntityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastCreatedEntityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastCreatedEntityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastCreatedEntityExpressionContext lastCreatedEntityExpression() {
		LastCreatedEntityExpressionContext _localctx = new LastCreatedEntityExpressionContext(Context, State);
		EnterRule(_localctx, 228, RULE_lastCreatedEntityExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1337; Match(T__115);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastDamageModificationIDExpressionContext : ParserRuleContext {
		public LastDamageModificationIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastDamageModificationIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastDamageModificationIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastDamageModificationIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastDamageModificationIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastDamageModificationIDExpressionContext lastDamageModificationIDExpression() {
		LastDamageModificationIDExpressionContext _localctx = new LastDamageModificationIDExpressionContext(Context, State);
		EnterRule(_localctx, 230, RULE_lastDamageModificationIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339; Match(T__116);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastDamageOverTimeIDExpressionContext : ParserRuleContext {
		public LastDamageOverTimeIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastDamageOverTimeIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastDamageOverTimeIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastDamageOverTimeIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastDamageOverTimeIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastDamageOverTimeIDExpressionContext lastDamageOverTimeIDExpression() {
		LastDamageOverTimeIDExpressionContext _localctx = new LastDamageOverTimeIDExpressionContext(Context, State);
		EnterRule(_localctx, 232, RULE_lastDamageOverTimeIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1341; Match(T__117);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastHealOverTimeIDExpressionContext : ParserRuleContext {
		public LastHealOverTimeIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastHealOverTimeIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastHealOverTimeIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastHealOverTimeIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastHealOverTimeIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastHealOverTimeIDExpressionContext lastHealOverTimeIDExpression() {
		LastHealOverTimeIDExpressionContext _localctx = new LastHealOverTimeIDExpressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_lastHealOverTimeIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343; Match(T__118);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LastOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastOfExpressionContext lastOfExpression() {
		LastOfExpressionContext _localctx = new LastOfExpressionContext(Context, State);
		EnterRule(_localctx, 236, RULE_lastOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345; Match(T__119);
			State = 1346; Match(T__1);
			State = 1347; expression();
			State = 1348; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastTextIDExpressionContext : ParserRuleContext {
		public LastTextIDExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastTextIDExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLastTextIDExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLastTextIDExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastTextIDExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastTextIDExpressionContext lastTextIDExpression() {
		LastTextIDExpressionContext _localctx = new LastTextIDExpressionContext(Context, State);
		EnterRule(_localctx, 238, RULE_lastTextIDExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; Match(T__120);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftExpressionContext : ParserRuleContext {
		public LeftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLeftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLeftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftExpressionContext leftExpression() {
		LeftExpressionContext _localctx = new LeftExpressionContext(Context, State);
		EnterRule(_localctx, 240, RULE_leftExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352; Match(T__121);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVectorOfExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorTransformationTypeContext vectorTransformationType() {
			return GetRuleContext<VectorTransformationTypeContext>(0);
		}
		public LocalVectorOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVectorOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLocalVectorOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLocalVectorOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVectorOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVectorOfExpressionContext localVectorOfExpression() {
		LocalVectorOfExpressionContext _localctx = new LocalVectorOfExpressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_localVectorOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354; Match(T__122);
			State = 1355; Match(T__1);
			State = 1356; expression();
			State = 1357; Match(T__17);
			State = 1358; expression();
			State = 1359; Match(T__17);
			State = 1360; vectorTransformationType();
			State = 1361; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRoundExpressionContext : ParserRuleContext {
		public MatchRoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRoundExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMatchRoundExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMatchRoundExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRoundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRoundExpressionContext matchRoundExpression() {
		MatchRoundExpressionContext _localctx = new MatchRoundExpressionContext(Context, State);
		EnterRule(_localctx, 244, RULE_matchRoundExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1363; Match(T__123);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchTimeExpressionContext : ParserRuleContext {
		public MatchTimeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchTimeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMatchTimeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMatchTimeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchTimeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchTimeExpressionContext matchTimeExpression() {
		MatchTimeExpressionContext _localctx = new MatchTimeExpressionContext(Context, State);
		EnterRule(_localctx, 246, RULE_matchTimeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(T__124);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MaxExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMaxExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMaxExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxExpressionContext maxExpression() {
		MaxExpressionContext _localctx = new MaxExpressionContext(Context, State);
		EnterRule(_localctx, 248, RULE_maxExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367; Match(T__125);
			State = 1368; Match(T__1);
			State = 1369; expression();
			State = 1370; Match(T__17);
			State = 1371; expression();
			State = 1372; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxHealthExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MaxHealthExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxHealthExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMaxHealthExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMaxHealthExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxHealthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxHealthExpressionContext maxHealthExpression() {
		MaxHealthExpressionContext _localctx = new MaxHealthExpressionContext(Context, State);
		EnterRule(_localctx, 250, RULE_maxHealthExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1374; Match(T__126);
			State = 1375; Match(T__1);
			State = 1376; expression();
			State = 1377; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MinExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMinExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMinExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinExpressionContext minExpression() {
		MinExpressionContext _localctx = new MinExpressionContext(Context, State);
		EnterRule(_localctx, 252, RULE_minExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379; Match(T__127);
			State = 1380; Match(T__1);
			State = 1381; expression();
			State = 1382; Match(T__17);
			State = 1383; expression();
			State = 1384; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduloExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuloExpressionContext moduloExpression() {
		ModuloExpressionContext _localctx = new ModuloExpressionContext(Context, State);
		EnterRule(_localctx, 254, RULE_moduloExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386; Match(T__128);
			State = 1387; Match(T__1);
			State = 1388; expression();
			State = 1389; Match(T__17);
			State = 1390; expression();
			State = 1391; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpressionContext multiplyExpression() {
		MultiplyExpressionContext _localctx = new MultiplyExpressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_multiplyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1393; Match(T__129);
			State = 1394; Match(T__1);
			State = 1395; expression();
			State = 1396; Match(T__17);
			State = 1397; expression();
			State = 1398; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NearestWalkablePositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NearestWalkablePositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nearestWalkablePositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNearestWalkablePositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNearestWalkablePositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNearestWalkablePositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NearestWalkablePositionExpressionContext nearestWalkablePositionExpression() {
		NearestWalkablePositionExpressionContext _localctx = new NearestWalkablePositionExpressionContext(Context, State);
		EnterRule(_localctx, 258, RULE_nearestWalkablePositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400; Match(T__130);
			State = 1401; Match(T__1);
			State = 1402; expression();
			State = 1403; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalizeExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NormalizeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalizeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNormalizeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNormalizeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalizeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalizeExpressionContext normalizeExpression() {
		NormalizeExpressionContext _localctx = new NormalizeExpressionContext(Context, State);
		EnterRule(_localctx, 260, RULE_normalizeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405; Match(T__131);
			State = 1406; Match(T__1);
			State = 1407; expression();
			State = 1408; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 262, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410; Match(T__132);
			State = 1411; Match(T__1);
			State = 1412; expression();
			State = 1413; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfDeadPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfDeadPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfDeadPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfDeadPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfDeadPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfDeadPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfDeadPlayersExpressionContext numberOfDeadPlayersExpression() {
		NumberOfDeadPlayersExpressionContext _localctx = new NumberOfDeadPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 264, RULE_numberOfDeadPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415; Match(T__133);
			State = 1416; Match(T__1);
			State = 1417; expression();
			State = 1418; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfDeathsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfDeathsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfDeathsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfDeathsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfDeathsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfDeathsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfDeathsExpressionContext numberOfDeathsExpression() {
		NumberOfDeathsExpressionContext _localctx = new NumberOfDeathsExpressionContext(Context, State);
		EnterRule(_localctx, 266, RULE_numberOfDeathsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420; Match(T__134);
			State = 1421; Match(T__1);
			State = 1422; expression();
			State = 1423; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfEliminationsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfEliminationsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfEliminationsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfEliminationsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfEliminationsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfEliminationsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfEliminationsExpressionContext numberOfEliminationsExpression() {
		NumberOfEliminationsExpressionContext _localctx = new NumberOfEliminationsExpressionContext(Context, State);
		EnterRule(_localctx, 268, RULE_numberOfEliminationsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425; Match(T__135);
			State = 1426; Match(T__1);
			State = 1427; expression();
			State = 1428; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfFinalBlowsExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfFinalBlowsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfFinalBlowsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfFinalBlowsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfFinalBlowsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfFinalBlowsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfFinalBlowsExpressionContext numberOfFinalBlowsExpression() {
		NumberOfFinalBlowsExpressionContext _localctx = new NumberOfFinalBlowsExpressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_numberOfFinalBlowsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; Match(T__136);
			State = 1431; Match(T__1);
			State = 1432; expression();
			State = 1433; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfHeroesExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NumberOfHeroesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfHeroesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfHeroesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfHeroesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfHeroesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfHeroesExpressionContext numberOfHeroesExpression() {
		NumberOfHeroesExpressionContext _localctx = new NumberOfHeroesExpressionContext(Context, State);
		EnterRule(_localctx, 272, RULE_numberOfHeroesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1435; Match(T__137);
			State = 1436; Match(T__1);
			State = 1437; expression();
			State = 1438; Match(T__17);
			State = 1439; expression();
			State = 1440; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfLivingPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfLivingPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfLivingPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfLivingPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfLivingPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfLivingPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfLivingPlayersExpressionContext numberOfLivingPlayersExpression() {
		NumberOfLivingPlayersExpressionContext _localctx = new NumberOfLivingPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 274, RULE_numberOfLivingPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442; Match(T__138);
			State = 1443; Match(T__1);
			State = 1444; expression();
			State = 1445; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPlayersExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfPlayersExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPlayersExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfPlayersExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfPlayersExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPlayersExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPlayersExpressionContext numberOfPlayersExpression() {
		NumberOfPlayersExpressionContext _localctx = new NumberOfPlayersExpressionContext(Context, State);
		EnterRule(_localctx, 276, RULE_numberOfPlayersExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447; Match(T__139);
			State = 1448; Match(T__1);
			State = 1449; expression();
			State = 1450; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPlayersOnObjectiveExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberOfPlayersOnObjectiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPlayersOnObjectiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNumberOfPlayersOnObjectiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNumberOfPlayersOnObjectiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPlayersOnObjectiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPlayersOnObjectiveExpressionContext numberOfPlayersOnObjectiveExpression() {
		NumberOfPlayersOnObjectiveExpressionContext _localctx = new NumberOfPlayersOnObjectiveExpressionContext(Context, State);
		EnterRule(_localctx, 278, RULE_numberOfPlayersOnObjectiveExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452; Match(T__140);
			State = 1453; Match(T__1);
			State = 1454; expression();
			State = 1455; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectiveIndexExpressionContext : ParserRuleContext {
		public ObjectiveIndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectiveIndexExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterObjectiveIndexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitObjectiveIndexExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectiveIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectiveIndexExpressionContext objectiveIndexExpression() {
		ObjectiveIndexExpressionContext _localctx = new ObjectiveIndexExpressionContext(Context, State);
		EnterRule(_localctx, 280, RULE_objectiveIndexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; Match(T__141);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectivePositionExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectivePositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectivePositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterObjectivePositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitObjectivePositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectivePositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectivePositionExpressionContext objectivePositionExpression() {
		ObjectivePositionExpressionContext _localctx = new ObjectivePositionExpressionContext(Context, State);
		EnterRule(_localctx, 282, RULE_objectivePositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; Match(T__142);
			State = 1460; Match(T__1);
			State = 1461; expression();
			State = 1462; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OppositeTeamOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OppositeTeamOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oppositeTeamOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOppositeTeamOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOppositeTeamOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOppositeTeamOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OppositeTeamOfExpressionContext oppositeTeamOfExpression() {
		OppositeTeamOfExpressionContext _localctx = new OppositeTeamOfExpressionContext(Context, State);
		EnterRule(_localctx, 284, RULE_oppositeTeamOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; Match(T__143);
			State = 1465; Match(T__1);
			State = 1466; expression();
			State = 1467; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 286, RULE_orExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1469; Match(T__144);
			State = 1470; Match(T__1);
			State = 1471; expression();
			State = 1472; Match(T__17);
			State = 1473; expression();
			State = 1474; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PayloadPositionExpressionContext : ParserRuleContext {
		public PayloadPositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_payloadPositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPayloadPositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPayloadPositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPayloadPositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PayloadPositionExpressionContext payloadPositionExpression() {
		PayloadPositionExpressionContext _localctx = new PayloadPositionExpressionContext(Context, State);
		EnterRule(_localctx, 288, RULE_payloadPositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476; Match(T__145);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PayloadProgressPercentageExpressionContext : ParserRuleContext {
		public PayloadProgressPercentageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_payloadProgressPercentageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPayloadProgressPercentageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPayloadProgressPercentageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPayloadProgressPercentageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PayloadProgressPercentageExpressionContext payloadProgressPercentageExpression() {
		PayloadProgressPercentageExpressionContext _localctx = new PayloadProgressPercentageExpressionContext(Context, State);
		EnterRule(_localctx, 290, RULE_payloadProgressPercentageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1478; Match(T__146);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerCarryingFlagExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PlayerCarryingFlagExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerCarryingFlagExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerCarryingFlagExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerCarryingFlagExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerCarryingFlagExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerCarryingFlagExpressionContext playerCarryingFlagExpression() {
		PlayerCarryingFlagExpressionContext _localctx = new PlayerCarryingFlagExpressionContext(Context, State);
		EnterRule(_localctx, 292, RULE_playerCarryingFlagExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480; Match(T__147);
			State = 1481; Match(T__1);
			State = 1482; expression();
			State = 1483; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerClosestToReticleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayerClosestToReticleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerClosestToReticleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerClosestToReticleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerClosestToReticleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerClosestToReticleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerClosestToReticleExpressionContext playerClosestToReticleExpression() {
		PlayerClosestToReticleExpressionContext _localctx = new PlayerClosestToReticleExpressionContext(Context, State);
		EnterRule(_localctx, 294, RULE_playerClosestToReticleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1485; Match(T__148);
			State = 1486; Match(T__1);
			State = 1487; expression();
			State = 1488; Match(T__17);
			State = 1489; expression();
			State = 1490; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerVariableExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PlayerVariableContext playerVariable() {
			return GetRuleContext<PlayerVariableContext>(0);
		}
		public PlayerVariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerVariableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerVariableExpressionContext playerVariableExpression() {
		PlayerVariableExpressionContext _localctx = new PlayerVariableExpressionContext(Context, State);
		EnterRule(_localctx, 296, RULE_playerVariableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492; Match(T__149);
			State = 1493; Match(T__1);
			State = 1494; expression();
			State = 1495; Match(T__17);
			State = 1496; playerVariable();
			State = 1497; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersInSlotExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayersInSlotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersInSlotExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersInSlotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersInSlotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersInSlotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersInSlotExpressionContext playersInSlotExpression() {
		PlayersInSlotExpressionContext _localctx = new PlayersInSlotExpressionContext(Context, State);
		EnterRule(_localctx, 298, RULE_playersInSlotExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499; Match(T__150);
			State = 1500; Match(T__1);
			State = 1501; expression();
			State = 1502; Match(T__17);
			State = 1503; expression();
			State = 1504; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersInViewAngleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayersInViewAngleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersInViewAngleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersInViewAngleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersInViewAngleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersInViewAngleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersInViewAngleExpressionContext playersInViewAngleExpression() {
		PlayersInViewAngleExpressionContext _localctx = new PlayersInViewAngleExpressionContext(Context, State);
		EnterRule(_localctx, 300, RULE_playersInViewAngleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506; Match(T__151);
			State = 1507; Match(T__1);
			State = 1508; expression();
			State = 1509; Match(T__17);
			State = 1510; expression();
			State = 1511; Match(T__17);
			State = 1512; expression();
			State = 1513; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersOnHeroExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PlayersOnHeroExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersOnHeroExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersOnHeroExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersOnHeroExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersOnHeroExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersOnHeroExpressionContext playersOnHeroExpression() {
		PlayersOnHeroExpressionContext _localctx = new PlayersOnHeroExpressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_playersOnHeroExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515; Match(T__152);
			State = 1516; Match(T__1);
			State = 1517; expression();
			State = 1518; Match(T__17);
			State = 1519; expression();
			State = 1520; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersWithinRadiusExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LineOfSightCheckTypeContext lineOfSightCheckType() {
			return GetRuleContext<LineOfSightCheckTypeContext>(0);
		}
		public PlayersWithinRadiusExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersWithinRadiusExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayersWithinRadiusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayersWithinRadiusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersWithinRadiusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersWithinRadiusExpressionContext playersWithinRadiusExpression() {
		PlayersWithinRadiusExpressionContext _localctx = new PlayersWithinRadiusExpressionContext(Context, State);
		EnterRule(_localctx, 304, RULE_playersWithinRadiusExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522; Match(T__153);
			State = 1523; Match(T__1);
			State = 1524; expression();
			State = 1525; Match(T__17);
			State = 1526; expression();
			State = 1527; Match(T__17);
			State = 1528; expression();
			State = 1529; Match(T__17);
			State = 1530; lineOfSightCheckType();
			State = 1531; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointCapturePercentageExpressionContext : ParserRuleContext {
		public PointCapturePercentageExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointCapturePercentageExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPointCapturePercentageExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPointCapturePercentageExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointCapturePercentageExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointCapturePercentageExpressionContext pointCapturePercentageExpression() {
		PointCapturePercentageExpressionContext _localctx = new PointCapturePercentageExpressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_pointCapturePercentageExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533; Match(T__154);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PositionOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPositionOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPositionOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionOfExpressionContext positionOfExpression() {
		PositionOfExpressionContext _localctx = new PositionOfExpressionContext(Context, State);
		EnterRule(_localctx, 308, RULE_positionOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535; Match(T__155);
			State = 1536; Match(T__1);
			State = 1537; expression();
			State = 1538; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseToPowerExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RaiseToPowerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseToPowerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRaiseToPowerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRaiseToPowerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseToPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseToPowerExpressionContext raiseToPowerExpression() {
		RaiseToPowerExpressionContext _localctx = new RaiseToPowerExpressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_raiseToPowerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540; Match(T__156);
			State = 1541; Match(T__1);
			State = 1542; expression();
			State = 1543; Match(T__17);
			State = 1544; expression();
			State = 1545; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomIntegerExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomIntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomIntegerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomIntegerExpressionContext randomIntegerExpression() {
		RandomIntegerExpressionContext _localctx = new RandomIntegerExpressionContext(Context, State);
		EnterRule(_localctx, 312, RULE_randomIntegerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547; Match(T__157);
			State = 1548; Match(T__1);
			State = 1549; expression();
			State = 1550; Match(T__17);
			State = 1551; expression();
			State = 1552; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomRealExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomRealExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomRealExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomRealExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomRealExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomRealExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomRealExpressionContext randomRealExpression() {
		RandomRealExpressionContext _localctx = new RandomRealExpressionContext(Context, State);
		EnterRule(_localctx, 314, RULE_randomRealExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1554; Match(T__158);
			State = 1555; Match(T__1);
			State = 1556; expression();
			State = 1557; Match(T__17);
			State = 1558; expression();
			State = 1559; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomValueInArrayExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RandomValueInArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomValueInArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomValueInArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomValueInArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomValueInArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomValueInArrayExpressionContext randomValueInArrayExpression() {
		RandomValueInArrayExpressionContext _localctx = new RandomValueInArrayExpressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_randomValueInArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561; Match(T__159);
			State = 1562; Match(T__1);
			State = 1563; expression();
			State = 1564; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizedArrayExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RandomizedArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizedArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRandomizedArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRandomizedArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizedArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizedArrayExpressionContext randomizedArrayExpression() {
		RandomizedArrayExpressionContext _localctx = new RandomizedArrayExpressionContext(Context, State);
		EnterRule(_localctx, 318, RULE_randomizedArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1566; Match(T__160);
			State = 1567; Match(T__1);
			State = 1568; expression();
			State = 1569; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RayCastHitNormalExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RayCastHitNormalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rayCastHitNormalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRayCastHitNormalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRayCastHitNormalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRayCastHitNormalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RayCastHitNormalExpressionContext rayCastHitNormalExpression() {
		RayCastHitNormalExpressionContext _localctx = new RayCastHitNormalExpressionContext(Context, State);
		EnterRule(_localctx, 320, RULE_rayCastHitNormalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571; Match(T__161);
			State = 1572; Match(T__1);
			State = 1573; expression();
			State = 1574; Match(T__17);
			State = 1575; expression();
			State = 1576; Match(T__17);
			State = 1577; expression();
			State = 1578; Match(T__17);
			State = 1579; expression();
			State = 1580; Match(T__17);
			State = 1581; expression();
			State = 1582; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RayCastHitPlayerExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RayCastHitPlayerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rayCastHitPlayerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRayCastHitPlayerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRayCastHitPlayerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRayCastHitPlayerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RayCastHitPlayerExpressionContext rayCastHitPlayerExpression() {
		RayCastHitPlayerExpressionContext _localctx = new RayCastHitPlayerExpressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_rayCastHitPlayerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584; Match(T__162);
			State = 1585; Match(T__1);
			State = 1586; expression();
			State = 1587; Match(T__17);
			State = 1588; expression();
			State = 1589; Match(T__17);
			State = 1590; expression();
			State = 1591; Match(T__17);
			State = 1592; expression();
			State = 1593; Match(T__17);
			State = 1594; expression();
			State = 1595; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RayCastHitPositionExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RayCastHitPositionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rayCastHitPositionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRayCastHitPositionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRayCastHitPositionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRayCastHitPositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RayCastHitPositionExpressionContext rayCastHitPositionExpression() {
		RayCastHitPositionExpressionContext _localctx = new RayCastHitPositionExpressionContext(Context, State);
		EnterRule(_localctx, 324, RULE_rayCastHitPositionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597; Match(T__163);
			State = 1598; Match(T__1);
			State = 1599; expression();
			State = 1600; Match(T__17);
			State = 1601; expression();
			State = 1602; Match(T__17);
			State = 1603; expression();
			State = 1604; Match(T__17);
			State = 1605; expression();
			State = 1606; Match(T__17);
			State = 1607; expression();
			State = 1608; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveFromArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RemoveFromArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeFromArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRemoveFromArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRemoveFromArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveFromArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveFromArrayExpressionContext removeFromArrayExpression() {
		RemoveFromArrayExpressionContext _localctx = new RemoveFromArrayExpressionContext(Context, State);
		EnterRule(_localctx, 326, RULE_removeFromArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; Match(T__164);
			State = 1611; Match(T__1);
			State = 1612; expression();
			State = 1613; Match(T__17);
			State = 1614; expression();
			State = 1615; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightExpressionContext : ParserRuleContext {
		public RightExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRightExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRightExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightExpressionContext rightExpression() {
		RightExpressionContext _localctx = new RightExpressionContext(Context, State);
		EnterRule(_localctx, 328, RULE_rightExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617; Match(T__165);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundToIntegerExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RoundingDirectionContext roundingDirection() {
			return GetRuleContext<RoundingDirectionContext>(0);
		}
		public RoundToIntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundToIntegerExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoundToIntegerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoundToIntegerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundToIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoundToIntegerExpressionContext roundToIntegerExpression() {
		RoundToIntegerExpressionContext _localctx = new RoundToIntegerExpressionContext(Context, State);
		EnterRule(_localctx, 330, RULE_roundToIntegerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619; Match(T__166);
			State = 1620; Match(T__1);
			State = 1621; expression();
			State = 1622; Match(T__17);
			State = 1623; roundingDirection();
			State = 1624; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScoreOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoreOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterScoreOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitScoreOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScoreOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScoreOfExpressionContext scoreOfExpression() {
		ScoreOfExpressionContext _localctx = new ScoreOfExpressionContext(Context, State);
		EnterRule(_localctx, 332, RULE_scoreOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626; Match(T__167);
			State = 1627; Match(T__1);
			State = 1628; expression();
			State = 1629; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SineFromDegreesExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SineFromDegreesExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sineFromDegreesExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSineFromDegreesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSineFromDegreesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSineFromDegreesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SineFromDegreesExpressionContext sineFromDegreesExpression() {
		SineFromDegreesExpressionContext _localctx = new SineFromDegreesExpressionContext(Context, State);
		EnterRule(_localctx, 334, RULE_sineFromDegreesExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631; Match(T__168);
			State = 1632; Match(T__1);
			State = 1633; expression();
			State = 1634; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SineFromRadiansExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SineFromRadiansExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sineFromRadiansExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSineFromRadiansExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSineFromRadiansExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSineFromRadiansExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SineFromRadiansExpressionContext sineFromRadiansExpression() {
		SineFromRadiansExpressionContext _localctx = new SineFromRadiansExpressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_sineFromRadiansExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1636; Match(T__169);
			State = 1637; Match(T__1);
			State = 1638; expression();
			State = 1639; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlotOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SlotOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slotOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSlotOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSlotOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlotOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlotOfExpressionContext slotOfExpression() {
		SlotOfExpressionContext _localctx = new SlotOfExpressionContext(Context, State);
		EnterRule(_localctx, 338, RULE_slotOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641; Match(T__170);
			State = 1642; Match(T__1);
			State = 1643; expression();
			State = 1644; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortedArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SortedArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortedArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSortedArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSortedArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortedArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortedArrayExpressionContext sortedArrayExpression() {
		SortedArrayExpressionContext _localctx = new SortedArrayExpressionContext(Context, State);
		EnterRule(_localctx, 340, RULE_sortedArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646; Match(T__171);
			State = 1647; Match(T__1);
			State = 1648; expression();
			State = 1649; Match(T__17);
			State = 1650; expression();
			State = 1651; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpeedOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSpeedOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSpeedOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedOfExpressionContext speedOfExpression() {
		SpeedOfExpressionContext _localctx = new SpeedOfExpressionContext(Context, State);
		EnterRule(_localctx, 342, RULE_speedOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(T__172);
			State = 1654; Match(T__1);
			State = 1655; expression();
			State = 1656; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedOfInDirectionExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SpeedOfInDirectionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedOfInDirectionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSpeedOfInDirectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSpeedOfInDirectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedOfInDirectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedOfInDirectionExpressionContext speedOfInDirectionExpression() {
		SpeedOfInDirectionExpressionContext _localctx = new SpeedOfInDirectionExpressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_speedOfInDirectionExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658; Match(T__173);
			State = 1659; Match(T__1);
			State = 1660; expression();
			State = 1661; Match(T__17);
			State = 1662; expression();
			State = 1663; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareRootExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SquareRootExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareRootExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSquareRootExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSquareRootExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareRootExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareRootExpressionContext squareRootExpression() {
		SquareRootExpressionContext _localctx = new SquareRootExpressionContext(Context, State);
		EnterRule(_localctx, 346, RULE_squareRootExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665; Match(T__174);
			State = 1666; Match(T__1);
			State = 1667; expression();
			State = 1668; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(Context, State);
		EnterRule(_localctx, 348, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670; Match(T__175);
			State = 1671; Match(T__1);
			State = 1672; expression();
			State = 1673; Match(T__17);
			State = 1674; expression();
			State = 1675; Match(T__17);
			State = 1676; expression();
			State = 1677; Match(T__17);
			State = 1678; expression();
			State = 1679; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtractExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSubtractExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSubtractExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractExpressionContext subtractExpression() {
		SubtractExpressionContext _localctx = new SubtractExpressionContext(Context, State);
		EnterRule(_localctx, 350, RULE_subtractExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681; Match(T__176);
			State = 1682; Match(T__1);
			State = 1683; expression();
			State = 1684; Match(T__17);
			State = 1685; expression();
			State = 1686; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TeamOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeamOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeamOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeamOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamOfExpressionContext teamOfExpression() {
		TeamOfExpressionContext _localctx = new TeamOfExpressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_teamOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688; Match(T__177);
			State = 1689; Match(T__1);
			State = 1690; expression();
			State = 1691; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamScoreExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TeamScoreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamScoreExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeamScoreExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeamScoreExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeamScoreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamScoreExpressionContext teamScoreExpression() {
		TeamScoreExpressionContext _localctx = new TeamScoreExpressionContext(Context, State);
		EnterRule(_localctx, 354, RULE_teamScoreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1693; Match(T__178);
			State = 1694; Match(T__1);
			State = 1695; expression();
			State = 1696; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrottleOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrottleOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throttleOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterThrottleOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitThrottleOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrottleOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrottleOfExpressionContext throttleOfExpression() {
		ThrottleOfExpressionContext _localctx = new ThrottleOfExpressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_throttleOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; Match(T__179);
			State = 1699; Match(T__1);
			State = 1700; expression();
			State = 1701; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalTimeElapsedExpressionContext : ParserRuleContext {
		public TotalTimeElapsedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalTimeElapsedExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTotalTimeElapsedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTotalTimeElapsedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalTimeElapsedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalTimeElapsedExpressionContext totalTimeElapsedExpression() {
		TotalTimeElapsedExpressionContext _localctx = new TotalTimeElapsedExpressionContext(Context, State);
		EnterRule(_localctx, 358, RULE_totalTimeElapsedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1703; Match(T__180);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UltimateChargePercentExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UltimateChargePercentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ultimateChargePercentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUltimateChargePercentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUltimateChargePercentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUltimateChargePercentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UltimateChargePercentExpressionContext ultimateChargePercentExpression() {
		UltimateChargePercentExpressionContext _localctx = new UltimateChargePercentExpressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_ultimateChargePercentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705; Match(T__181);
			State = 1706; Match(T__1);
			State = 1707; expression();
			State = 1708; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpExpressionContext : ParserRuleContext {
		public UpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUpExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpExpressionContext upExpression() {
		UpExpressionContext _localctx = new UpExpressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_upExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710; Match(T__182);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueInArrayExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ValueInArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueInArrayExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterValueInArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitValueInArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueInArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueInArrayExpressionContext valueInArrayExpression() {
		ValueInArrayExpressionContext _localctx = new ValueInArrayExpressionContext(Context, State);
		EnterRule(_localctx, 364, RULE_valueInArrayExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; Match(T__183);
			State = 1713; Match(T__1);
			State = 1714; expression();
			State = 1715; Match(T__17);
			State = 1716; expression();
			State = 1717; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorTowardsExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorTowardsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorTowardsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVectorTowardsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVectorTowardsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorTowardsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorTowardsExpressionContext vectorTowardsExpression() {
		VectorTowardsExpressionContext _localctx = new VectorTowardsExpressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_vectorTowardsExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719; Match(T__184);
			State = 1720; Match(T__1);
			State = 1721; expression();
			State = 1722; Match(T__17);
			State = 1723; expression();
			State = 1724; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerticalFacingAngleOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VerticalFacingAngleOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verticalFacingAngleOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVerticalFacingAngleOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVerticalFacingAngleOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerticalFacingAngleOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerticalFacingAngleOfExpressionContext verticalFacingAngleOfExpression() {
		VerticalFacingAngleOfExpressionContext _localctx = new VerticalFacingAngleOfExpressionContext(Context, State);
		EnterRule(_localctx, 368, RULE_verticalFacingAngleOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726; Match(T__185);
			State = 1727; Match(T__1);
			State = 1728; expression();
			State = 1729; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerticalSpeedOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VerticalSpeedOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verticalSpeedOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVerticalSpeedOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVerticalSpeedOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerticalSpeedOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerticalSpeedOfExpressionContext verticalSpeedOfExpression() {
		VerticalSpeedOfExpressionContext _localctx = new VerticalSpeedOfExpressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_verticalSpeedOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1731; Match(T__186);
			State = 1732; Match(T__1);
			State = 1733; expression();
			State = 1734; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VictimExpressionContext : ParserRuleContext {
		public VictimExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_victimExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVictimExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVictimExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVictimExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VictimExpressionContext victimExpression() {
		VictimExpressionContext _localctx = new VictimExpressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_victimExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736; Match(T__187);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorldVectorOfExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorTransformationTypeContext vectorTransformationType() {
			return GetRuleContext<VectorTransformationTypeContext>(0);
		}
		public WorldVectorOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worldVectorOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWorldVectorOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWorldVectorOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorldVectorOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorldVectorOfExpressionContext worldVectorOfExpression() {
		WorldVectorOfExpressionContext _localctx = new WorldVectorOfExpressionContext(Context, State);
		EnterRule(_localctx, 374, RULE_worldVectorOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738; Match(T__188);
			State = 1739; Match(T__1);
			State = 1740; expression();
			State = 1741; Match(T__17);
			State = 1742; expression();
			State = 1743; Match(T__17);
			State = 1744; vectorTransformationType();
			State = 1745; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XComponentOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XComponentOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xComponentOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterXComponentOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitXComponentOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXComponentOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XComponentOfExpressionContext xComponentOfExpression() {
		XComponentOfExpressionContext _localctx = new XComponentOfExpressionContext(Context, State);
		EnterRule(_localctx, 376, RULE_xComponentOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1747; Match(T__189);
			State = 1748; Match(T__1);
			State = 1749; expression();
			State = 1750; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YComponentOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YComponentOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yComponentOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterYComponentOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitYComponentOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYComponentOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YComponentOfExpressionContext yComponentOfExpression() {
		YComponentOfExpressionContext _localctx = new YComponentOfExpressionContext(Context, State);
		EnterRule(_localctx, 378, RULE_yComponentOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752; Match(T__190);
			State = 1753; Match(T__1);
			State = 1754; expression();
			State = 1755; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZComponentOfExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ZComponentOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zComponentOfExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterZComponentOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitZComponentOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZComponentOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZComponentOfExpressionContext zComponentOfExpression() {
		ZComponentOfExpressionContext _localctx = new ZComponentOfExpressionContext(Context, State);
		EnterRule(_localctx, 380, RULE_zComponentOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1757; Match(T__191);
			State = 1758; Match(T__1);
			State = 1759; expression();
			State = 1760; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(OverwatchCodeParser.ALL, 0); }
		public ITerminalNode ALL_TEAMS() { return GetToken(OverwatchCodeParser.ALL_TEAMS, 0); }
		public ITerminalNode TEAM() { return GetToken(OverwatchCodeParser.TEAM, 0); }
		public ITerminalNode INTEGER() { return GetToken(OverwatchCodeParser.INTEGER, 0); }
		public TeamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTeam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTeam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamContext team() {
		TeamContext _localctx = new TeamContext(Context, State);
		EnterRule(_localctx, 382, RULE_team);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 1762; Match(ALL);
				}
				break;
			case ALL_TEAMS:
				{
				State = 1763; Match(ALL_TEAMS);
				}
				break;
			case TEAM:
				{
				State = 1764; Match(TEAM);
				State = 1765; Match(INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerConstantContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(OverwatchCodeParser.ALL, 0); }
		public ITerminalNode SLOT() { return GetToken(OverwatchCodeParser.SLOT, 0); }
		public ITerminalNode INTEGER() { return GetToken(OverwatchCodeParser.INTEGER, 0); }
		public HeroTypeContext heroType() {
			return GetRuleContext<HeroTypeContext>(0);
		}
		public PlayerConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerConstantContext playerConstant() {
		PlayerConstantContext _localctx = new PlayerConstantContext(Context, State);
		EnterRule(_localctx, 384, RULE_playerConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 1768; Match(ALL);
				}
				break;
			case SLOT:
				{
				State = 1769; Match(SLOT);
				State = 1770; Match(INTEGER);
				}
				break;
			case T__192:
			case T__193:
			case T__194:
			case T__195:
			case T__196:
			case T__197:
			case T__198:
			case T__199:
			case T__200:
			case T__201:
			case T__202:
			case T__203:
			case T__204:
			case T__205:
			case T__206:
			case T__207:
			case T__208:
			case T__209:
			case T__210:
			case T__211:
			case T__212:
			case T__213:
			case T__214:
			case T__215:
			case T__216:
			case T__217:
			case T__218:
			case T__219:
			case T__220:
			case T__221:
				{
				State = 1771; heroType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(OverwatchCodeParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(OverwatchCodeParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(OverwatchCodeParser.STRING, 0); }
		public ITerminalNode NULL() { return GetToken(OverwatchCodeParser.NULL, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(OverwatchCodeParser.BOOLEAN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 386, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (INTEGER - 273)) | (1L << (STRING - 273)) | (1L << (FLOAT - 273)) | (1L << (NULL - 273)) | (1L << (BOOLEAN - 273)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(OverwatchCodeParser.LETTER, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 388, RULE_globalVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerVariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(OverwatchCodeParser.LETTER, 0); }
		public PlayerVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPlayerVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPlayerVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerVariableContext playerVariable() {
		PlayerVariableContext _localctx = new PlayerVariableContext(Context, State);
		EnterRule(_localctx, 390, RULE_playerVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1778; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroTypeContext : ParserRuleContext {
		public ReaperContext reaper() {
			return GetRuleContext<ReaperContext>(0);
		}
		public TracerContext tracer() {
			return GetRuleContext<TracerContext>(0);
		}
		public MercyContext mercy() {
			return GetRuleContext<MercyContext>(0);
		}
		public HanzoContext hanzo() {
			return GetRuleContext<HanzoContext>(0);
		}
		public TorbjornContext torbjorn() {
			return GetRuleContext<TorbjornContext>(0);
		}
		public ReinhardtContext reinhardt() {
			return GetRuleContext<ReinhardtContext>(0);
		}
		public PharahContext pharah() {
			return GetRuleContext<PharahContext>(0);
		}
		public WinstonContext winston() {
			return GetRuleContext<WinstonContext>(0);
		}
		public WidowmakerContext widowmaker() {
			return GetRuleContext<WidowmakerContext>(0);
		}
		public BastionContext bastion() {
			return GetRuleContext<BastionContext>(0);
		}
		public SymmetraContext symmetra() {
			return GetRuleContext<SymmetraContext>(0);
		}
		public ZenyattaContext zenyatta() {
			return GetRuleContext<ZenyattaContext>(0);
		}
		public GenjiContext genji() {
			return GetRuleContext<GenjiContext>(0);
		}
		public RoadhogContext roadhog() {
			return GetRuleContext<RoadhogContext>(0);
		}
		public McCreeContext mcCree() {
			return GetRuleContext<McCreeContext>(0);
		}
		public JunkratContext junkrat() {
			return GetRuleContext<JunkratContext>(0);
		}
		public ZaryaContext zarya() {
			return GetRuleContext<ZaryaContext>(0);
		}
		public Soldier76Context soldier76() {
			return GetRuleContext<Soldier76Context>(0);
		}
		public LucioContext lucio() {
			return GetRuleContext<LucioContext>(0);
		}
		public DvaContext dva() {
			return GetRuleContext<DvaContext>(0);
		}
		public MeiContext mei() {
			return GetRuleContext<MeiContext>(0);
		}
		public SombraContext sombra() {
			return GetRuleContext<SombraContext>(0);
		}
		public DoomfistContext doomfist() {
			return GetRuleContext<DoomfistContext>(0);
		}
		public AnaContext ana() {
			return GetRuleContext<AnaContext>(0);
		}
		public OrisaContext orisa() {
			return GetRuleContext<OrisaContext>(0);
		}
		public BrigitteContext brigitte() {
			return GetRuleContext<BrigitteContext>(0);
		}
		public MoiraContext moira() {
			return GetRuleContext<MoiraContext>(0);
		}
		public WreckingBallContext wreckingBall() {
			return GetRuleContext<WreckingBallContext>(0);
		}
		public AsheContext ashe() {
			return GetRuleContext<AsheContext>(0);
		}
		public BaptisteContext baptiste() {
			return GetRuleContext<BaptisteContext>(0);
		}
		public HeroTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heroType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHeroType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHeroType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeroType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeroTypeContext heroType() {
		HeroTypeContext _localctx = new HeroTypeContext(Context, State);
		EnterRule(_localctx, 392, RULE_heroType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__192:
				{
				State = 1780; reaper();
				}
				break;
			case T__193:
				{
				State = 1781; tracer();
				}
				break;
			case T__194:
				{
				State = 1782; mercy();
				}
				break;
			case T__195:
				{
				State = 1783; hanzo();
				}
				break;
			case T__196:
				{
				State = 1784; torbjorn();
				}
				break;
			case T__197:
				{
				State = 1785; reinhardt();
				}
				break;
			case T__198:
				{
				State = 1786; pharah();
				}
				break;
			case T__199:
				{
				State = 1787; winston();
				}
				break;
			case T__200:
				{
				State = 1788; widowmaker();
				}
				break;
			case T__201:
				{
				State = 1789; bastion();
				}
				break;
			case T__202:
				{
				State = 1790; symmetra();
				}
				break;
			case T__203:
				{
				State = 1791; zenyatta();
				}
				break;
			case T__204:
				{
				State = 1792; genji();
				}
				break;
			case T__205:
				{
				State = 1793; roadhog();
				}
				break;
			case T__206:
				{
				State = 1794; mcCree();
				}
				break;
			case T__207:
				{
				State = 1795; junkrat();
				}
				break;
			case T__208:
				{
				State = 1796; zarya();
				}
				break;
			case T__209:
				{
				State = 1797; soldier76();
				}
				break;
			case T__210:
				{
				State = 1798; lucio();
				}
				break;
			case T__211:
				{
				State = 1799; dva();
				}
				break;
			case T__212:
				{
				State = 1800; mei();
				}
				break;
			case T__213:
				{
				State = 1801; sombra();
				}
				break;
			case T__214:
				{
				State = 1802; doomfist();
				}
				break;
			case T__215:
				{
				State = 1803; ana();
				}
				break;
			case T__216:
				{
				State = 1804; orisa();
				}
				break;
			case T__217:
				{
				State = 1805; brigitte();
				}
				break;
			case T__218:
				{
				State = 1806; moira();
				}
				break;
			case T__219:
				{
				State = 1807; wreckingBall();
				}
				break;
			case T__220:
				{
				State = 1808; ashe();
				}
				break;
			case T__221:
				{
				State = 1809; baptiste();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReaperContext : ParserRuleContext {
		public ReaperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reaper; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterReaper(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitReaper(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReaper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReaperContext reaper() {
		ReaperContext _localctx = new ReaperContext(Context, State);
		EnterRule(_localctx, 394, RULE_reaper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812; Match(T__192);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TracerContext : ParserRuleContext {
		public TracerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tracer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTracer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTracer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTracer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TracerContext tracer() {
		TracerContext _localctx = new TracerContext(Context, State);
		EnterRule(_localctx, 396, RULE_tracer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814; Match(T__193);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MercyContext : ParserRuleContext {
		public MercyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mercy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMercy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMercy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMercy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MercyContext mercy() {
		MercyContext _localctx = new MercyContext(Context, State);
		EnterRule(_localctx, 398, RULE_mercy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816; Match(T__194);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HanzoContext : ParserRuleContext {
		public HanzoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hanzo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHanzo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHanzo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHanzo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HanzoContext hanzo() {
		HanzoContext _localctx = new HanzoContext(Context, State);
		EnterRule(_localctx, 400, RULE_hanzo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1818; Match(T__195);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TorbjornContext : ParserRuleContext {
		public TorbjornContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_torbjorn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterTorbjorn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitTorbjorn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTorbjorn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TorbjornContext torbjorn() {
		TorbjornContext _localctx = new TorbjornContext(Context, State);
		EnterRule(_localctx, 402, RULE_torbjorn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820; Match(T__196);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReinhardtContext : ParserRuleContext {
		public ReinhardtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reinhardt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterReinhardt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitReinhardt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReinhardt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReinhardtContext reinhardt() {
		ReinhardtContext _localctx = new ReinhardtContext(Context, State);
		EnterRule(_localctx, 404, RULE_reinhardt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822; Match(T__197);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PharahContext : ParserRuleContext {
		public PharahContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pharah; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPharah(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPharah(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPharah(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PharahContext pharah() {
		PharahContext _localctx = new PharahContext(Context, State);
		EnterRule(_localctx, 406, RULE_pharah);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824; Match(T__198);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WinstonContext : ParserRuleContext {
		public WinstonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_winston; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWinston(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWinston(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWinston(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WinstonContext winston() {
		WinstonContext _localctx = new WinstonContext(Context, State);
		EnterRule(_localctx, 408, RULE_winston);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1826; Match(T__199);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidowmakerContext : ParserRuleContext {
		public WidowmakerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widowmaker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWidowmaker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWidowmaker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidowmaker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidowmakerContext widowmaker() {
		WidowmakerContext _localctx = new WidowmakerContext(Context, State);
		EnterRule(_localctx, 410, RULE_widowmaker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828; Match(T__200);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BastionContext : ParserRuleContext {
		public BastionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bastion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBastion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBastion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBastion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BastionContext bastion() {
		BastionContext _localctx = new BastionContext(Context, State);
		EnterRule(_localctx, 412, RULE_bastion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830; Match(T__201);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymmetraContext : ParserRuleContext {
		public SymmetraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symmetra; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSymmetra(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSymmetra(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymmetra(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymmetraContext symmetra() {
		SymmetraContext _localctx = new SymmetraContext(Context, State);
		EnterRule(_localctx, 414, RULE_symmetra);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832; Match(T__202);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZenyattaContext : ParserRuleContext {
		public ZenyattaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zenyatta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterZenyatta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitZenyatta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZenyatta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZenyattaContext zenyatta() {
		ZenyattaContext _localctx = new ZenyattaContext(Context, State);
		EnterRule(_localctx, 416, RULE_zenyatta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834; Match(T__203);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenjiContext : ParserRuleContext {
		public GenjiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genji; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGenji(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGenji(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenji(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenjiContext genji() {
		GenjiContext _localctx = new GenjiContext(Context, State);
		EnterRule(_localctx, 418, RULE_genji);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836; Match(T__204);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoadhogContext : ParserRuleContext {
		public RoadhogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roadhog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoadhog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoadhog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoadhog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoadhogContext roadhog() {
		RoadhogContext _localctx = new RoadhogContext(Context, State);
		EnterRule(_localctx, 420, RULE_roadhog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1838; Match(T__205);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class McCreeContext : ParserRuleContext {
		public McCreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mcCree; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMcCree(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMcCree(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMcCree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public McCreeContext mcCree() {
		McCreeContext _localctx = new McCreeContext(Context, State);
		EnterRule(_localctx, 422, RULE_mcCree);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840; Match(T__206);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JunkratContext : ParserRuleContext {
		public JunkratContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_junkrat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterJunkrat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitJunkrat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJunkrat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JunkratContext junkrat() {
		JunkratContext _localctx = new JunkratContext(Context, State);
		EnterRule(_localctx, 424, RULE_junkrat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842; Match(T__207);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZaryaContext : ParserRuleContext {
		public ZaryaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zarya; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterZarya(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitZarya(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZarya(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZaryaContext zarya() {
		ZaryaContext _localctx = new ZaryaContext(Context, State);
		EnterRule(_localctx, 426, RULE_zarya);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844; Match(T__208);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Soldier76Context : ParserRuleContext {
		public Soldier76Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soldier76; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSoldier76(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSoldier76(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoldier76(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Soldier76Context soldier76() {
		Soldier76Context _localctx = new Soldier76Context(Context, State);
		EnterRule(_localctx, 428, RULE_soldier76);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846; Match(T__209);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LucioContext : ParserRuleContext {
		public LucioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lucio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLucio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLucio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLucio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LucioContext lucio() {
		LucioContext _localctx = new LucioContext(Context, State);
		EnterRule(_localctx, 430, RULE_lucio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1848; Match(T__210);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DvaContext : ParserRuleContext {
		public DvaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DvaContext dva() {
		DvaContext _localctx = new DvaContext(Context, State);
		EnterRule(_localctx, 432, RULE_dva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850; Match(T__211);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeiContext : ParserRuleContext {
		public MeiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mei; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMei(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMei(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMei(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeiContext mei() {
		MeiContext _localctx = new MeiContext(Context, State);
		EnterRule(_localctx, 434, RULE_mei);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852; Match(T__212);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SombraContext : ParserRuleContext {
		public SombraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sombra; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSombra(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSombra(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSombra(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SombraContext sombra() {
		SombraContext _localctx = new SombraContext(Context, State);
		EnterRule(_localctx, 436, RULE_sombra);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854; Match(T__213);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoomfistContext : ParserRuleContext {
		public DoomfistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doomfist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDoomfist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDoomfist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoomfist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoomfistContext doomfist() {
		DoomfistContext _localctx = new DoomfistContext(Context, State);
		EnterRule(_localctx, 438, RULE_doomfist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856; Match(T__214);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnaContext : ParserRuleContext {
		public AnaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ana; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAna(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAna(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAna(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnaContext ana() {
		AnaContext _localctx = new AnaContext(Context, State);
		EnterRule(_localctx, 440, RULE_ana);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858; Match(T__215);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrisaContext : ParserRuleContext {
		public OrisaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orisa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOrisa(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOrisa(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrisa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrisaContext orisa() {
		OrisaContext _localctx = new OrisaContext(Context, State);
		EnterRule(_localctx, 442, RULE_orisa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860; Match(T__216);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrigitteContext : ParserRuleContext {
		public BrigitteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brigitte; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBrigitte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBrigitte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrigitte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrigitteContext brigitte() {
		BrigitteContext _localctx = new BrigitteContext(Context, State);
		EnterRule(_localctx, 444, RULE_brigitte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862; Match(T__217);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoiraContext : ParserRuleContext {
		public MoiraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moira; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterMoira(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitMoira(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoira(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoiraContext moira() {
		MoiraContext _localctx = new MoiraContext(Context, State);
		EnterRule(_localctx, 446, RULE_moira);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1864; Match(T__218);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WreckingBallContext : ParserRuleContext {
		public WreckingBallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wreckingBall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterWreckingBall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitWreckingBall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWreckingBall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WreckingBallContext wreckingBall() {
		WreckingBallContext _localctx = new WreckingBallContext(Context, State);
		EnterRule(_localctx, 448, RULE_wreckingBall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; Match(T__219);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsheContext : ParserRuleContext {
		public AsheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ashe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAshe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAshe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAshe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsheContext ashe() {
		AsheContext _localctx = new AsheContext(Context, State);
		EnterRule(_localctx, 450, RULE_ashe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868; Match(T__220);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaptisteContext : ParserRuleContext {
		public BaptisteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baptiste; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBaptiste(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBaptiste(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaptiste(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaptisteContext baptiste() {
		BaptisteContext _localctx = new BaptisteContext(Context, State);
		EnterRule(_localctx, 452, RULE_baptiste);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1870; Match(T__221);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusContext : ParserRuleContext {
		public HackedContext hacked() {
			return GetRuleContext<HackedContext>(0);
		}
		public BurningContext burning() {
			return GetRuleContext<BurningContext>(0);
		}
		public KnockedDownContext knockedDown() {
			return GetRuleContext<KnockedDownContext>(0);
		}
		public AsleepContext asleep() {
			return GetRuleContext<AsleepContext>(0);
		}
		public FrozenContext frozen() {
			return GetRuleContext<FrozenContext>(0);
		}
		public UnkillableContext unkillable() {
			return GetRuleContext<UnkillableContext>(0);
		}
		public InvincibleContext invincible() {
			return GetRuleContext<InvincibleContext>(0);
		}
		public PhasedOutContext phasedOut() {
			return GetRuleContext<PhasedOutContext>(0);
		}
		public RootedContext rooted() {
			return GetRuleContext<RootedContext>(0);
		}
		public StunnedContext stunned() {
			return GetRuleContext<StunnedContext>(0);
		}
		public StatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_status; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterStatus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitStatus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusContext status() {
		StatusContext _localctx = new StatusContext(Context, State);
		EnterRule(_localctx, 454, RULE_status);
		try {
			State = 1882;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__222:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1872; hacked();
				}
				break;
			case T__223:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1873; burning();
				}
				break;
			case T__224:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1874; knockedDown();
				}
				break;
			case T__225:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1875; asleep();
				}
				break;
			case T__226:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1876; frozen();
				}
				break;
			case T__227:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1877; unkillable();
				}
				break;
			case T__228:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1878; invincible();
				}
				break;
			case T__229:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1879; phasedOut();
				}
				break;
			case T__230:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1880; rooted();
				}
				break;
			case T__231:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1881; stunned();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HackedContext : ParserRuleContext {
		public HackedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hacked; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHacked(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHacked(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHacked(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HackedContext hacked() {
		HackedContext _localctx = new HackedContext(Context, State);
		EnterRule(_localctx, 456, RULE_hacked);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884; Match(T__222);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BurningContext : ParserRuleContext {
		public BurningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_burning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBurning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBurning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBurning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BurningContext burning() {
		BurningContext _localctx = new BurningContext(Context, State);
		EnterRule(_localctx, 458, RULE_burning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1886; Match(T__223);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KnockedDownContext : ParserRuleContext {
		public KnockedDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_knockedDown; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterKnockedDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitKnockedDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnockedDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KnockedDownContext knockedDown() {
		KnockedDownContext _localctx = new KnockedDownContext(Context, State);
		EnterRule(_localctx, 460, RULE_knockedDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888; Match(T__224);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsleepContext : ParserRuleContext {
		public AsleepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asleep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAsleep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAsleep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsleep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsleepContext asleep() {
		AsleepContext _localctx = new AsleepContext(Context, State);
		EnterRule(_localctx, 462, RULE_asleep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1890; Match(T__225);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrozenContext : ParserRuleContext {
		public FrozenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frozen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterFrozen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitFrozen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrozen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrozenContext frozen() {
		FrozenContext _localctx = new FrozenContext(Context, State);
		EnterRule(_localctx, 464, RULE_frozen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892; Match(T__226);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnkillableContext : ParserRuleContext {
		public UnkillableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unkillable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUnkillable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUnkillable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnkillable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnkillableContext unkillable() {
		UnkillableContext _localctx = new UnkillableContext(Context, State);
		EnterRule(_localctx, 466, RULE_unkillable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; Match(T__227);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvincibleContext : ParserRuleContext {
		public InvincibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invincible; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterInvincible(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitInvincible(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvincible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvincibleContext invincible() {
		InvincibleContext _localctx = new InvincibleContext(Context, State);
		EnterRule(_localctx, 468, RULE_invincible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896; Match(T__228);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhasedOutContext : ParserRuleContext {
		public PhasedOutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phasedOut; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPhasedOut(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPhasedOut(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhasedOut(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhasedOutContext phasedOut() {
		PhasedOutContext _localctx = new PhasedOutContext(Context, State);
		EnterRule(_localctx, 470, RULE_phasedOut);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898; Match(T__229);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootedContext : ParserRuleContext {
		public RootedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rooted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRooted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRooted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRooted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootedContext rooted() {
		RootedContext _localctx = new RootedContext(Context, State);
		EnterRule(_localctx, 472, RULE_rooted);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1900; Match(T__230);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StunnedContext : ParserRuleContext {
		public StunnedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stunned; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterStunned(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitStunned(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStunned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StunnedContext stunned() {
		StunnedContext _localctx = new StunnedContext(Context, State);
		EnterRule(_localctx, 474, RULE_stunned);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902; Match(T__231);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ButtonContext : ParserRuleContext {
		public PrimaryFireContext primaryFire() {
			return GetRuleContext<PrimaryFireContext>(0);
		}
		public SecondaryFireContext secondaryFire() {
			return GetRuleContext<SecondaryFireContext>(0);
		}
		public Ability1Context ability1() {
			return GetRuleContext<Ability1Context>(0);
		}
		public Ability2Context ability2() {
			return GetRuleContext<Ability2Context>(0);
		}
		public UltimateContext ultimate() {
			return GetRuleContext<UltimateContext>(0);
		}
		public InteractContext interact() {
			return GetRuleContext<InteractContext>(0);
		}
		public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		public CrouchContext crouch() {
			return GetRuleContext<CrouchContext>(0);
		}
		public ButtonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_button; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterButton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitButton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitButton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ButtonContext button() {
		ButtonContext _localctx = new ButtonContext(Context, State);
		EnterRule(_localctx, 476, RULE_button);
		try {
			State = 1912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__232:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1904; primaryFire();
				}
				break;
			case T__233:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1905; secondaryFire();
				}
				break;
			case T__234:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1906; ability1();
				}
				break;
			case T__235:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1907; ability2();
				}
				break;
			case T__236:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1908; ultimate();
				}
				break;
			case T__237:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1909; interact();
				}
				break;
			case T__238:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1910; jump();
				}
				break;
			case T__239:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1911; crouch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryFireContext : ParserRuleContext {
		public PrimaryFireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryFire; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterPrimaryFire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitPrimaryFire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryFire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryFireContext primaryFire() {
		PrimaryFireContext _localctx = new PrimaryFireContext(Context, State);
		EnterRule(_localctx, 478, RULE_primaryFire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914; Match(T__232);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondaryFireContext : ParserRuleContext {
		public SecondaryFireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondaryFire; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSecondaryFire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSecondaryFire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondaryFire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondaryFireContext secondaryFire() {
		SecondaryFireContext _localctx = new SecondaryFireContext(Context, State);
		EnterRule(_localctx, 480, RULE_secondaryFire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1916; Match(T__233);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ability1Context : ParserRuleContext {
		public Ability1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ability1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbility1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbility1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbility1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ability1Context ability1() {
		Ability1Context _localctx = new Ability1Context(Context, State);
		EnterRule(_localctx, 482, RULE_ability1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918; Match(T__234);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ability2Context : ParserRuleContext {
		public Ability2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ability2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAbility2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAbility2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbility2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ability2Context ability2() {
		Ability2Context _localctx = new Ability2Context(Context, State);
		EnterRule(_localctx, 484, RULE_ability2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1920; Match(T__235);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UltimateContext : ParserRuleContext {
		public UltimateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ultimate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUltimate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUltimate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUltimate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UltimateContext ultimate() {
		UltimateContext _localctx = new UltimateContext(Context, State);
		EnterRule(_localctx, 486, RULE_ultimate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1922; Match(T__236);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractContext : ParserRuleContext {
		public InteractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterInteract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitInteract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteractContext interact() {
		InteractContext _localctx = new InteractContext(Context, State);
		EnterRule(_localctx, 488, RULE_interact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1924; Match(T__237);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 490, RULE_jump);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926; Match(T__238);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrouchContext : ParserRuleContext {
		public CrouchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crouch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCrouch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCrouch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrouch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrouchContext crouch() {
		CrouchContext _localctx = new CrouchContext(Context, State);
		EnterRule(_localctx, 492, RULE_crouch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928; Match(T__239);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommunicationTypeContext : ParserRuleContext {
		public VoiceLineUpContext voiceLineUp() {
			return GetRuleContext<VoiceLineUpContext>(0);
		}
		public VoiceLineLeftContext voiceLineLeft() {
			return GetRuleContext<VoiceLineLeftContext>(0);
		}
		public VoiceLineRightContext voiceLineRight() {
			return GetRuleContext<VoiceLineRightContext>(0);
		}
		public VoiceLineDownContext voiceLineDown() {
			return GetRuleContext<VoiceLineDownContext>(0);
		}
		public EmoteUpContext emoteUp() {
			return GetRuleContext<EmoteUpContext>(0);
		}
		public EmoteLeftContext emoteLeft() {
			return GetRuleContext<EmoteLeftContext>(0);
		}
		public EmoteRightContext emoteRight() {
			return GetRuleContext<EmoteRightContext>(0);
		}
		public EmoteDownContext emoteDown() {
			return GetRuleContext<EmoteDownContext>(0);
		}
		public UltimateStatusContext ultimateStatus() {
			return GetRuleContext<UltimateStatusContext>(0);
		}
		public HelloContext hello() {
			return GetRuleContext<HelloContext>(0);
		}
		public NeedHealingContext needHealing() {
			return GetRuleContext<NeedHealingContext>(0);
		}
		public GroupUpContext groupUp() {
			return GetRuleContext<GroupUpContext>(0);
		}
		public ThanksContext thanks() {
			return GetRuleContext<ThanksContext>(0);
		}
		public AcknowledgeContext acknowledge() {
			return GetRuleContext<AcknowledgeContext>(0);
		}
		public CommunicationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_communicationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterCommunicationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitCommunicationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommunicationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommunicationTypeContext communicationType() {
		CommunicationTypeContext _localctx = new CommunicationTypeContext(Context, State);
		EnterRule(_localctx, 494, RULE_communicationType);
		try {
			State = 1944;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__240:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1930; voiceLineUp();
				}
				break;
			case T__241:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1931; voiceLineLeft();
				}
				break;
			case T__242:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1932; voiceLineRight();
				}
				break;
			case T__243:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1933; voiceLineDown();
				}
				break;
			case T__244:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1934; emoteUp();
				}
				break;
			case T__245:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1935; emoteLeft();
				}
				break;
			case T__246:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1936; emoteRight();
				}
				break;
			case T__247:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1937; emoteDown();
				}
				break;
			case T__248:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1938; ultimateStatus();
				}
				break;
			case T__249:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1939; hello();
				}
				break;
			case T__250:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1940; needHealing();
				}
				break;
			case T__251:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1941; groupUp();
				}
				break;
			case T__252:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1942; thanks();
				}
				break;
			case T__253:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1943; acknowledge();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineUpContext : ParserRuleContext {
		public VoiceLineUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineUp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineUpContext voiceLineUp() {
		VoiceLineUpContext _localctx = new VoiceLineUpContext(Context, State);
		EnterRule(_localctx, 496, RULE_voiceLineUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946; Match(T__240);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineLeftContext : ParserRuleContext {
		public VoiceLineLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineLeft; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineLeft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineLeft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineLeftContext voiceLineLeft() {
		VoiceLineLeftContext _localctx = new VoiceLineLeftContext(Context, State);
		EnterRule(_localctx, 498, RULE_voiceLineLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1948; Match(T__241);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineRightContext : ParserRuleContext {
		public VoiceLineRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineRight; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineRight(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineRight(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineRightContext voiceLineRight() {
		VoiceLineRightContext _localctx = new VoiceLineRightContext(Context, State);
		EnterRule(_localctx, 500, RULE_voiceLineRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1950; Match(T__242);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLineDownContext : ParserRuleContext {
		public VoiceLineDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLineDown; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVoiceLineDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVoiceLineDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLineDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLineDownContext voiceLineDown() {
		VoiceLineDownContext _localctx = new VoiceLineDownContext(Context, State);
		EnterRule(_localctx, 502, RULE_voiceLineDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952; Match(T__243);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteUpContext : ParserRuleContext {
		public EmoteUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteUp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteUpContext emoteUp() {
		EmoteUpContext _localctx = new EmoteUpContext(Context, State);
		EnterRule(_localctx, 504, RULE_emoteUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1954; Match(T__244);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteLeftContext : ParserRuleContext {
		public EmoteLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteLeft; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteLeft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteLeft(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteLeftContext emoteLeft() {
		EmoteLeftContext _localctx = new EmoteLeftContext(Context, State);
		EnterRule(_localctx, 506, RULE_emoteLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956; Match(T__245);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteRightContext : ParserRuleContext {
		public EmoteRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteRight; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteRight(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteRight(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteRightContext emoteRight() {
		EmoteRightContext _localctx = new EmoteRightContext(Context, State);
		EnterRule(_localctx, 508, RULE_emoteRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958; Match(T__246);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmoteDownContext : ParserRuleContext {
		public EmoteDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emoteDown; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEmoteDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEmoteDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmoteDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmoteDownContext emoteDown() {
		EmoteDownContext _localctx = new EmoteDownContext(Context, State);
		EnterRule(_localctx, 510, RULE_emoteDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1960; Match(T__247);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UltimateStatusContext : ParserRuleContext {
		public UltimateStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ultimateStatus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUltimateStatus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUltimateStatus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUltimateStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UltimateStatusContext ultimateStatus() {
		UltimateStatusContext _localctx = new UltimateStatusContext(Context, State);
		EnterRule(_localctx, 512, RULE_ultimateStatus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1962; Match(T__248);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelloContext : ParserRuleContext {
		public HelloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hello; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterHello(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitHello(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHello(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelloContext hello() {
		HelloContext _localctx = new HelloContext(Context, State);
		EnterRule(_localctx, 514, RULE_hello);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1964; Match(T__249);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeedHealingContext : ParserRuleContext {
		public NeedHealingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_needHealing; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterNeedHealing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitNeedHealing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeedHealing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeedHealingContext needHealing() {
		NeedHealingContext _localctx = new NeedHealingContext(Context, State);
		EnterRule(_localctx, 516, RULE_needHealing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966; Match(T__250);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupUpContext : ParserRuleContext {
		public GroupUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupUp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterGroupUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitGroupUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupUpContext groupUp() {
		GroupUpContext _localctx = new GroupUpContext(Context, State);
		EnterRule(_localctx, 518, RULE_groupUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968; Match(T__251);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThanksContext : ParserRuleContext {
		public ThanksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thanks; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterThanks(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitThanks(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThanks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThanksContext thanks() {
		ThanksContext _localctx = new ThanksContext(Context, State);
		EnterRule(_localctx, 520, RULE_thanks);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1970; Match(T__252);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcknowledgeContext : ParserRuleContext {
		public AcknowledgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acknowledge; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAcknowledge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAcknowledge(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcknowledge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcknowledgeContext acknowledge() {
		AcknowledgeContext _localctx = new AcknowledgeContext(Context, State);
		EnterRule(_localctx, 522, RULE_acknowledge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972; Match(T__253);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BarrierBlockTypeContext : ParserRuleContext {
		public BarriersDoNotBlockLOSContext barriersDoNotBlockLOS() {
			return GetRuleContext<BarriersDoNotBlockLOSContext>(0);
		}
		public EnemyBarriersBlockLOSContext enemyBarriersBlockLOS() {
			return GetRuleContext<EnemyBarriersBlockLOSContext>(0);
		}
		public AllBarriersBlockLOSContext allBarriersBlockLOS() {
			return GetRuleContext<AllBarriersBlockLOSContext>(0);
		}
		public BarrierBlockTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_barrierBlockType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBarrierBlockType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBarrierBlockType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBarrierBlockType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BarrierBlockTypeContext barrierBlockType() {
		BarrierBlockTypeContext _localctx = new BarrierBlockTypeContext(Context, State);
		EnterRule(_localctx, 524, RULE_barrierBlockType);
		try {
			State = 1977;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__254:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1974; barriersDoNotBlockLOS();
				}
				break;
			case T__255:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1975; enemyBarriersBlockLOS();
				}
				break;
			case T__256:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1976; allBarriersBlockLOS();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BarriersDoNotBlockLOSContext : ParserRuleContext {
		public BarriersDoNotBlockLOSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_barriersDoNotBlockLOS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBarriersDoNotBlockLOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBarriersDoNotBlockLOS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBarriersDoNotBlockLOS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BarriersDoNotBlockLOSContext barriersDoNotBlockLOS() {
		BarriersDoNotBlockLOSContext _localctx = new BarriersDoNotBlockLOSContext(Context, State);
		EnterRule(_localctx, 526, RULE_barriersDoNotBlockLOS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979; Match(T__254);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnemyBarriersBlockLOSContext : ParserRuleContext {
		public EnemyBarriersBlockLOSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enemyBarriersBlockLOS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterEnemyBarriersBlockLOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitEnemyBarriersBlockLOS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnemyBarriersBlockLOS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnemyBarriersBlockLOSContext enemyBarriersBlockLOS() {
		EnemyBarriersBlockLOSContext _localctx = new EnemyBarriersBlockLOSContext(Context, State);
		EnterRule(_localctx, 528, RULE_enemyBarriersBlockLOS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981; Match(T__255);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllBarriersBlockLOSContext : ParserRuleContext {
		public AllBarriersBlockLOSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allBarriersBlockLOS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterAllBarriersBlockLOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitAllBarriersBlockLOS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllBarriersBlockLOS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllBarriersBlockLOSContext allBarriersBlockLOS() {
		AllBarriersBlockLOSContext _localctx = new AllBarriersBlockLOSContext(Context, State);
		EnterRule(_localctx, 530, RULE_allBarriersBlockLOS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1983; Match(T__256);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorTransformationTypeContext : ParserRuleContext {
		public RotationContext rotation() {
			return GetRuleContext<RotationContext>(0);
		}
		public RotationAndTranslationContext rotationAndTranslation() {
			return GetRuleContext<RotationAndTranslationContext>(0);
		}
		public VectorTransformationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorTransformationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterVectorTransformationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitVectorTransformationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorTransformationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorTransformationTypeContext vectorTransformationType() {
		VectorTransformationTypeContext _localctx = new VectorTransformationTypeContext(Context, State);
		EnterRule(_localctx, 532, RULE_vectorTransformationType);
		try {
			State = 1987;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__257:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1985; rotation();
				}
				break;
			case T__258:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1986; rotationAndTranslation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotationContext : ParserRuleContext {
		public RotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotationContext rotation() {
		RotationContext _localctx = new RotationContext(Context, State);
		EnterRule(_localctx, 534, RULE_rotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989; Match(T__257);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotationAndTranslationContext : ParserRuleContext {
		public RotationAndTranslationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotationAndTranslation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRotationAndTranslation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRotationAndTranslation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotationAndTranslation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotationAndTranslationContext rotationAndTranslation() {
		RotationAndTranslationContext _localctx = new RotationAndTranslationContext(Context, State);
		EnterRule(_localctx, 536, RULE_rotationAndTranslation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991; Match(T__258);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineOfSightCheckTypeContext : ParserRuleContext {
		public OffContext off() {
			return GetRuleContext<OffContext>(0);
		}
		public SurfacesContext surfaces() {
			return GetRuleContext<SurfacesContext>(0);
		}
		public SurfacesAndEnemyBarriersContext surfacesAndEnemyBarriers() {
			return GetRuleContext<SurfacesAndEnemyBarriersContext>(0);
		}
		public SurfacesAndAllBarriersContext surfacesAndAllBarriers() {
			return GetRuleContext<SurfacesAndAllBarriersContext>(0);
		}
		public LineOfSightCheckTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineOfSightCheckType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterLineOfSightCheckType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitLineOfSightCheckType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineOfSightCheckType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineOfSightCheckTypeContext lineOfSightCheckType() {
		LineOfSightCheckTypeContext _localctx = new LineOfSightCheckTypeContext(Context, State);
		EnterRule(_localctx, 538, RULE_lineOfSightCheckType);
		try {
			State = 1997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__259:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1993; off();
				}
				break;
			case T__260:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1994; surfaces();
				}
				break;
			case T__261:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1995; surfacesAndEnemyBarriers();
				}
				break;
			case T__262:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1996; surfacesAndAllBarriers();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffContext : ParserRuleContext {
		public OffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterOff(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitOff(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffContext off() {
		OffContext _localctx = new OffContext(Context, State);
		EnterRule(_localctx, 540, RULE_off);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999; Match(T__259);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfacesContext : ParserRuleContext {
		public SurfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSurfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSurfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfacesContext surfaces() {
		SurfacesContext _localctx = new SurfacesContext(Context, State);
		EnterRule(_localctx, 542, RULE_surfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001; Match(T__260);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfacesAndEnemyBarriersContext : ParserRuleContext {
		public SurfacesAndEnemyBarriersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfacesAndEnemyBarriers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSurfacesAndEnemyBarriers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSurfacesAndEnemyBarriers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfacesAndEnemyBarriers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfacesAndEnemyBarriersContext surfacesAndEnemyBarriers() {
		SurfacesAndEnemyBarriersContext _localctx = new SurfacesAndEnemyBarriersContext(Context, State);
		EnterRule(_localctx, 544, RULE_surfacesAndEnemyBarriers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003; Match(T__261);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfacesAndAllBarriersContext : ParserRuleContext {
		public SurfacesAndAllBarriersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfacesAndAllBarriers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterSurfacesAndAllBarriers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitSurfacesAndAllBarriers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfacesAndAllBarriers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfacesAndAllBarriersContext surfacesAndAllBarriers() {
		SurfacesAndAllBarriersContext _localctx = new SurfacesAndAllBarriersContext(Context, State);
		EnterRule(_localctx, 546, RULE_surfacesAndAllBarriers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2005; Match(T__262);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundingDirectionContext : ParserRuleContext {
		public UpContext up() {
			return GetRuleContext<UpContext>(0);
		}
		public DownContext down() {
			return GetRuleContext<DownContext>(0);
		}
		public ToNearestContext toNearest() {
			return GetRuleContext<ToNearestContext>(0);
		}
		public RoundingDirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundingDirection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterRoundingDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitRoundingDirection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundingDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoundingDirectionContext roundingDirection() {
		RoundingDirectionContext _localctx = new RoundingDirectionContext(Context, State);
		EnterRule(_localctx, 548, RULE_roundingDirection);
		try {
			State = 2010;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__182:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2007; up();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2008; down();
				}
				break;
			case T__263:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2009; toNearest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpContext : ParserRuleContext {
		public UpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_up; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpContext up() {
		UpContext _localctx = new UpContext(Context, State);
		EnterRule(_localctx, 550, RULE_up);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2012; Match(T__182);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DownContext : ParserRuleContext {
		public DownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_down; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DownContext down() {
		DownContext _localctx = new DownContext(Context, State);
		EnterRule(_localctx, 552, RULE_down);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014; Match(T__52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToNearestContext : ParserRuleContext {
		public ToNearestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toNearest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterToNearest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitToNearest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToNearest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToNearestContext toNearest() {
		ToNearestContext _localctx = new ToNearestContext(Context, State);
		EnterRule(_localctx, 554, RULE_toNearest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2016; Match(T__263);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCompartorOperatorContext : ParserRuleContext {
		public BinaryCompartorOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCompartorOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.EnterBinaryCompartorOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOverwatchCodeListener typedListener = listener as IOverwatchCodeListener;
			if (typedListener != null) typedListener.ExitBinaryCompartorOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOverwatchCodeVisitor<TResult> typedVisitor = visitor as IOverwatchCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompartorOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCompartorOperatorContext binaryCompartorOperator() {
		BinaryCompartorOperatorContext _localctx = new BinaryCompartorOperatorContext(Context, State);
		EnterRule(_localctx, 556, RULE_binaryCompartorOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (T__264 - 265)) | (1L << (T__265 - 265)) | (1L << (T__266 - 265)) | (1L << (T__267 - 265)) | (1L << (T__268 - 265)) | (1L << (T__269 - 265)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11C', '\x7E7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x3', '\x2', '\a', '\x2', '\x232', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x235', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x240', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x243', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x253', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x27E', '\n', '\r', '\f', '\r', '\xE', '\r', '\x281', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\x28D', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x290', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x34E', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', 
		'\x3', '$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 
		'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x3', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 
		'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 's', '\x3', 's', '\x3', 't', '\x3', 't', '\x3', 'u', '\x3', 
		'u', '\x3', 'v', '\x3', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'y', '\x3', 'y', '\x3', 
		'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', 
		'{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '|', '\x3', 
		'|', '\x3', '}', '\x3', '}', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', 
		'~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', 
		'\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', 
		'\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x89', 
		'\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', 
		'\x3', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9C', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', 
		'\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', 
		'\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA5', 
		'\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x3', '\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', 
		'\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', 
		'\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB6', 
		'\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x5', '\xC1', '\x6E9', '\n', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', 
		'\xC2', '\x3', '\xC2', '\x5', '\xC2', '\x6EF', '\n', '\xC2', '\x3', '\xC3', 
		'\x3', '\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x5', '\xC6', '\x715', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCF', '\x3', 
		'\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD4', '\x3', 
		'\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD7', '\x3', '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDC', '\x3', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDE', '\x3', 
		'\xDE', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\x75D', '\n', '\xE5', 
		'\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE8', 
		'\x3', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xED', 
		'\x3', '\xED', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEF', '\x3', '\xEF', 
		'\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', 
		'\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x5', '\xF0', '\x77B', '\n', 
		'\xF0', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF7', '\x3', '\xF7', '\x3', 
		'\xF8', '\x3', '\xF8', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\x5', '\xF9', '\x79B', '\n', '\xF9', '\x3', '\xFA', '\x3', '\xFA', 
		'\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFD', 
		'\x3', '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\x100', '\x3', '\x100', '\x3', '\x101', '\x3', '\x101', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x105', '\x3', '\x105', '\x3', '\x106', '\x3', 
		'\x106', '\x3', '\x107', '\x3', '\x107', '\x3', '\x108', '\x3', '\x108', 
		'\x3', '\x108', '\x5', '\x108', '\x7BC', '\n', '\x108', '\x3', '\x109', 
		'\x3', '\x109', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x7C6', '\n', 
		'\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10E', '\x3', '\x10E', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x5', 
		'\x10F', '\x7D0', '\n', '\x10F', '\x3', '\x110', '\x3', '\x110', '\x3', 
		'\x111', '\x3', '\x111', '\x3', '\x112', '\x3', '\x112', '\x3', '\x113', 
		'\x3', '\x113', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x5', 
		'\x114', '\x7DD', '\n', '\x114', '\x3', '\x115', '\x3', '\x115', '\x3', 
		'\x116', '\x3', '\x116', '\x3', '\x117', '\x3', '\x117', '\x3', '\x118', 
		'\x3', '\x118', '\x3', '\x118', '\x2', '\x2', '\x119', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', 
		'\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', 
		'\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', 
		'\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', 
		'\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', 
		'\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', 
		'\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', 
		'\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', 
		'\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', 
		'\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', 
		'\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', 
		'\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', 
		'\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', 
		'\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', 
		'\x1B0', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', 
		'\x1C0', '\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', 
		'\x1D0', '\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', 
		'\x1E0', '\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', 
		'\x1F0', '\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', 
		'\x200', '\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', 
		'\x210', '\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', 
		'\x220', '\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', 
		'\x2', '\x4', '\x4', '\x2', '\x113', '\x113', '\x117', '\x11A', '\x3', 
		'\x2', '\x10B', '\x110', '\x2', '\x7CF', '\x2', '\x233', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x238', '\x3', '\x2', '\x2', '\x2', '\x6', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x254', '\x3', '\x2', '\x2', '\x2', '\f', '\x256', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x10', '\x262', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x16', '\x274', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x284', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x293', '\x3', '\x2', '\x2', '\x2', ' ', '\x296', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x34D', '\x3', '\x2', '\x2', '\x2', '$', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x358', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x35F', '\x3', '\x2', '\x2', '\x2', '*', '\x364', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x369', '\x3', '\x2', '\x2', '\x2', '.', '\x36B', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x370', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x375', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37A', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x38', '\x384', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x389', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x38B', '\x3', '\x2', '\x2', '\x2', '>', '\x392', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x399', '\x3', '\x2', '\x2', '\x2', '\x42', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x3A7', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x3B0', '\x3', '\x2', '\x2', '\x2', 'H', '\x3B2', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x3B4', '\x3', '\x2', '\x2', '\x2', 'L', '\x3BB', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x3C4', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x3C9', '\x3', '\x2', '\x2', '\x2', 'R', '\x3CE', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x3D0', '\x3', '\x2', '\x2', '\x2', 'V', '\x3D5', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\\', '\x3E6', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x3E8', '\x3', '\x2', '\x2', '\x2', '`', '\x3EF', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x3F6', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x66', '\x404', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x40B', '\x3', '\x2', '\x2', '\x2', 'j', '\x40D', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x40F', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x414', '\x3', '\x2', '\x2', '\x2', 'p', '\x416', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x418', '\x3', '\x2', '\x2', '\x2', 't', '\x41D', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x422', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x429', '\x3', '\x2', '\x2', '\x2', 'z', '\x430', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x435', '\x3', '\x2', '\x2', '\x2', '~', '\x43A', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x43C', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x441', '\x3', '\x2', '\x2', '\x2', '\x84', '\x448', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x88', '\x452', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x457', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x461', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x466', '\x3', '\x2', '\x2', '\x2', '\x92', '\x46D', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x472', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x477', '\x3', '\x2', '\x2', '\x2', '\x98', '\x47E', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x483', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x485', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x487', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x48E', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x495', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x49A', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x49F', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x4A4', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x4AB', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x4B2', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x4B7', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x4C1', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x4C8', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x4CF', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x4DD', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x4E4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x4ED', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x4F4', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x503', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x508', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x50D', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x512', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x517', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\x51C', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\x523', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x52A', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x52F', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x539', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\x53B', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x53D', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\x53F', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x541', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\x543', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\x548', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x54A', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\x54C', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x555', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x557', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\x559', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x560', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x565', '\x3', '\x2', '\x2', '\x2', '\x100', '\x56C', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x573', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x57A', '\x3', '\x2', '\x2', '\x2', '\x106', '\x57F', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x584', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x589', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x58E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x593', '\x3', '\x2', '\x2', '\x2', '\x110', '\x598', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x59D', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x5A4', '\x3', '\x2', '\x2', '\x2', '\x116', '\x5A9', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x5B3', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x5B5', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x120', '\x5BF', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x5C6', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x126', '\x5CA', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x5CF', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x5D6', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x5DD', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\x130', '\x5ED', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x5F4', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x5FF', '\x3', '\x2', '\x2', '\x2', '\x136', '\x601', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x606', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x60D', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x614', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x140', '\x620', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x625', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x632', '\x3', '\x2', '\x2', '\x2', '\x146', '\x63F', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x653', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x655', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x65C', '\x3', '\x2', '\x2', '\x2', '\x150', '\x661', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x666', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x66B', '\x3', '\x2', '\x2', '\x2', '\x156', '\x670', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x677', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x67C', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x683', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x688', '\x3', '\x2', '\x2', '\x2', '\x160', '\x693', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x69A', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x69F', '\x3', '\x2', '\x2', '\x2', '\x166', '\x6A4', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x6A9', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x6AB', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x6B0', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x170', '\x6B9', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x6C0', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x176', '\x6CA', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x6D5', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x6DA', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x180', '\x6E8', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x6EE', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x186', '\x6F2', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x714', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x716', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x718', '\x3', '\x2', '\x2', '\x2', '\x190', '\x71A', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x71C', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x196', '\x720', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x722', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x724', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x726', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x728', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x72A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x72C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x72E', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x730', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x732', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\x734', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x736', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x738', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x73A', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x73C', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x73E', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x740', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x742', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x744', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x746', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x748', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x74A', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x74C', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x74E', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x750', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x75E', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x760', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x762', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x764', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x766', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x768', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x76A', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\x76C', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x76E', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x770', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x77C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x77E', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x780', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x782', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x784', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x786', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x788', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x79A', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x79C', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x79E', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x7A0', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x7A4', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x7A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x200', '\x7AA', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x7AC', '\x3', '\x2', '\x2', '\x2', 
		'\x204', '\x7AE', '\x3', '\x2', '\x2', '\x2', '\x206', '\x7B0', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x7B2', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x7B4', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x7B6', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x210', '\x7BD', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x7BF', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x7C1', '\x3', '\x2', '\x2', '\x2', '\x216', '\x7C5', '\x3', 
		'\x2', '\x2', '\x2', '\x218', '\x7C7', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x7C9', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x7CF', '\x3', '\x2', '\x2', 
		'\x2', '\x21E', '\x7D1', '\x3', '\x2', '\x2', '\x2', '\x220', '\x7D3', 
		'\x3', '\x2', '\x2', '\x2', '\x222', '\x7D5', '\x3', '\x2', '\x2', '\x2', 
		'\x224', '\x7D7', '\x3', '\x2', '\x2', '\x2', '\x226', '\x7DC', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x7DE', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x7E0', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x7E2', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x7E4', '\x3', '\x2', '\x2', '\x2', '\x230', '\x232', 
		'\x5', '\x4', '\x3', '\x2', '\x231', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'\x232', '\x235', '\x3', '\x2', '\x2', '\x2', '\x233', '\x231', '\x3', 
		'\x2', '\x2', '\x2', '\x233', '\x234', '\x3', '\x2', '\x2', '\x2', '\x234', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x235', '\x233', '\x3', '\x2', '\x2', 
		'\x2', '\x236', '\x237', '\a', '\x2', '\x2', '\x3', '\x237', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x238', '\x239', '\a', '\x3', '\x2', '\x2', '\x239', 
		'\x23A', '\a', '\x4', '\x2', '\x2', '\x23A', '\x23B', '\a', '\x117', '\x2', 
		'\x2', '\x23B', '\x23C', '\a', '\x5', '\x2', '\x2', '\x23C', '\x23D', 
		'\a', '\x6', '\x2', '\x2', '\x23D', '\x23F', '\x5', '\x6', '\x4', '\x2', 
		'\x23E', '\x240', '\x5', '\x18', '\r', '\x2', '\x23F', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x241', '\x243', '\x5', '\x1C', 
		'\xF', '\x2', '\x242', '\x241', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x245', '\a', '\a', '\x2', '\x2', '\x245', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x247', '\a', '\b', '\x2', '\x2', '\x247', '\x248', 
		'\a', '\x6', '\x2', '\x2', '\x248', '\x249', '\x5', '\b', '\x5', '\x2', 
		'\x249', '\x24A', '\a', '\a', '\x2', '\x2', '\x24A', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x24B', '\x253', '\x5', '\n', '\x6', '\x2', '\x24C', '\x253', 
		'\x5', '\f', '\a', '\x2', '\x24D', '\x253', '\x5', '\xE', '\b', '\x2', 
		'\x24E', '\x253', '\x5', '\x10', '\t', '\x2', '\x24F', '\x253', '\x5', 
		'\x12', '\n', '\x2', '\x250', '\x253', '\x5', '\x14', '\v', '\x2', '\x251', 
		'\x253', '\x5', '\x16', '\f', '\x2', '\x252', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x252', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\x252', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x252', '\x250', '\x3', 
		'\x2', '\x2', '\x2', '\x252', '\x251', '\x3', '\x2', '\x2', '\x2', '\x253', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', '\a', '\t', '\x2', 
		'\x2', '\x255', '\v', '\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\a', 
		'\n', '\x2', '\x2', '\x257', '\x258', '\x5', '\x180', '\xC1', '\x2', '\x258', 
		'\x259', '\a', '\v', '\x2', '\x2', '\x259', '\x25A', '\x5', '\x182', '\xC2', 
		'\x2', '\x25A', '\x25B', '\a', '\v', '\x2', '\x2', '\x25B', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x25D', '\a', '\f', '\x2', '\x2', '\x25D', 
		'\x25E', '\x5', '\x180', '\xC1', '\x2', '\x25E', '\x25F', '\a', '\v', 
		'\x2', '\x2', '\x25F', '\x260', '\x5', '\x182', '\xC2', '\x2', '\x260', 
		'\x261', '\a', '\v', '\x2', '\x2', '\x261', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x262', '\x263', '\a', '\r', '\x2', '\x2', '\x263', '\x264', '\x5', 
		'\x180', '\xC1', '\x2', '\x264', '\x265', '\a', '\v', '\x2', '\x2', '\x265', 
		'\x266', '\x5', '\x182', '\xC2', '\x2', '\x266', '\x267', '\a', '\v', 
		'\x2', '\x2', '\x267', '\x11', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', 
		'\a', '\xE', '\x2', '\x2', '\x269', '\x26A', '\x5', '\x180', '\xC1', '\x2', 
		'\x26A', '\x26B', '\a', '\v', '\x2', '\x2', '\x26B', '\x26C', '\x5', '\x182', 
		'\xC2', '\x2', '\x26C', '\x26D', '\a', '\v', '\x2', '\x2', '\x26D', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', '\a', '\xF', '\x2', '\x2', 
		'\x26F', '\x270', '\x5', '\x180', '\xC1', '\x2', '\x270', '\x271', '\a', 
		'\v', '\x2', '\x2', '\x271', '\x272', '\x5', '\x182', '\xC2', '\x2', '\x272', 
		'\x273', '\a', '\v', '\x2', '\x2', '\x273', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x275', '\a', '\x10', '\x2', '\x2', '\x275', '\x276', 
		'\x5', '\x180', '\xC1', '\x2', '\x276', '\x277', '\a', '\v', '\x2', '\x2', 
		'\x277', '\x278', '\x5', '\x182', '\xC2', '\x2', '\x278', '\x279', '\a', 
		'\v', '\x2', '\x2', '\x279', '\x17', '\x3', '\x2', '\x2', '\x2', '\x27A', 
		'\x27B', '\a', '\x11', '\x2', '\x2', '\x27B', '\x27F', '\a', '\x6', '\x2', 
		'\x2', '\x27C', '\x27E', '\x5', '\x1A', '\xE', '\x2', '\x27D', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x281', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', '\x3', 
		'\x2', '\x2', '\x2', '\x280', '\x282', '\x3', '\x2', '\x2', '\x2', '\x281', 
		'\x27F', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\a', '\a', '\x2', 
		'\x2', '\x283', '\x19', '\x3', '\x2', '\x2', '\x2', '\x284', '\x285', 
		'\x5', '\"', '\x12', '\x2', '\x285', '\x286', '\x5', '\x22E', '\x118', 
		'\x2', '\x286', '\x287', '\x5', '\"', '\x12', '\x2', '\x287', '\x288', 
		'\a', '\v', '\x2', '\x2', '\x288', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x289', '\x28A', '\a', '\x12', '\x2', '\x2', '\x28A', '\x28E', '\a', 
		'\x6', '\x2', '\x2', '\x28B', '\x28D', '\x5', '\x1E', '\x10', '\x2', '\x28C', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x290', '\x3', '\x2', '\x2', 
		'\x2', '\x28E', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x291', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x291', '\x292', '\a', 
		'\a', '\x2', '\x2', '\x292', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x293', 
		'\x294', '\x5', ' ', '\x11', '\x2', '\x294', '\x295', '\a', '\v', '\x2', 
		'\x2', '\x295', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', 
		'\a', '\x13', '\x2', '\x2', '\x297', '\x298', '\a', '\x4', '\x2', '\x2', 
		'\x298', '\x299', '\x5', '\x186', '\xC4', '\x2', '\x299', '\x29A', '\a', 
		'\x14', '\x2', '\x2', '\x29A', '\x29B', '\x5', '\"', '\x12', '\x2', '\x29B', 
		'\x29C', '\a', '\x5', '\x2', '\x2', '\x29C', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x34E', '\x5', '\x184', '\xC3', '\x2', '\x29E', '\x34E', 
		'\x5', '\x180', '\xC1', '\x2', '\x29F', '\x34E', '\x5', '$', '\x13', '\x2', 
		'\x2A0', '\x34E', '\x5', '&', '\x14', '\x2', '\x2A1', '\x34E', '\x5', 
		'(', '\x15', '\x2', '\x2A2', '\x34E', '\x5', '*', '\x16', '\x2', '\x2A3', 
		'\x34E', '\x5', ',', '\x17', '\x2', '\x2A4', '\x34E', '\x5', '.', '\x18', 
		'\x2', '\x2A5', '\x34E', '\x5', '\x30', '\x19', '\x2', '\x2A6', '\x34E', 
		'\x5', '\x32', '\x1A', '\x2', '\x2A7', '\x34E', '\x5', '\x34', '\x1B', 
		'\x2', '\x2A8', '\x34E', '\x5', '\x36', '\x1C', '\x2', '\x2A9', '\x34E', 
		'\x5', '\x38', '\x1D', '\x2', '\x2AA', '\x34E', '\x5', ':', '\x1E', '\x2', 
		'\x2AB', '\x34E', '\x5', '<', '\x1F', '\x2', '\x2AC', '\x34E', '\x5', 
		'>', ' ', '\x2', '\x2AD', '\x34E', '\x5', '@', '!', '\x2', '\x2AE', '\x34E', 
		'\x5', '\x42', '\"', '\x2', '\x2AF', '\x34E', '\x5', '\x44', '#', '\x2', 
		'\x2B0', '\x34E', '\x5', '\x46', '$', '\x2', '\x2B1', '\x34E', '\x5', 
		'H', '%', '\x2', '\x2B2', '\x34E', '\x5', 'J', '&', '\x2', '\x2B3', '\x34E', 
		'\x5', 'L', '\'', '\x2', '\x2B4', '\x34E', '\x5', 'N', '(', '\x2', '\x2B5', 
		'\x34E', '\x5', 'P', ')', '\x2', '\x2B6', '\x34E', '\x5', 'R', '*', '\x2', 
		'\x2B7', '\x34E', '\x5', 'T', '+', '\x2', '\x2B8', '\x34E', '\x5', 'V', 
		',', '\x2', '\x2B9', '\x34E', '\x5', 'X', '-', '\x2', '\x2BA', '\x34E', 
		'\x5', 'Z', '.', '\x2', '\x2BB', '\x34E', '\x5', '\\', '/', '\x2', '\x2BC', 
		'\x34E', '\x5', '^', '\x30', '\x2', '\x2BD', '\x34E', '\x5', '`', '\x31', 
		'\x2', '\x2BE', '\x34E', '\x5', '\x62', '\x32', '\x2', '\x2BF', '\x34E', 
		'\x5', '\x64', '\x33', '\x2', '\x2C0', '\x34E', '\x5', '\x66', '\x34', 
		'\x2', '\x2C1', '\x34E', '\x5', 'h', '\x35', '\x2', '\x2C2', '\x34E', 
		'\x5', 'j', '\x36', '\x2', '\x2C3', '\x34E', '\x5', 'l', '\x37', '\x2', 
		'\x2C4', '\x34E', '\x5', 'n', '\x38', '\x2', '\x2C5', '\x34E', '\x5', 
		'p', '\x39', '\x2', '\x2C6', '\x34E', '\x5', 'r', ':', '\x2', '\x2C7', 
		'\x34E', '\x5', 't', ';', '\x2', '\x2C8', '\x34E', '\x5', 'v', '<', '\x2', 
		'\x2C9', '\x34E', '\x5', 'x', '=', '\x2', '\x2CA', '\x34E', '\x5', 'z', 
		'>', '\x2', '\x2CB', '\x34E', '\x5', '|', '?', '\x2', '\x2CC', '\x34E', 
		'\x5', '~', '@', '\x2', '\x2CD', '\x34E', '\x5', '\x80', '\x41', '\x2', 
		'\x2CE', '\x34E', '\x5', '\x82', '\x42', '\x2', '\x2CF', '\x34E', '\x5', 
		'\x84', '\x43', '\x2', '\x2D0', '\x34E', '\x5', '\x86', '\x44', '\x2', 
		'\x2D1', '\x34E', '\x5', '\x88', '\x45', '\x2', '\x2D2', '\x34E', '\x5', 
		'\x8A', '\x46', '\x2', '\x2D3', '\x34E', '\x5', '\x8C', 'G', '\x2', '\x2D4', 
		'\x34E', '\x5', '\x8E', 'H', '\x2', '\x2D5', '\x34E', '\x5', '\x90', 'I', 
		'\x2', '\x2D6', '\x34E', '\x5', '\x92', 'J', '\x2', '\x2D7', '\x34E', 
		'\x5', '\x94', 'K', '\x2', '\x2D8', '\x34E', '\x5', '\x96', 'L', '\x2', 
		'\x2D9', '\x34E', '\x5', '\x98', 'M', '\x2', '\x2DA', '\x34E', '\x5', 
		'\x9A', 'N', '\x2', '\x2DB', '\x34E', '\x5', '\x9C', 'O', '\x2', '\x2DC', 
		'\x34E', '\x5', '\x9E', 'P', '\x2', '\x2DD', '\x34E', '\x5', '\xA0', 'Q', 
		'\x2', '\x2DE', '\x34E', '\x5', '\xA2', 'R', '\x2', '\x2DF', '\x34E', 
		'\x5', '\xA4', 'S', '\x2', '\x2E0', '\x34E', '\x5', '\xA6', 'T', '\x2', 
		'\x2E1', '\x34E', '\x5', '\xA8', 'U', '\x2', '\x2E2', '\x34E', '\x5', 
		'\xAA', 'V', '\x2', '\x2E3', '\x34E', '\x5', '\xAC', 'W', '\x2', '\x2E4', 
		'\x34E', '\x5', '\xAE', 'X', '\x2', '\x2E5', '\x34E', '\x5', '\xB0', 'Y', 
		'\x2', '\x2E6', '\x34E', '\x5', '\xB2', 'Z', '\x2', '\x2E7', '\x34E', 
		'\x5', '\xB4', '[', '\x2', '\x2E8', '\x34E', '\x5', '\xB6', '\\', '\x2', 
		'\x2E9', '\x34E', '\x5', '\xB8', ']', '\x2', '\x2EA', '\x34E', '\x5', 
		'\xBA', '^', '\x2', '\x2EB', '\x34E', '\x5', '\xBC', '_', '\x2', '\x2EC', 
		'\x34E', '\x5', '\xBE', '`', '\x2', '\x2ED', '\x34E', '\x5', '\xC0', '\x61', 
		'\x2', '\x2EE', '\x34E', '\x5', '\xC2', '\x62', '\x2', '\x2EF', '\x34E', 
		'\x5', '\xC4', '\x63', '\x2', '\x2F0', '\x34E', '\x5', '\xC6', '\x64', 
		'\x2', '\x2F1', '\x34E', '\x5', '\xC8', '\x65', '\x2', '\x2F2', '\x34E', 
		'\x5', '\xCA', '\x66', '\x2', '\x2F3', '\x34E', '\x5', '\xCC', 'g', '\x2', 
		'\x2F4', '\x34E', '\x5', '\xCE', 'h', '\x2', '\x2F5', '\x34E', '\x5', 
		'\xD0', 'i', '\x2', '\x2F6', '\x34E', '\x5', '\xD2', 'j', '\x2', '\x2F7', 
		'\x34E', '\x5', '\xD4', 'k', '\x2', '\x2F8', '\x34E', '\x5', '\xD6', 'l', 
		'\x2', '\x2F9', '\x34E', '\x5', '\xD8', 'm', '\x2', '\x2FA', '\x34E', 
		'\x5', '\xDA', 'n', '\x2', '\x2FB', '\x34E', '\x5', '\xDC', 'o', '\x2', 
		'\x2FC', '\x34E', '\x5', '\xDE', 'p', '\x2', '\x2FD', '\x34E', '\x5', 
		'\xE0', 'q', '\x2', '\x2FE', '\x34E', '\x5', '\xE2', 'r', '\x2', '\x2FF', 
		'\x34E', '\x5', '\xE4', 's', '\x2', '\x300', '\x34E', '\x5', '\xE6', 't', 
		'\x2', '\x301', '\x34E', '\x5', '\xE8', 'u', '\x2', '\x302', '\x34E', 
		'\x5', '\xEA', 'v', '\x2', '\x303', '\x34E', '\x5', '\xEC', 'w', '\x2', 
		'\x304', '\x34E', '\x5', '\xEE', 'x', '\x2', '\x305', '\x34E', '\x5', 
		'\xF0', 'y', '\x2', '\x306', '\x34E', '\x5', '\xF2', 'z', '\x2', '\x307', 
		'\x34E', '\x5', '\xF4', '{', '\x2', '\x308', '\x34E', '\x5', '\xF6', '|', 
		'\x2', '\x309', '\x34E', '\x5', '\xF8', '}', '\x2', '\x30A', '\x34E', 
		'\x5', '\xFA', '~', '\x2', '\x30B', '\x34E', '\x5', '\xFC', '\x7F', '\x2', 
		'\x30C', '\x34E', '\x5', '\xFE', '\x80', '\x2', '\x30D', '\x34E', '\x5', 
		'\x100', '\x81', '\x2', '\x30E', '\x34E', '\x5', '\x102', '\x82', '\x2', 
		'\x30F', '\x34E', '\x5', '\x104', '\x83', '\x2', '\x310', '\x34E', '\x5', 
		'\x106', '\x84', '\x2', '\x311', '\x34E', '\x5', '\x108', '\x85', '\x2', 
		'\x312', '\x34E', '\x5', '\x10A', '\x86', '\x2', '\x313', '\x34E', '\x5', 
		'\x10C', '\x87', '\x2', '\x314', '\x34E', '\x5', '\x10E', '\x88', '\x2', 
		'\x315', '\x34E', '\x5', '\x110', '\x89', '\x2', '\x316', '\x34E', '\x5', 
		'\x112', '\x8A', '\x2', '\x317', '\x34E', '\x5', '\x114', '\x8B', '\x2', 
		'\x318', '\x34E', '\x5', '\x116', '\x8C', '\x2', '\x319', '\x34E', '\x5', 
		'\x118', '\x8D', '\x2', '\x31A', '\x34E', '\x5', '\x11A', '\x8E', '\x2', 
		'\x31B', '\x34E', '\x5', '\x11C', '\x8F', '\x2', '\x31C', '\x34E', '\x5', 
		'\x11E', '\x90', '\x2', '\x31D', '\x34E', '\x5', '\x120', '\x91', '\x2', 
		'\x31E', '\x34E', '\x5', '\x122', '\x92', '\x2', '\x31F', '\x34E', '\x5', 
		'\x124', '\x93', '\x2', '\x320', '\x34E', '\x5', '\x126', '\x94', '\x2', 
		'\x321', '\x34E', '\x5', '\x128', '\x95', '\x2', '\x322', '\x34E', '\x5', 
		'\x12A', '\x96', '\x2', '\x323', '\x34E', '\x5', '\x12C', '\x97', '\x2', 
		'\x324', '\x34E', '\x5', '\x12E', '\x98', '\x2', '\x325', '\x34E', '\x5', 
		'\x130', '\x99', '\x2', '\x326', '\x34E', '\x5', '\x132', '\x9A', '\x2', 
		'\x327', '\x34E', '\x5', '\x134', '\x9B', '\x2', '\x328', '\x34E', '\x5', 
		'\x136', '\x9C', '\x2', '\x329', '\x34E', '\x5', '\x138', '\x9D', '\x2', 
		'\x32A', '\x34E', '\x5', '\x13A', '\x9E', '\x2', '\x32B', '\x34E', '\x5', 
		'\x13C', '\x9F', '\x2', '\x32C', '\x34E', '\x5', '\x13E', '\xA0', '\x2', 
		'\x32D', '\x34E', '\x5', '\x140', '\xA1', '\x2', '\x32E', '\x34E', '\x5', 
		'\x142', '\xA2', '\x2', '\x32F', '\x34E', '\x5', '\x144', '\xA3', '\x2', 
		'\x330', '\x34E', '\x5', '\x146', '\xA4', '\x2', '\x331', '\x34E', '\x5', 
		'\x148', '\xA5', '\x2', '\x332', '\x34E', '\x5', '\x14A', '\xA6', '\x2', 
		'\x333', '\x34E', '\x5', '\x14C', '\xA7', '\x2', '\x334', '\x34E', '\x5', 
		'\x14E', '\xA8', '\x2', '\x335', '\x34E', '\x5', '\x150', '\xA9', '\x2', 
		'\x336', '\x34E', '\x5', '\x152', '\xAA', '\x2', '\x337', '\x34E', '\x5', 
		'\x154', '\xAB', '\x2', '\x338', '\x34E', '\x5', '\x156', '\xAC', '\x2', 
		'\x339', '\x34E', '\x5', '\x158', '\xAD', '\x2', '\x33A', '\x34E', '\x5', 
		'\x15A', '\xAE', '\x2', '\x33B', '\x34E', '\x5', '\x15C', '\xAF', '\x2', 
		'\x33C', '\x34E', '\x5', '\x15E', '\xB0', '\x2', '\x33D', '\x34E', '\x5', 
		'\x160', '\xB1', '\x2', '\x33E', '\x34E', '\x5', '\x162', '\xB2', '\x2', 
		'\x33F', '\x34E', '\x5', '\x164', '\xB3', '\x2', '\x340', '\x34E', '\x5', 
		'\x166', '\xB4', '\x2', '\x341', '\x34E', '\x5', '\x168', '\xB5', '\x2', 
		'\x342', '\x34E', '\x5', '\x16A', '\xB6', '\x2', '\x343', '\x34E', '\x5', 
		'\x16C', '\xB7', '\x2', '\x344', '\x34E', '\x5', '\x16E', '\xB8', '\x2', 
		'\x345', '\x34E', '\x5', '\x170', '\xB9', '\x2', '\x346', '\x34E', '\x5', 
		'\x172', '\xBA', '\x2', '\x347', '\x34E', '\x5', '\x174', '\xBB', '\x2', 
		'\x348', '\x34E', '\x5', '\x176', '\xBC', '\x2', '\x349', '\x34E', '\x5', 
		'\x178', '\xBD', '\x2', '\x34A', '\x34E', '\x5', '\x17A', '\xBE', '\x2', 
		'\x34B', '\x34E', '\x5', '\x17C', '\xBF', '\x2', '\x34C', '\x34E', '\x5', 
		'\x17E', '\xC0', '\x2', '\x34D', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2A1', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2A2', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2A4', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2A7', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2A9', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2AF', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2B2', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2B5', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2B7', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2BF', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2C4', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2C7', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2C9', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2CA', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2CC', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2CD', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2D2', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2D4', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2D7', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2DA', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2DD', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2DF', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2E2', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2E4', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2E5', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2E7', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2EA', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2EF', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2F1', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2F2', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2F4', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2F7', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x2F9', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2FA', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x2FF', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x300', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x303', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x304', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x305', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x306', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x307', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x308', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x30A', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x30C', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x30D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x310', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x312', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x313', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x314', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x316', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x317', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x318', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x319', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x31A', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x31C', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x31D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x320', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x321', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x322', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x323', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x324', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x326', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x327', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x328', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x329', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x32A', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x32C', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x32F', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x330', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x331', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x332', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x333', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x334', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x335', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x336', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x337', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x338', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x339', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x33A', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x33D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x33E', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x33F', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x340', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x341', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x342', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x343', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x344', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x345', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x346', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x347', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x348', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34A', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34E', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x34F', '\x350', '\a', '\x15', '\x2', '\x2', '\x350', '\x351', '\a', 
		'\x4', '\x2', '\x2', '\x351', '\x352', '\x5', '\"', '\x12', '\x2', '\x352', 
		'\x353', '\a', '\x14', '\x2', '\x2', '\x353', '\x354', '\x5', '\"', '\x12', 
		'\x2', '\x354', '\x355', '\a', '\x14', '\x2', '\x2', '\x355', '\x356', 
		'\x5', '\"', '\x12', '\x2', '\x356', '\x357', '\a', '\x5', '\x2', '\x2', 
		'\x357', '%', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', '\a', '\x16', 
		'\x2', '\x2', '\x359', '\x35A', '\a', '\x4', '\x2', '\x2', '\x35A', '\x35B', 
		'\x5', '\"', '\x12', '\x2', '\x35B', '\x35C', '\a', '\x14', '\x2', '\x2', 
		'\x35C', '\x35D', '\x5', '\"', '\x12', '\x2', '\x35D', '\x35E', '\a', 
		'\x5', '\x2', '\x2', '\x35E', '\'', '\x3', '\x2', '\x2', '\x2', '\x35F', 
		'\x360', '\a', '\x17', '\x2', '\x2', '\x360', '\x361', '\a', '\x4', '\x2', 
		'\x2', '\x361', '\x362', '\x5', '\"', '\x12', '\x2', '\x362', '\x363', 
		'\a', '\x5', '\x2', '\x2', '\x363', ')', '\x3', '\x2', '\x2', '\x2', '\x364', 
		'\x365', '\a', '\x18', '\x2', '\x2', '\x365', '\x366', '\a', '\x4', '\x2', 
		'\x2', '\x366', '\x367', '\x5', '\"', '\x12', '\x2', '\x367', '\x368', 
		'\a', '\x5', '\x2', '\x2', '\x368', '+', '\x3', '\x2', '\x2', '\x2', '\x369', 
		'\x36A', '\a', '\x19', '\x2', '\x2', '\x36A', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x36B', '\x36C', '\a', '\x1A', '\x2', '\x2', '\x36C', '\x36D', 
		'\a', '\x4', '\x2', '\x2', '\x36D', '\x36E', '\x5', '\"', '\x12', '\x2', 
		'\x36E', '\x36F', '\a', '\x5', '\x2', '\x2', '\x36F', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x370', '\x371', '\a', '\x1B', '\x2', '\x2', '\x371', '\x372', 
		'\a', '\x4', '\x2', '\x2', '\x372', '\x373', '\x5', '\"', '\x12', '\x2', 
		'\x373', '\x374', '\a', '\x5', '\x2', '\x2', '\x374', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x375', '\x376', '\a', '\x1C', '\x2', '\x2', '\x376', '\x377', 
		'\a', '\x4', '\x2', '\x2', '\x377', '\x378', '\x5', '\"', '\x12', '\x2', 
		'\x378', '\x379', '\a', '\x5', '\x2', '\x2', '\x379', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x37A', '\x37B', '\a', '\x1D', '\x2', '\x2', '\x37B', '\x37C', 
		'\a', '\x4', '\x2', '\x2', '\x37C', '\x37D', '\x5', '\"', '\x12', '\x2', 
		'\x37D', '\x37E', '\a', '\x5', '\x2', '\x2', '\x37E', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x37F', '\x380', '\a', '\x1E', '\x2', '\x2', '\x380', '\x381', 
		'\a', '\x4', '\x2', '\x2', '\x381', '\x382', '\x5', '\"', '\x12', '\x2', 
		'\x382', '\x383', '\a', '\x5', '\x2', '\x2', '\x383', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x384', '\x385', '\a', '\x1F', '\x2', '\x2', '\x385', '\x386', 
		'\a', '\x4', '\x2', '\x2', '\x386', '\x387', '\x5', '\"', '\x12', '\x2', 
		'\x387', '\x388', '\a', '\x5', '\x2', '\x2', '\x388', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x389', '\x38A', '\a', ' ', '\x2', '\x2', '\x38A', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x38C', '\a', '!', '\x2', '\x2', 
		'\x38C', '\x38D', '\a', '\x4', '\x2', '\x2', '\x38D', '\x38E', '\x5', 
		'\"', '\x12', '\x2', '\x38E', '\x38F', '\a', '\x14', '\x2', '\x2', '\x38F', 
		'\x390', '\x5', '\"', '\x12', '\x2', '\x390', '\x391', '\a', '\x5', '\x2', 
		'\x2', '\x391', '=', '\x3', '\x2', '\x2', '\x2', '\x392', '\x393', '\a', 
		'\"', '\x2', '\x2', '\x393', '\x394', '\a', '\x4', '\x2', '\x2', '\x394', 
		'\x395', '\x5', '\"', '\x12', '\x2', '\x395', '\x396', '\a', '\x14', '\x2', 
		'\x2', '\x396', '\x397', '\x5', '\"', '\x12', '\x2', '\x397', '\x398', 
		'\a', '\x5', '\x2', '\x2', '\x398', '?', '\x3', '\x2', '\x2', '\x2', '\x399', 
		'\x39A', '\a', '#', '\x2', '\x2', '\x39A', '\x39B', '\a', '\x4', '\x2', 
		'\x2', '\x39B', '\x39C', '\x5', '\"', '\x12', '\x2', '\x39C', '\x39D', 
		'\a', '\x14', '\x2', '\x2', '\x39D', '\x39E', '\x5', '\"', '\x12', '\x2', 
		'\x39E', '\x39F', '\a', '\x5', '\x2', '\x2', '\x39F', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x3A0', '\x3A1', '\a', '$', '\x2', '\x2', '\x3A1', '\x3A2', 
		'\a', '\x4', '\x2', '\x2', '\x3A2', '\x3A3', '\x5', '\"', '\x12', '\x2', 
		'\x3A3', '\x3A4', '\a', '\x14', '\x2', '\x2', '\x3A4', '\x3A5', '\x5', 
		'\"', '\x12', '\x2', '\x3A5', '\x3A6', '\a', '\x5', '\x2', '\x2', '\x3A6', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A8', '\a', '%', '\x2', 
		'\x2', '\x3A8', '\x3A9', '\a', '\x4', '\x2', '\x2', '\x3A9', '\x3AA', 
		'\x5', '\"', '\x12', '\x2', '\x3AA', '\x3AB', '\a', '\x14', '\x2', '\x2', 
		'\x3AB', '\x3AC', '\x5', '\"', '\x12', '\x2', '\x3AC', '\x3AD', '\a', 
		'\x14', '\x2', '\x2', '\x3AD', '\x3AE', '\x5', '\"', '\x12', '\x2', '\x3AE', 
		'\x3AF', '\a', '\x5', '\x2', '\x2', '\x3AF', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x3B0', '\x3B1', '\a', '&', '\x2', '\x2', '\x3B1', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\a', '\'', '\x2', '\x2', '\x3B3', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\a', '(', '\x2', '\x2', 
		'\x3B5', '\x3B6', '\a', '\x4', '\x2', '\x2', '\x3B6', '\x3B7', '\x5', 
		'\"', '\x12', '\x2', '\x3B7', '\x3B8', '\a', '\x14', '\x2', '\x2', '\x3B8', 
		'\x3B9', '\x5', '\"', '\x12', '\x2', '\x3B9', '\x3BA', '\a', '\x5', '\x2', 
		'\x2', '\x3BA', 'K', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BC', '\a', 
		')', '\x2', '\x2', '\x3BC', '\x3BD', '\a', '\x4', '\x2', '\x2', '\x3BD', 
		'\x3BE', '\x5', '\"', '\x12', '\x2', '\x3BE', '\x3BF', '\a', '\x14', '\x2', 
		'\x2', '\x3BF', '\x3C0', '\x5', '\x22E', '\x118', '\x2', '\x3C0', '\x3C1', 
		'\a', '\x14', '\x2', '\x2', '\x3C1', '\x3C2', '\x5', '\"', '\x12', '\x2', 
		'\x3C2', '\x3C3', '\a', '\x5', '\x2', '\x2', '\x3C3', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x3C4', '\x3C5', '\a', '*', '\x2', '\x2', '\x3C5', '\x3C6', 
		'\a', '\x4', '\x2', '\x2', '\x3C6', '\x3C7', '\x5', '\"', '\x12', '\x2', 
		'\x3C7', '\x3C8', '\a', '\x5', '\x2', '\x2', '\x3C8', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x3C9', '\x3CA', '\a', '+', '\x2', '\x2', '\x3CA', '\x3CB', 
		'\a', '\x4', '\x2', '\x2', '\x3CB', '\x3CC', '\x5', '\x186', '\xC4', '\x2', 
		'\x3CC', '\x3CD', '\a', '\x5', '\x2', '\x2', '\x3CD', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x3CE', '\x3CF', '\a', ',', '\x2', '\x2', '\x3CF', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\a', '-', '\x2', '\x2', 
		'\x3D1', '\x3D2', '\a', '\x4', '\x2', '\x2', '\x3D2', '\x3D3', '\x5', 
		'\"', '\x12', '\x2', '\x3D3', '\x3D4', '\a', '\x5', '\x2', '\x2', '\x3D4', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D6', '\a', '.', '\x2', '\x2', 
		'\x3D6', '\x3D7', '\a', '\x4', '\x2', '\x2', '\x3D7', '\x3D8', '\x5', 
		'\"', '\x12', '\x2', '\x3D8', '\x3D9', '\a', '\x5', '\x2', '\x2', '\x3D9', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3DB', '\a', '/', '\x2', '\x2', 
		'\x3DB', '\x3DC', '\a', '\x4', '\x2', '\x2', '\x3DC', '\x3DD', '\x5', 
		'\"', '\x12', '\x2', '\x3DD', '\x3DE', '\a', '\x5', '\x2', '\x2', '\x3DE', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\a', '\x30', '\x2', 
		'\x2', '\x3E0', '\x3E1', '\a', '\x4', '\x2', '\x2', '\x3E1', '\x3E2', 
		'\x5', '\"', '\x12', '\x2', '\x3E2', '\x3E3', '\a', '\x14', '\x2', '\x2', 
		'\x3E3', '\x3E4', '\x5', '\"', '\x12', '\x2', '\x3E4', '\x3E5', '\a', 
		'\x5', '\x2', '\x2', '\x3E5', '[', '\x3', '\x2', '\x2', '\x2', '\x3E6', 
		'\x3E7', '\a', '\x31', '\x2', '\x2', '\x3E7', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x3E8', '\x3E9', '\a', '\x32', '\x2', '\x2', '\x3E9', '\x3EA', 
		'\a', '\x4', '\x2', '\x2', '\x3EA', '\x3EB', '\x5', '\"', '\x12', '\x2', 
		'\x3EB', '\x3EC', '\a', '\x14', '\x2', '\x2', '\x3EC', '\x3ED', '\x5', 
		'\"', '\x12', '\x2', '\x3ED', '\x3EE', '\a', '\x5', '\x2', '\x2', '\x3EE', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '\x33', '\x2', 
		'\x2', '\x3F0', '\x3F1', '\a', '\x4', '\x2', '\x2', '\x3F1', '\x3F2', 
		'\x5', '\"', '\x12', '\x2', '\x3F2', '\x3F3', '\a', '\x14', '\x2', '\x2', 
		'\x3F3', '\x3F4', '\x5', '\"', '\x12', '\x2', '\x3F4', '\x3F5', '\a', 
		'\x5', '\x2', '\x2', '\x3F5', '\x61', '\x3', '\x2', '\x2', '\x2', '\x3F6', 
		'\x3F7', '\a', '\x34', '\x2', '\x2', '\x3F7', '\x3F8', '\a', '\x4', '\x2', 
		'\x2', '\x3F8', '\x3F9', '\x5', '\"', '\x12', '\x2', '\x3F9', '\x3FA', 
		'\a', '\x14', '\x2', '\x2', '\x3FA', '\x3FB', '\x5', '\"', '\x12', '\x2', 
		'\x3FB', '\x3FC', '\a', '\x5', '\x2', '\x2', '\x3FC', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x3FD', '\x3FE', '\a', '\x35', '\x2', '\x2', '\x3FE', '\x3FF', 
		'\a', '\x4', '\x2', '\x2', '\x3FF', '\x400', '\x5', '\"', '\x12', '\x2', 
		'\x400', '\x401', '\a', '\x14', '\x2', '\x2', '\x401', '\x402', '\x5', 
		'\"', '\x12', '\x2', '\x402', '\x403', '\a', '\x5', '\x2', '\x2', '\x403', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\a', '\x36', '\x2', 
		'\x2', '\x405', '\x406', '\a', '\x4', '\x2', '\x2', '\x406', '\x407', 
		'\x5', '\"', '\x12', '\x2', '\x407', '\x408', '\a', '\x14', '\x2', '\x2', 
		'\x408', '\x409', '\x5', '\"', '\x12', '\x2', '\x409', '\x40A', '\a', 
		'\x5', '\x2', '\x2', '\x40A', 'g', '\x3', '\x2', '\x2', '\x2', '\x40B', 
		'\x40C', '\a', '\x37', '\x2', '\x2', '\x40C', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x40D', '\x40E', '\a', '\x38', '\x2', '\x2', '\x40E', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x40F', '\x410', '\a', '\x39', '\x2', '\x2', '\x410', 
		'\x411', '\a', '\x4', '\x2', '\x2', '\x411', '\x412', '\x5', '\"', '\x12', 
		'\x2', '\x412', '\x413', '\a', '\x5', '\x2', '\x2', '\x413', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x414', '\x415', '\a', ':', '\x2', '\x2', '\x415', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x416', '\x417', '\a', ';', '\x2', '\x2', 
		'\x417', 'q', '\x3', '\x2', '\x2', '\x2', '\x418', '\x419', '\a', '<', 
		'\x2', '\x2', '\x419', '\x41A', '\a', '\x4', '\x2', '\x2', '\x41A', '\x41B', 
		'\x5', '\"', '\x12', '\x2', '\x41B', '\x41C', '\a', '\x5', '\x2', '\x2', 
		'\x41C', 's', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x41E', '\a', '=', 
		'\x2', '\x2', '\x41E', '\x41F', '\a', '\x4', '\x2', '\x2', '\x41F', '\x420', 
		'\x5', '\"', '\x12', '\x2', '\x420', '\x421', '\a', '\x5', '\x2', '\x2', 
		'\x421', 'u', '\x3', '\x2', '\x2', '\x2', '\x422', '\x423', '\a', '>', 
		'\x2', '\x2', '\x423', '\x424', '\a', '\x4', '\x2', '\x2', '\x424', '\x425', 
		'\x5', '\"', '\x12', '\x2', '\x425', '\x426', '\a', '\x14', '\x2', '\x2', 
		'\x426', '\x427', '\x5', '\"', '\x12', '\x2', '\x427', '\x428', '\a', 
		'\x5', '\x2', '\x2', '\x428', 'w', '\x3', '\x2', '\x2', '\x2', '\x429', 
		'\x42A', '\a', '?', '\x2', '\x2', '\x42A', '\x42B', '\a', '\x4', '\x2', 
		'\x2', '\x42B', '\x42C', '\x5', '\"', '\x12', '\x2', '\x42C', '\x42D', 
		'\a', '\x14', '\x2', '\x2', '\x42D', '\x42E', '\x5', '\"', '\x12', '\x2', 
		'\x42E', '\x42F', '\a', '\x5', '\x2', '\x2', '\x42F', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x430', '\x431', '\a', '@', '\x2', '\x2', '\x431', '\x432', 
		'\a', '\x4', '\x2', '\x2', '\x432', '\x433', '\x5', '\"', '\x12', '\x2', 
		'\x433', '\x434', '\a', '\x5', '\x2', '\x2', '\x434', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x435', '\x436', '\a', '\x41', '\x2', '\x2', '\x436', '\x437', 
		'\a', '\x4', '\x2', '\x2', '\x437', '\x438', '\x5', '\"', '\x12', '\x2', 
		'\x438', '\x439', '\a', '\x5', '\x2', '\x2', '\x439', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x43A', '\x43B', '\a', '\x42', '\x2', '\x2', '\x43B', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x43C', '\x43D', '\a', '\x43', '\x2', '\x2', 
		'\x43D', '\x43E', '\a', '\x4', '\x2', '\x2', '\x43E', '\x43F', '\x5', 
		'\"', '\x12', '\x2', '\x43F', '\x440', '\a', '\x5', '\x2', '\x2', '\x440', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x441', '\x442', '\a', '\x44', '\x2', 
		'\x2', '\x442', '\x443', '\a', '\x4', '\x2', '\x2', '\x443', '\x444', 
		'\x5', '\"', '\x12', '\x2', '\x444', '\x445', '\a', '\x14', '\x2', '\x2', 
		'\x445', '\x446', '\x5', '\x1C8', '\xE5', '\x2', '\x446', '\x447', '\a', 
		'\x5', '\x2', '\x2', '\x447', '\x83', '\x3', '\x2', '\x2', '\x2', '\x448', 
		'\x449', '\a', '\x45', '\x2', '\x2', '\x449', '\x44A', '\a', '\x4', '\x2', 
		'\x2', '\x44A', '\x44B', '\x5', '\"', '\x12', '\x2', '\x44B', '\x44C', 
		'\a', '\x5', '\x2', '\x2', '\x44C', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x44D', '\x44E', '\a', '\x46', '\x2', '\x2', '\x44E', '\x44F', '\a', 
		'\x4', '\x2', '\x2', '\x44F', '\x450', '\x5', '\"', '\x12', '\x2', '\x450', 
		'\x451', '\a', '\x5', '\x2', '\x2', '\x451', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x452', '\x453', '\a', 'G', '\x2', '\x2', '\x453', '\x454', '\a', 
		'\x4', '\x2', '\x2', '\x454', '\x455', '\x5', '\x18A', '\xC6', '\x2', 
		'\x455', '\x456', '\a', '\x5', '\x2', '\x2', '\x456', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x457', '\x458', '\a', 'H', '\x2', '\x2', '\x458', '\x459', 
		'\a', '\x4', '\x2', '\x2', '\x459', '\x45A', '\x5', '\"', '\x12', '\x2', 
		'\x45A', '\x45B', '\a', '\x5', '\x2', '\x2', '\x45B', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x45C', '\x45D', '\a', 'I', '\x2', '\x2', '\x45D', '\x45E', 
		'\a', '\x4', '\x2', '\x2', '\x45E', '\x45F', '\x5', '\"', '\x12', '\x2', 
		'\x45F', '\x460', '\a', '\x5', '\x2', '\x2', '\x460', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x461', '\x462', '\a', 'J', '\x2', '\x2', '\x462', '\x463', 
		'\a', '\x4', '\x2', '\x2', '\x463', '\x464', '\x5', '\"', '\x12', '\x2', 
		'\x464', '\x465', '\a', '\x5', '\x2', '\x2', '\x465', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x466', '\x467', '\a', 'K', '\x2', '\x2', '\x467', '\x468', 
		'\a', '\x4', '\x2', '\x2', '\x468', '\x469', '\x5', '\"', '\x12', '\x2', 
		'\x469', '\x46A', '\a', '\x14', '\x2', '\x2', '\x46A', '\x46B', '\x5', 
		'\"', '\x12', '\x2', '\x46B', '\x46C', '\a', '\x5', '\x2', '\x2', '\x46C', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', '\a', 'L', '\x2', 
		'\x2', '\x46E', '\x46F', '\a', '\x4', '\x2', '\x2', '\x46F', '\x470', 
		'\x5', '\"', '\x12', '\x2', '\x470', '\x471', '\a', '\x5', '\x2', '\x2', 
		'\x471', '\x93', '\x3', '\x2', '\x2', '\x2', '\x472', '\x473', '\a', 'M', 
		'\x2', '\x2', '\x473', '\x474', '\a', '\x4', '\x2', '\x2', '\x474', '\x475', 
		'\x5', '\"', '\x12', '\x2', '\x475', '\x476', '\a', '\x5', '\x2', '\x2', 
		'\x476', '\x95', '\x3', '\x2', '\x2', '\x2', '\x477', '\x478', '\a', 'N', 
		'\x2', '\x2', '\x478', '\x479', '\a', '\x4', '\x2', '\x2', '\x479', '\x47A', 
		'\x5', '\"', '\x12', '\x2', '\x47A', '\x47B', '\a', '\x14', '\x2', '\x2', 
		'\x47B', '\x47C', '\x5', '\"', '\x12', '\x2', '\x47C', '\x47D', '\a', 
		'\x5', '\x2', '\x2', '\x47D', '\x97', '\x3', '\x2', '\x2', '\x2', '\x47E', 
		'\x47F', '\a', 'O', '\x2', '\x2', '\x47F', '\x480', '\a', '\x4', '\x2', 
		'\x2', '\x480', '\x481', '\x5', '\"', '\x12', '\x2', '\x481', '\x482', 
		'\a', '\x5', '\x2', '\x2', '\x482', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x483', '\x484', '\a', 'P', '\x2', '\x2', '\x484', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x485', '\x486', '\a', 'Q', '\x2', '\x2', '\x486', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x487', '\x488', '\a', 'R', '\x2', '\x2', 
		'\x488', '\x489', '\a', '\x4', '\x2', '\x2', '\x489', '\x48A', '\x5', 
		'\"', '\x12', '\x2', '\x48A', '\x48B', '\a', '\x14', '\x2', '\x2', '\x48B', 
		'\x48C', '\x5', '\x1DE', '\xF0', '\x2', '\x48C', '\x48D', '\a', '\x5', 
		'\x2', '\x2', '\x48D', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x48E', '\x48F', 
		'\a', 'S', '\x2', '\x2', '\x48F', '\x490', '\a', '\x4', '\x2', '\x2', 
		'\x490', '\x491', '\x5', '\"', '\x12', '\x2', '\x491', '\x492', '\a', 
		'\x14', '\x2', '\x2', '\x492', '\x493', '\x5', '\x1F0', '\xF9', '\x2', 
		'\x493', '\x494', '\a', '\x5', '\x2', '\x2', '\x494', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x495', '\x496', '\a', 'T', '\x2', '\x2', '\x496', '\x497', 
		'\a', '\x4', '\x2', '\x2', '\x497', '\x498', '\x5', '\"', '\x12', '\x2', 
		'\x498', '\x499', '\a', '\x5', '\x2', '\x2', '\x499', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x49A', '\x49B', '\a', 'U', '\x2', '\x2', '\x49B', '\x49C', 
		'\a', '\x4', '\x2', '\x2', '\x49C', '\x49D', '\x5', '\"', '\x12', '\x2', 
		'\x49D', '\x49E', '\a', '\x5', '\x2', '\x2', '\x49E', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x49F', '\x4A0', '\a', 'V', '\x2', '\x2', '\x4A0', '\x4A1', 
		'\a', '\x4', '\x2', '\x2', '\x4A1', '\x4A2', '\x5', '\"', '\x12', '\x2', 
		'\x4A2', '\x4A3', '\a', '\x5', '\x2', '\x2', '\x4A3', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\x4A4', '\x4A5', '\a', 'W', '\x2', '\x2', '\x4A5', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', '\a', 'X', '\x2', '\x2', 
		'\x4A7', '\x4A8', '\a', '\x4', '\x2', '\x2', '\x4A8', '\x4A9', '\x5', 
		'\"', '\x12', '\x2', '\x4A9', '\x4AA', '\a', '\x5', '\x2', '\x2', '\x4AA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AC', '\a', 'Y', '\x2', 
		'\x2', '\x4AC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AE', 
		'\a', 'Z', '\x2', '\x2', '\x4AE', '\x4AF', '\a', '\x4', '\x2', '\x2', 
		'\x4AF', '\x4B0', '\x5', '\"', '\x12', '\x2', '\x4B0', '\x4B1', '\a', 
		'\x5', '\x2', '\x2', '\x4B1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x4B2', 
		'\x4B3', '\a', '[', '\x2', '\x2', '\x4B3', '\x4B4', '\a', '\x4', '\x2', 
		'\x2', '\x4B4', '\x4B5', '\x5', '\"', '\x12', '\x2', '\x4B5', '\x4B6', 
		'\a', '\x5', '\x2', '\x2', '\x4B6', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x4B7', '\x4B8', '\a', '\\', '\x2', '\x2', '\x4B8', '\x4B9', '\a', '\x4', 
		'\x2', '\x2', '\x4B9', '\x4BA', '\x5', '\"', '\x12', '\x2', '\x4BA', '\x4BB', 
		'\a', '\x5', '\x2', '\x2', '\x4BB', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x4BC', '\x4BD', '\a', ']', '\x2', '\x2', '\x4BD', '\x4BE', '\a', '\x4', 
		'\x2', '\x2', '\x4BE', '\x4BF', '\x5', '\"', '\x12', '\x2', '\x4BF', '\x4C0', 
		'\a', '\x5', '\x2', '\x2', '\x4C0', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\x4C1', '\x4C2', '\a', '^', '\x2', '\x2', '\x4C2', '\x4C3', '\a', '\x4', 
		'\x2', '\x2', '\x4C3', '\x4C4', '\x5', '\"', '\x12', '\x2', '\x4C4', '\x4C5', 
		'\a', '\x5', '\x2', '\x2', '\x4C5', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x4C6', '\x4C7', '\a', '_', '\x2', '\x2', '\x4C7', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\x4C8', '\x4C9', '\a', '`', '\x2', '\x2', '\x4C9', '\x4CA', 
		'\a', '\x4', '\x2', '\x2', '\x4CA', '\x4CB', '\x5', '\"', '\x12', '\x2', 
		'\x4CB', '\x4CC', '\a', '\x14', '\x2', '\x2', '\x4CC', '\x4CD', '\x5', 
		'\"', '\x12', '\x2', '\x4CD', '\x4CE', '\a', '\x5', '\x2', '\x2', '\x4CE', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D0', '\a', '\x61', '\x2', 
		'\x2', '\x4D0', '\x4D1', '\a', '\x4', '\x2', '\x2', '\x4D1', '\x4D2', 
		'\x5', '\"', '\x12', '\x2', '\x4D2', '\x4D3', '\a', '\x5', '\x2', '\x2', 
		'\x4D3', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D5', '\a', '\x62', 
		'\x2', '\x2', '\x4D5', '\x4D6', '\a', '\x4', '\x2', '\x2', '\x4D6', '\x4D7', 
		'\x5', '\"', '\x12', '\x2', '\x4D7', '\x4D8', '\a', '\x14', '\x2', '\x2', 
		'\x4D8', '\x4D9', '\x5', '\"', '\x12', '\x2', '\x4D9', '\x4DA', '\a', 
		'\x14', '\x2', '\x2', '\x4DA', '\x4DB', '\x5', '\x20E', '\x108', '\x2', 
		'\x4DB', '\x4DC', '\a', '\x5', '\x2', '\x2', '\x4DC', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\x4DD', '\x4DE', '\a', '\x63', '\x2', '\x2', '\x4DE', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\a', '\x64', '\x2', '\x2', 
		'\x4E0', '\x4E1', '\a', '\x4', '\x2', '\x2', '\x4E1', '\x4E2', '\x5', 
		'\"', '\x12', '\x2', '\x4E2', '\x4E3', '\a', '\x5', '\x2', '\x2', '\x4E3', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', '\a', '\x65', '\x2', 
		'\x2', '\x4E5', '\x4E6', '\a', '\x4', '\x2', '\x2', '\x4E6', '\x4E7', 
		'\x5', '\"', '\x12', '\x2', '\x4E7', '\x4E8', '\a', '\x14', '\x2', '\x2', 
		'\x4E8', '\x4E9', '\x5', '\"', '\x12', '\x2', '\x4E9', '\x4EA', '\a', 
		'\x14', '\x2', '\x2', '\x4EA', '\x4EB', '\x5', '\"', '\x12', '\x2', '\x4EB', 
		'\x4EC', '\a', '\x5', '\x2', '\x2', '\x4EC', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x4ED', '\x4EE', '\a', '\x66', '\x2', '\x2', '\x4EE', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4F0', '\a', 'g', '\x2', '\x2', 
		'\x4F0', '\x4F1', '\a', '\x4', '\x2', '\x2', '\x4F1', '\x4F2', '\x5', 
		'\"', '\x12', '\x2', '\x4F2', '\x4F3', '\a', '\x5', '\x2', '\x2', '\x4F3', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\a', 'h', '\x2', 
		'\x2', '\x4F5', '\x4F6', '\a', '\x4', '\x2', '\x2', '\x4F6', '\x4F7', 
		'\x5', '\"', '\x12', '\x2', '\x4F7', '\x4F8', '\a', '\x5', '\x2', '\x2', 
		'\x4F8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FA', '\a', 'i', 
		'\x2', '\x2', '\x4FA', '\x4FB', '\a', '\x4', '\x2', '\x2', '\x4FB', '\x4FC', 
		'\x5', '\"', '\x12', '\x2', '\x4FC', '\x4FD', '\a', '\x5', '\x2', '\x2', 
		'\x4FD', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4FF', '\a', 'j', 
		'\x2', '\x2', '\x4FF', '\x500', '\a', '\x4', '\x2', '\x2', '\x500', '\x501', 
		'\x5', '\"', '\x12', '\x2', '\x501', '\x502', '\a', '\x5', '\x2', '\x2', 
		'\x502', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x503', '\x504', '\a', 'k', 
		'\x2', '\x2', '\x504', '\x505', '\a', '\x4', '\x2', '\x2', '\x505', '\x506', 
		'\x5', '\"', '\x12', '\x2', '\x506', '\x507', '\a', '\x5', '\x2', '\x2', 
		'\x507', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x508', '\x509', '\a', 'l', 
		'\x2', '\x2', '\x509', '\x50A', '\a', '\x4', '\x2', '\x2', '\x50A', '\x50B', 
		'\x5', '\"', '\x12', '\x2', '\x50B', '\x50C', '\a', '\x5', '\x2', '\x2', 
		'\x50C', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x50D', '\x50E', '\a', 'm', 
		'\x2', '\x2', '\x50E', '\x50F', '\a', '\x4', '\x2', '\x2', '\x50F', '\x510', 
		'\x5', '\"', '\x12', '\x2', '\x510', '\x511', '\a', '\x5', '\x2', '\x2', 
		'\x511', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x512', '\x513', '\a', 'n', 
		'\x2', '\x2', '\x513', '\x514', '\a', '\x4', '\x2', '\x2', '\x514', '\x515', 
		'\x5', '\"', '\x12', '\x2', '\x515', '\x516', '\a', '\x5', '\x2', '\x2', 
		'\x516', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x517', '\x518', '\a', 'o', 
		'\x2', '\x2', '\x518', '\x519', '\a', '\x4', '\x2', '\x2', '\x519', '\x51A', 
		'\x5', '\"', '\x12', '\x2', '\x51A', '\x51B', '\a', '\x5', '\x2', '\x2', 
		'\x51B', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51D', '\a', 'p', 
		'\x2', '\x2', '\x51D', '\x51E', '\a', '\x4', '\x2', '\x2', '\x51E', '\x51F', 
		'\x5', '\"', '\x12', '\x2', '\x51F', '\x520', '\a', '\x14', '\x2', '\x2', 
		'\x520', '\x521', '\x5', '\"', '\x12', '\x2', '\x521', '\x522', '\a', 
		'\x5', '\x2', '\x2', '\x522', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x523', 
		'\x524', '\a', 'q', '\x2', '\x2', '\x524', '\x525', '\a', '\x4', '\x2', 
		'\x2', '\x525', '\x526', '\x5', '\"', '\x12', '\x2', '\x526', '\x527', 
		'\a', '\x14', '\x2', '\x2', '\x527', '\x528', '\x5', '\"', '\x12', '\x2', 
		'\x528', '\x529', '\a', '\x5', '\x2', '\x2', '\x529', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\x52A', '\x52B', '\a', 'r', '\x2', '\x2', '\x52B', '\x52C', 
		'\a', '\x4', '\x2', '\x2', '\x52C', '\x52D', '\x5', '\"', '\x12', '\x2', 
		'\x52D', '\x52E', '\a', '\x5', '\x2', '\x2', '\x52E', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\x52F', '\x530', '\a', 's', '\x2', '\x2', '\x530', '\x531', 
		'\a', '\x4', '\x2', '\x2', '\x531', '\x532', '\x5', '\"', '\x12', '\x2', 
		'\x532', '\x533', '\a', '\x5', '\x2', '\x2', '\x533', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\x534', '\x535', '\a', 't', '\x2', '\x2', '\x535', '\x536', 
		'\a', '\x4', '\x2', '\x2', '\x536', '\x537', '\x5', '\"', '\x12', '\x2', 
		'\x537', '\x538', '\a', '\x5', '\x2', '\x2', '\x538', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\x539', '\x53A', '\a', 'u', '\x2', '\x2', '\x53A', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\x53B', '\x53C', '\a', 'v', '\x2', '\x2', 
		'\x53C', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', '\a', 'w', 
		'\x2', '\x2', '\x53E', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x540', 
		'\a', 'x', '\x2', '\x2', '\x540', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\x541', '\x542', '\a', 'y', '\x2', '\x2', '\x542', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\x543', '\x544', '\a', 'z', '\x2', '\x2', '\x544', '\x545', 
		'\a', '\x4', '\x2', '\x2', '\x545', '\x546', '\x5', '\"', '\x12', '\x2', 
		'\x546', '\x547', '\a', '\x5', '\x2', '\x2', '\x547', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\x548', '\x549', '\a', '{', '\x2', '\x2', '\x549', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\x54A', '\x54B', '\a', '|', '\x2', '\x2', 
		'\x54B', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x54D', '\a', '}', 
		'\x2', '\x2', '\x54D', '\x54E', '\a', '\x4', '\x2', '\x2', '\x54E', '\x54F', 
		'\x5', '\"', '\x12', '\x2', '\x54F', '\x550', '\a', '\x14', '\x2', '\x2', 
		'\x550', '\x551', '\x5', '\"', '\x12', '\x2', '\x551', '\x552', '\a', 
		'\x14', '\x2', '\x2', '\x552', '\x553', '\x5', '\x216', '\x10C', '\x2', 
		'\x553', '\x554', '\a', '\x5', '\x2', '\x2', '\x554', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\x555', '\x556', '\a', '~', '\x2', '\x2', '\x556', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\x557', '\x558', '\a', '\x7F', '\x2', '\x2', 
		'\x558', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x559', '\x55A', '\a', '\x80', 
		'\x2', '\x2', '\x55A', '\x55B', '\a', '\x4', '\x2', '\x2', '\x55B', '\x55C', 
		'\x5', '\"', '\x12', '\x2', '\x55C', '\x55D', '\a', '\x14', '\x2', '\x2', 
		'\x55D', '\x55E', '\x5', '\"', '\x12', '\x2', '\x55E', '\x55F', '\a', 
		'\x5', '\x2', '\x2', '\x55F', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x560', 
		'\x561', '\a', '\x81', '\x2', '\x2', '\x561', '\x562', '\a', '\x4', '\x2', 
		'\x2', '\x562', '\x563', '\x5', '\"', '\x12', '\x2', '\x563', '\x564', 
		'\a', '\x5', '\x2', '\x2', '\x564', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\x565', '\x566', '\a', '\x82', '\x2', '\x2', '\x566', '\x567', '\a', 
		'\x4', '\x2', '\x2', '\x567', '\x568', '\x5', '\"', '\x12', '\x2', '\x568', 
		'\x569', '\a', '\x14', '\x2', '\x2', '\x569', '\x56A', '\x5', '\"', '\x12', 
		'\x2', '\x56A', '\x56B', '\a', '\x5', '\x2', '\x2', '\x56B', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x56C', '\x56D', '\a', '\x83', '\x2', '\x2', '\x56D', 
		'\x56E', '\a', '\x4', '\x2', '\x2', '\x56E', '\x56F', '\x5', '\"', '\x12', 
		'\x2', '\x56F', '\x570', '\a', '\x14', '\x2', '\x2', '\x570', '\x571', 
		'\x5', '\"', '\x12', '\x2', '\x571', '\x572', '\a', '\x5', '\x2', '\x2', 
		'\x572', '\x101', '\x3', '\x2', '\x2', '\x2', '\x573', '\x574', '\a', 
		'\x84', '\x2', '\x2', '\x574', '\x575', '\a', '\x4', '\x2', '\x2', '\x575', 
		'\x576', '\x5', '\"', '\x12', '\x2', '\x576', '\x577', '\a', '\x14', '\x2', 
		'\x2', '\x577', '\x578', '\x5', '\"', '\x12', '\x2', '\x578', '\x579', 
		'\a', '\x5', '\x2', '\x2', '\x579', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x57A', '\x57B', '\a', '\x85', '\x2', '\x2', '\x57B', '\x57C', '\a', 
		'\x4', '\x2', '\x2', '\x57C', '\x57D', '\x5', '\"', '\x12', '\x2', '\x57D', 
		'\x57E', '\a', '\x5', '\x2', '\x2', '\x57E', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x57F', '\x580', '\a', '\x86', '\x2', '\x2', '\x580', '\x581', 
		'\a', '\x4', '\x2', '\x2', '\x581', '\x582', '\x5', '\"', '\x12', '\x2', 
		'\x582', '\x583', '\a', '\x5', '\x2', '\x2', '\x583', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x584', '\x585', '\a', '\x87', '\x2', '\x2', '\x585', 
		'\x586', '\a', '\x4', '\x2', '\x2', '\x586', '\x587', '\x5', '\"', '\x12', 
		'\x2', '\x587', '\x588', '\a', '\x5', '\x2', '\x2', '\x588', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\a', '\x88', '\x2', '\x2', 
		'\x58A', '\x58B', '\a', '\x4', '\x2', '\x2', '\x58B', '\x58C', '\x5', 
		'\"', '\x12', '\x2', '\x58C', '\x58D', '\a', '\x5', '\x2', '\x2', '\x58D', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x58F', '\a', '\x89', '\x2', 
		'\x2', '\x58F', '\x590', '\a', '\x4', '\x2', '\x2', '\x590', '\x591', 
		'\x5', '\"', '\x12', '\x2', '\x591', '\x592', '\a', '\x5', '\x2', '\x2', 
		'\x592', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x593', '\x594', '\a', 
		'\x8A', '\x2', '\x2', '\x594', '\x595', '\a', '\x4', '\x2', '\x2', '\x595', 
		'\x596', '\x5', '\"', '\x12', '\x2', '\x596', '\x597', '\a', '\x5', '\x2', 
		'\x2', '\x597', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x598', '\x599', 
		'\a', '\x8B', '\x2', '\x2', '\x599', '\x59A', '\a', '\x4', '\x2', '\x2', 
		'\x59A', '\x59B', '\x5', '\"', '\x12', '\x2', '\x59B', '\x59C', '\a', 
		'\x5', '\x2', '\x2', '\x59C', '\x111', '\x3', '\x2', '\x2', '\x2', '\x59D', 
		'\x59E', '\a', '\x8C', '\x2', '\x2', '\x59E', '\x59F', '\a', '\x4', '\x2', 
		'\x2', '\x59F', '\x5A0', '\x5', '\"', '\x12', '\x2', '\x5A0', '\x5A1', 
		'\a', '\x14', '\x2', '\x2', '\x5A1', '\x5A2', '\x5', '\"', '\x12', '\x2', 
		'\x5A2', '\x5A3', '\a', '\x5', '\x2', '\x2', '\x5A3', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\a', '\x8D', '\x2', '\x2', '\x5A5', 
		'\x5A6', '\a', '\x4', '\x2', '\x2', '\x5A6', '\x5A7', '\x5', '\"', '\x12', 
		'\x2', '\x5A7', '\x5A8', '\a', '\x5', '\x2', '\x2', '\x5A8', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x5A9', '\x5AA', '\a', '\x8E', '\x2', '\x2', 
		'\x5AA', '\x5AB', '\a', '\x4', '\x2', '\x2', '\x5AB', '\x5AC', '\x5', 
		'\"', '\x12', '\x2', '\x5AC', '\x5AD', '\a', '\x5', '\x2', '\x2', '\x5AD', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AF', '\a', '\x8F', '\x2', 
		'\x2', '\x5AF', '\x5B0', '\a', '\x4', '\x2', '\x2', '\x5B0', '\x5B1', 
		'\x5', '\"', '\x12', '\x2', '\x5B1', '\x5B2', '\a', '\x5', '\x2', '\x2', 
		'\x5B2', '\x119', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B4', '\a', 
		'\x90', '\x2', '\x2', '\x5B4', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x5B5', 
		'\x5B6', '\a', '\x91', '\x2', '\x2', '\x5B6', '\x5B7', '\a', '\x4', '\x2', 
		'\x2', '\x5B7', '\x5B8', '\x5', '\"', '\x12', '\x2', '\x5B8', '\x5B9', 
		'\a', '\x5', '\x2', '\x2', '\x5B9', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x5BA', '\x5BB', '\a', '\x92', '\x2', '\x2', '\x5BB', '\x5BC', '\a', 
		'\x4', '\x2', '\x2', '\x5BC', '\x5BD', '\x5', '\"', '\x12', '\x2', '\x5BD', 
		'\x5BE', '\a', '\x5', '\x2', '\x2', '\x5BE', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x5BF', '\x5C0', '\a', '\x93', '\x2', '\x2', '\x5C0', '\x5C1', 
		'\a', '\x4', '\x2', '\x2', '\x5C1', '\x5C2', '\x5', '\"', '\x12', '\x2', 
		'\x5C2', '\x5C3', '\a', '\x14', '\x2', '\x2', '\x5C3', '\x5C4', '\x5', 
		'\"', '\x12', '\x2', '\x5C4', '\x5C5', '\a', '\x5', '\x2', '\x2', '\x5C5', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x5C6', '\x5C7', '\a', '\x94', '\x2', 
		'\x2', '\x5C7', '\x123', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5C9', 
		'\a', '\x95', '\x2', '\x2', '\x5C9', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x5CA', '\x5CB', '\a', '\x96', '\x2', '\x2', '\x5CB', '\x5CC', '\a', 
		'\x4', '\x2', '\x2', '\x5CC', '\x5CD', '\x5', '\"', '\x12', '\x2', '\x5CD', 
		'\x5CE', '\a', '\x5', '\x2', '\x2', '\x5CE', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x5CF', '\x5D0', '\a', '\x97', '\x2', '\x2', '\x5D0', '\x5D1', 
		'\a', '\x4', '\x2', '\x2', '\x5D1', '\x5D2', '\x5', '\"', '\x12', '\x2', 
		'\x5D2', '\x5D3', '\a', '\x14', '\x2', '\x2', '\x5D3', '\x5D4', '\x5', 
		'\"', '\x12', '\x2', '\x5D4', '\x5D5', '\a', '\x5', '\x2', '\x2', '\x5D5', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D7', '\a', '\x98', '\x2', 
		'\x2', '\x5D7', '\x5D8', '\a', '\x4', '\x2', '\x2', '\x5D8', '\x5D9', 
		'\x5', '\"', '\x12', '\x2', '\x5D9', '\x5DA', '\a', '\x14', '\x2', '\x2', 
		'\x5DA', '\x5DB', '\x5', '\x188', '\xC5', '\x2', '\x5DB', '\x5DC', '\a', 
		'\x5', '\x2', '\x2', '\x5DC', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x5DD', 
		'\x5DE', '\a', '\x99', '\x2', '\x2', '\x5DE', '\x5DF', '\a', '\x4', '\x2', 
		'\x2', '\x5DF', '\x5E0', '\x5', '\"', '\x12', '\x2', '\x5E0', '\x5E1', 
		'\a', '\x14', '\x2', '\x2', '\x5E1', '\x5E2', '\x5', '\"', '\x12', '\x2', 
		'\x5E2', '\x5E3', '\a', '\x5', '\x2', '\x2', '\x5E3', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x5E4', '\x5E5', '\a', '\x9A', '\x2', '\x2', '\x5E5', 
		'\x5E6', '\a', '\x4', '\x2', '\x2', '\x5E6', '\x5E7', '\x5', '\"', '\x12', 
		'\x2', '\x5E7', '\x5E8', '\a', '\x14', '\x2', '\x2', '\x5E8', '\x5E9', 
		'\x5', '\"', '\x12', '\x2', '\x5E9', '\x5EA', '\a', '\x14', '\x2', '\x2', 
		'\x5EA', '\x5EB', '\x5', '\"', '\x12', '\x2', '\x5EB', '\x5EC', '\a', 
		'\x5', '\x2', '\x2', '\x5EC', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x5ED', 
		'\x5EE', '\a', '\x9B', '\x2', '\x2', '\x5EE', '\x5EF', '\a', '\x4', '\x2', 
		'\x2', '\x5EF', '\x5F0', '\x5', '\"', '\x12', '\x2', '\x5F0', '\x5F1', 
		'\a', '\x14', '\x2', '\x2', '\x5F1', '\x5F2', '\x5', '\"', '\x12', '\x2', 
		'\x5F2', '\x5F3', '\a', '\x5', '\x2', '\x2', '\x5F3', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x5F4', '\x5F5', '\a', '\x9C', '\x2', '\x2', '\x5F5', 
		'\x5F6', '\a', '\x4', '\x2', '\x2', '\x5F6', '\x5F7', '\x5', '\"', '\x12', 
		'\x2', '\x5F7', '\x5F8', '\a', '\x14', '\x2', '\x2', '\x5F8', '\x5F9', 
		'\x5', '\"', '\x12', '\x2', '\x5F9', '\x5FA', '\a', '\x14', '\x2', '\x2', 
		'\x5FA', '\x5FB', '\x5', '\"', '\x12', '\x2', '\x5FB', '\x5FC', '\a', 
		'\x14', '\x2', '\x2', '\x5FC', '\x5FD', '\x5', '\x21C', '\x10F', '\x2', 
		'\x5FD', '\x5FE', '\a', '\x5', '\x2', '\x2', '\x5FE', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x5FF', '\x600', '\a', '\x9D', '\x2', '\x2', '\x600', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x601', '\x602', '\a', '\x9E', '\x2', 
		'\x2', '\x602', '\x603', '\a', '\x4', '\x2', '\x2', '\x603', '\x604', 
		'\x5', '\"', '\x12', '\x2', '\x604', '\x605', '\a', '\x5', '\x2', '\x2', 
		'\x605', '\x137', '\x3', '\x2', '\x2', '\x2', '\x606', '\x607', '\a', 
		'\x9F', '\x2', '\x2', '\x607', '\x608', '\a', '\x4', '\x2', '\x2', '\x608', 
		'\x609', '\x5', '\"', '\x12', '\x2', '\x609', '\x60A', '\a', '\x14', '\x2', 
		'\x2', '\x60A', '\x60B', '\x5', '\"', '\x12', '\x2', '\x60B', '\x60C', 
		'\a', '\x5', '\x2', '\x2', '\x60C', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x60D', '\x60E', '\a', '\xA0', '\x2', '\x2', '\x60E', '\x60F', '\a', 
		'\x4', '\x2', '\x2', '\x60F', '\x610', '\x5', '\"', '\x12', '\x2', '\x610', 
		'\x611', '\a', '\x14', '\x2', '\x2', '\x611', '\x612', '\x5', '\"', '\x12', 
		'\x2', '\x612', '\x613', '\a', '\x5', '\x2', '\x2', '\x613', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x614', '\x615', '\a', '\xA1', '\x2', '\x2', 
		'\x615', '\x616', '\a', '\x4', '\x2', '\x2', '\x616', '\x617', '\x5', 
		'\"', '\x12', '\x2', '\x617', '\x618', '\a', '\x14', '\x2', '\x2', '\x618', 
		'\x619', '\x5', '\"', '\x12', '\x2', '\x619', '\x61A', '\a', '\x5', '\x2', 
		'\x2', '\x61A', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x61B', '\x61C', 
		'\a', '\xA2', '\x2', '\x2', '\x61C', '\x61D', '\a', '\x4', '\x2', '\x2', 
		'\x61D', '\x61E', '\x5', '\"', '\x12', '\x2', '\x61E', '\x61F', '\a', 
		'\x5', '\x2', '\x2', '\x61F', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x620', 
		'\x621', '\a', '\xA3', '\x2', '\x2', '\x621', '\x622', '\a', '\x4', '\x2', 
		'\x2', '\x622', '\x623', '\x5', '\"', '\x12', '\x2', '\x623', '\x624', 
		'\a', '\x5', '\x2', '\x2', '\x624', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x625', '\x626', '\a', '\xA4', '\x2', '\x2', '\x626', '\x627', '\a', 
		'\x4', '\x2', '\x2', '\x627', '\x628', '\x5', '\"', '\x12', '\x2', '\x628', 
		'\x629', '\a', '\x14', '\x2', '\x2', '\x629', '\x62A', '\x5', '\"', '\x12', 
		'\x2', '\x62A', '\x62B', '\a', '\x14', '\x2', '\x2', '\x62B', '\x62C', 
		'\x5', '\"', '\x12', '\x2', '\x62C', '\x62D', '\a', '\x14', '\x2', '\x2', 
		'\x62D', '\x62E', '\x5', '\"', '\x12', '\x2', '\x62E', '\x62F', '\a', 
		'\x14', '\x2', '\x2', '\x62F', '\x630', '\x5', '\"', '\x12', '\x2', '\x630', 
		'\x631', '\a', '\x5', '\x2', '\x2', '\x631', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x632', '\x633', '\a', '\xA5', '\x2', '\x2', '\x633', '\x634', 
		'\a', '\x4', '\x2', '\x2', '\x634', '\x635', '\x5', '\"', '\x12', '\x2', 
		'\x635', '\x636', '\a', '\x14', '\x2', '\x2', '\x636', '\x637', '\x5', 
		'\"', '\x12', '\x2', '\x637', '\x638', '\a', '\x14', '\x2', '\x2', '\x638', 
		'\x639', '\x5', '\"', '\x12', '\x2', '\x639', '\x63A', '\a', '\x14', '\x2', 
		'\x2', '\x63A', '\x63B', '\x5', '\"', '\x12', '\x2', '\x63B', '\x63C', 
		'\a', '\x14', '\x2', '\x2', '\x63C', '\x63D', '\x5', '\"', '\x12', '\x2', 
		'\x63D', '\x63E', '\a', '\x5', '\x2', '\x2', '\x63E', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x63F', '\x640', '\a', '\xA6', '\x2', '\x2', '\x640', 
		'\x641', '\a', '\x4', '\x2', '\x2', '\x641', '\x642', '\x5', '\"', '\x12', 
		'\x2', '\x642', '\x643', '\a', '\x14', '\x2', '\x2', '\x643', '\x644', 
		'\x5', '\"', '\x12', '\x2', '\x644', '\x645', '\a', '\x14', '\x2', '\x2', 
		'\x645', '\x646', '\x5', '\"', '\x12', '\x2', '\x646', '\x647', '\a', 
		'\x14', '\x2', '\x2', '\x647', '\x648', '\x5', '\"', '\x12', '\x2', '\x648', 
		'\x649', '\a', '\x14', '\x2', '\x2', '\x649', '\x64A', '\x5', '\"', '\x12', 
		'\x2', '\x64A', '\x64B', '\a', '\x5', '\x2', '\x2', '\x64B', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x64C', '\x64D', '\a', '\xA7', '\x2', '\x2', 
		'\x64D', '\x64E', '\a', '\x4', '\x2', '\x2', '\x64E', '\x64F', '\x5', 
		'\"', '\x12', '\x2', '\x64F', '\x650', '\a', '\x14', '\x2', '\x2', '\x650', 
		'\x651', '\x5', '\"', '\x12', '\x2', '\x651', '\x652', '\a', '\x5', '\x2', 
		'\x2', '\x652', '\x149', '\x3', '\x2', '\x2', '\x2', '\x653', '\x654', 
		'\a', '\xA8', '\x2', '\x2', '\x654', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x655', '\x656', '\a', '\xA9', '\x2', '\x2', '\x656', '\x657', '\a', 
		'\x4', '\x2', '\x2', '\x657', '\x658', '\x5', '\"', '\x12', '\x2', '\x658', 
		'\x659', '\a', '\x14', '\x2', '\x2', '\x659', '\x65A', '\x5', '\x226', 
		'\x114', '\x2', '\x65A', '\x65B', '\a', '\x5', '\x2', '\x2', '\x65B', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x65D', '\a', '\xAA', '\x2', 
		'\x2', '\x65D', '\x65E', '\a', '\x4', '\x2', '\x2', '\x65E', '\x65F', 
		'\x5', '\"', '\x12', '\x2', '\x65F', '\x660', '\a', '\x5', '\x2', '\x2', 
		'\x660', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x661', '\x662', '\a', 
		'\xAB', '\x2', '\x2', '\x662', '\x663', '\a', '\x4', '\x2', '\x2', '\x663', 
		'\x664', '\x5', '\"', '\x12', '\x2', '\x664', '\x665', '\a', '\x5', '\x2', 
		'\x2', '\x665', '\x151', '\x3', '\x2', '\x2', '\x2', '\x666', '\x667', 
		'\a', '\xAC', '\x2', '\x2', '\x667', '\x668', '\a', '\x4', '\x2', '\x2', 
		'\x668', '\x669', '\x5', '\"', '\x12', '\x2', '\x669', '\x66A', '\a', 
		'\x5', '\x2', '\x2', '\x66A', '\x153', '\x3', '\x2', '\x2', '\x2', '\x66B', 
		'\x66C', '\a', '\xAD', '\x2', '\x2', '\x66C', '\x66D', '\a', '\x4', '\x2', 
		'\x2', '\x66D', '\x66E', '\x5', '\"', '\x12', '\x2', '\x66E', '\x66F', 
		'\a', '\x5', '\x2', '\x2', '\x66F', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x670', '\x671', '\a', '\xAE', '\x2', '\x2', '\x671', '\x672', '\a', 
		'\x4', '\x2', '\x2', '\x672', '\x673', '\x5', '\"', '\x12', '\x2', '\x673', 
		'\x674', '\a', '\x14', '\x2', '\x2', '\x674', '\x675', '\x5', '\"', '\x12', 
		'\x2', '\x675', '\x676', '\a', '\x5', '\x2', '\x2', '\x676', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x677', '\x678', '\a', '\xAF', '\x2', '\x2', 
		'\x678', '\x679', '\a', '\x4', '\x2', '\x2', '\x679', '\x67A', '\x5', 
		'\"', '\x12', '\x2', '\x67A', '\x67B', '\a', '\x5', '\x2', '\x2', '\x67B', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x67C', '\x67D', '\a', '\xB0', '\x2', 
		'\x2', '\x67D', '\x67E', '\a', '\x4', '\x2', '\x2', '\x67E', '\x67F', 
		'\x5', '\"', '\x12', '\x2', '\x67F', '\x680', '\a', '\x14', '\x2', '\x2', 
		'\x680', '\x681', '\x5', '\"', '\x12', '\x2', '\x681', '\x682', '\a', 
		'\x5', '\x2', '\x2', '\x682', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x683', 
		'\x684', '\a', '\xB1', '\x2', '\x2', '\x684', '\x685', '\a', '\x4', '\x2', 
		'\x2', '\x685', '\x686', '\x5', '\"', '\x12', '\x2', '\x686', '\x687', 
		'\a', '\x5', '\x2', '\x2', '\x687', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x688', '\x689', '\a', '\xB2', '\x2', '\x2', '\x689', '\x68A', '\a', 
		'\x4', '\x2', '\x2', '\x68A', '\x68B', '\x5', '\"', '\x12', '\x2', '\x68B', 
		'\x68C', '\a', '\x14', '\x2', '\x2', '\x68C', '\x68D', '\x5', '\"', '\x12', 
		'\x2', '\x68D', '\x68E', '\a', '\x14', '\x2', '\x2', '\x68E', '\x68F', 
		'\x5', '\"', '\x12', '\x2', '\x68F', '\x690', '\a', '\x14', '\x2', '\x2', 
		'\x690', '\x691', '\x5', '\"', '\x12', '\x2', '\x691', '\x692', '\a', 
		'\x5', '\x2', '\x2', '\x692', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x693', 
		'\x694', '\a', '\xB3', '\x2', '\x2', '\x694', '\x695', '\a', '\x4', '\x2', 
		'\x2', '\x695', '\x696', '\x5', '\"', '\x12', '\x2', '\x696', '\x697', 
		'\a', '\x14', '\x2', '\x2', '\x697', '\x698', '\x5', '\"', '\x12', '\x2', 
		'\x698', '\x699', '\a', '\x5', '\x2', '\x2', '\x699', '\x161', '\x3', 
		'\x2', '\x2', '\x2', '\x69A', '\x69B', '\a', '\xB4', '\x2', '\x2', '\x69B', 
		'\x69C', '\a', '\x4', '\x2', '\x2', '\x69C', '\x69D', '\x5', '\"', '\x12', 
		'\x2', '\x69D', '\x69E', '\a', '\x5', '\x2', '\x2', '\x69E', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x69F', '\x6A0', '\a', '\xB5', '\x2', '\x2', 
		'\x6A0', '\x6A1', '\a', '\x4', '\x2', '\x2', '\x6A1', '\x6A2', '\x5', 
		'\"', '\x12', '\x2', '\x6A2', '\x6A3', '\a', '\x5', '\x2', '\x2', '\x6A3', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\a', '\xB6', '\x2', 
		'\x2', '\x6A5', '\x6A6', '\a', '\x4', '\x2', '\x2', '\x6A6', '\x6A7', 
		'\x5', '\"', '\x12', '\x2', '\x6A7', '\x6A8', '\a', '\x5', '\x2', '\x2', 
		'\x6A8', '\x167', '\x3', '\x2', '\x2', '\x2', '\x6A9', '\x6AA', '\a', 
		'\xB7', '\x2', '\x2', '\x6AA', '\x169', '\x3', '\x2', '\x2', '\x2', '\x6AB', 
		'\x6AC', '\a', '\xB8', '\x2', '\x2', '\x6AC', '\x6AD', '\a', '\x4', '\x2', 
		'\x2', '\x6AD', '\x6AE', '\x5', '\"', '\x12', '\x2', '\x6AE', '\x6AF', 
		'\a', '\x5', '\x2', '\x2', '\x6AF', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x6B0', '\x6B1', '\a', '\xB9', '\x2', '\x2', '\x6B1', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x6B2', '\x6B3', '\a', '\xBA', '\x2', '\x2', '\x6B3', 
		'\x6B4', '\a', '\x4', '\x2', '\x2', '\x6B4', '\x6B5', '\x5', '\"', '\x12', 
		'\x2', '\x6B5', '\x6B6', '\a', '\x14', '\x2', '\x2', '\x6B6', '\x6B7', 
		'\x5', '\"', '\x12', '\x2', '\x6B7', '\x6B8', '\a', '\x5', '\x2', '\x2', 
		'\x6B8', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6BA', '\a', 
		'\xBB', '\x2', '\x2', '\x6BA', '\x6BB', '\a', '\x4', '\x2', '\x2', '\x6BB', 
		'\x6BC', '\x5', '\"', '\x12', '\x2', '\x6BC', '\x6BD', '\a', '\x14', '\x2', 
		'\x2', '\x6BD', '\x6BE', '\x5', '\"', '\x12', '\x2', '\x6BE', '\x6BF', 
		'\a', '\x5', '\x2', '\x2', '\x6BF', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x6C0', '\x6C1', '\a', '\xBC', '\x2', '\x2', '\x6C1', '\x6C2', '\a', 
		'\x4', '\x2', '\x2', '\x6C2', '\x6C3', '\x5', '\"', '\x12', '\x2', '\x6C3', 
		'\x6C4', '\a', '\x5', '\x2', '\x2', '\x6C4', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x6C5', '\x6C6', '\a', '\xBD', '\x2', '\x2', '\x6C6', '\x6C7', 
		'\a', '\x4', '\x2', '\x2', '\x6C7', '\x6C8', '\x5', '\"', '\x12', '\x2', 
		'\x6C8', '\x6C9', '\a', '\x5', '\x2', '\x2', '\x6C9', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x6CA', '\x6CB', '\a', '\xBE', '\x2', '\x2', '\x6CB', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x6CC', '\x6CD', '\a', '\xBF', '\x2', 
		'\x2', '\x6CD', '\x6CE', '\a', '\x4', '\x2', '\x2', '\x6CE', '\x6CF', 
		'\x5', '\"', '\x12', '\x2', '\x6CF', '\x6D0', '\a', '\x14', '\x2', '\x2', 
		'\x6D0', '\x6D1', '\x5', '\"', '\x12', '\x2', '\x6D1', '\x6D2', '\a', 
		'\x14', '\x2', '\x2', '\x6D2', '\x6D3', '\x5', '\x216', '\x10C', '\x2', 
		'\x6D3', '\x6D4', '\a', '\x5', '\x2', '\x2', '\x6D4', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x6D5', '\x6D6', '\a', '\xC0', '\x2', '\x2', '\x6D6', 
		'\x6D7', '\a', '\x4', '\x2', '\x2', '\x6D7', '\x6D8', '\x5', '\"', '\x12', 
		'\x2', '\x6D8', '\x6D9', '\a', '\x5', '\x2', '\x2', '\x6D9', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x6DA', '\x6DB', '\a', '\xC1', '\x2', '\x2', 
		'\x6DB', '\x6DC', '\a', '\x4', '\x2', '\x2', '\x6DC', '\x6DD', '\x5', 
		'\"', '\x12', '\x2', '\x6DD', '\x6DE', '\a', '\x5', '\x2', '\x2', '\x6DE', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E0', '\a', '\xC2', '\x2', 
		'\x2', '\x6E0', '\x6E1', '\a', '\x4', '\x2', '\x2', '\x6E1', '\x6E2', 
		'\x5', '\"', '\x12', '\x2', '\x6E2', '\x6E3', '\a', '\x5', '\x2', '\x2', 
		'\x6E3', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E9', '\a', 
		'\x116', '\x2', '\x2', '\x6E5', '\x6E9', '\a', '\x111', '\x2', '\x2', 
		'\x6E6', '\x6E7', '\a', '\x115', '\x2', '\x2', '\x6E7', '\x6E9', '\a', 
		'\x113', '\x2', '\x2', '\x6E8', '\x6E4', '\x3', '\x2', '\x2', '\x2', '\x6E8', 
		'\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6E6', '\x3', '\x2', '\x2', 
		'\x2', '\x6E9', '\x181', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EF', 
		'\a', '\x116', '\x2', '\x2', '\x6EB', '\x6EC', '\a', '\x114', '\x2', '\x2', 
		'\x6EC', '\x6EF', '\a', '\x113', '\x2', '\x2', '\x6ED', '\x6EF', '\x5', 
		'\x18A', '\xC6', '\x2', '\x6EE', '\x6EA', '\x3', '\x2', '\x2', '\x2', 
		'\x6EE', '\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6EE', '\x6ED', '\x3', 
		'\x2', '\x2', '\x2', '\x6EF', '\x183', '\x3', '\x2', '\x2', '\x2', '\x6F0', 
		'\x6F1', '\t', '\x2', '\x2', '\x2', '\x6F1', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x6F2', '\x6F3', '\a', '\x112', '\x2', '\x2', '\x6F3', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x6F4', '\x6F5', '\a', '\x112', '\x2', '\x2', 
		'\x6F5', '\x189', '\x3', '\x2', '\x2', '\x2', '\x6F6', '\x715', '\x5', 
		'\x18C', '\xC7', '\x2', '\x6F7', '\x715', '\x5', '\x18E', '\xC8', '\x2', 
		'\x6F8', '\x715', '\x5', '\x190', '\xC9', '\x2', '\x6F9', '\x715', '\x5', 
		'\x192', '\xCA', '\x2', '\x6FA', '\x715', '\x5', '\x194', '\xCB', '\x2', 
		'\x6FB', '\x715', '\x5', '\x196', '\xCC', '\x2', '\x6FC', '\x715', '\x5', 
		'\x198', '\xCD', '\x2', '\x6FD', '\x715', '\x5', '\x19A', '\xCE', '\x2', 
		'\x6FE', '\x715', '\x5', '\x19C', '\xCF', '\x2', '\x6FF', '\x715', '\x5', 
		'\x19E', '\xD0', '\x2', '\x700', '\x715', '\x5', '\x1A0', '\xD1', '\x2', 
		'\x701', '\x715', '\x5', '\x1A2', '\xD2', '\x2', '\x702', '\x715', '\x5', 
		'\x1A4', '\xD3', '\x2', '\x703', '\x715', '\x5', '\x1A6', '\xD4', '\x2', 
		'\x704', '\x715', '\x5', '\x1A8', '\xD5', '\x2', '\x705', '\x715', '\x5', 
		'\x1AA', '\xD6', '\x2', '\x706', '\x715', '\x5', '\x1AC', '\xD7', '\x2', 
		'\x707', '\x715', '\x5', '\x1AE', '\xD8', '\x2', '\x708', '\x715', '\x5', 
		'\x1B0', '\xD9', '\x2', '\x709', '\x715', '\x5', '\x1B2', '\xDA', '\x2', 
		'\x70A', '\x715', '\x5', '\x1B4', '\xDB', '\x2', '\x70B', '\x715', '\x5', 
		'\x1B6', '\xDC', '\x2', '\x70C', '\x715', '\x5', '\x1B8', '\xDD', '\x2', 
		'\x70D', '\x715', '\x5', '\x1BA', '\xDE', '\x2', '\x70E', '\x715', '\x5', 
		'\x1BC', '\xDF', '\x2', '\x70F', '\x715', '\x5', '\x1BE', '\xE0', '\x2', 
		'\x710', '\x715', '\x5', '\x1C0', '\xE1', '\x2', '\x711', '\x715', '\x5', 
		'\x1C2', '\xE2', '\x2', '\x712', '\x715', '\x5', '\x1C4', '\xE3', '\x2', 
		'\x713', '\x715', '\x5', '\x1C6', '\xE4', '\x2', '\x714', '\x6F6', '\x3', 
		'\x2', '\x2', '\x2', '\x714', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x714', 
		'\x6F8', '\x3', '\x2', '\x2', '\x2', '\x714', '\x6F9', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x6FA', '\x3', '\x2', '\x2', '\x2', '\x714', '\x6FB', 
		'\x3', '\x2', '\x2', '\x2', '\x714', '\x6FC', '\x3', '\x2', '\x2', '\x2', 
		'\x714', '\x6FD', '\x3', '\x2', '\x2', '\x2', '\x714', '\x6FE', '\x3', 
		'\x2', '\x2', '\x2', '\x714', '\x6FF', '\x3', '\x2', '\x2', '\x2', '\x714', 
		'\x700', '\x3', '\x2', '\x2', '\x2', '\x714', '\x701', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x702', '\x3', '\x2', '\x2', '\x2', '\x714', '\x703', 
		'\x3', '\x2', '\x2', '\x2', '\x714', '\x704', '\x3', '\x2', '\x2', '\x2', 
		'\x714', '\x705', '\x3', '\x2', '\x2', '\x2', '\x714', '\x706', '\x3', 
		'\x2', '\x2', '\x2', '\x714', '\x707', '\x3', '\x2', '\x2', '\x2', '\x714', 
		'\x708', '\x3', '\x2', '\x2', '\x2', '\x714', '\x709', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x714', '\x70B', 
		'\x3', '\x2', '\x2', '\x2', '\x714', '\x70C', '\x3', '\x2', '\x2', '\x2', 
		'\x714', '\x70D', '\x3', '\x2', '\x2', '\x2', '\x714', '\x70E', '\x3', 
		'\x2', '\x2', '\x2', '\x714', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x714', 
		'\x710', '\x3', '\x2', '\x2', '\x2', '\x714', '\x711', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x712', '\x3', '\x2', '\x2', '\x2', '\x714', '\x713', 
		'\x3', '\x2', '\x2', '\x2', '\x715', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x716', '\x717', '\a', '\xC3', '\x2', '\x2', '\x717', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x718', '\x719', '\a', '\xC4', '\x2', '\x2', '\x719', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x71B', '\a', '\xC5', '\x2', 
		'\x2', '\x71B', '\x191', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x71D', 
		'\a', '\xC6', '\x2', '\x2', '\x71D', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x71E', '\x71F', '\a', '\xC7', '\x2', '\x2', '\x71F', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x720', '\x721', '\a', '\xC8', '\x2', '\x2', '\x721', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x722', '\x723', '\a', '\xC9', '\x2', 
		'\x2', '\x723', '\x199', '\x3', '\x2', '\x2', '\x2', '\x724', '\x725', 
		'\a', '\xCA', '\x2', '\x2', '\x725', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x726', '\x727', '\a', '\xCB', '\x2', '\x2', '\x727', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\x728', '\x729', '\a', '\xCC', '\x2', '\x2', '\x729', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x72B', '\a', '\xCD', '\x2', 
		'\x2', '\x72B', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x72C', '\x72D', 
		'\a', '\xCE', '\x2', '\x2', '\x72D', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x72E', '\x72F', '\a', '\xCF', '\x2', '\x2', '\x72F', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x730', '\x731', '\a', '\xD0', '\x2', '\x2', '\x731', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x732', '\x733', '\a', '\xD1', '\x2', 
		'\x2', '\x733', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x734', '\x735', 
		'\a', '\xD2', '\x2', '\x2', '\x735', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x736', '\x737', '\a', '\xD3', '\x2', '\x2', '\x737', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x738', '\x739', '\a', '\xD4', '\x2', '\x2', '\x739', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x73A', '\x73B', '\a', '\xD5', '\x2', 
		'\x2', '\x73B', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x73C', '\x73D', 
		'\a', '\xD6', '\x2', '\x2', '\x73D', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x73E', '\x73F', '\a', '\xD7', '\x2', '\x2', '\x73F', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x740', '\x741', '\a', '\xD8', '\x2', '\x2', '\x741', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x742', '\x743', '\a', '\xD9', '\x2', 
		'\x2', '\x743', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x744', '\x745', 
		'\a', '\xDA', '\x2', '\x2', '\x745', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x746', '\x747', '\a', '\xDB', '\x2', '\x2', '\x747', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x748', '\x749', '\a', '\xDC', '\x2', '\x2', '\x749', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x74A', '\x74B', '\a', '\xDD', '\x2', 
		'\x2', '\x74B', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x74C', '\x74D', 
		'\a', '\xDE', '\x2', '\x2', '\x74D', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x74E', '\x74F', '\a', '\xDF', '\x2', '\x2', '\x74F', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x750', '\x751', '\a', '\xE0', '\x2', '\x2', '\x751', 
		'\x1C7', '\x3', '\x2', '\x2', '\x2', '\x752', '\x75D', '\x5', '\x1CA', 
		'\xE6', '\x2', '\x753', '\x75D', '\x5', '\x1CC', '\xE7', '\x2', '\x754', 
		'\x75D', '\x5', '\x1CE', '\xE8', '\x2', '\x755', '\x75D', '\x5', '\x1D0', 
		'\xE9', '\x2', '\x756', '\x75D', '\x5', '\x1D2', '\xEA', '\x2', '\x757', 
		'\x75D', '\x5', '\x1D4', '\xEB', '\x2', '\x758', '\x75D', '\x5', '\x1D6', 
		'\xEC', '\x2', '\x759', '\x75D', '\x5', '\x1D8', '\xED', '\x2', '\x75A', 
		'\x75D', '\x5', '\x1DA', '\xEE', '\x2', '\x75B', '\x75D', '\x5', '\x1DC', 
		'\xEF', '\x2', '\x75C', '\x752', '\x3', '\x2', '\x2', '\x2', '\x75C', 
		'\x753', '\x3', '\x2', '\x2', '\x2', '\x75C', '\x754', '\x3', '\x2', '\x2', 
		'\x2', '\x75C', '\x755', '\x3', '\x2', '\x2', '\x2', '\x75C', '\x756', 
		'\x3', '\x2', '\x2', '\x2', '\x75C', '\x757', '\x3', '\x2', '\x2', '\x2', 
		'\x75C', '\x758', '\x3', '\x2', '\x2', '\x2', '\x75C', '\x759', '\x3', 
		'\x2', '\x2', '\x2', '\x75C', '\x75A', '\x3', '\x2', '\x2', '\x2', '\x75C', 
		'\x75B', '\x3', '\x2', '\x2', '\x2', '\x75D', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x75E', '\x75F', '\a', '\xE1', '\x2', '\x2', '\x75F', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', '\x760', '\x761', '\a', '\xE2', '\x2', '\x2', 
		'\x761', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x762', '\x763', '\a', 
		'\xE3', '\x2', '\x2', '\x763', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x764', 
		'\x765', '\a', '\xE4', '\x2', '\x2', '\x765', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x766', '\x767', '\a', '\xE5', '\x2', '\x2', '\x767', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x768', '\x769', '\a', '\xE6', '\x2', '\x2', 
		'\x769', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x76A', '\x76B', '\a', 
		'\xE7', '\x2', '\x2', '\x76B', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x76C', 
		'\x76D', '\a', '\xE8', '\x2', '\x2', '\x76D', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x76E', '\x76F', '\a', '\xE9', '\x2', '\x2', '\x76F', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x770', '\x771', '\a', '\xEA', '\x2', '\x2', 
		'\x771', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x772', '\x77B', '\x5', 
		'\x1E0', '\xF1', '\x2', '\x773', '\x77B', '\x5', '\x1E2', '\xF2', '\x2', 
		'\x774', '\x77B', '\x5', '\x1E4', '\xF3', '\x2', '\x775', '\x77B', '\x5', 
		'\x1E6', '\xF4', '\x2', '\x776', '\x77B', '\x5', '\x1E8', '\xF5', '\x2', 
		'\x777', '\x77B', '\x5', '\x1EA', '\xF6', '\x2', '\x778', '\x77B', '\x5', 
		'\x1EC', '\xF7', '\x2', '\x779', '\x77B', '\x5', '\x1EE', '\xF8', '\x2', 
		'\x77A', '\x772', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x773', '\x3', 
		'\x2', '\x2', '\x2', '\x77A', '\x774', '\x3', '\x2', '\x2', '\x2', '\x77A', 
		'\x775', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x776', '\x3', '\x2', '\x2', 
		'\x2', '\x77A', '\x777', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x778', 
		'\x3', '\x2', '\x2', '\x2', '\x77A', '\x779', '\x3', '\x2', '\x2', '\x2', 
		'\x77B', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x77D', '\a', 
		'\xEB', '\x2', '\x2', '\x77D', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x77E', 
		'\x77F', '\a', '\xEC', '\x2', '\x2', '\x77F', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x780', '\x781', '\a', '\xED', '\x2', '\x2', '\x781', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x782', '\x783', '\a', '\xEE', '\x2', '\x2', 
		'\x783', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x784', '\x785', '\a', 
		'\xEF', '\x2', '\x2', '\x785', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x786', 
		'\x787', '\a', '\xF0', '\x2', '\x2', '\x787', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x788', '\x789', '\a', '\xF1', '\x2', '\x2', '\x789', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x78A', '\x78B', '\a', '\xF2', '\x2', '\x2', 
		'\x78B', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x78C', '\x79B', '\x5', 
		'\x1F2', '\xFA', '\x2', '\x78D', '\x79B', '\x5', '\x1F4', '\xFB', '\x2', 
		'\x78E', '\x79B', '\x5', '\x1F6', '\xFC', '\x2', '\x78F', '\x79B', '\x5', 
		'\x1F8', '\xFD', '\x2', '\x790', '\x79B', '\x5', '\x1FA', '\xFE', '\x2', 
		'\x791', '\x79B', '\x5', '\x1FC', '\xFF', '\x2', '\x792', '\x79B', '\x5', 
		'\x1FE', '\x100', '\x2', '\x793', '\x79B', '\x5', '\x200', '\x101', '\x2', 
		'\x794', '\x79B', '\x5', '\x202', '\x102', '\x2', '\x795', '\x79B', '\x5', 
		'\x204', '\x103', '\x2', '\x796', '\x79B', '\x5', '\x206', '\x104', '\x2', 
		'\x797', '\x79B', '\x5', '\x208', '\x105', '\x2', '\x798', '\x79B', '\x5', 
		'\x20A', '\x106', '\x2', '\x799', '\x79B', '\x5', '\x20C', '\x107', '\x2', 
		'\x79A', '\x78C', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x78D', '\x3', 
		'\x2', '\x2', '\x2', '\x79A', '\x78E', '\x3', '\x2', '\x2', '\x2', '\x79A', 
		'\x78F', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x790', '\x3', '\x2', '\x2', 
		'\x2', '\x79A', '\x791', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x792', 
		'\x3', '\x2', '\x2', '\x2', '\x79A', '\x793', '\x3', '\x2', '\x2', '\x2', 
		'\x79A', '\x794', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x795', '\x3', 
		'\x2', '\x2', '\x2', '\x79A', '\x796', '\x3', '\x2', '\x2', '\x2', '\x79A', 
		'\x797', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x798', '\x3', '\x2', '\x2', 
		'\x2', '\x79A', '\x799', '\x3', '\x2', '\x2', '\x2', '\x79B', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x79C', '\x79D', '\a', '\xF3', '\x2', '\x2', 
		'\x79D', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x79F', '\a', 
		'\xF4', '\x2', '\x2', '\x79F', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x7A0', 
		'\x7A1', '\a', '\xF5', '\x2', '\x2', '\x7A1', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x7A2', '\x7A3', '\a', '\xF6', '\x2', '\x2', '\x7A3', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A5', '\a', '\xF7', '\x2', '\x2', 
		'\x7A5', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7A7', '\a', 
		'\xF8', '\x2', '\x2', '\x7A7', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x7A8', 
		'\x7A9', '\a', '\xF9', '\x2', '\x2', '\x7A9', '\x1FF', '\x3', '\x2', '\x2', 
		'\x2', '\x7AA', '\x7AB', '\a', '\xFA', '\x2', '\x2', '\x7AB', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7AD', '\a', '\xFB', '\x2', '\x2', 
		'\x7AD', '\x203', '\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', '\a', 
		'\xFC', '\x2', '\x2', '\x7AF', '\x205', '\x3', '\x2', '\x2', '\x2', '\x7B0', 
		'\x7B1', '\a', '\xFD', '\x2', '\x2', '\x7B1', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x7B2', '\x7B3', '\a', '\xFE', '\x2', '\x2', '\x7B3', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x7B4', '\x7B5', '\a', '\xFF', '\x2', '\x2', 
		'\x7B5', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B7', '\a', 
		'\x100', '\x2', '\x2', '\x7B7', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x7B8', 
		'\x7BC', '\x5', '\x210', '\x109', '\x2', '\x7B9', '\x7BC', '\x5', '\x212', 
		'\x10A', '\x2', '\x7BA', '\x7BC', '\x5', '\x214', '\x10B', '\x2', '\x7BB', 
		'\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7BB', '\x7B9', '\x3', '\x2', '\x2', 
		'\x2', '\x7BB', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x20F', 
		'\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7BE', '\a', '\x101', '\x2', '\x2', 
		'\x7BE', '\x211', '\x3', '\x2', '\x2', '\x2', '\x7BF', '\x7C0', '\a', 
		'\x102', '\x2', '\x2', '\x7C0', '\x213', '\x3', '\x2', '\x2', '\x2', '\x7C1', 
		'\x7C2', '\a', '\x103', '\x2', '\x2', '\x7C2', '\x215', '\x3', '\x2', 
		'\x2', '\x2', '\x7C3', '\x7C6', '\x5', '\x218', '\x10D', '\x2', '\x7C4', 
		'\x7C6', '\x5', '\x21A', '\x10E', '\x2', '\x7C5', '\x7C3', '\x3', '\x2', 
		'\x2', '\x2', '\x7C5', '\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C8', '\a', '\x104', '\x2', '\x2', 
		'\x7C8', '\x219', '\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CA', '\a', 
		'\x105', '\x2', '\x2', '\x7CA', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x7CB', 
		'\x7D0', '\x5', '\x21E', '\x110', '\x2', '\x7CC', '\x7D0', '\x5', '\x220', 
		'\x111', '\x2', '\x7CD', '\x7D0', '\x5', '\x222', '\x112', '\x2', '\x7CE', 
		'\x7D0', '\x5', '\x224', '\x113', '\x2', '\x7CF', '\x7CB', '\x3', '\x2', 
		'\x2', '\x2', '\x7CF', '\x7CC', '\x3', '\x2', '\x2', '\x2', '\x7CF', '\x7CD', 
		'\x3', '\x2', '\x2', '\x2', '\x7CF', '\x7CE', '\x3', '\x2', '\x2', '\x2', 
		'\x7D0', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7D2', '\a', 
		'\x106', '\x2', '\x2', '\x7D2', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x7D3', 
		'\x7D4', '\a', '\x107', '\x2', '\x2', '\x7D4', '\x221', '\x3', '\x2', 
		'\x2', '\x2', '\x7D5', '\x7D6', '\a', '\x108', '\x2', '\x2', '\x7D6', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D8', '\a', '\x109', 
		'\x2', '\x2', '\x7D8', '\x225', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DD', 
		'\x5', '\x228', '\x115', '\x2', '\x7DA', '\x7DD', '\x5', '\x22A', '\x116', 
		'\x2', '\x7DB', '\x7DD', '\x5', '\x22C', '\x117', '\x2', '\x7DC', '\x7D9', 
		'\x3', '\x2', '\x2', '\x2', '\x7DC', '\x7DA', '\x3', '\x2', '\x2', '\x2', 
		'\x7DC', '\x7DB', '\x3', '\x2', '\x2', '\x2', '\x7DD', '\x227', '\x3', 
		'\x2', '\x2', '\x2', '\x7DE', '\x7DF', '\a', '\xB9', '\x2', '\x2', '\x7DF', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x7E0', '\x7E1', '\a', '\x37', '\x2', 
		'\x2', '\x7E1', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E3', 
		'\a', '\x10A', '\x2', '\x2', '\x7E3', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x7E4', '\x7E5', '\t', '\x3', '\x2', '\x2', '\x7E5', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x233', '\x23F', '\x242', '\x252', '\x27F', 
		'\x28E', '\x34D', '\x6E8', '\x6EE', '\x714', '\x75C', '\x77A', '\x79A', 
		'\x7BB', '\x7C5', '\x7CF', '\x7DC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
