//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TypescriptParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class TypescriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, WHITESPACES=4, 
		ABSTRACT=5, BOOL=6, BREAK=7, CASE=8, CATCH=9, CLASS=10, CONST=11, CONTINUE=12, 
		DEFAULT=13, DO=14, ELSE=15, ENUM=16, FALSE=17, FINALLY=18, FOR=19, FOREACH=20, 
		GET=21, IF=22, LET=23, NEW=24, NULL=25, OVERRIDE=26, PARAMS=27, PRIVATE=28, 
		PROTECTED=29, PUBLIC=30, READONLY=31, RETURN=32, SET=33, STATIC=34, STRING=35, 
		SWITCH=36, THIS=37, THROW=38, TRUE=39, TRY=40, VAR=41, VOID=42, WHILE=43, 
		NUMBER=44, SUPER=45, MODULE=46, OF=47, IDENTIFIER=48, LITERAL_ACCESS=49, 
		INTEGER_LITERAL=50, HEX_INTEGER_LITERAL=51, REAL_LITERAL=52, CHARACTER_LITERAL=53, 
		REGULAR_STRING=54, VERBATIUM_STRING=55, INTERPOLATED_REGULAR_STRING_START=56, 
		INTERPOLATED_VERBATIUM_STRING_START=57, OPEN_BRACE=58, CLOSE_BRACE=59, 
		OPEN_BRACKET=60, CLOSE_BRACKET=61, OPEN_PARENS=62, CLOSE_PARENS=63, DOT=64, 
		COMMA=65, COLON=66, SEMICOLON=67, PLUS=68, MINUS=69, STAR=70, DIV=71, 
		PERCENT=72, AMP=73, BITWISE_OR=74, CARET=75, BANG=76, TILDE=77, ASSIGNMENT=78, 
		LT=79, GT=80, INTERR=81, DOUBLE_COLON=82, OP_COALESCING=83, OP_INC=84, 
		OP_DEC=85, OP_AND=86, OP_OR=87, OP_PTR=88, OP_EQ=89, OP_NE=90, OP_LE=91, 
		OP_GE=92, OP_ADD_ASSIGNMENT=93, OP_SUB_ASSIGNMENT=94, OP_MULT_ASSIGNMENT=95, 
		OP_DIV_ASSIGNMENT=96, OP_MOD_ASSIGNMENT=97, OP_AND_ASSIGNMENT=98, OP_OR_ASSIGNMENT=99, 
		OP_XOR_ASSIGNMENT=100, OP_LEFT_SHIFT=101, OP_LEFT_SHIFT_ASSIGNMENT=102, 
		DOUBLE_CURLY_INSIDE=103, OPEN_BRACE_INSIDE=104, REGULAR_CHAR_INSIDE=105, 
		VERBATIUM_DOUBLE_QUOTE_INSIDE=106, DOUBLE_QUOTE_INSIDE=107, REGULAR_STRING_INSIDE=108, 
		VERBATIUM_INSIDE_STRING=109, CLOSE_BRACE_INSIDE=110, FORMAT_STRING=111, 
		DIRECTIVE_WHITESPACES=112, DIGITS=113, DEFINE=114, UNDEF=115, ELIF=116, 
		ENDIF=117, LINE=118, ERROR=119, WARNING=120, REGION=121, ENDREGION=122, 
		PRAGMA=123, DIRECTIVE_HIDDEN=124, CONDITIONAL_SYMBOL=125, DIRECTIVE_NEW_LINE=126, 
		TEXT=127, DOUBLE_CURLY_CLOSE_INSIDE=128;
	public const int
		RULE_compilation_unit = 0, RULE_namespace_or_type_name = 1, RULE_type = 2, 
		RULE_base_type = 3, RULE_simple_type = 4, RULE_numeric_type = 5, RULE_class_type = 6, 
		RULE_type_argument_list = 7, RULE_argument_list = 8, RULE_argument = 9, 
		RULE_expression = 10, RULE_non_assignment_expression = 11, RULE_assignment = 12, 
		RULE_assignment_operator = 13, RULE_conditional_expression = 14, RULE_conditional_or_expression = 15, 
		RULE_conditional_and_expression = 16, RULE_inclusive_or_expression = 17, 
		RULE_exclusive_or_expression = 18, RULE_and_expression = 19, RULE_equality_expression = 20, 
		RULE_relational_expression = 21, RULE_shift_expression = 22, RULE_additive_expression = 23, 
		RULE_multiplicative_expression = 24, RULE_unary_expression = 25, RULE_primary_expression = 26, 
		RULE_primary_expression_start = 27, RULE_member_access = 28, RULE_bracket_expression = 29, 
		RULE_lambda_expression = 30, RULE_anonymous_function_signature = 31, RULE_explicit_anonymous_function_parameter_list = 32, 
		RULE_explicit_anonymous_function_parameter = 33, RULE_implicit_anonymous_function_parameter_list = 34, 
		RULE_anonymous_function_body = 35, RULE_statement = 36, RULE_embedded_statement = 37, 
		RULE_simple_embedded_statement = 38, RULE_block = 39, RULE_local_variable_declaration = 40, 
		RULE_local_variable_type = 41, RULE_local_variable_declarator = 42, RULE_if_body = 43, 
		RULE_switch_section = 44, RULE_switch_label = 45, RULE_statement_list = 46, 
		RULE_for_initializer = 47, RULE_for_iterator = 48, RULE_catch_clauses = 49, 
		RULE_specific_catch_clause = 50, RULE_general_catch_clause = 51, RULE_finally_clause = 52, 
		RULE_resource_acquisition = 53, RULE_namespace_declaration = 54, RULE_namespace_body = 55, 
		RULE_namespace_member_declarations = 56, RULE_namespace_member_declaration = 57, 
		RULE_type_declaration = 58, RULE_type_parameter_list = 59, RULE_type_parameter = 60, 
		RULE_class_body = 61, RULE_class_member_declarations = 62, RULE_class_member_declaration = 63, 
		RULE_all_member_modifiers = 64, RULE_all_member_modifier = 65, RULE_common_member_declaration = 66, 
		RULE_typed_member_declaration = 67, RULE_variable_declarators = 68, RULE_variable_declarator = 69, 
		RULE_variable_initializer = 70, RULE_return_type = 71, RULE_member_name = 72, 
		RULE_method_body = 73, RULE_formal_parameter_list = 74, RULE_fixed_parameters = 75, 
		RULE_fixed_parameter = 76, RULE_constructor_initializer = 77, RULE_body = 78, 
		RULE_variant_type_parameter_list = 79, RULE_variant_type_parameter = 80, 
		RULE_enum_body = 81, RULE_enum_member_declaration = 82, RULE_right_arrow = 83, 
		RULE_right_shift = 84, RULE_right_shift_assignment = 85, RULE_literal = 86, 
		RULE_boolean_literal = 87, RULE_string_literal = 88, RULE_class_definition = 89, 
		RULE_enum_definition = 90, RULE_field_declaration = 91, RULE_constructor_declaration = 92, 
		RULE_method_declaration = 93, RULE_method_member_name = 94, RULE_arg_declaration = 95, 
		RULE_method_invocation = 96, RULE_object_creation_expression = 97, RULE_identifier = 98;
	public static readonly string[] ruleNames = {
		"compilation_unit", "namespace_or_type_name", "type", "base_type", "simple_type", 
		"numeric_type", "class_type", "type_argument_list", "argument_list", "argument", 
		"expression", "non_assignment_expression", "assignment", "assignment_operator", 
		"conditional_expression", "conditional_or_expression", "conditional_and_expression", 
		"inclusive_or_expression", "exclusive_or_expression", "and_expression", 
		"equality_expression", "relational_expression", "shift_expression", "additive_expression", 
		"multiplicative_expression", "unary_expression", "primary_expression", 
		"primary_expression_start", "member_access", "bracket_expression", "lambda_expression", 
		"anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
		"explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
		"anonymous_function_body", "statement", "embedded_statement", "simple_embedded_statement", 
		"block", "local_variable_declaration", "local_variable_type", "local_variable_declarator", 
		"if_body", "switch_section", "switch_label", "statement_list", "for_initializer", 
		"for_iterator", "catch_clauses", "specific_catch_clause", "general_catch_clause", 
		"finally_clause", "resource_acquisition", "namespace_declaration", "namespace_body", 
		"namespace_member_declarations", "namespace_member_declaration", "type_declaration", 
		"type_parameter_list", "type_parameter", "class_body", "class_member_declarations", 
		"class_member_declaration", "all_member_modifiers", "all_member_modifier", 
		"common_member_declaration", "typed_member_declaration", "variable_declarators", 
		"variable_declarator", "variable_initializer", "return_type", "member_name", 
		"method_body", "formal_parameter_list", "fixed_parameters", "fixed_parameter", 
		"constructor_initializer", "body", "variant_type_parameter_list", "variant_type_parameter", 
		"enum_body", "enum_member_declaration", "right_arrow", "right_shift", 
		"right_shift_assignment", "literal", "boolean_literal", "string_literal", 
		"class_definition", "enum_definition", "field_declaration", "constructor_declaration", 
		"method_declaration", "method_member_name", "arg_declaration", "method_invocation", 
		"object_creation_expression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, "'abstract'", "'boolean'", 
		"'break'", "'case'", "'catch'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'else'", "'enum'", "'false'", "'finally'", "'for'", "'foreach'", 
		"'get'", "'if'", "'let'", "'new'", "'null'", "'override'", "'params'", 
		"'private'", "'protected'", "'public'", "'readonly'", "'return'", "'set'", 
		"'static'", "'string'", "'switch'", "'this'", "'throw'", "'true'", "'try'", 
		"'var'", "'void'", "'while'", "'number'", "'super'", "'module'", "'of'", 
		null, null, null, null, null, null, null, null, null, null, "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", 
		"'>'", "'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", 
		"'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'|='", "'^='", "'<<'", "'<<='", "'{{'", null, null, null, null, 
		null, null, null, null, null, null, "'define'", "'undef'", "'elif'", "'endif'", 
		"'line'", null, null, null, null, null, "'hidden'", null, null, null, 
		"'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
		"ABSTRACT", "BOOL", "BREAK", "CASE", "CATCH", "CLASS", "CONST", "CONTINUE", 
		"DEFAULT", "DO", "ELSE", "ENUM", "FALSE", "FINALLY", "FOR", "FOREACH", 
		"GET", "IF", "LET", "NEW", "NULL", "OVERRIDE", "PARAMS", "PRIVATE", "PROTECTED", 
		"PUBLIC", "READONLY", "RETURN", "SET", "STATIC", "STRING", "SWITCH", "THIS", 
		"THROW", "TRUE", "TRY", "VAR", "VOID", "WHILE", "NUMBER", "SUPER", "MODULE", 
		"OF", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", 
		"INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
		"REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", "DOUBLE_QUOTE_INSIDE", 
		"REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", 
		"FORMAT_STRING", "DIRECTIVE_WHITESPACES", "DIGITS", "DEFINE", "UNDEF", 
		"ELIF", "ENDIF", "LINE", "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
		"DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", "TEXT", 
		"DOUBLE_CURLY_CLOSE_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypescriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TypescriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TypescriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TypescriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TypescriptParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(TypescriptParser.BYTE_ORDER_MARK, 0); }
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 198; Match(BYTE_ORDER_MARK);
				}
			}

			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << MODULE))) != 0)) {
				{
				State = 201; namespace_member_declarations();
				}
			}

			State = 204; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TypescriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TypescriptParser.DOT, i);
		}
		public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_or_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 206; identifier();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 207; type_argument_list();
				}
			}

			}
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 210; Match(DOT);
				State = 211; identifier();
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 212; type_argument_list();
					}
				}

				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public ITerminalNode[] OPEN_BRACKET() { return GetTokens(TypescriptParser.OPEN_BRACKET); }
		public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(TypescriptParser.OPEN_BRACKET, i);
		}
		public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(TypescriptParser.CLOSE_BRACKET); }
		public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(TypescriptParser.CLOSE_BRACKET, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; base_type();
			State = 225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 221; Match(OPEN_BRACKET);
					State = 222; Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_base_type);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; simple_type();
				}
				break;
			case GET:
			case LET:
			case SET:
			case STRING:
			case VAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; class_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(TypescriptParser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_simple_type);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(TypescriptParser.NUMBER, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_numeric_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TypescriptParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_type);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
			case LET:
			case SET:
			case VAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; namespace_or_type_name();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(LT);
			State = 243; type();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 244; Match(COMMA);
				State = 245; type();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; argument();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 254; Match(COMMA);
				State = 255; argument();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 18, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 261; identifier();
				State = 262; Match(COLON);
				}
				break;
			}
			State = 266; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_non_assignment_expression);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; lambda_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; unary_expression();
			State = 277; assignment_operator();
			State = 278; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(TypescriptParser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(TypescriptParser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(TypescriptParser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(TypescriptParser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(TypescriptParser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(TypescriptParser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(TypescriptParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignment_operator);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 284; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 285; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 286; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 287; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 288; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 289; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 290; right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(TypescriptParser.INTERR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_conditional_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; conditional_or_expression();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 294; Match(INTERR);
				State = 295; expression();
				State = 296; Match(COLON);
				State = 297; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(TypescriptParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(TypescriptParser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_conditional_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; conditional_and_expression();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 302; Match(OP_OR);
				State = 303; conditional_and_expression();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(TypescriptParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(TypescriptParser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_conditional_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; inclusive_or_expression();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 310; Match(OP_AND);
				State = 311; inclusive_or_expression();
				}
				}
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(TypescriptParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(TypescriptParser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; exclusive_or_expression();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 318; Match(BITWISE_OR);
				State = 319; exclusive_or_expression();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(TypescriptParser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(TypescriptParser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; and_expression();
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 326; Match(CARET);
				State = 327; and_expression();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(TypescriptParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(TypescriptParser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; equality_expression();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMP) {
				{
				{
				State = 334; Match(AMP);
				State = 335; equality_expression();
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(TypescriptParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(TypescriptParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(TypescriptParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(TypescriptParser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; relational_expression();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 342;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 343; relational_expression();
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(TypescriptParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(TypescriptParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(TypescriptParser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(TypescriptParser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(TypescriptParser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(TypescriptParser.OP_GE, i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; shift_expression();
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (LT - 79)) | (1L << (GT - 79)) | (1L << (OP_LE - 79)) | (1L << (OP_GE - 79)))) != 0)) {
				{
				{
				State = 350;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (LT - 79)) | (1L << (GT - 79)) | (1L << (OP_LE - 79)) | (1L << (OP_GE - 79)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 351; shift_expression();
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(TypescriptParser.OP_LEFT_SHIFT); }
		public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(TypescriptParser.OP_LEFT_SHIFT, i);
		}
		public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; additive_expression();
			State = 365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 360;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 358; Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 359; right_shift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 362; additive_expression();
					}
					} 
				}
				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(TypescriptParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TypescriptParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(TypescriptParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TypescriptParser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; multiplicative_expression();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 369;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 370; multiplicative_expression();
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(TypescriptParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(TypescriptParser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(TypescriptParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(TypescriptParser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(TypescriptParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(TypescriptParser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; unary_expression();
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (STAR - 70)) | (1L << (DIV - 70)) | (1L << (PERCENT - 70)))) != 0)) {
				{
				{
				State = 377;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (STAR - 70)) | (1L << (DIV - 70)) | (1L << (PERCENT - 70)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 378; unary_expression();
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(TypescriptParser.PLUS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(TypescriptParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(TypescriptParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(TypescriptParser.TILDE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_unary_expression);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; Match(PLUS);
				State = 386; unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 387; Match(MINUS);
				State = 388; unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 389; Match(BANG);
				State = 390; unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 391; Match(TILDE);
				State = 392; unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 393; Match(OPEN_PARENS);
				State = 394; type();
				State = 395; Match(CLOSE_PARENS);
				State = 396; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		public Method_invocationContext[] method_invocation() {
			return GetRuleContexts<Method_invocationContext>();
		}
		public Method_invocationContext method_invocation(int i) {
			return GetRuleContext<Method_invocationContext>(i);
		}
		public ITerminalNode[] OP_INC() { return GetTokens(TypescriptParser.OP_INC); }
		public ITerminalNode OP_INC(int i) {
			return GetToken(TypescriptParser.OP_INC, i);
		}
		public ITerminalNode[] OP_DEC() { return GetTokens(TypescriptParser.OP_DEC); }
		public ITerminalNode OP_DEC(int i) {
			return GetToken(TypescriptParser.OP_DEC, i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_primary_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; _localctx.pe = primary_expression_start();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 401; bracket_expression();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (OPEN_PARENS - 62)) | (1L << (DOT - 62)) | (1L << (OP_INC - 62)) | (1L << (OP_DEC - 62)))) != 0)) {
				{
				{
				State = 411;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 407; member_access();
					}
					break;
				case OPEN_PARENS:
					{
					State = 408; method_invocation();
					}
					break;
				case OP_INC:
					{
					State = 409; Match(OP_INC);
					}
					break;
				case OP_DEC:
					{
					State = 410; Match(OP_DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					State = 413; bracket_expression();
					}
					}
					State = 418;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
	 
		public Primary_expression_startContext() { }
		public virtual void CopyFrom(Primary_expression_startContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisReferenceExpressionContext : Primary_expression_startContext {
		public ITerminalNode THIS() { return GetToken(TypescriptParser.THIS, 0); }
		public ThisReferenceExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationExpressionContext : Primary_expression_startContext {
		public ITerminalNode NEW() { return GetToken(TypescriptParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public ObjectCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralAccessExpressionContext : Primary_expression_startContext {
		public ITerminalNode LITERAL_ACCESS() { return GetToken(TypescriptParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : Primary_expression_startContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public SimpleNameExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : Primary_expression_startContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : Primary_expression_startContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 54, RULE_primary_expression_start);
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 424; literal();
				}
				break;
			case GET:
			case LET:
			case SET:
			case VAR:
			case IDENTIFIER:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 425; identifier();
				State = 427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 426; type_argument_list();
					}
					break;
				}
				}
				break;
			case OPEN_PARENS:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 429; Match(OPEN_PARENS);
				State = 430; expression();
				State = 431; Match(CLOSE_PARENS);
				}
				break;
			case LITERAL_ACCESS:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 433; Match(LITERAL_ACCESS);
				}
				break;
			case THIS:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 434; Match(THIS);
				}
				break;
			case NEW:
				_localctx = new ObjectCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 435; Match(NEW);
				State = 436; type();
				State = 442;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PARENS:
					{
					State = 437; object_creation_expression();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 438; Match(OPEN_BRACKET);
					State = 439; expression();
					State = 440; Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TypescriptParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 56, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(DOT);
			State = 447; identifier();
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 448; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(TypescriptParser.OPEN_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(TypescriptParser.CLOSE_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_bracket_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(OPEN_BRACKET);
			State = 452; expression();
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 453; Match(COMMA);
				State = 454; expression();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; anonymous_function_signature();
			State = 463; right_arrow();
			State = 464; anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 62, RULE_anonymous_function_signature);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 466; Match(OPEN_PARENS);
				State = 467; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468; Match(OPEN_PARENS);
				State = 469; explicit_anonymous_function_parameter_list();
				State = 470; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 472; Match(OPEN_PARENS);
				State = 473; implicit_anonymous_function_parameter_list();
				State = 474; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 476; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 64, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; explicit_anonymous_function_parameter();
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 480; Match(COMMA);
				State = 481; explicit_anonymous_function_parameter();
				}
				}
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_explicit_anonymous_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; identifier();
			State = 488; Match(COLON);
			State = 489; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 68, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; identifier();
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 492; Match(COMMA);
				State = 493; identifier();
				}
				}
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_anonymous_function_body);
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 499; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 500; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmbeddedStatementContext : StatementContext {
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public EmbeddedStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_statement);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 503; local_variable_declaration();
				State = 504; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new EmbeddedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 506; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_embedded_statement);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509; block();
				}
				break;
			case BREAK:
			case CONTINUE:
			case DO:
			case FALSE:
			case FOR:
			case FOREACH:
			case GET:
			case IF:
			case LET:
			case NEW:
			case NULL:
			case RETURN:
			case SET:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case VAR:
			case WHILE:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
	 
		public Simple_embedded_statementContext() { }
		public virtual void CopyFrom(Simple_embedded_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public EmptyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryStatementContext : Simple_embedded_statementContext {
		public ITerminalNode TRY() { return GetToken(TypescriptParser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public TryStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : Simple_embedded_statementContext {
		public ITerminalNode THROW() { return GetToken(TypescriptParser.THROW, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FOR() { return GetToken(TypescriptParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(TypescriptParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(TypescriptParser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public ForStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Simple_embedded_statementContext {
		public ITerminalNode BREAK() { return GetToken(TypescriptParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : Simple_embedded_statementContext {
		public ITerminalNode IF() { return GetToken(TypescriptParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TypescriptParser.ELSE, 0); }
		public IfStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Simple_embedded_statementContext {
		public ITerminalNode RETURN() { return GetToken(TypescriptParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SWITCH() { return GetToken(TypescriptParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public SwitchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : Simple_embedded_statementContext {
		public ITerminalNode WHILE() { return GetToken(TypescriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public WhileStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : Simple_embedded_statementContext {
		public ITerminalNode DO() { return GetToken(TypescriptParser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(TypescriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public DoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FOREACH() { return GetToken(TypescriptParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OF() { return GetToken(TypescriptParser.OF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ForeachStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : Simple_embedded_statementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ExpressionStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CONTINUE() { return GetToken(TypescriptParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public ContinueStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_simple_embedded_statement);
		int _la;
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 513; Match(SEMICOLON);
				}
				break;
			case FALSE:
			case GET:
			case LET:
			case NEW:
			case NULL:
			case SET:
			case THIS:
			case TRUE:
			case VAR:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 514; expression();
				State = 515; Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 517; Match(IF);
				State = 518; Match(OPEN_PARENS);
				State = 519; expression();
				State = 520; Match(CLOSE_PARENS);
				State = 521; if_body();
				State = 524;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 522; Match(ELSE);
					State = 523; if_body();
					}
					break;
				}
				}
				break;
			case SWITCH:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 526; Match(SWITCH);
				State = 527; Match(OPEN_PARENS);
				State = 528; expression();
				State = 529; Match(CLOSE_PARENS);
				State = 530; Match(OPEN_BRACE);
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 531; switch_section();
					}
					}
					State = 536;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 537; Match(CLOSE_BRACE);
				}
				break;
			case WHILE:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 539; Match(WHILE);
				State = 540; Match(OPEN_PARENS);
				State = 541; expression();
				State = 542; Match(CLOSE_PARENS);
				State = 543; embedded_statement();
				}
				break;
			case DO:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 545; Match(DO);
				State = 546; embedded_statement();
				State = 547; Match(WHILE);
				State = 548; Match(OPEN_PARENS);
				State = 549; expression();
				State = 550; Match(CLOSE_PARENS);
				State = 551; Match(SEMICOLON);
				}
				break;
			case FOR:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 553; Match(FOR);
				State = 554; Match(OPEN_PARENS);
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << FALSE) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << SET) | (1L << THIS) | (1L << TRUE) | (1L << VAR) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_PARENS))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PLUS - 68)) | (1L << (MINUS - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)))) != 0)) {
					{
					State = 555; for_initializer();
					}
				}

				State = 558; Match(SEMICOLON);
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 559; expression();
					}
				}

				State = 562; Match(SEMICOLON);
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 563; for_iterator();
					}
				}

				State = 566; Match(CLOSE_PARENS);
				State = 567; embedded_statement();
				}
				break;
			case FOREACH:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 568; Match(FOREACH);
				State = 569; Match(OPEN_PARENS);
				State = 570; local_variable_type();
				State = 571; identifier();
				State = 572; Match(OF);
				State = 573; expression();
				State = 574; Match(CLOSE_PARENS);
				State = 575; embedded_statement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 577; Match(BREAK);
				State = 578; Match(SEMICOLON);
				}
				break;
			case CONTINUE:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 579; Match(CONTINUE);
				State = 580; Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 581; Match(RETURN);
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 582; expression();
					}
				}

				State = 585; Match(SEMICOLON);
				}
				break;
			case THROW:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 586; Match(THROW);
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
					{
					State = 587; expression();
					}
				}

				State = 590; Match(SEMICOLON);
				}
				break;
			case TRY:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 591; Match(TRY);
				State = 592; block();
				State = 598;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 593; catch_clauses();
					State = 595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 594; finally_clause();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 597; finally_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; Match(OPEN_BRACE);
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << THROW) | (1L << TRUE) | (1L << TRY) | (1L << VAR) | (1L << WHILE) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMICOLON - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)))) != 0)) {
				{
				State = 603; statement_list();
				}
			}

			State = 606; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_local_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; local_variable_type();
			State = 609; local_variable_declarator();
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 610; Match(COMMA);
				State = 611; local_variable_declarator();
				}
				}
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public ITerminalNode CONST() { return GetToken(TypescriptParser.CONST, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 82, RULE_local_variable_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << LET) | (1L << VAR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(Context, State);
		EnterRule(_localctx, 84, RULE_local_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; identifier();
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 620; Match(COLON);
				State = 621; type();
				}
			}

			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 624; Match(ASSIGNMENT);
				State = 625; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 86, RULE_if_body);
		try {
			State = 630;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 628; block();
				}
				break;
			case BREAK:
			case CONTINUE:
			case DO:
			case FALSE:
			case FOR:
			case FOREACH:
			case GET:
			case IF:
			case LET:
			case NEW:
			case NULL:
			case RETURN:
			case SET:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case VAR:
			case WHILE:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case BANG:
			case TILDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 88, RULE_switch_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 632; switch_label();
				}
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 637; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TypescriptParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TypescriptParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 90, RULE_switch_label);
		try {
			State = 645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 639; Match(CASE);
				State = 640; expression();
				State = 641; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643; Match(DEFAULT);
				State = 644; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 92, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 647; statement();
				}
				}
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << CONST) | (1L << CONTINUE) | (1L << DO) | (1L << FALSE) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << IF) | (1L << LET) | (1L << NEW) | (1L << NULL) | (1L << RETURN) | (1L << SET) | (1L << SWITCH) | (1L << THIS) | (1L << THROW) | (1L << TRUE) | (1L << TRY) | (1L << VAR) | (1L << WHILE) | (1L << IDENTIFIER) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMICOLON - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(Context, State);
		EnterRule(_localctx, 94, RULE_for_initializer);
		int _la;
		try {
			State = 661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 652; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 653; expression();
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 654; Match(COMMA);
					State = 655; expression();
					}
					}
					State = 660;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(Context, State);
		EnterRule(_localctx, 96, RULE_for_iterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663; expression();
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 664; Match(COMMA);
				State = 665; expression();
				}
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(Context, State);
		EnterRule(_localctx, 98, RULE_catch_clauses);
		int _la;
		try {
			int _alt;
			State = 682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 671; specific_catch_clause();
				State = 675;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 672; specific_catch_clause();
						}
						} 
					}
					State = 677;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 678; general_catch_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 681; general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(TypescriptParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(Context, State);
		EnterRule(_localctx, 100, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; Match(CATCH);
			State = 685; Match(OPEN_PARENS);
			State = 686; class_type();
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 687; identifier();
				}
			}

			State = 690; Match(CLOSE_PARENS);
			State = 691; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(TypescriptParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_general_catch_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693; Match(CATCH);
			State = 694; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(TypescriptParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(FINALLY);
			State = 697; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_acquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(Context, State);
		EnterRule(_localctx, 106, RULE_resource_acquisition);
		try {
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 699; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 700; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(TypescriptParser.MODULE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(MODULE);
			State = 704; identifier();
			State = 705; namespace_body();
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 706; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 110, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709; Match(OPEN_BRACE);
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << MODULE))) != 0)) {
				{
				State = 710; namespace_member_declarations();
				}
			}

			State = 713; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(Context, State);
		EnterRule(_localctx, 112, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 715; namespace_member_declaration();
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC) | (1L << MODULE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_namespace_member_declaration);
		try {
			State = 722;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 720; namespace_declaration();
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case NEW:
			case OVERRIDE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721; type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 116, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0)) {
				{
				State = 724; all_member_modifiers();
				}
			}

			State = 729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 727; class_definition();
				}
				break;
			case ENUM:
				{
				State = 728; enum_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 118, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; Match(LT);
			State = 732; type_parameter();
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 733; Match(COMMA);
				State = 734; type_parameter();
				}
				}
				State = 739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 740; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 120, RULE_type_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 122, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; Match(OPEN_BRACE);
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 745; class_member_declarations();
				}
			}

			State = 748; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(Context, State);
		EnterRule(_localctx, 124, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 750; class_member_declaration();
				}
				}
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << GET) | (1L << LET) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << SET) | (1L << STATIC) | (1L << VAR) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_class_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0)) {
				{
				State = 755; all_member_modifiers();
				}
			}

			State = 758; common_member_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(Context, State);
		EnterRule(_localctx, 128, RULE_all_member_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 760; all_member_modifier();
				}
				}
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(TypescriptParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(TypescriptParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(TypescriptParser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TypescriptParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(TypescriptParser.READONLY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TypescriptParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(TypescriptParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(TypescriptParser.STATIC, 0); }
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(Context, State);
		EnterRule(_localctx, 130, RULE_all_member_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << NEW) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << READONLY) | (1L << STATIC))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_common_member_declaration);
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767; typed_member_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768; constructor_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 769; class_definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 770; enum_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 773; method_declaration();
				}
				break;
			case 2:
				{
				State = 774; field_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 136, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777; variable_declarator();
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 778; Match(COMMA);
				State = 779; variable_declarator();
				}
				}
				State = 784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 138, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; identifier();
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 786; Match(COLON);
				State = 787; type();
				}
			}

			State = 792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 790; Match(ASSIGNMENT);
				State = 791; variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 140, RULE_variable_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(TypescriptParser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 142, RULE_return_type);
		try {
			State = 798;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case GET:
			case LET:
			case SET:
			case STRING:
			case VAR:
			case NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796; type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 144, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 146, RULE_method_body);
		try {
			State = 804;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 802; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 803; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_formal_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; fixed_parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 150, RULE_fixed_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; fixed_parameter();
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 809; Match(COMMA);
				State = 810; fixed_parameter();
				}
				}
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 152, RULE_fixed_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; arg_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public ITerminalNode SUPER() { return GetToken(TypescriptParser.SUPER, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(Context, State);
		EnterRule(_localctx, 154, RULE_constructor_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(COLON);
			State = 819; Match(SUPER);
			State = 820; Match(OPEN_PARENS);
			State = 822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 821; argument_list();
				}
			}

			State = 824; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 156, RULE_body);
		try {
			State = 828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TypescriptParser.LT, 0); }
		public Variant_type_parameterContext[] variant_type_parameter() {
			return GetRuleContexts<Variant_type_parameterContext>();
		}
		public Variant_type_parameterContext variant_type_parameter(int i) {
			return GetRuleContext<Variant_type_parameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(Context, State);
		EnterRule(_localctx, 158, RULE_variant_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; Match(LT);
			State = 831; variant_type_parameter();
			State = 836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 832; Match(COMMA);
				State = 833; variant_type_parameter();
				}
				}
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 839; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Variant_type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameterContext variant_type_parameter() {
		Variant_type_parameterContext _localctx = new Variant_type_parameterContext(Context, State);
		EnterRule(_localctx, 160, RULE_variant_type_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(TypescriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(TypescriptParser.CLOSE_BRACE, 0); }
		public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TypescriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TypescriptParser.COMMA, i);
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 162, RULE_enum_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 843; Match(OPEN_BRACE);
			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 844; enum_member_declaration();
				State = 849;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 845; Match(COMMA);
						State = 846; enum_member_declaration();
						}
						} 
					}
					State = 851;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 852; Match(COMMA);
					}
				}

				}
			}

			State = 857; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(Context, State);
		EnterRule(_localctx, 164, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859; identifier();
			State = 862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 860; Match(ASSIGNMENT);
				State = 861; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(Context, State);
		EnterRule(_localctx, 166, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864; _localctx.first = Match(ASSIGNMENT);
			State = 865; _localctx.second = Match(GT);
			State = 866;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(TypescriptParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(TypescriptParser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 168, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868; _localctx.first = Match(GT);
			State = 869; _localctx.second = Match(GT);
			State = 870;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(TypescriptParser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(TypescriptParser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(Context, State);
		EnterRule(_localctx, 170, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872; _localctx.first = Match(GT);
			State = 873; _localctx.second = Match(OP_GE);
			State = 874;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(TypescriptParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(TypescriptParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(TypescriptParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(TypescriptParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(TypescriptParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_literal);
		try {
			State = 883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 876; boolean_literal();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 877; string_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 878; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 879; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 880; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 881; Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 882; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(TypescriptParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(TypescriptParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 174, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(TypescriptParser.REGULAR_STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 176, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887; Match(REGULAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(TypescriptParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 178, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889; Match(CLASS);
			State = 890; identifier();
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 891; type_parameter_list();
				}
			}

			State = 894; class_body();
			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 895; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(TypescriptParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 180, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; Match(ENUM);
			State = 899; identifier();
			State = 900; enum_body();
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 901; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 182, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904; variable_declarators();
			State = 905; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 184, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907; identifier();
			State = 908; Match(OPEN_PARENS);
			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 909; formal_parameter_list();
				}
			}

			State = 912; Match(CLOSE_PARENS);
			State = 913; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TypescriptParser.SEMICOLON, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 915;
				_la = TokenStream.LA(1);
				if ( !(_la==GET || _la==SET) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 918; method_member_name();
			State = 920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 919; type_parameter_list();
				}
			}

			State = 922; Match(OPEN_PARENS);
			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 923; formal_parameter_list();
				}
			}

			State = 926; Match(CLOSE_PARENS);
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 927; Match(COLON);
				State = 928; return_type();
				}
			}

			State = 936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 931; method_body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 932; right_arrow();
				State = 933; expression();
				State = 934; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TypescriptParser.DOUBLE_COLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TypescriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TypescriptParser.DOT, i);
		}
		public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(Context, State);
		EnterRule(_localctx, 188, RULE_method_member_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 938; identifier();
				}
				break;
			case 2:
				{
				State = 939; identifier();
				State = 940; Match(DOUBLE_COLON);
				State = 941; identifier();
				}
				break;
			}
			State = 952;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 945; type_argument_list();
						}
					}

					State = 948; Match(DOT);
					State = 949; identifier();
					}
					} 
				}
				State = 954;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TypescriptParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(TypescriptParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Arg_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterArg_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitArg_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declarationContext arg_declaration() {
		Arg_declarationContext _localctx = new Arg_declarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_arg_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955; identifier();
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 956; Match(COLON);
				State = 957; type();
				}
			}

			State = 962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 960; Match(ASSIGNMENT);
				State = 961; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(Context, State);
		EnterRule(_localctx, 192, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964; Match(OPEN_PARENS);
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 965; argument_list();
				}
			}

			State = 968; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(TypescriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(TypescriptParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 194, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; Match(OPEN_PARENS);
			State = 972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (FALSE - 17)) | (1L << (GET - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (SET - 17)) | (1L << (THIS - 17)) | (1L << (TRUE - 17)) | (1L << (VAR - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (LITERAL_ACCESS - 17)) | (1L << (INTEGER_LITERAL - 17)) | (1L << (HEX_INTEGER_LITERAL - 17)) | (1L << (REAL_LITERAL - 17)) | (1L << (CHARACTER_LITERAL - 17)) | (1L << (REGULAR_STRING - 17)) | (1L << (OPEN_PARENS - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (BANG - 17)) | (1L << (TILDE - 17)))) != 0)) {
				{
				State = 971; argument_list();
				}
			}

			State = 974; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TypescriptParser.IDENTIFIER, 0); }
		public ITerminalNode GET() { return GetToken(TypescriptParser.GET, 0); }
		public ITerminalNode LET() { return GetToken(TypescriptParser.LET, 0); }
		public ITerminalNode SET() { return GetToken(TypescriptParser.SET, 0); }
		public ITerminalNode VAR() { return GetToken(TypescriptParser.VAR, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypescriptParserListener typedListener = listener as ITypescriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypescriptParserVisitor<TResult> typedVisitor = visitor as ITypescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 196, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GET) | (1L << LET) | (1L << SET) | (1L << VAR) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 83: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 84: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 85: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x82', '\x3D5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x3', '\x2', '\x5', '\x2', '\xCA', '\n', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\xCD', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xD3', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xD8', '\n', '\x3', 
		'\a', '\x3', '\xDA', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xDD', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\xE2', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\xE5', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xE9', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\xED', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\xF3', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xF9', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xFC', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x103', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\x106', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x10B', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x111', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x115', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x126', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x12E', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\x133', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x136', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x13B', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x13E', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x143', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x146', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x14B', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x14E', '\v', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x153', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\x156', '\v', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\a', '\x16', '\x15B', '\n', '\x16', '\f', '\x16', 
		'\xE', '\x16', '\x15E', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\a', '\x17', '\x163', '\n', '\x17', '\f', '\x17', '\xE', '\x17', 
		'\x166', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x16B', '\n', '\x18', '\x3', '\x18', '\a', '\x18', '\x16E', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x171', '\v', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x176', '\n', '\x19', '\f', 
		'\x19', '\xE', '\x19', '\x179', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\a', '\x1A', '\x17E', '\n', '\x1A', '\f', '\x1A', '\xE', 
		'\x1A', '\x181', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x191', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x195', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x198', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x19E', '\n', '\x1C', '\x3', '\x1C', '\a', '\x1C', 
		'\x1A1', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x1A4', '\v', '\x1C', 
		'\a', '\x1C', '\x1A6', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x1A9', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x1AE', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x1BD', '\n', '\x1D', '\x5', '\x1D', '\x1BF', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1C4', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', 
		'\x1CA', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x1CD', '\v', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x1E0', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', 
		'\"', '\x1E5', '\n', '\"', '\f', '\"', '\xE', '\"', '\x1E8', '\v', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\a', '$', '\x1F1', '\n', '$', '\f', '$', '\xE', '$', '\x1F4', 
		'\v', '$', '\x3', '%', '\x3', '%', '\x5', '%', '\x1F8', '\n', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1FE', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x202', '\n', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x20F', '\n', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\a', '(', '\x217', '\n', '(', '\f', '(', '\xE', '(', '\x21A', '\v', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x5', '(', '\x22F', '\n', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x233', '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x237', 
		'\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x24A', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x24F', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x5', '(', '\x256', '\n', '(', '\x3', '(', '\x5', '(', '\x259', 
		'\n', '(', '\x5', '(', '\x25B', '\n', '(', '\x3', ')', '\x3', ')', '\x5', 
		')', '\x25F', '\n', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\a', '*', '\x267', '\n', '*', '\f', '*', '\xE', 
		'*', '\x26A', '\v', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x5', ',', '\x271', '\n', ',', '\x3', ',', '\x3', ',', '\x5', 
		',', '\x275', '\n', ',', '\x3', '-', '\x3', '-', '\x5', '-', '\x279', 
		'\n', '-', '\x3', '.', '\x6', '.', '\x27C', '\n', '.', '\r', '.', '\xE', 
		'.', '\x27D', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x288', '\n', '/', '\x3', 
		'\x30', '\x6', '\x30', '\x28B', '\n', '\x30', '\r', '\x30', '\xE', '\x30', 
		'\x28C', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', 
		'\x31', '\x293', '\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x296', '\v', 
		'\x31', '\x5', '\x31', '\x298', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\a', '\x32', '\x29D', '\n', '\x32', '\f', '\x32', '\xE', 
		'\x32', '\x2A0', '\v', '\x32', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', 
		'\x2A4', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x2A7', '\v', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x2AA', '\n', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x2AD', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x2B3', '\n', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x5', 
		'\x37', '\x2C0', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x5', '\x38', '\x2C6', '\n', '\x38', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x2CA', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', ':', '\x6', ':', '\x2CF', '\n', ':', '\r', ':', '\xE', ':', '\x2D0', 
		'\x3', ';', '\x3', ';', '\x5', ';', '\x2D5', '\n', ';', '\x3', '<', '\x5', 
		'<', '\x2D8', '\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x2DC', 
		'\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', 
		'\x2E2', '\n', '=', '\f', '=', '\xE', '=', '\x2E5', '\v', '=', '\x3', 
		'=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x5', 
		'?', '\x2ED', '\n', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x6', '@', 
		'\x2F2', '\n', '@', '\r', '@', '\xE', '@', '\x2F3', '\x3', '\x41', '\x5', 
		'\x41', '\x2F7', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x6', '\x42', '\x2FC', '\n', '\x42', '\r', '\x42', '\xE', '\x42', '\x2FD', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x306', '\n', '\x44', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x30A', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\a', '\x46', '\x30F', '\n', '\x46', '\f', '\x46', '\xE', 
		'\x46', '\x312', '\v', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 
		'G', '\x317', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x31B', 
		'\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x5', 'I', 
		'\x321', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x5', 
		'K', '\x327', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\a', 'M', '\x32E', '\n', 'M', '\f', 'M', '\xE', 'M', '\x331', 
		'\v', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x5', 'O', '\x339', '\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'P', '\x3', 'P', '\x5', 'P', '\x33F', '\n', 'P', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\a', 'Q', '\x345', '\n', 'Q', '\f', 'Q', '\xE', 
		'Q', '\x348', '\v', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\a', 'S', '\x352', '\n', 
		'S', '\f', 'S', '\xE', 'S', '\x355', '\v', 'S', '\x3', 'S', '\x5', 'S', 
		'\x358', '\n', 'S', '\x5', 'S', '\x35A', '\n', 'S', '\x3', 'S', '\x3', 
		'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x361', '\n', 'T', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x5', 'X', '\x376', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x37F', 
		'\n', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x383', '\n', '[', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x389', '\n', 
		'\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x5', '^', '\x391', '\n', '^', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x3', '_', '\x5', '_', '\x397', '\n', '_', '\x3', '_', '\x3', '_', '\x5', 
		'_', '\x39B', '\n', '_', '\x3', '_', '\x3', '_', '\x5', '_', '\x39F', 
		'\n', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', '_', '\x3A4', '\n', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', 
		'_', '\x3AB', '\n', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x5', '`', '\x3B2', '\n', '`', '\x3', '`', '\x5', '`', '\x3B5', 
		'\n', '`', '\x3', '`', '\x3', '`', '\a', '`', '\x3B9', '\n', '`', '\f', 
		'`', '\xE', '`', '\x3BC', '\v', '`', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x5', '\x61', '\x3C1', '\n', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x5', '\x61', '\x3C5', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x5', 
		'\x62', '\x3C9', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', 
		'\x3', '\x63', '\x5', '\x63', '\x3CF', '\n', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x2', '\x2', '\x65', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\x2', '\v', '\x3', '\x2', '[', '\\', 
		'\x4', '\x2', 'Q', 'R', ']', '^', '\x3', '\x2', '\x46', 'G', '\x3', '\x2', 
		'H', 'J', '\x5', '\x2', '\r', '\r', '\x19', '\x19', '+', '+', '\a', '\x2', 
		'\a', '\a', '\x1A', '\x1A', '\x1C', '\x1C', '\x1E', '!', '$', '$', '\x4', 
		'\x2', '\x13', '\x13', ')', ')', '\x4', '\x2', '\x17', '\x17', '#', '#', 
		'\a', '\x2', '\x17', '\x17', '\x19', '\x19', '#', '#', '+', '+', '\x32', 
		'\x32', '\x2', '\x408', '\x2', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\x6', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\xE8', '\x3', '\x2', '\x2', '\x2', '\n', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\x10', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x14', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x110', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x125', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x127', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x12F', '\x3', '\x2', '\x2', '\x2', '\"', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x147', '\x3', '\x2', '\x2', '\x2', '(', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x157', '\x3', '\x2', '\x2', '\x2', ',', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x172', '\x3', '\x2', '\x2', '\x2', '\x32', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x190', '\x3', '\x2', '\x2', '\x2', '\x36', '\x192', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1C0', '\x3', '\x2', '\x2', '\x2', '<', '\x1C5', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1D0', '\x3', '\x2', '\x2', '\x2', '@', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1ED', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1F7', '\x3', '\x2', '\x2', '\x2', 'J', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x25A', '\x3', '\x2', '\x2', '\x2', 'P', '\x25C', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x262', '\x3', '\x2', '\x2', '\x2', 'T', '\x26B', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x278', '\x3', '\x2', '\x2', '\x2', 'Z', '\x27B', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x287', '\x3', '\x2', '\x2', '\x2', '^', '\x28A', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x299', '\x3', '\x2', '\x2', '\x2', '\x64', '\x2AC', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x2AE', '\x3', '\x2', '\x2', '\x2', 'h', '\x2B7', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x2BF', '\x3', '\x2', '\x2', '\x2', 'n', '\x2C1', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x2C7', '\x3', '\x2', '\x2', '\x2', 'r', '\x2CE', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x2D7', '\x3', '\x2', '\x2', '\x2', 'x', '\x2DD', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x2E8', '\x3', '\x2', '\x2', '\x2', '|', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x2F1', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x82', '\x2FB', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x86', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x313', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x90', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x322', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x326', '\x3', '\x2', '\x2', '\x2', '\x96', '\x328', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x332', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x334', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x33E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x340', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x34B', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x34D', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x362', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x366', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x36A', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x375', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x377', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x379', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x37B', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x384', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x38A', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x38D', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x396', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x3B1', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x3C6', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x3CC', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', '\a', '\x3', 
		'\x2', '\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCD', '\x5', 'r', ':', '\x2', '\xCC', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x2', '\x2', '\x3', 
		'\xCF', '\x3', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x5', '\xC6', 
		'\x64', '\x2', '\xD1', '\xD3', '\x5', '\x10', '\t', '\x2', '\xD2', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x42', 
		'\x2', '\x2', '\xD5', '\xD7', '\x5', '\xC6', '\x64', '\x2', '\xD6', '\xD8', 
		'\x5', '\x10', '\t', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE3', 
		'\x5', '\b', '\x5', '\x2', '\xDF', '\xE0', '\a', '>', '\x2', '\x2', '\xE0', 
		'\xE2', '\a', '?', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE9', '\x5', '\n', '\x6', '\x2', '\xE7', '\xE9', '\x5', 
		'\xE', '\b', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xED', '\x5', '\f', '\a', '\x2', '\xEB', '\xED', '\a', 
		'\b', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\a', '.', '\x2', '\x2', '\xEF', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF3', '\x5', '\x4', '\x3', '\x2', '\xF1', '\xF3', 
		'\a', '%', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', 'Q', '\x2', '\x2', '\xF5', '\xFA', '\x5', 
		'\x6', '\x4', '\x2', '\xF6', '\xF7', '\a', '\x43', '\x2', '\x2', '\xF7', 
		'\xF9', '\x5', '\x6', '\x4', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', 'R', '\x2', '\x2', '\xFE', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x104', '\x5', '\x14', '\v', '\x2', '\x100', 
		'\x101', '\a', '\x43', '\x2', '\x2', '\x101', '\x103', '\x5', '\x14', 
		'\v', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x108', '\x5', '\xC6', '\x64', '\x2', '\x108', '\x109', '\a', '\x44', 
		'\x2', '\x2', '\x109', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x5', 
		'\x16', '\f', '\x2', '\x10D', '\x15', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x111', '\x5', '\x1A', '\xE', '\x2', '\x10F', '\x111', '\x5', '\x18', 
		'\r', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x115', '\x5', '>', ' ', '\x2', '\x113', '\x115', '\x5', '\x1E', 
		'\x10', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x5', '\x34', '\x1B', '\x2', '\x117', '\x118', 
		'\x5', '\x1C', '\xF', '\x2', '\x118', '\x119', '\x5', '\x16', '\f', '\x2', 
		'\x119', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x126', '\a', 'P', 
		'\x2', '\x2', '\x11B', '\x126', '\a', '_', '\x2', '\x2', '\x11C', '\x126', 
		'\a', '`', '\x2', '\x2', '\x11D', '\x126', '\a', '\x61', '\x2', '\x2', 
		'\x11E', '\x126', '\a', '\x62', '\x2', '\x2', '\x11F', '\x126', '\a', 
		'\x63', '\x2', '\x2', '\x120', '\x126', '\a', '\x64', '\x2', '\x2', '\x121', 
		'\x126', '\a', '\x65', '\x2', '\x2', '\x122', '\x126', '\a', '\x66', '\x2', 
		'\x2', '\x123', '\x126', '\a', 'h', '\x2', '\x2', '\x124', '\x126', '\x5', 
		'\xAC', 'W', '\x2', '\x125', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x125', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x125', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x120', '\x3', '\x2', '\x2', '\x2', '\x125', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x122', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12D', 
		'\x5', ' ', '\x11', '\x2', '\x128', '\x129', '\a', 'S', '\x2', '\x2', 
		'\x129', '\x12A', '\x5', '\x16', '\f', '\x2', '\x12A', '\x12B', '\a', 
		'\x44', '\x2', '\x2', '\x12B', '\x12C', '\x5', '\x16', '\f', '\x2', '\x12C', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x134', '\x5', '\"', '\x12', '\x2', 
		'\x130', '\x131', '\a', 'Y', '\x2', '\x2', '\x131', '\x133', '\x5', '\"', 
		'\x12', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x13C', '\x5', '$', '\x13', '\x2', '\x138', '\x139', '\a', 'X', '\x2', 
		'\x2', '\x139', '\x13B', '\x5', '$', '\x13', '\x2', '\x13A', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '#', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x144', '\x5', '&', '\x14', 
		'\x2', '\x140', '\x141', '\a', 'L', '\x2', '\x2', '\x141', '\x143', '\x5', 
		'&', '\x14', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x14C', '\x5', '(', '\x15', '\x2', '\x148', '\x149', '\a', 'M', '\x2', 
		'\x2', '\x149', '\x14B', '\x5', '(', '\x15', '\x2', '\x14A', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\'', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x154', '\x5', '*', '\x16', 
		'\x2', '\x150', '\x151', '\a', 'K', '\x2', '\x2', '\x151', '\x153', '\x5', 
		'*', '\x16', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x15C', '\x5', ',', '\x17', '\x2', '\x158', '\x159', '\t', '\x2', '\x2', 
		'\x2', '\x159', '\x15B', '\x5', ',', '\x17', '\x2', '\x15A', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '+', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x164', '\x5', '.', '\x18', 
		'\x2', '\x160', '\x161', '\t', '\x3', '\x2', '\x2', '\x161', '\x163', 
		'\x5', '.', '\x18', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x166', '\x3', '\x2', '\x2', '\x2', '\x164', '\x162', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x166', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x16F', '\x5', '\x30', '\x19', '\x2', '\x168', '\x16B', 
		'\a', 'g', '\x2', '\x2', '\x169', '\x16B', '\x5', '\xAA', 'V', '\x2', 
		'\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16E', '\x5', '\x30', '\x19', '\x2', '\x16D', '\x16A', '\x3', '\x2', 
		'\x2', '\x2', '\x16E', '\x171', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '/', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', '\x172', '\x177', '\x5', '\x32', '\x1A', '\x2', '\x173', 
		'\x174', '\t', '\x4', '\x2', '\x2', '\x174', '\x176', '\x5', '\x32', '\x1A', 
		'\x2', '\x175', '\x173', '\x3', '\x2', '\x2', '\x2', '\x176', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x178', '\x3', '\x2', '\x2', '\x2', '\x178', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x177', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17F', '\x5', '\x34', '\x1B', '\x2', '\x17B', '\x17C', '\t', '\x5', 
		'\x2', '\x2', '\x17C', '\x17E', '\x5', '\x34', '\x1B', '\x2', '\x17D', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x182', '\x191', '\x5', 
		'\x36', '\x1C', '\x2', '\x183', '\x184', '\a', '\x46', '\x2', '\x2', '\x184', 
		'\x191', '\x5', '\x34', '\x1B', '\x2', '\x185', '\x186', '\a', 'G', '\x2', 
		'\x2', '\x186', '\x191', '\x5', '\x34', '\x1B', '\x2', '\x187', '\x188', 
		'\a', 'N', '\x2', '\x2', '\x188', '\x191', '\x5', '\x34', '\x1B', '\x2', 
		'\x189', '\x18A', '\a', 'O', '\x2', '\x2', '\x18A', '\x191', '\x5', '\x34', 
		'\x1B', '\x2', '\x18B', '\x18C', '\a', '@', '\x2', '\x2', '\x18C', '\x18D', 
		'\x5', '\x6', '\x4', '\x2', '\x18D', '\x18E', '\a', '\x41', '\x2', '\x2', 
		'\x18E', '\x18F', '\x5', '\x34', '\x1B', '\x2', '\x18F', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x182', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x190', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x187', '\x3', '\x2', '\x2', '\x2', '\x190', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x35', '\x3', '\x2', '\x2', '\x2', '\x192', '\x196', '\x5', 
		'\x38', '\x1D', '\x2', '\x193', '\x195', '\x5', '<', '\x1F', '\x2', '\x194', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x195', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19E', '\x5', 
		':', '\x1E', '\x2', '\x19A', '\x19E', '\x5', '\xC2', '\x62', '\x2', '\x19B', 
		'\x19E', '\a', 'V', '\x2', '\x2', '\x19C', '\x19E', '\a', 'W', '\x2', 
		'\x2', '\x19D', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A1', '\x5', '<', '\x1F', '\x2', '\x1A0', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1BF', '\x5', '\xAE', 'X', '\x2', 
		'\x1AB', '\x1AD', '\x5', '\xC6', '\x64', '\x2', '\x1AC', '\x1AE', '\x5', 
		'\x10', '\t', '\x2', '\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1B0', '\a', '@', '\x2', '\x2', '\x1B0', '\x1B1', '\x5', 
		'\x16', '\f', '\x2', '\x1B1', '\x1B2', '\a', '\x41', '\x2', '\x2', '\x1B2', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1BF', '\a', '\x33', '\x2', 
		'\x2', '\x1B4', '\x1BF', '\a', '\'', '\x2', '\x2', '\x1B5', '\x1B6', '\a', 
		'\x1A', '\x2', '\x2', '\x1B6', '\x1BC', '\x5', '\x6', '\x4', '\x2', '\x1B7', 
		'\x1BD', '\x5', '\xC4', '\x63', '\x2', '\x1B8', '\x1B9', '\a', '>', '\x2', 
		'\x2', '\x1B9', '\x1BA', '\x5', '\x16', '\f', '\x2', '\x1BA', '\x1BB', 
		'\a', '?', '\x2', '\x2', '\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1BD', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1B4', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x42', '\x2', '\x2', '\x1C1', 
		'\x1C3', '\x5', '\xC6', '\x64', '\x2', '\x1C2', '\x1C4', '\x5', '\x10', 
		'\t', '\x2', '\x1C3', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x1C5', '\x1C6', '\a', '>', '\x2', '\x2', '\x1C6', '\x1CB', '\x5', '\x16', 
		'\f', '\x2', '\x1C7', '\x1C8', '\a', '\x43', '\x2', '\x2', '\x1C8', '\x1CA', 
		'\x5', '\x16', '\f', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\a', '?', '\x2', '\x2', '\x1CF', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x5', '@', '!', '\x2', '\x1D1', 
		'\x1D2', '\x5', '\xA8', 'U', '\x2', '\x1D2', '\x1D3', '\x5', 'H', '%', 
		'\x2', '\x1D3', '?', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\a', 
		'@', '\x2', '\x2', '\x1D5', '\x1E0', '\a', '\x41', '\x2', '\x2', '\x1D6', 
		'\x1D7', '\a', '@', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', '\x42', '\"', 
		'\x2', '\x1D8', '\x1D9', '\a', '\x41', '\x2', '\x2', '\x1D9', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '@', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\x5', '\x46', '$', '\x2', '\x1DC', '\x1DD', '\a', '\x41', 
		'\x2', '\x2', '\x1DD', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E0', 
		'\x5', '\xC6', '\x64', '\x2', '\x1DF', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E6', '\x5', '\x44', '#', 
		'\x2', '\x1E2', '\x1E3', '\a', '\x43', '\x2', '\x2', '\x1E3', '\x1E5', 
		'\x5', '\x44', '#', '\x2', '\x1E4', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E4', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\x5', '\xC6', '\x64', '\x2', '\x1EA', '\x1EB', 
		'\a', '\x44', '\x2', '\x2', '\x1EB', '\x1EC', '\x5', '\x6', '\x4', '\x2', 
		'\x1EC', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1F2', '\x5', 
		'\xC6', '\x64', '\x2', '\x1EE', '\x1EF', '\a', '\x43', '\x2', '\x2', '\x1EF', 
		'\x1F1', '\x5', '\xC6', '\x64', '\x2', '\x1F0', '\x1EE', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', 'G', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5', '\x1F8', '\x5', '\x16', '\f', '\x2', '\x1F6', '\x1F8', 
		'\x5', 'P', ')', '\x2', '\x1F7', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F8', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9', '\x1FA', '\x5', 'R', '*', '\x2', '\x1FA', '\x1FB', 
		'\a', '\x45', '\x2', '\x2', '\x1FB', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FE', '\x5', 'L', '\'', '\x2', '\x1FD', '\x1F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FE', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x202', '\x5', 'P', ')', '\x2', 
		'\x200', '\x202', '\x5', 'N', '(', '\x2', '\x201', '\x1FF', '\x3', '\x2', 
		'\x2', '\x2', '\x201', '\x200', '\x3', '\x2', '\x2', '\x2', '\x202', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x203', '\x25B', '\a', '\x45', '\x2', '\x2', 
		'\x204', '\x205', '\x5', '\x16', '\f', '\x2', '\x205', '\x206', '\a', 
		'\x45', '\x2', '\x2', '\x206', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\a', '\x18', '\x2', '\x2', '\x208', '\x209', '\a', '@', '\x2', 
		'\x2', '\x209', '\x20A', '\x5', '\x16', '\f', '\x2', '\x20A', '\x20B', 
		'\a', '\x41', '\x2', '\x2', '\x20B', '\x20E', '\x5', 'X', '-', '\x2', 
		'\x20C', '\x20D', '\a', '\x11', '\x2', '\x2', '\x20D', '\x20F', '\x5', 
		'X', '-', '\x2', '\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x210', '\x211', '\a', '&', '\x2', '\x2', '\x211', '\x212', '\a', 
		'@', '\x2', '\x2', '\x212', '\x213', '\x5', '\x16', '\f', '\x2', '\x213', 
		'\x214', '\a', '\x41', '\x2', '\x2', '\x214', '\x218', '\a', '<', '\x2', 
		'\x2', '\x215', '\x217', '\x5', 'Z', '.', '\x2', '\x216', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', '=', '\x2', '\x2', 
		'\x21C', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\a', 
		'-', '\x2', '\x2', '\x21E', '\x21F', '\a', '@', '\x2', '\x2', '\x21F', 
		'\x220', '\x5', '\x16', '\f', '\x2', '\x220', '\x221', '\a', '\x41', '\x2', 
		'\x2', '\x221', '\x222', '\x5', 'L', '\'', '\x2', '\x222', '\x25B', '\x3', 
		'\x2', '\x2', '\x2', '\x223', '\x224', '\a', '\x10', '\x2', '\x2', '\x224', 
		'\x225', '\x5', 'L', '\'', '\x2', '\x225', '\x226', '\a', '-', '\x2', 
		'\x2', '\x226', '\x227', '\a', '@', '\x2', '\x2', '\x227', '\x228', '\x5', 
		'\x16', '\f', '\x2', '\x228', '\x229', '\a', '\x41', '\x2', '\x2', '\x229', 
		'\x22A', '\a', '\x45', '\x2', '\x2', '\x22A', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x22B', '\x22C', '\a', '\x15', '\x2', '\x2', '\x22C', '\x22E', 
		'\a', '@', '\x2', '\x2', '\x22D', '\x22F', '\x5', '`', '\x31', '\x2', 
		'\x22E', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x232', '\a', '\x45', '\x2', '\x2', '\x231', '\x233', '\x5', '\x16', 
		'\f', '\x2', '\x232', '\x231', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', 
		'\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x234', '\x236', '\a', '\x45', '\x2', '\x2', '\x235', '\x237', '\x5', 
		'\x62', '\x32', '\x2', '\x236', '\x235', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x239', '\a', '\x41', '\x2', '\x2', '\x239', '\x25B', 
		'\x5', 'L', '\'', '\x2', '\x23A', '\x23B', '\a', '\x16', '\x2', '\x2', 
		'\x23B', '\x23C', '\a', '@', '\x2', '\x2', '\x23C', '\x23D', '\x5', 'T', 
		'+', '\x2', '\x23D', '\x23E', '\x5', '\xC6', '\x64', '\x2', '\x23E', '\x23F', 
		'\a', '\x31', '\x2', '\x2', '\x23F', '\x240', '\x5', '\x16', '\f', '\x2', 
		'\x240', '\x241', '\a', '\x41', '\x2', '\x2', '\x241', '\x242', '\x5', 
		'L', '\'', '\x2', '\x242', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x243', 
		'\x244', '\a', '\t', '\x2', '\x2', '\x244', '\x25B', '\a', '\x45', '\x2', 
		'\x2', '\x245', '\x246', '\a', '\xE', '\x2', '\x2', '\x246', '\x25B', 
		'\a', '\x45', '\x2', '\x2', '\x247', '\x249', '\a', '\"', '\x2', '\x2', 
		'\x248', '\x24A', '\x5', '\x16', '\f', '\x2', '\x249', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x25B', '\a', '\x45', '\x2', 
		'\x2', '\x24C', '\x24E', '\a', '(', '\x2', '\x2', '\x24D', '\x24F', '\x5', 
		'\x16', '\f', '\x2', '\x24E', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x25B', '\a', '\x45', '\x2', '\x2', '\x251', '\x252', 
		'\a', '*', '\x2', '\x2', '\x252', '\x258', '\x5', 'P', ')', '\x2', '\x253', 
		'\x255', '\x5', '\x64', '\x33', '\x2', '\x254', '\x256', '\x5', 'j', '\x36', 
		'\x2', '\x255', '\x254', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x257', '\x259', '\x5', 'j', '\x36', '\x2', '\x258', '\x253', '\x3', 
		'\x2', '\x2', '\x2', '\x258', '\x257', '\x3', '\x2', '\x2', '\x2', '\x259', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x204', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x25A', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x223', '\x3', 
		'\x2', '\x2', '\x2', '\x25A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x23A', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x243', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x245', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x25A', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x251', '\x3', '\x2', '\x2', '\x2', '\x25B', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x25C', '\x25E', '\a', '<', '\x2', '\x2', '\x25D', '\x25F', 
		'\x5', '^', '\x30', '\x2', '\x25E', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x25E', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', '\x3', 
		'\x2', '\x2', '\x2', '\x260', '\x261', '\a', '=', '\x2', '\x2', '\x261', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', '\x5', 'T', '+', '\x2', 
		'\x263', '\x268', '\x5', 'V', ',', '\x2', '\x264', '\x265', '\a', '\x43', 
		'\x2', '\x2', '\x265', '\x267', '\x5', 'V', ',', '\x2', '\x266', '\x264', 
		'\x3', '\x2', '\x2', '\x2', '\x267', '\x26A', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x266', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\x3', 
		'\x2', '\x2', '\x2', '\x269', 'S', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\t', '\x6', '\x2', 
		'\x2', '\x26C', 'U', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x270', '\x5', 
		'\xC6', '\x64', '\x2', '\x26E', '\x26F', '\a', '\x44', '\x2', '\x2', '\x26F', 
		'\x271', '\x5', '\x6', '\x4', '\x2', '\x270', '\x26E', '\x3', '\x2', '\x2', 
		'\x2', '\x270', '\x271', '\x3', '\x2', '\x2', '\x2', '\x271', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x273', '\a', 'P', '\x2', '\x2', 
		'\x273', '\x275', '\x5', '\x16', '\f', '\x2', '\x274', '\x272', '\x3', 
		'\x2', '\x2', '\x2', '\x274', '\x275', '\x3', '\x2', '\x2', '\x2', '\x275', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x276', '\x279', '\x5', 'P', ')', '\x2', 
		'\x277', '\x279', '\x5', 'N', '(', '\x2', '\x278', '\x276', '\x3', '\x2', 
		'\x2', '\x2', '\x278', '\x277', '\x3', '\x2', '\x2', '\x2', '\x279', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27C', '\x5', '\\', '/', '\x2', 
		'\x27B', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27D', '\x3', 
		'\x2', '\x2', '\x2', '\x27D', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27D', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x280', '\x5', '^', '\x30', '\x2', '\x280', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x281', '\x282', '\a', '\n', '\x2', '\x2', '\x282', 
		'\x283', '\x5', '\x16', '\f', '\x2', '\x283', '\x284', '\a', '\x44', '\x2', 
		'\x2', '\x284', '\x288', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', 
		'\a', '\xF', '\x2', '\x2', '\x286', '\x288', '\a', '\x44', '\x2', '\x2', 
		'\x287', '\x281', '\x3', '\x2', '\x2', '\x2', '\x287', '\x285', '\x3', 
		'\x2', '\x2', '\x2', '\x288', ']', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x28B', '\x5', 'J', '&', '\x2', '\x28A', '\x289', '\x3', '\x2', '\x2', 
		'\x2', '\x28B', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28A', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\x28D', '_', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x298', '\x5', 'R', 
		'*', '\x2', '\x28F', '\x294', '\x5', '\x16', '\f', '\x2', '\x290', '\x291', 
		'\a', '\x43', '\x2', '\x2', '\x291', '\x293', '\x5', '\x16', '\f', '\x2', 
		'\x292', '\x290', '\x3', '\x2', '\x2', '\x2', '\x293', '\x296', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x292', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x295', '\x298', '\x3', '\x2', '\x2', 
		'\x2', '\x296', '\x294', '\x3', '\x2', '\x2', '\x2', '\x297', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x297', '\x28F', '\x3', '\x2', '\x2', '\x2', 
		'\x298', '\x61', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29E', '\x5', 
		'\x16', '\f', '\x2', '\x29A', '\x29B', '\a', '\x43', '\x2', '\x2', '\x29B', 
		'\x29D', '\x5', '\x16', '\f', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x63', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x29E', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A5', '\x5', '\x66', '\x34', '\x2', '\x2A2', 
		'\x2A4', '\x5', '\x66', '\x34', '\x2', '\x2A3', '\x2A2', '\x3', '\x2', 
		'\x2', '\x2', '\x2A4', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A3', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'\x2A6', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A5', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2AA', '\x5', 'h', '\x35', '\x2', '\x2A9', 
		'\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x2AA', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AD', 
		'\x5', 'h', '\x35', '\x2', '\x2AC', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x2AC', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\a', '\v', '\x2', '\x2', '\x2AF', 
		'\x2B0', '\a', '@', '\x2', '\x2', '\x2B0', '\x2B2', '\x5', '\xE', '\b', 
		'\x2', '\x2B1', '\x2B3', '\x5', '\xC6', '\x64', '\x2', '\x2B2', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x3', '\x2', '\x2', '\x2', 
		'\x2B3', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\a', 
		'\x41', '\x2', '\x2', '\x2B5', '\x2B6', '\x5', 'P', ')', '\x2', '\x2B6', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\a', '\v', '\x2', 
		'\x2', '\x2B8', '\x2B9', '\x5', 'P', ')', '\x2', '\x2B9', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x2BA', '\x2BB', '\a', '\x14', '\x2', '\x2', '\x2BB', 
		'\x2BC', '\x5', 'P', ')', '\x2', '\x2BC', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2C0', '\x5', 'R', '*', '\x2', '\x2BE', '\x2C0', '\x5', '\x16', 
		'\f', '\x2', '\x2BF', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2BE', 
		'\x3', '\x2', '\x2', '\x2', '\x2C0', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C2', '\a', '\x30', '\x2', '\x2', '\x2C2', '\x2C3', '\x5', 
		'\xC6', '\x64', '\x2', '\x2C3', '\x2C5', '\x5', 'p', '\x39', '\x2', '\x2C4', 
		'\x2C6', '\a', '\x45', '\x2', '\x2', '\x2C5', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C6', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x2C9', '\a', '<', '\x2', '\x2', '\x2C8', 
		'\x2CA', '\x5', 'r', ':', '\x2', '\x2C9', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x2C9', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', 
		'\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\a', '=', '\x2', '\x2', 
		'\x2CC', 'q', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CF', '\x5', 't', 
		';', '\x2', '\x2CE', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D1', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x2D2', '\x2D5', '\x5', 'n', '\x38', '\x2', '\x2D3', '\x2D5', 
		'\x5', 'v', '<', '\x2', '\x2D4', '\x2D2', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D5', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x2D6', '\x2D8', '\x5', '\x82', '\x42', '\x2', '\x2D7', 
		'\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DC', 
		'\x5', '\xB4', '[', '\x2', '\x2DA', '\x2DC', '\x5', '\xB6', '\\', '\x2', 
		'\x2DB', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DA', '\x3', 
		'\x2', '\x2', '\x2', '\x2DC', 'w', '\x3', '\x2', '\x2', '\x2', '\x2DD', 
		'\x2DE', '\a', 'Q', '\x2', '\x2', '\x2DE', '\x2E3', '\x5', 'z', '>', '\x2', 
		'\x2DF', '\x2E0', '\a', '\x43', '\x2', '\x2', '\x2E0', '\x2E2', '\x5', 
		'z', '>', '\x2', '\x2E1', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E1', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E6', 
		'\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E3', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', '\x2E7', '\a', 'R', '\x2', '\x2', '\x2E7', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x2E8', '\x2E9', '\x5', '\xC6', '\x64', '\x2', '\x2E9', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EC', '\a', '<', '\x2', '\x2', 
		'\x2EB', '\x2ED', '\x5', '~', '@', '\x2', '\x2EC', '\x2EB', '\x3', '\x2', 
		'\x2', '\x2', '\x2EC', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', 
		'\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\a', '=', '\x2', '\x2', 
		'\x2EF', '}', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F2', '\x5', '\x80', 
		'\x41', '\x2', '\x2F1', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F1', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F7', '\x5', '\x82', '\x42', '\x2', 
		'\x2F6', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\x3', 
		'\x2', '\x2', '\x2', '\x2F7', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2F9', '\x5', '\x86', '\x44', '\x2', '\x2F9', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x2FA', '\x2FC', '\x5', '\x84', '\x43', '\x2', '\x2FB', 
		'\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2FD', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2FE', 
		'\x3', '\x2', '\x2', '\x2', '\x2FE', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x2FF', '\x300', '\t', '\a', '\x2', '\x2', '\x300', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x301', '\x306', '\x5', '\x88', '\x45', '\x2', '\x302', 
		'\x306', '\x5', '\xBA', '^', '\x2', '\x303', '\x306', '\x5', '\xB4', '[', 
		'\x2', '\x304', '\x306', '\x5', '\xB6', '\\', '\x2', '\x305', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\x305', '\x302', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x303', '\x3', '\x2', '\x2', '\x2', '\x305', '\x304', '\x3', 
		'\x2', '\x2', '\x2', '\x306', '\x87', '\x3', '\x2', '\x2', '\x2', '\x307', 
		'\x30A', '\x5', '\xBC', '_', '\x2', '\x308', '\x30A', '\x5', '\xB8', ']', 
		'\x2', '\x309', '\x307', '\x3', '\x2', '\x2', '\x2', '\x309', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x310', '\x5', '\x8C', 'G', '\x2', '\x30C', '\x30D', '\a', '\x43', 
		'\x2', '\x2', '\x30D', '\x30F', '\x5', '\x8C', 'G', '\x2', '\x30E', '\x30C', 
		'\x3', '\x2', '\x2', '\x2', '\x30F', '\x312', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\x3', 
		'\x2', '\x2', '\x2', '\x311', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x312', 
		'\x310', '\x3', '\x2', '\x2', '\x2', '\x313', '\x316', '\x5', '\xC6', 
		'\x64', '\x2', '\x314', '\x315', '\a', '\x44', '\x2', '\x2', '\x315', 
		'\x317', '\x5', '\x6', '\x4', '\x2', '\x316', '\x314', '\x3', '\x2', '\x2', 
		'\x2', '\x316', '\x317', '\x3', '\x2', '\x2', '\x2', '\x317', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x319', '\a', 'P', '\x2', '\x2', 
		'\x319', '\x31B', '\x5', '\x8E', 'H', '\x2', '\x31A', '\x318', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31B', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', '\x5', '\x16', '\f', 
		'\x2', '\x31D', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x321', 
		'\x5', '\x6', '\x4', '\x2', '\x31F', '\x321', '\a', ',', '\x2', '\x2', 
		'\x320', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x320', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x321', '\x91', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x323', '\x5', '\x4', '\x3', '\x2', '\x323', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x324', '\x327', '\x5', 'P', ')', '\x2', '\x325', '\x327', '\a', 
		'\x45', '\x2', '\x2', '\x326', '\x324', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x325', '\x3', '\x2', '\x2', '\x2', '\x327', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x328', '\x329', '\x5', '\x98', 'M', '\x2', '\x329', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x32A', '\x32F', '\x5', '\x9A', 'N', '\x2', '\x32B', 
		'\x32C', '\a', '\x43', '\x2', '\x2', '\x32C', '\x32E', '\x5', '\x9A', 
		'N', '\x2', '\x32D', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x331', 
		'\x3', '\x2', '\x2', '\x2', '\x32F', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x32F', '\x330', '\x3', '\x2', '\x2', '\x2', '\x330', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x333', '\x5', '\xC0', '\x61', '\x2', '\x333', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x334', '\x335', '\a', '\x44', '\x2', '\x2', '\x335', '\x336', 
		'\a', '/', '\x2', '\x2', '\x336', '\x338', '\a', '@', '\x2', '\x2', '\x337', 
		'\x339', '\x5', '\x12', '\n', '\x2', '\x338', '\x337', '\x3', '\x2', '\x2', 
		'\x2', '\x338', '\x339', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', 
		'\x3', '\x2', '\x2', '\x2', '\x33A', '\x33B', '\a', '\x41', '\x2', '\x2', 
		'\x33B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x33F', '\x5', 
		'P', ')', '\x2', '\x33D', '\x33F', '\a', '\x45', '\x2', '\x2', '\x33E', 
		'\x33C', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x33D', '\x3', '\x2', '\x2', 
		'\x2', '\x33F', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x340', '\x341', 
		'\a', 'Q', '\x2', '\x2', '\x341', '\x346', '\x5', '\xA2', 'R', '\x2', 
		'\x342', '\x343', '\a', '\x43', '\x2', '\x2', '\x343', '\x345', '\x5', 
		'\xA2', 'R', '\x2', '\x344', '\x342', '\x3', '\x2', '\x2', '\x2', '\x345', 
		'\x348', '\x3', '\x2', '\x2', '\x2', '\x346', '\x344', '\x3', '\x2', '\x2', 
		'\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', '\x347', '\x349', 
		'\x3', '\x2', '\x2', '\x2', '\x348', '\x346', '\x3', '\x2', '\x2', '\x2', 
		'\x349', '\x34A', '\a', 'R', '\x2', '\x2', '\x34A', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x34B', '\x34C', '\x5', '\xC6', '\x64', '\x2', '\x34C', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x359', '\a', '<', '\x2', 
		'\x2', '\x34E', '\x353', '\x5', '\xA6', 'T', '\x2', '\x34F', '\x350', 
		'\a', '\x43', '\x2', '\x2', '\x350', '\x352', '\x5', '\xA6', 'T', '\x2', 
		'\x351', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x352', '\x355', '\x3', 
		'\x2', '\x2', '\x2', '\x353', '\x351', '\x3', '\x2', '\x2', '\x2', '\x353', 
		'\x354', '\x3', '\x2', '\x2', '\x2', '\x354', '\x357', '\x3', '\x2', '\x2', 
		'\x2', '\x355', '\x353', '\x3', '\x2', '\x2', '\x2', '\x356', '\x358', 
		'\a', '\x43', '\x2', '\x2', '\x357', '\x356', '\x3', '\x2', '\x2', '\x2', 
		'\x357', '\x358', '\x3', '\x2', '\x2', '\x2', '\x358', '\x35A', '\x3', 
		'\x2', '\x2', '\x2', '\x359', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x359', 
		'\x35A', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', '\x2', '\x2', 
		'\x2', '\x35B', '\x35C', '\a', '=', '\x2', '\x2', '\x35C', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x35D', '\x360', '\x5', '\xC6', '\x64', '\x2', '\x35E', 
		'\x35F', '\a', 'P', '\x2', '\x2', '\x35F', '\x361', '\x5', '\x16', '\f', 
		'\x2', '\x360', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', 
		'\x3', '\x2', '\x2', '\x2', '\x361', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x362', '\x363', '\a', 'P', '\x2', '\x2', '\x363', '\x364', '\a', 'R', 
		'\x2', '\x2', '\x364', '\x365', '\x6', 'U', '\x2', '\x3', '\x365', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x366', '\x367', '\a', 'R', '\x2', '\x2', 
		'\x367', '\x368', '\a', 'R', '\x2', '\x2', '\x368', '\x369', '\x6', 'V', 
		'\x3', '\x3', '\x369', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x36B', 
		'\a', 'R', '\x2', '\x2', '\x36B', '\x36C', '\a', '^', '\x2', '\x2', '\x36C', 
		'\x36D', '\x6', 'W', '\x4', '\x3', '\x36D', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x36E', '\x376', '\x5', '\xB0', 'Y', '\x2', '\x36F', '\x376', 
		'\x5', '\xB2', 'Z', '\x2', '\x370', '\x376', '\a', '\x34', '\x2', '\x2', 
		'\x371', '\x376', '\a', '\x35', '\x2', '\x2', '\x372', '\x376', '\a', 
		'\x36', '\x2', '\x2', '\x373', '\x376', '\a', '\x37', '\x2', '\x2', '\x374', 
		'\x376', '\a', '\x1B', '\x2', '\x2', '\x375', '\x36E', '\x3', '\x2', '\x2', 
		'\x2', '\x375', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x375', '\x370', 
		'\x3', '\x2', '\x2', '\x2', '\x375', '\x371', '\x3', '\x2', '\x2', '\x2', 
		'\x375', '\x372', '\x3', '\x2', '\x2', '\x2', '\x375', '\x373', '\x3', 
		'\x2', '\x2', '\x2', '\x375', '\x374', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x377', '\x378', '\t', '\b', '\x2', 
		'\x2', '\x378', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x379', '\x37A', 
		'\a', '\x38', '\x2', '\x2', '\x37A', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x37B', '\x37C', '\a', '\f', '\x2', '\x2', '\x37C', '\x37E', '\x5', '\xC6', 
		'\x64', '\x2', '\x37D', '\x37F', '\x5', 'x', '=', '\x2', '\x37E', '\x37D', 
		'\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', '\x2', 
		'\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', '\x382', '\x5', 
		'|', '?', '\x2', '\x381', '\x383', '\a', '\x45', '\x2', '\x2', '\x382', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x384', '\x385', 
		'\a', '\x12', '\x2', '\x2', '\x385', '\x386', '\x5', '\xC6', '\x64', '\x2', 
		'\x386', '\x388', '\x5', '\xA4', 'S', '\x2', '\x387', '\x389', '\a', '\x45', 
		'\x2', '\x2', '\x388', '\x387', '\x3', '\x2', '\x2', '\x2', '\x388', '\x389', 
		'\x3', '\x2', '\x2', '\x2', '\x389', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x38A', '\x38B', '\x5', '\x8A', '\x46', '\x2', '\x38B', '\x38C', '\a', 
		'\x45', '\x2', '\x2', '\x38C', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x38D', 
		'\x38E', '\x5', '\xC6', '\x64', '\x2', '\x38E', '\x390', '\a', '@', '\x2', 
		'\x2', '\x38F', '\x391', '\x5', '\x96', 'L', '\x2', '\x390', '\x38F', 
		'\x3', '\x2', '\x2', '\x2', '\x390', '\x391', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x392', '\x3', '\x2', '\x2', '\x2', '\x392', '\x393', '\a', 
		'\x41', '\x2', '\x2', '\x393', '\x394', '\x5', '\x9E', 'P', '\x2', '\x394', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x395', '\x397', '\t', '\t', '\x2', 
		'\x2', '\x396', '\x395', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', 
		'\x3', '\x2', '\x2', '\x2', '\x397', '\x398', '\x3', '\x2', '\x2', '\x2', 
		'\x398', '\x39A', '\x5', '\xBE', '`', '\x2', '\x399', '\x39B', '\x5', 
		'x', '=', '\x2', '\x39A', '\x399', '\x3', '\x2', '\x2', '\x2', '\x39A', 
		'\x39B', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2', 
		'\x2', '\x39C', '\x39E', '\a', '@', '\x2', '\x2', '\x39D', '\x39F', '\x5', 
		'\x96', 'L', '\x2', '\x39E', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x39E', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A0', '\x3', '\x2', '\x2', 
		'\x2', '\x3A0', '\x3A3', '\a', '\x41', '\x2', '\x2', '\x3A1', '\x3A2', 
		'\a', '\x44', '\x2', '\x2', '\x3A2', '\x3A4', '\x5', '\x90', 'I', '\x2', 
		'\x3A3', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3AB', '\x5', '\x94', 'K', '\x2', '\x3A6', '\x3A7', '\x5', '\xA8', 'U', 
		'\x2', '\x3A7', '\x3A8', '\x5', '\x16', '\f', '\x2', '\x3A8', '\x3A9', 
		'\a', '\x45', '\x2', '\x2', '\x3A9', '\x3AB', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A6', '\x3', 
		'\x2', '\x2', '\x2', '\x3AB', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x3AC', 
		'\x3B2', '\x5', '\xC6', '\x64', '\x2', '\x3AD', '\x3AE', '\x5', '\xC6', 
		'\x64', '\x2', '\x3AE', '\x3AF', '\a', 'T', '\x2', '\x2', '\x3AF', '\x3B0', 
		'\x5', '\xC6', '\x64', '\x2', '\x3B0', '\x3B2', '\x3', '\x2', '\x2', '\x2', 
		'\x3B1', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3AD', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3B3', 
		'\x3B5', '\x5', '\x10', '\t', '\x2', '\x3B4', '\x3B3', '\x3', '\x2', '\x2', 
		'\x2', '\x3B4', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', '\a', '\x42', '\x2', '\x2', 
		'\x3B7', '\x3B9', '\x5', '\xC6', '\x64', '\x2', '\x3B8', '\x3B4', '\x3', 
		'\x2', '\x2', '\x2', '\x3B9', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3BA', 
		'\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BB', '\x3', '\x2', '\x2', 
		'\x2', '\x3BB', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BA', 
		'\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3C0', '\x5', '\xC6', '\x64', '\x2', 
		'\x3BE', '\x3BF', '\a', '\x44', '\x2', '\x2', '\x3BF', '\x3C1', '\x5', 
		'\x6', '\x4', '\x2', '\x3C0', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3C0', 
		'\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C4', '\x3', '\x2', '\x2', 
		'\x2', '\x3C2', '\x3C3', '\a', 'P', '\x2', '\x2', '\x3C3', '\x3C5', '\x5', 
		'\x16', '\f', '\x2', '\x3C4', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C4', 
		'\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3C8', '\a', '@', '\x2', '\x2', '\x3C7', '\x3C9', '\x5', 
		'\x12', '\n', '\x2', '\x3C8', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3C8', 
		'\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\x3', '\x2', '\x2', 
		'\x2', '\x3CA', '\x3CB', '\a', '\x41', '\x2', '\x2', '\x3CB', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CE', '\a', '@', '\x2', '\x2', 
		'\x3CD', '\x3CF', '\x5', '\x12', '\n', '\x2', '\x3CE', '\x3CD', '\x3', 
		'\x2', '\x2', '\x2', '\x3CE', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3CF', 
		'\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\a', '\x41', '\x2', 
		'\x2', '\x3D1', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D3', 
		'\t', '\n', '\x2', '\x2', '\x3D3', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'r', '\xC9', '\xCC', '\xD2', '\xD7', '\xDB', '\xE3', '\xE8', '\xEC', '\xF2', 
		'\xFA', '\x104', '\x10A', '\x110', '\x114', '\x125', '\x12D', '\x134', 
		'\x13C', '\x144', '\x14C', '\x154', '\x15C', '\x164', '\x16A', '\x16F', 
		'\x177', '\x17F', '\x190', '\x196', '\x19D', '\x1A2', '\x1A7', '\x1AD', 
		'\x1BC', '\x1BE', '\x1C3', '\x1CB', '\x1DF', '\x1E6', '\x1F2', '\x1F7', 
		'\x1FD', '\x201', '\x20E', '\x218', '\x22E', '\x232', '\x236', '\x249', 
		'\x24E', '\x255', '\x258', '\x25A', '\x25E', '\x268', '\x270', '\x274', 
		'\x278', '\x27D', '\x287', '\x28C', '\x294', '\x297', '\x29E', '\x2A5', 
		'\x2A9', '\x2AC', '\x2B2', '\x2BF', '\x2C5', '\x2C9', '\x2D0', '\x2D4', 
		'\x2D7', '\x2DB', '\x2E3', '\x2EC', '\x2F3', '\x2F6', '\x2FD', '\x305', 
		'\x309', '\x310', '\x316', '\x31A', '\x320', '\x326', '\x32F', '\x338', 
		'\x33E', '\x346', '\x353', '\x357', '\x359', '\x360', '\x375', '\x37E', 
		'\x382', '\x388', '\x390', '\x396', '\x39A', '\x39E', '\x3A3', '\x3AA', 
		'\x3B1', '\x3B4', '\x3BA', '\x3C0', '\x3C4', '\x3C8', '\x3CE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
